Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BOOLEAN_LITERAL
    BYTE
    CASE
    CHAR
    CHARACTER_LITERAL
    DOWNTO
    FALSE
    FILE
    GOTO
    IN
    LABEL
    LBLOCK
    NIL
    NOT
    OR
    PACKED
    RBLOCK
    READLINE
    RECORD
    REPEAT
    SET
    STRING
    TRUE
    UNTIL
    WITH

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON declaration_sections block DOT
Rule 2     declaration_sections -> uses_opt constant_declaration type_declaration var_declaration
Rule 3     declaration_sections -> uses_opt constant_declaration type_declaration
Rule 4     declaration_sections -> uses_opt constant_declaration var_declaration
Rule 5     declaration_sections -> uses_opt constant_declaration
Rule 6     declaration_sections -> uses_opt type_declaration var_declaration
Rule 7     declaration_sections -> uses_opt type_declaration
Rule 8     declaration_sections -> uses_opt var_declaration
Rule 9     declaration_sections -> uses_opt
Rule 10    declaration_sections -> constant_declaration type_declaration var_declaration
Rule 11    declaration_sections -> constant_declaration type_declaration
Rule 12    declaration_sections -> constant_declaration var_declaration
Rule 13    declaration_sections -> constant_declaration
Rule 14    declaration_sections -> type_declaration var_declaration
Rule 15    declaration_sections -> type_declaration
Rule 16    declaration_sections -> var_declaration
Rule 17    uses_opt -> USES ID SEMICOLON
Rule 18    uses_opt -> empty
Rule 19    var_declaration -> VAR declaration_list
Rule 20    block -> declarations compound_statement
Rule 21    declarations -> VAR declaration_list procedure_declarations
Rule 22    declarations -> VAR declaration_list
Rule 23    declarations -> procedure_declarations
Rule 24    declarations -> empty
Rule 25    declaration_list -> declaration
Rule 26    declaration_list -> declaration_list declaration
Rule 27    declaration -> id_list COLON type_specifier SEMICOLON
Rule 28    id_list -> ID
Rule 29    id_list -> id_list COMMA ID
Rule 30    type_declaration -> TYPE type_list
Rule 31    type_list -> type_definition
Rule 32    type_list -> type_list type_definition
Rule 33    type_definition -> ID EQUAL type_specifier SEMICOLON
Rule 34    type_specifier -> ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier
Rule 35    type_specifier -> INTEGER
Rule 36    type_specifier -> ID
Rule 37    type_specifier -> LONGINT
Rule 38    procedure_declarations -> procedure_declaration
Rule 39    procedure_declarations -> procedure_declarations procedure_declaration
Rule 40    procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
Rule 41    function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
Rule 42    declarations -> function_declaration
Rule 43    function_call -> ID LPAREN expression_list RPAREN
Rule 44    factor -> function_call
Rule 45    parameter_list -> id_list COLON type_specifier
Rule 46    compound_statement -> BEGIN statement_list END
Rule 47    statement_list -> statement statement_list_tail
Rule 48    statement_list_tail -> SEMICOLON statement statement_list_tail
Rule 49    statement_list_tail -> empty
Rule 50    statement -> assignment_statement
Rule 51    statement -> if_statement
Rule 52    statement -> FOR ID COLON_EQUAL expression TO expression DO statement
Rule 53    statement -> while_statement
Rule 54    statement -> procedure_call
Rule 55    statement -> compound_statement
Rule 56    statement -> empty
Rule 57    assignment_statement -> variable COLON_EQUAL expression
Rule 58    variable -> ID
Rule 59    variable -> ID LBRACKET expression RBRACKET
Rule 60    if_statement -> IF expression THEN statement ELSE statement
Rule 61    while_statement -> WHILE expression DO statement
Rule 62    procedure_call -> ID LPAREN expression_list RPAREN
Rule 63    expression_list -> expression expression_list_tail
Rule 64    expression_list_tail -> COMMA expression expression_list_tail
Rule 65    expression_list_tail -> empty
Rule 66    expression_list -> empty
Rule 67    expression -> simple_expression relop simple_expression
Rule 68    expression -> simple_expression
Rule 69    simple_expression -> term simple_expression_tail
Rule 70    simple_expression_tail -> addop term
Rule 71    simple_expression_tail -> empty
Rule 72    addop -> PLUS
Rule 73    addop -> MINUS
Rule 74    term -> factor term_tail
Rule 75    term_tail -> mulop factor
Rule 76    term_tail -> empty
Rule 77    mulop -> TIMES
Rule 78    mulop -> DIVIDE
Rule 79    mulop -> DIV
Rule 80    expression -> expression PLUS expression
Rule 81    expression -> expression MINUS expression
Rule 82    expression -> expression TIMES expression
Rule 83    expression -> expression DIVIDE expression
Rule 84    expression -> expression MOD expression
Rule 85    factor -> LPAREN expression RPAREN
Rule 86    factor -> variable
Rule 87    factor -> NUMBER
Rule 88    factor -> STRING_LITERAL
Rule 89    relop -> LESS
Rule 90    relop -> LESS_EQUAL
Rule 91    relop -> GREAT
Rule 92    relop -> GREAT_EQUAL
Rule 93    relop -> EQUAL
Rule 94    relop -> DIFFERENT
Rule 95    empty -> <empty>
Rule 96    statement -> READLN
Rule 97    statement -> READLN LPAREN ID RPAREN
Rule 98    statement -> WRITELN LPAREN expression_list RPAREN
Rule 99    statement -> WRITE LPAREN expression_list RPAREN
Rule 100   statement -> USES ID SEMICOLON
Rule 101   constant_declaration -> CONST constant_list
Rule 102   constant_list -> constant
Rule 103   constant_list -> constant_list constant
Rule 104   constant -> ID EQUAL NUMBER SEMICOLON

Terminals, with rules where they appear

AND                  : 
ARRAY                : 34
BEGIN                : 46
BOOLEAN_LITERAL      : 
BYTE                 : 
CASE                 : 
CHAR                 : 
CHARACTER_LITERAL    : 
COLON                : 27 41 45
COLON_EQUAL          : 52 57
COMMA                : 29 64
CONST                : 101
DIFFERENT            : 94
DIV                  : 79
DIVIDE               : 78 83
DO                   : 52 61
DOT                  : 1
DOTDOT               : 34
DOWNTO               : 
ELSE                 : 60
END                  : 46
EQUAL                : 33 93 104
FALSE                : 
FILE                 : 
FOR                  : 52
FUNCTION             : 41
GOTO                 : 
GREAT                : 91
GREAT_EQUAL          : 92
ID                   : 1 17 28 29 33 36 40 41 43 52 58 59 62 97 100 104
IF                   : 60
IN                   : 
INTEGER              : 35
LABEL                : 
LBLOCK               : 
LBRACKET             : 34 59
LESS                 : 89
LESS_EQUAL           : 90
LONGINT              : 37
LPAREN               : 40 41 43 62 85 97 98 99
MINUS                : 73 81
MOD                  : 84
NIL                  : 
NOT                  : 
NUMBER               : 87 104
OF                   : 34
OR                   : 
PACKED               : 
PLUS                 : 72 80
PROCEDURE            : 40
PROGRAM              : 1
RBLOCK               : 
RBRACKET             : 34 59
READLINE             : 
READLN               : 96 97
RECORD               : 
REPEAT               : 
RPAREN               : 40 41 43 62 85 97 98 99
SEMICOLON            : 1 17 27 33 40 40 41 41 48 100 104
SET                  : 
STRING               : 
STRING_LITERAL       : 88
THEN                 : 60
TIMES                : 77 82
TO                   : 52
TRUE                 : 
TYPE                 : 30
UNTIL                : 
USES                 : 17 100
VAR                  : 19 21 22
WHILE                : 61
WITH                 : 
WRITE                : 99
WRITELN              : 98
error                : 

Nonterminals, with rules where they appear

addop                : 70
assignment_statement : 50
block                : 1 40 41
compound_statement   : 20 55
constant             : 102 103
constant_declaration : 2 3 4 5 10 11 12 13
constant_list        : 101 103
declaration          : 25 26
declaration_list     : 19 21 22 26
declaration_sections : 1
declarations         : 20
empty                : 18 24 49 56 65 66 71 76
expression           : 34 34 52 52 57 59 60 61 63 64 80 80 81 81 82 82 83 83 84 84 85
expression_list      : 43 62 98 99
expression_list_tail : 63 64
factor               : 74 75
function_call        : 44
function_declaration : 42
id_list              : 27 29 45
if_statement         : 51
mulop                : 75
parameter_list       : 40 41
procedure_call       : 54
procedure_declaration : 38 39
procedure_declarations : 21 23 39
program              : 0
relop                : 67
simple_expression    : 67 67 68
simple_expression_tail : 69
statement            : 47 48 52 60 60 61
statement_list       : 46
statement_list_tail  : 47 48
term                 : 69 70
term_tail            : 74
type_declaration     : 2 3 6 7 10 11 14 15
type_definition      : 31 32
type_list            : 30 32
type_specifier       : 27 33 34 41 45
uses_opt             : 2 3 4 5 6 7 8 9
var_declaration      : 2 4 6 8 10 12 14 16
variable             : 57 86
while_statement      : 53

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON declaration_sections block DOT

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON declaration_sections block DOT

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON declaration_sections block DOT

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . declaration_sections block DOT
    (2) declaration_sections -> . uses_opt constant_declaration type_declaration var_declaration
    (3) declaration_sections -> . uses_opt constant_declaration type_declaration
    (4) declaration_sections -> . uses_opt constant_declaration var_declaration
    (5) declaration_sections -> . uses_opt constant_declaration
    (6) declaration_sections -> . uses_opt type_declaration var_declaration
    (7) declaration_sections -> . uses_opt type_declaration
    (8) declaration_sections -> . uses_opt var_declaration
    (9) declaration_sections -> . uses_opt
    (10) declaration_sections -> . constant_declaration type_declaration var_declaration
    (11) declaration_sections -> . constant_declaration type_declaration
    (12) declaration_sections -> . constant_declaration var_declaration
    (13) declaration_sections -> . constant_declaration
    (14) declaration_sections -> . type_declaration var_declaration
    (15) declaration_sections -> . type_declaration
    (16) declaration_sections -> . var_declaration
    (17) uses_opt -> . USES ID SEMICOLON
    (18) uses_opt -> . empty
    (101) constant_declaration -> . CONST constant_list
    (30) type_declaration -> . TYPE type_list
    (19) var_declaration -> . VAR declaration_list
    (95) empty -> .

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    USES            shift and go to state 10
    CONST           shift and go to state 12
    TYPE            shift and go to state 13
    VAR             shift and go to state 14
    FUNCTION        reduce using rule 95 (empty -> .)
    PROCEDURE       reduce using rule 95 (empty -> .)
    BEGIN           reduce using rule 95 (empty -> .)

  ! CONST           [ reduce using rule 95 (empty -> .) ]
  ! TYPE            [ reduce using rule 95 (empty -> .) ]
  ! VAR             [ reduce using rule 95 (empty -> .) ]

    declaration_sections           shift and go to state 5
    uses_opt                       shift and go to state 6
    constant_declaration           shift and go to state 7
    type_declaration               shift and go to state 8
    var_declaration                shift and go to state 9
    empty                          shift and go to state 11

state 5

    (1) program -> PROGRAM ID SEMICOLON declaration_sections . block DOT
    (20) block -> . declarations compound_statement
    (21) declarations -> . VAR declaration_list procedure_declarations
    (22) declarations -> . VAR declaration_list
    (23) declarations -> . procedure_declarations
    (24) declarations -> . empty
    (42) declarations -> . function_declaration
    (38) procedure_declarations -> . procedure_declaration
    (39) procedure_declarations -> . procedure_declarations procedure_declaration
    (95) empty -> .
    (41) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (40) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON

    VAR             shift and go to state 17
    BEGIN           reduce using rule 95 (empty -> .)
    FUNCTION        shift and go to state 22
    PROCEDURE       shift and go to state 23

    block                          shift and go to state 15
    declarations                   shift and go to state 16
    procedure_declarations         shift and go to state 18
    empty                          shift and go to state 19
    function_declaration           shift and go to state 20
    procedure_declaration          shift and go to state 21

state 6

    (2) declaration_sections -> uses_opt . constant_declaration type_declaration var_declaration
    (3) declaration_sections -> uses_opt . constant_declaration type_declaration
    (4) declaration_sections -> uses_opt . constant_declaration var_declaration
    (5) declaration_sections -> uses_opt . constant_declaration
    (6) declaration_sections -> uses_opt . type_declaration var_declaration
    (7) declaration_sections -> uses_opt . type_declaration
    (8) declaration_sections -> uses_opt . var_declaration
    (9) declaration_sections -> uses_opt .
    (101) constant_declaration -> . CONST constant_list
    (30) type_declaration -> . TYPE type_list
    (19) var_declaration -> . VAR declaration_list

  ! shift/reduce conflict for VAR resolved as shift
    FUNCTION        reduce using rule 9 (declaration_sections -> uses_opt .)
    PROCEDURE       reduce using rule 9 (declaration_sections -> uses_opt .)
    BEGIN           reduce using rule 9 (declaration_sections -> uses_opt .)
    CONST           shift and go to state 12
    TYPE            shift and go to state 13
    VAR             shift and go to state 14

  ! VAR             [ reduce using rule 9 (declaration_sections -> uses_opt .) ]

    constant_declaration           shift and go to state 24
    type_declaration               shift and go to state 25
    var_declaration                shift and go to state 26

state 7

    (10) declaration_sections -> constant_declaration . type_declaration var_declaration
    (11) declaration_sections -> constant_declaration . type_declaration
    (12) declaration_sections -> constant_declaration . var_declaration
    (13) declaration_sections -> constant_declaration .
    (30) type_declaration -> . TYPE type_list
    (19) var_declaration -> . VAR declaration_list

  ! shift/reduce conflict for VAR resolved as shift
    FUNCTION        reduce using rule 13 (declaration_sections -> constant_declaration .)
    PROCEDURE       reduce using rule 13 (declaration_sections -> constant_declaration .)
    BEGIN           reduce using rule 13 (declaration_sections -> constant_declaration .)
    TYPE            shift and go to state 13
    VAR             shift and go to state 14

  ! VAR             [ reduce using rule 13 (declaration_sections -> constant_declaration .) ]

    type_declaration               shift and go to state 27
    var_declaration                shift and go to state 28

state 8

    (14) declaration_sections -> type_declaration . var_declaration
    (15) declaration_sections -> type_declaration .
    (19) var_declaration -> . VAR declaration_list

  ! shift/reduce conflict for VAR resolved as shift
    FUNCTION        reduce using rule 15 (declaration_sections -> type_declaration .)
    PROCEDURE       reduce using rule 15 (declaration_sections -> type_declaration .)
    BEGIN           reduce using rule 15 (declaration_sections -> type_declaration .)
    VAR             shift and go to state 14

  ! VAR             [ reduce using rule 15 (declaration_sections -> type_declaration .) ]

    var_declaration                shift and go to state 29

state 9

    (16) declaration_sections -> var_declaration .

    VAR             reduce using rule 16 (declaration_sections -> var_declaration .)
    FUNCTION        reduce using rule 16 (declaration_sections -> var_declaration .)
    PROCEDURE       reduce using rule 16 (declaration_sections -> var_declaration .)
    BEGIN           reduce using rule 16 (declaration_sections -> var_declaration .)


state 10

    (17) uses_opt -> USES . ID SEMICOLON

    ID              shift and go to state 30


state 11

    (18) uses_opt -> empty .

    CONST           reduce using rule 18 (uses_opt -> empty .)
    TYPE            reduce using rule 18 (uses_opt -> empty .)
    VAR             reduce using rule 18 (uses_opt -> empty .)
    FUNCTION        reduce using rule 18 (uses_opt -> empty .)
    PROCEDURE       reduce using rule 18 (uses_opt -> empty .)
    BEGIN           reduce using rule 18 (uses_opt -> empty .)


state 12

    (101) constant_declaration -> CONST . constant_list
    (102) constant_list -> . constant
    (103) constant_list -> . constant_list constant
    (104) constant -> . ID EQUAL NUMBER SEMICOLON

    ID              shift and go to state 33

    constant_list                  shift and go to state 31
    constant                       shift and go to state 32

state 13

    (30) type_declaration -> TYPE . type_list
    (31) type_list -> . type_definition
    (32) type_list -> . type_list type_definition
    (33) type_definition -> . ID EQUAL type_specifier SEMICOLON

    ID              shift and go to state 36

    type_list                      shift and go to state 34
    type_definition                shift and go to state 35

state 14

    (19) var_declaration -> VAR . declaration_list
    (25) declaration_list -> . declaration
    (26) declaration_list -> . declaration_list declaration
    (27) declaration -> . id_list COLON type_specifier SEMICOLON
    (28) id_list -> . ID
    (29) id_list -> . id_list COMMA ID

    ID              shift and go to state 40

    declaration_list               shift and go to state 37
    declaration                    shift and go to state 38
    id_list                        shift and go to state 39

state 15

    (1) program -> PROGRAM ID SEMICOLON declaration_sections block . DOT

    DOT             shift and go to state 41


state 16

    (20) block -> declarations . compound_statement
    (46) compound_statement -> . BEGIN statement_list END

    BEGIN           shift and go to state 43

    compound_statement             shift and go to state 42

state 17

    (21) declarations -> VAR . declaration_list procedure_declarations
    (22) declarations -> VAR . declaration_list
    (25) declaration_list -> . declaration
    (26) declaration_list -> . declaration_list declaration
    (27) declaration -> . id_list COLON type_specifier SEMICOLON
    (28) id_list -> . ID
    (29) id_list -> . id_list COMMA ID

    ID              shift and go to state 40

    declaration_list               shift and go to state 44
    declaration                    shift and go to state 38
    id_list                        shift and go to state 39

state 18

    (23) declarations -> procedure_declarations .
    (39) procedure_declarations -> procedure_declarations . procedure_declaration
    (40) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON

    BEGIN           reduce using rule 23 (declarations -> procedure_declarations .)
    PROCEDURE       shift and go to state 23

    procedure_declaration          shift and go to state 45

state 19

    (24) declarations -> empty .

    BEGIN           reduce using rule 24 (declarations -> empty .)


state 20

    (42) declarations -> function_declaration .

    BEGIN           reduce using rule 42 (declarations -> function_declaration .)


state 21

    (38) procedure_declarations -> procedure_declaration .

    PROCEDURE       reduce using rule 38 (procedure_declarations -> procedure_declaration .)
    BEGIN           reduce using rule 38 (procedure_declarations -> procedure_declaration .)


state 22

    (41) function_declaration -> FUNCTION . ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON

    ID              shift and go to state 46


state 23

    (40) procedure_declaration -> PROCEDURE . ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON

    ID              shift and go to state 47


state 24

    (2) declaration_sections -> uses_opt constant_declaration . type_declaration var_declaration
    (3) declaration_sections -> uses_opt constant_declaration . type_declaration
    (4) declaration_sections -> uses_opt constant_declaration . var_declaration
    (5) declaration_sections -> uses_opt constant_declaration .
    (30) type_declaration -> . TYPE type_list
    (19) var_declaration -> . VAR declaration_list

  ! shift/reduce conflict for VAR resolved as shift
    FUNCTION        reduce using rule 5 (declaration_sections -> uses_opt constant_declaration .)
    PROCEDURE       reduce using rule 5 (declaration_sections -> uses_opt constant_declaration .)
    BEGIN           reduce using rule 5 (declaration_sections -> uses_opt constant_declaration .)
    TYPE            shift and go to state 13
    VAR             shift and go to state 14

  ! VAR             [ reduce using rule 5 (declaration_sections -> uses_opt constant_declaration .) ]

    type_declaration               shift and go to state 48
    var_declaration                shift and go to state 49

state 25

    (6) declaration_sections -> uses_opt type_declaration . var_declaration
    (7) declaration_sections -> uses_opt type_declaration .
    (19) var_declaration -> . VAR declaration_list

  ! shift/reduce conflict for VAR resolved as shift
    FUNCTION        reduce using rule 7 (declaration_sections -> uses_opt type_declaration .)
    PROCEDURE       reduce using rule 7 (declaration_sections -> uses_opt type_declaration .)
    BEGIN           reduce using rule 7 (declaration_sections -> uses_opt type_declaration .)
    VAR             shift and go to state 14

  ! VAR             [ reduce using rule 7 (declaration_sections -> uses_opt type_declaration .) ]

    var_declaration                shift and go to state 50

state 26

    (8) declaration_sections -> uses_opt var_declaration .

    VAR             reduce using rule 8 (declaration_sections -> uses_opt var_declaration .)
    FUNCTION        reduce using rule 8 (declaration_sections -> uses_opt var_declaration .)
    PROCEDURE       reduce using rule 8 (declaration_sections -> uses_opt var_declaration .)
    BEGIN           reduce using rule 8 (declaration_sections -> uses_opt var_declaration .)


state 27

    (10) declaration_sections -> constant_declaration type_declaration . var_declaration
    (11) declaration_sections -> constant_declaration type_declaration .
    (19) var_declaration -> . VAR declaration_list

  ! shift/reduce conflict for VAR resolved as shift
    FUNCTION        reduce using rule 11 (declaration_sections -> constant_declaration type_declaration .)
    PROCEDURE       reduce using rule 11 (declaration_sections -> constant_declaration type_declaration .)
    BEGIN           reduce using rule 11 (declaration_sections -> constant_declaration type_declaration .)
    VAR             shift and go to state 14

  ! VAR             [ reduce using rule 11 (declaration_sections -> constant_declaration type_declaration .) ]

    var_declaration                shift and go to state 51

state 28

    (12) declaration_sections -> constant_declaration var_declaration .

    VAR             reduce using rule 12 (declaration_sections -> constant_declaration var_declaration .)
    FUNCTION        reduce using rule 12 (declaration_sections -> constant_declaration var_declaration .)
    PROCEDURE       reduce using rule 12 (declaration_sections -> constant_declaration var_declaration .)
    BEGIN           reduce using rule 12 (declaration_sections -> constant_declaration var_declaration .)


state 29

    (14) declaration_sections -> type_declaration var_declaration .

    VAR             reduce using rule 14 (declaration_sections -> type_declaration var_declaration .)
    FUNCTION        reduce using rule 14 (declaration_sections -> type_declaration var_declaration .)
    PROCEDURE       reduce using rule 14 (declaration_sections -> type_declaration var_declaration .)
    BEGIN           reduce using rule 14 (declaration_sections -> type_declaration var_declaration .)


state 30

    (17) uses_opt -> USES ID . SEMICOLON

    SEMICOLON       shift and go to state 52


state 31

    (101) constant_declaration -> CONST constant_list .
    (103) constant_list -> constant_list . constant
    (104) constant -> . ID EQUAL NUMBER SEMICOLON

    TYPE            reduce using rule 101 (constant_declaration -> CONST constant_list .)
    VAR             reduce using rule 101 (constant_declaration -> CONST constant_list .)
    FUNCTION        reduce using rule 101 (constant_declaration -> CONST constant_list .)
    PROCEDURE       reduce using rule 101 (constant_declaration -> CONST constant_list .)
    BEGIN           reduce using rule 101 (constant_declaration -> CONST constant_list .)
    ID              shift and go to state 33

    constant                       shift and go to state 53

state 32

    (102) constant_list -> constant .

    ID              reduce using rule 102 (constant_list -> constant .)
    TYPE            reduce using rule 102 (constant_list -> constant .)
    VAR             reduce using rule 102 (constant_list -> constant .)
    FUNCTION        reduce using rule 102 (constant_list -> constant .)
    PROCEDURE       reduce using rule 102 (constant_list -> constant .)
    BEGIN           reduce using rule 102 (constant_list -> constant .)


state 33

    (104) constant -> ID . EQUAL NUMBER SEMICOLON

    EQUAL           shift and go to state 54


state 34

    (30) type_declaration -> TYPE type_list .
    (32) type_list -> type_list . type_definition
    (33) type_definition -> . ID EQUAL type_specifier SEMICOLON

    VAR             reduce using rule 30 (type_declaration -> TYPE type_list .)
    FUNCTION        reduce using rule 30 (type_declaration -> TYPE type_list .)
    PROCEDURE       reduce using rule 30 (type_declaration -> TYPE type_list .)
    BEGIN           reduce using rule 30 (type_declaration -> TYPE type_list .)
    ID              shift and go to state 36

    type_definition                shift and go to state 55

state 35

    (31) type_list -> type_definition .

    ID              reduce using rule 31 (type_list -> type_definition .)
    VAR             reduce using rule 31 (type_list -> type_definition .)
    FUNCTION        reduce using rule 31 (type_list -> type_definition .)
    PROCEDURE       reduce using rule 31 (type_list -> type_definition .)
    BEGIN           reduce using rule 31 (type_list -> type_definition .)


state 36

    (33) type_definition -> ID . EQUAL type_specifier SEMICOLON

    EQUAL           shift and go to state 56


state 37

    (19) var_declaration -> VAR declaration_list .
    (26) declaration_list -> declaration_list . declaration
    (27) declaration -> . id_list COLON type_specifier SEMICOLON
    (28) id_list -> . ID
    (29) id_list -> . id_list COMMA ID

    VAR             reduce using rule 19 (var_declaration -> VAR declaration_list .)
    FUNCTION        reduce using rule 19 (var_declaration -> VAR declaration_list .)
    PROCEDURE       reduce using rule 19 (var_declaration -> VAR declaration_list .)
    BEGIN           reduce using rule 19 (var_declaration -> VAR declaration_list .)
    ID              shift and go to state 40

    declaration                    shift and go to state 57
    id_list                        shift and go to state 39

state 38

    (25) declaration_list -> declaration .

    ID              reduce using rule 25 (declaration_list -> declaration .)
    VAR             reduce using rule 25 (declaration_list -> declaration .)
    FUNCTION        reduce using rule 25 (declaration_list -> declaration .)
    PROCEDURE       reduce using rule 25 (declaration_list -> declaration .)
    BEGIN           reduce using rule 25 (declaration_list -> declaration .)


state 39

    (27) declaration -> id_list . COLON type_specifier SEMICOLON
    (29) id_list -> id_list . COMMA ID

    COLON           shift and go to state 58
    COMMA           shift and go to state 59


state 40

    (28) id_list -> ID .

    COLON           reduce using rule 28 (id_list -> ID .)
    COMMA           reduce using rule 28 (id_list -> ID .)


state 41

    (1) program -> PROGRAM ID SEMICOLON declaration_sections block DOT .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON declaration_sections block DOT .)


state 42

    (20) block -> declarations compound_statement .

    DOT             reduce using rule 20 (block -> declarations compound_statement .)
    SEMICOLON       reduce using rule 20 (block -> declarations compound_statement .)


state 43

    (46) compound_statement -> BEGIN . statement_list END
    (47) statement_list -> . statement statement_list_tail
    (50) statement -> . assignment_statement
    (51) statement -> . if_statement
    (52) statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (53) statement -> . while_statement
    (54) statement -> . procedure_call
    (55) statement -> . compound_statement
    (56) statement -> . empty
    (96) statement -> . READLN
    (97) statement -> . READLN LPAREN ID RPAREN
    (98) statement -> . WRITELN LPAREN expression_list RPAREN
    (99) statement -> . WRITE LPAREN expression_list RPAREN
    (100) statement -> . USES ID SEMICOLON
    (57) assignment_statement -> . variable COLON_EQUAL expression
    (60) if_statement -> . IF expression THEN statement ELSE statement
    (61) while_statement -> . WHILE expression DO statement
    (62) procedure_call -> . ID LPAREN expression_list RPAREN
    (46) compound_statement -> . BEGIN statement_list END
    (95) empty -> .
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    FOR             shift and go to state 64
    READLN          shift and go to state 70
    WRITELN         shift and go to state 71
    WRITE           shift and go to state 72
    USES            shift and go to state 73
    IF              shift and go to state 75
    WHILE           shift and go to state 76
    ID              shift and go to state 65
    BEGIN           shift and go to state 43
    SEMICOLON       reduce using rule 95 (empty -> .)
    END             reduce using rule 95 (empty -> .)

    statement_list                 shift and go to state 60
    statement                      shift and go to state 61
    assignment_statement           shift and go to state 62
    if_statement                   shift and go to state 63
    while_statement                shift and go to state 66
    procedure_call                 shift and go to state 67
    compound_statement             shift and go to state 68
    empty                          shift and go to state 69
    variable                       shift and go to state 74

state 44

    (21) declarations -> VAR declaration_list . procedure_declarations
    (22) declarations -> VAR declaration_list .
    (26) declaration_list -> declaration_list . declaration
    (38) procedure_declarations -> . procedure_declaration
    (39) procedure_declarations -> . procedure_declarations procedure_declaration
    (27) declaration -> . id_list COLON type_specifier SEMICOLON
    (40) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (28) id_list -> . ID
    (29) id_list -> . id_list COMMA ID

    BEGIN           reduce using rule 22 (declarations -> VAR declaration_list .)
    PROCEDURE       shift and go to state 23
    ID              shift and go to state 40

    procedure_declarations         shift and go to state 77
    declaration                    shift and go to state 57
    procedure_declaration          shift and go to state 21
    id_list                        shift and go to state 39

state 45

    (39) procedure_declarations -> procedure_declarations procedure_declaration .

    PROCEDURE       reduce using rule 39 (procedure_declarations -> procedure_declarations procedure_declaration .)
    BEGIN           reduce using rule 39 (procedure_declarations -> procedure_declarations procedure_declaration .)


state 46

    (41) function_declaration -> FUNCTION ID . LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON

    LPAREN          shift and go to state 78


state 47

    (40) procedure_declaration -> PROCEDURE ID . LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON

    LPAREN          shift and go to state 79


state 48

    (2) declaration_sections -> uses_opt constant_declaration type_declaration . var_declaration
    (3) declaration_sections -> uses_opt constant_declaration type_declaration .
    (19) var_declaration -> . VAR declaration_list

  ! shift/reduce conflict for VAR resolved as shift
    FUNCTION        reduce using rule 3 (declaration_sections -> uses_opt constant_declaration type_declaration .)
    PROCEDURE       reduce using rule 3 (declaration_sections -> uses_opt constant_declaration type_declaration .)
    BEGIN           reduce using rule 3 (declaration_sections -> uses_opt constant_declaration type_declaration .)
    VAR             shift and go to state 14

  ! VAR             [ reduce using rule 3 (declaration_sections -> uses_opt constant_declaration type_declaration .) ]

    var_declaration                shift and go to state 80

state 49

    (4) declaration_sections -> uses_opt constant_declaration var_declaration .

    VAR             reduce using rule 4 (declaration_sections -> uses_opt constant_declaration var_declaration .)
    FUNCTION        reduce using rule 4 (declaration_sections -> uses_opt constant_declaration var_declaration .)
    PROCEDURE       reduce using rule 4 (declaration_sections -> uses_opt constant_declaration var_declaration .)
    BEGIN           reduce using rule 4 (declaration_sections -> uses_opt constant_declaration var_declaration .)


state 50

    (6) declaration_sections -> uses_opt type_declaration var_declaration .

    VAR             reduce using rule 6 (declaration_sections -> uses_opt type_declaration var_declaration .)
    FUNCTION        reduce using rule 6 (declaration_sections -> uses_opt type_declaration var_declaration .)
    PROCEDURE       reduce using rule 6 (declaration_sections -> uses_opt type_declaration var_declaration .)
    BEGIN           reduce using rule 6 (declaration_sections -> uses_opt type_declaration var_declaration .)


state 51

    (10) declaration_sections -> constant_declaration type_declaration var_declaration .

    VAR             reduce using rule 10 (declaration_sections -> constant_declaration type_declaration var_declaration .)
    FUNCTION        reduce using rule 10 (declaration_sections -> constant_declaration type_declaration var_declaration .)
    PROCEDURE       reduce using rule 10 (declaration_sections -> constant_declaration type_declaration var_declaration .)
    BEGIN           reduce using rule 10 (declaration_sections -> constant_declaration type_declaration var_declaration .)


state 52

    (17) uses_opt -> USES ID SEMICOLON .

    CONST           reduce using rule 17 (uses_opt -> USES ID SEMICOLON .)
    TYPE            reduce using rule 17 (uses_opt -> USES ID SEMICOLON .)
    VAR             reduce using rule 17 (uses_opt -> USES ID SEMICOLON .)
    FUNCTION        reduce using rule 17 (uses_opt -> USES ID SEMICOLON .)
    PROCEDURE       reduce using rule 17 (uses_opt -> USES ID SEMICOLON .)
    BEGIN           reduce using rule 17 (uses_opt -> USES ID SEMICOLON .)


state 53

    (103) constant_list -> constant_list constant .

    ID              reduce using rule 103 (constant_list -> constant_list constant .)
    TYPE            reduce using rule 103 (constant_list -> constant_list constant .)
    VAR             reduce using rule 103 (constant_list -> constant_list constant .)
    FUNCTION        reduce using rule 103 (constant_list -> constant_list constant .)
    PROCEDURE       reduce using rule 103 (constant_list -> constant_list constant .)
    BEGIN           reduce using rule 103 (constant_list -> constant_list constant .)


state 54

    (104) constant -> ID EQUAL . NUMBER SEMICOLON

    NUMBER          shift and go to state 81


state 55

    (32) type_list -> type_list type_definition .

    ID              reduce using rule 32 (type_list -> type_list type_definition .)
    VAR             reduce using rule 32 (type_list -> type_list type_definition .)
    FUNCTION        reduce using rule 32 (type_list -> type_list type_definition .)
    PROCEDURE       reduce using rule 32 (type_list -> type_list type_definition .)
    BEGIN           reduce using rule 32 (type_list -> type_list type_definition .)


state 56

    (33) type_definition -> ID EQUAL . type_specifier SEMICOLON
    (34) type_specifier -> . ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier
    (35) type_specifier -> . INTEGER
    (36) type_specifier -> . ID
    (37) type_specifier -> . LONGINT

    ARRAY           shift and go to state 84
    INTEGER         shift and go to state 85
    ID              shift and go to state 82
    LONGINT         shift and go to state 86

    type_specifier                 shift and go to state 83

state 57

    (26) declaration_list -> declaration_list declaration .

    ID              reduce using rule 26 (declaration_list -> declaration_list declaration .)
    VAR             reduce using rule 26 (declaration_list -> declaration_list declaration .)
    FUNCTION        reduce using rule 26 (declaration_list -> declaration_list declaration .)
    PROCEDURE       reduce using rule 26 (declaration_list -> declaration_list declaration .)
    BEGIN           reduce using rule 26 (declaration_list -> declaration_list declaration .)


state 58

    (27) declaration -> id_list COLON . type_specifier SEMICOLON
    (34) type_specifier -> . ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier
    (35) type_specifier -> . INTEGER
    (36) type_specifier -> . ID
    (37) type_specifier -> . LONGINT

    ARRAY           shift and go to state 84
    INTEGER         shift and go to state 85
    ID              shift and go to state 82
    LONGINT         shift and go to state 86

    type_specifier                 shift and go to state 87

state 59

    (29) id_list -> id_list COMMA . ID

    ID              shift and go to state 88


state 60

    (46) compound_statement -> BEGIN statement_list . END

    END             shift and go to state 89


state 61

    (47) statement_list -> statement . statement_list_tail
    (48) statement_list_tail -> . SEMICOLON statement statement_list_tail
    (49) statement_list_tail -> . empty
    (95) empty -> .

    SEMICOLON       shift and go to state 91
    END             reduce using rule 95 (empty -> .)

    statement_list_tail            shift and go to state 90
    empty                          shift and go to state 92

state 62

    (50) statement -> assignment_statement .

    SEMICOLON       reduce using rule 50 (statement -> assignment_statement .)
    END             reduce using rule 50 (statement -> assignment_statement .)
    ELSE            reduce using rule 50 (statement -> assignment_statement .)


state 63

    (51) statement -> if_statement .

    SEMICOLON       reduce using rule 51 (statement -> if_statement .)
    END             reduce using rule 51 (statement -> if_statement .)
    ELSE            reduce using rule 51 (statement -> if_statement .)


state 64

    (52) statement -> FOR . ID COLON_EQUAL expression TO expression DO statement

    ID              shift and go to state 93


state 65

    (62) procedure_call -> ID . LPAREN expression_list RPAREN
    (58) variable -> ID .
    (59) variable -> ID . LBRACKET expression RBRACKET

    LPAREN          shift and go to state 94
    COLON_EQUAL     reduce using rule 58 (variable -> ID .)
    LBRACKET        shift and go to state 95


state 66

    (53) statement -> while_statement .

    SEMICOLON       reduce using rule 53 (statement -> while_statement .)
    END             reduce using rule 53 (statement -> while_statement .)
    ELSE            reduce using rule 53 (statement -> while_statement .)


state 67

    (54) statement -> procedure_call .

    SEMICOLON       reduce using rule 54 (statement -> procedure_call .)
    END             reduce using rule 54 (statement -> procedure_call .)
    ELSE            reduce using rule 54 (statement -> procedure_call .)


state 68

    (55) statement -> compound_statement .

    SEMICOLON       reduce using rule 55 (statement -> compound_statement .)
    END             reduce using rule 55 (statement -> compound_statement .)
    ELSE            reduce using rule 55 (statement -> compound_statement .)


state 69

    (56) statement -> empty .

    SEMICOLON       reduce using rule 56 (statement -> empty .)
    END             reduce using rule 56 (statement -> empty .)
    ELSE            reduce using rule 56 (statement -> empty .)


state 70

    (96) statement -> READLN .
    (97) statement -> READLN . LPAREN ID RPAREN

    SEMICOLON       reduce using rule 96 (statement -> READLN .)
    END             reduce using rule 96 (statement -> READLN .)
    ELSE            reduce using rule 96 (statement -> READLN .)
    LPAREN          shift and go to state 96


state 71

    (98) statement -> WRITELN . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 97


state 72

    (99) statement -> WRITE . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 98


state 73

    (100) statement -> USES . ID SEMICOLON

    ID              shift and go to state 99


state 74

    (57) assignment_statement -> variable . COLON_EQUAL expression

    COLON_EQUAL     shift and go to state 100


state 75

    (60) if_statement -> IF . expression THEN statement ELSE statement
    (67) expression -> . simple_expression relop simple_expression
    (68) expression -> . simple_expression
    (80) expression -> . expression PLUS expression
    (81) expression -> . expression MINUS expression
    (82) expression -> . expression TIMES expression
    (83) expression -> . expression DIVIDE expression
    (84) expression -> . expression MOD expression
    (69) simple_expression -> . term simple_expression_tail
    (74) term -> . factor term_tail
    (44) factor -> . function_call
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . variable
    (87) factor -> . NUMBER
    (88) factor -> . STRING_LITERAL
    (43) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 106
    NUMBER          shift and go to state 108
    STRING_LITERAL  shift and go to state 109
    ID              shift and go to state 110

    expression                     shift and go to state 101
    simple_expression              shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    function_call                  shift and go to state 105
    variable                       shift and go to state 107

state 76

    (61) while_statement -> WHILE . expression DO statement
    (67) expression -> . simple_expression relop simple_expression
    (68) expression -> . simple_expression
    (80) expression -> . expression PLUS expression
    (81) expression -> . expression MINUS expression
    (82) expression -> . expression TIMES expression
    (83) expression -> . expression DIVIDE expression
    (84) expression -> . expression MOD expression
    (69) simple_expression -> . term simple_expression_tail
    (74) term -> . factor term_tail
    (44) factor -> . function_call
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . variable
    (87) factor -> . NUMBER
    (88) factor -> . STRING_LITERAL
    (43) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 106
    NUMBER          shift and go to state 108
    STRING_LITERAL  shift and go to state 109
    ID              shift and go to state 110

    expression                     shift and go to state 111
    simple_expression              shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    function_call                  shift and go to state 105
    variable                       shift and go to state 107

state 77

    (21) declarations -> VAR declaration_list procedure_declarations .
    (39) procedure_declarations -> procedure_declarations . procedure_declaration
    (40) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON

    BEGIN           reduce using rule 21 (declarations -> VAR declaration_list procedure_declarations .)
    PROCEDURE       shift and go to state 23

    procedure_declaration          shift and go to state 45

state 78

    (41) function_declaration -> FUNCTION ID LPAREN . parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (45) parameter_list -> . id_list COLON type_specifier
    (28) id_list -> . ID
    (29) id_list -> . id_list COMMA ID

    ID              shift and go to state 40

    parameter_list                 shift and go to state 112
    id_list                        shift and go to state 113

state 79

    (40) procedure_declaration -> PROCEDURE ID LPAREN . parameter_list RPAREN SEMICOLON block SEMICOLON
    (45) parameter_list -> . id_list COLON type_specifier
    (28) id_list -> . ID
    (29) id_list -> . id_list COMMA ID

    ID              shift and go to state 40

    parameter_list                 shift and go to state 114
    id_list                        shift and go to state 113

state 80

    (2) declaration_sections -> uses_opt constant_declaration type_declaration var_declaration .

    VAR             reduce using rule 2 (declaration_sections -> uses_opt constant_declaration type_declaration var_declaration .)
    FUNCTION        reduce using rule 2 (declaration_sections -> uses_opt constant_declaration type_declaration var_declaration .)
    PROCEDURE       reduce using rule 2 (declaration_sections -> uses_opt constant_declaration type_declaration var_declaration .)
    BEGIN           reduce using rule 2 (declaration_sections -> uses_opt constant_declaration type_declaration var_declaration .)


state 81

    (104) constant -> ID EQUAL NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 115


state 82

    (36) type_specifier -> ID .

    SEMICOLON       reduce using rule 36 (type_specifier -> ID .)
    RPAREN          reduce using rule 36 (type_specifier -> ID .)


state 83

    (33) type_definition -> ID EQUAL type_specifier . SEMICOLON

    SEMICOLON       shift and go to state 116


state 84

    (34) type_specifier -> ARRAY . LBRACKET expression DOTDOT expression RBRACKET OF type_specifier

    LBRACKET        shift and go to state 117


state 85

    (35) type_specifier -> INTEGER .

    SEMICOLON       reduce using rule 35 (type_specifier -> INTEGER .)
    RPAREN          reduce using rule 35 (type_specifier -> INTEGER .)


state 86

    (37) type_specifier -> LONGINT .

    SEMICOLON       reduce using rule 37 (type_specifier -> LONGINT .)
    RPAREN          reduce using rule 37 (type_specifier -> LONGINT .)


state 87

    (27) declaration -> id_list COLON type_specifier . SEMICOLON

    SEMICOLON       shift and go to state 118


state 88

    (29) id_list -> id_list COMMA ID .

    COLON           reduce using rule 29 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 29 (id_list -> id_list COMMA ID .)


state 89

    (46) compound_statement -> BEGIN statement_list END .

    DOT             reduce using rule 46 (compound_statement -> BEGIN statement_list END .)
    SEMICOLON       reduce using rule 46 (compound_statement -> BEGIN statement_list END .)
    END             reduce using rule 46 (compound_statement -> BEGIN statement_list END .)
    ELSE            reduce using rule 46 (compound_statement -> BEGIN statement_list END .)


state 90

    (47) statement_list -> statement statement_list_tail .

    END             reduce using rule 47 (statement_list -> statement statement_list_tail .)


state 91

    (48) statement_list_tail -> SEMICOLON . statement statement_list_tail
    (50) statement -> . assignment_statement
    (51) statement -> . if_statement
    (52) statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (53) statement -> . while_statement
    (54) statement -> . procedure_call
    (55) statement -> . compound_statement
    (56) statement -> . empty
    (96) statement -> . READLN
    (97) statement -> . READLN LPAREN ID RPAREN
    (98) statement -> . WRITELN LPAREN expression_list RPAREN
    (99) statement -> . WRITE LPAREN expression_list RPAREN
    (100) statement -> . USES ID SEMICOLON
    (57) assignment_statement -> . variable COLON_EQUAL expression
    (60) if_statement -> . IF expression THEN statement ELSE statement
    (61) while_statement -> . WHILE expression DO statement
    (62) procedure_call -> . ID LPAREN expression_list RPAREN
    (46) compound_statement -> . BEGIN statement_list END
    (95) empty -> .
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    FOR             shift and go to state 64
    READLN          shift and go to state 70
    WRITELN         shift and go to state 71
    WRITE           shift and go to state 72
    USES            shift and go to state 73
    IF              shift and go to state 75
    WHILE           shift and go to state 76
    ID              shift and go to state 65
    BEGIN           shift and go to state 43
    SEMICOLON       reduce using rule 95 (empty -> .)
    END             reduce using rule 95 (empty -> .)

    statement                      shift and go to state 119
    assignment_statement           shift and go to state 62
    if_statement                   shift and go to state 63
    while_statement                shift and go to state 66
    procedure_call                 shift and go to state 67
    compound_statement             shift and go to state 68
    empty                          shift and go to state 69
    variable                       shift and go to state 74

state 92

    (49) statement_list_tail -> empty .

    END             reduce using rule 49 (statement_list_tail -> empty .)


state 93

    (52) statement -> FOR ID . COLON_EQUAL expression TO expression DO statement

    COLON_EQUAL     shift and go to state 120


state 94

    (62) procedure_call -> ID LPAREN . expression_list RPAREN
    (63) expression_list -> . expression expression_list_tail
    (66) expression_list -> . empty
    (67) expression -> . simple_expression relop simple_expression
    (68) expression -> . simple_expression
    (80) expression -> . expression PLUS expression
    (81) expression -> . expression MINUS expression
    (82) expression -> . expression TIMES expression
    (83) expression -> . expression DIVIDE expression
    (84) expression -> . expression MOD expression
    (95) empty -> .
    (69) simple_expression -> . term simple_expression_tail
    (74) term -> . factor term_tail
    (44) factor -> . function_call
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . variable
    (87) factor -> . NUMBER
    (88) factor -> . STRING_LITERAL
    (43) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    RPAREN          reduce using rule 95 (empty -> .)
    LPAREN          shift and go to state 106
    NUMBER          shift and go to state 108
    STRING_LITERAL  shift and go to state 109
    ID              shift and go to state 110

    expression_list                shift and go to state 121
    expression                     shift and go to state 122
    empty                          shift and go to state 123
    simple_expression              shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    function_call                  shift and go to state 105
    variable                       shift and go to state 107

state 95

    (59) variable -> ID LBRACKET . expression RBRACKET
    (67) expression -> . simple_expression relop simple_expression
    (68) expression -> . simple_expression
    (80) expression -> . expression PLUS expression
    (81) expression -> . expression MINUS expression
    (82) expression -> . expression TIMES expression
    (83) expression -> . expression DIVIDE expression
    (84) expression -> . expression MOD expression
    (69) simple_expression -> . term simple_expression_tail
    (74) term -> . factor term_tail
    (44) factor -> . function_call
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . variable
    (87) factor -> . NUMBER
    (88) factor -> . STRING_LITERAL
    (43) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 106
    NUMBER          shift and go to state 108
    STRING_LITERAL  shift and go to state 109
    ID              shift and go to state 110

    expression                     shift and go to state 124
    simple_expression              shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    function_call                  shift and go to state 105
    variable                       shift and go to state 107

state 96

    (97) statement -> READLN LPAREN . ID RPAREN

    ID              shift and go to state 125


state 97

    (98) statement -> WRITELN LPAREN . expression_list RPAREN
    (63) expression_list -> . expression expression_list_tail
    (66) expression_list -> . empty
    (67) expression -> . simple_expression relop simple_expression
    (68) expression -> . simple_expression
    (80) expression -> . expression PLUS expression
    (81) expression -> . expression MINUS expression
    (82) expression -> . expression TIMES expression
    (83) expression -> . expression DIVIDE expression
    (84) expression -> . expression MOD expression
    (95) empty -> .
    (69) simple_expression -> . term simple_expression_tail
    (74) term -> . factor term_tail
    (44) factor -> . function_call
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . variable
    (87) factor -> . NUMBER
    (88) factor -> . STRING_LITERAL
    (43) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    RPAREN          reduce using rule 95 (empty -> .)
    LPAREN          shift and go to state 106
    NUMBER          shift and go to state 108
    STRING_LITERAL  shift and go to state 109
    ID              shift and go to state 110

    expression_list                shift and go to state 126
    expression                     shift and go to state 122
    empty                          shift and go to state 123
    simple_expression              shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    function_call                  shift and go to state 105
    variable                       shift and go to state 107

state 98

    (99) statement -> WRITE LPAREN . expression_list RPAREN
    (63) expression_list -> . expression expression_list_tail
    (66) expression_list -> . empty
    (67) expression -> . simple_expression relop simple_expression
    (68) expression -> . simple_expression
    (80) expression -> . expression PLUS expression
    (81) expression -> . expression MINUS expression
    (82) expression -> . expression TIMES expression
    (83) expression -> . expression DIVIDE expression
    (84) expression -> . expression MOD expression
    (95) empty -> .
    (69) simple_expression -> . term simple_expression_tail
    (74) term -> . factor term_tail
    (44) factor -> . function_call
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . variable
    (87) factor -> . NUMBER
    (88) factor -> . STRING_LITERAL
    (43) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    RPAREN          reduce using rule 95 (empty -> .)
    LPAREN          shift and go to state 106
    NUMBER          shift and go to state 108
    STRING_LITERAL  shift and go to state 109
    ID              shift and go to state 110

    expression_list                shift and go to state 127
    expression                     shift and go to state 122
    empty                          shift and go to state 123
    simple_expression              shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    function_call                  shift and go to state 105
    variable                       shift and go to state 107

state 99

    (100) statement -> USES ID . SEMICOLON

    SEMICOLON       shift and go to state 128


state 100

    (57) assignment_statement -> variable COLON_EQUAL . expression
    (67) expression -> . simple_expression relop simple_expression
    (68) expression -> . simple_expression
    (80) expression -> . expression PLUS expression
    (81) expression -> . expression MINUS expression
    (82) expression -> . expression TIMES expression
    (83) expression -> . expression DIVIDE expression
    (84) expression -> . expression MOD expression
    (69) simple_expression -> . term simple_expression_tail
    (74) term -> . factor term_tail
    (44) factor -> . function_call
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . variable
    (87) factor -> . NUMBER
    (88) factor -> . STRING_LITERAL
    (43) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 106
    NUMBER          shift and go to state 108
    STRING_LITERAL  shift and go to state 109
    ID              shift and go to state 110

    variable                       shift and go to state 107
    expression                     shift and go to state 129
    simple_expression              shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    function_call                  shift and go to state 105

state 101

    (60) if_statement -> IF expression . THEN statement ELSE statement
    (80) expression -> expression . PLUS expression
    (81) expression -> expression . MINUS expression
    (82) expression -> expression . TIMES expression
    (83) expression -> expression . DIVIDE expression
    (84) expression -> expression . MOD expression

    THEN            shift and go to state 130
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135


state 102

    (67) expression -> simple_expression . relop simple_expression
    (68) expression -> simple_expression .
    (89) relop -> . LESS
    (90) relop -> . LESS_EQUAL
    (91) relop -> . GREAT
    (92) relop -> . GREAT_EQUAL
    (93) relop -> . EQUAL
    (94) relop -> . DIFFERENT

    THEN            reduce using rule 68 (expression -> simple_expression .)
    PLUS            reduce using rule 68 (expression -> simple_expression .)
    MINUS           reduce using rule 68 (expression -> simple_expression .)
    TIMES           reduce using rule 68 (expression -> simple_expression .)
    DIVIDE          reduce using rule 68 (expression -> simple_expression .)
    MOD             reduce using rule 68 (expression -> simple_expression .)
    DO              reduce using rule 68 (expression -> simple_expression .)
    COMMA           reduce using rule 68 (expression -> simple_expression .)
    RPAREN          reduce using rule 68 (expression -> simple_expression .)
    RBRACKET        reduce using rule 68 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 68 (expression -> simple_expression .)
    END             reduce using rule 68 (expression -> simple_expression .)
    ELSE            reduce using rule 68 (expression -> simple_expression .)
    DOTDOT          reduce using rule 68 (expression -> simple_expression .)
    TO              reduce using rule 68 (expression -> simple_expression .)
    LESS            shift and go to state 137
    LESS_EQUAL      shift and go to state 138
    GREAT           shift and go to state 139
    GREAT_EQUAL     shift and go to state 140
    EQUAL           shift and go to state 141
    DIFFERENT       shift and go to state 142

    relop                          shift and go to state 136

state 103

    (69) simple_expression -> term . simple_expression_tail
    (70) simple_expression_tail -> . addop term
    (71) simple_expression_tail -> . empty
    (72) addop -> . PLUS
    (73) addop -> . MINUS
    (95) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147
    LESS            reduce using rule 95 (empty -> .)
    LESS_EQUAL      reduce using rule 95 (empty -> .)
    GREAT           reduce using rule 95 (empty -> .)
    GREAT_EQUAL     reduce using rule 95 (empty -> .)
    EQUAL           reduce using rule 95 (empty -> .)
    DIFFERENT       reduce using rule 95 (empty -> .)
    THEN            reduce using rule 95 (empty -> .)
    TIMES           reduce using rule 95 (empty -> .)
    DIVIDE          reduce using rule 95 (empty -> .)
    MOD             reduce using rule 95 (empty -> .)
    DO              reduce using rule 95 (empty -> .)
    COMMA           reduce using rule 95 (empty -> .)
    RPAREN          reduce using rule 95 (empty -> .)
    RBRACKET        reduce using rule 95 (empty -> .)
    SEMICOLON       reduce using rule 95 (empty -> .)
    END             reduce using rule 95 (empty -> .)
    ELSE            reduce using rule 95 (empty -> .)
    DOTDOT          reduce using rule 95 (empty -> .)
    TO              reduce using rule 95 (empty -> .)

  ! PLUS            [ reduce using rule 95 (empty -> .) ]
  ! MINUS           [ reduce using rule 95 (empty -> .) ]

    simple_expression_tail         shift and go to state 143
    addop                          shift and go to state 144
    empty                          shift and go to state 145

state 104

    (74) term -> factor . term_tail
    (75) term_tail -> . mulop factor
    (76) term_tail -> . empty
    (77) mulop -> . TIMES
    (78) mulop -> . DIVIDE
    (79) mulop -> . DIV
    (95) empty -> .

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    DIV             shift and go to state 153
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    LESS            reduce using rule 95 (empty -> .)
    LESS_EQUAL      reduce using rule 95 (empty -> .)
    GREAT           reduce using rule 95 (empty -> .)
    GREAT_EQUAL     reduce using rule 95 (empty -> .)
    EQUAL           reduce using rule 95 (empty -> .)
    DIFFERENT       reduce using rule 95 (empty -> .)
    THEN            reduce using rule 95 (empty -> .)
    MOD             reduce using rule 95 (empty -> .)
    DO              reduce using rule 95 (empty -> .)
    COMMA           reduce using rule 95 (empty -> .)
    RPAREN          reduce using rule 95 (empty -> .)
    RBRACKET        reduce using rule 95 (empty -> .)
    SEMICOLON       reduce using rule 95 (empty -> .)
    END             reduce using rule 95 (empty -> .)
    ELSE            reduce using rule 95 (empty -> .)
    DOTDOT          reduce using rule 95 (empty -> .)
    TO              reduce using rule 95 (empty -> .)

  ! TIMES           [ reduce using rule 95 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 95 (empty -> .) ]

    term_tail                      shift and go to state 148
    mulop                          shift and go to state 149
    empty                          shift and go to state 150

state 105

    (44) factor -> function_call .

    TIMES           reduce using rule 44 (factor -> function_call .)
    DIVIDE          reduce using rule 44 (factor -> function_call .)
    DIV             reduce using rule 44 (factor -> function_call .)
    PLUS            reduce using rule 44 (factor -> function_call .)
    MINUS           reduce using rule 44 (factor -> function_call .)
    LESS            reduce using rule 44 (factor -> function_call .)
    LESS_EQUAL      reduce using rule 44 (factor -> function_call .)
    GREAT           reduce using rule 44 (factor -> function_call .)
    GREAT_EQUAL     reduce using rule 44 (factor -> function_call .)
    EQUAL           reduce using rule 44 (factor -> function_call .)
    DIFFERENT       reduce using rule 44 (factor -> function_call .)
    THEN            reduce using rule 44 (factor -> function_call .)
    MOD             reduce using rule 44 (factor -> function_call .)
    DO              reduce using rule 44 (factor -> function_call .)
    COMMA           reduce using rule 44 (factor -> function_call .)
    RPAREN          reduce using rule 44 (factor -> function_call .)
    RBRACKET        reduce using rule 44 (factor -> function_call .)
    SEMICOLON       reduce using rule 44 (factor -> function_call .)
    END             reduce using rule 44 (factor -> function_call .)
    ELSE            reduce using rule 44 (factor -> function_call .)
    DOTDOT          reduce using rule 44 (factor -> function_call .)
    TO              reduce using rule 44 (factor -> function_call .)


state 106

    (85) factor -> LPAREN . expression RPAREN
    (67) expression -> . simple_expression relop simple_expression
    (68) expression -> . simple_expression
    (80) expression -> . expression PLUS expression
    (81) expression -> . expression MINUS expression
    (82) expression -> . expression TIMES expression
    (83) expression -> . expression DIVIDE expression
    (84) expression -> . expression MOD expression
    (69) simple_expression -> . term simple_expression_tail
    (74) term -> . factor term_tail
    (44) factor -> . function_call
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . variable
    (87) factor -> . NUMBER
    (88) factor -> . STRING_LITERAL
    (43) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 106
    NUMBER          shift and go to state 108
    STRING_LITERAL  shift and go to state 109
    ID              shift and go to state 110

    expression                     shift and go to state 154
    simple_expression              shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    function_call                  shift and go to state 105
    variable                       shift and go to state 107

state 107

    (86) factor -> variable .

    TIMES           reduce using rule 86 (factor -> variable .)
    DIVIDE          reduce using rule 86 (factor -> variable .)
    DIV             reduce using rule 86 (factor -> variable .)
    PLUS            reduce using rule 86 (factor -> variable .)
    MINUS           reduce using rule 86 (factor -> variable .)
    LESS            reduce using rule 86 (factor -> variable .)
    LESS_EQUAL      reduce using rule 86 (factor -> variable .)
    GREAT           reduce using rule 86 (factor -> variable .)
    GREAT_EQUAL     reduce using rule 86 (factor -> variable .)
    EQUAL           reduce using rule 86 (factor -> variable .)
    DIFFERENT       reduce using rule 86 (factor -> variable .)
    THEN            reduce using rule 86 (factor -> variable .)
    MOD             reduce using rule 86 (factor -> variable .)
    DO              reduce using rule 86 (factor -> variable .)
    COMMA           reduce using rule 86 (factor -> variable .)
    RPAREN          reduce using rule 86 (factor -> variable .)
    RBRACKET        reduce using rule 86 (factor -> variable .)
    SEMICOLON       reduce using rule 86 (factor -> variable .)
    END             reduce using rule 86 (factor -> variable .)
    ELSE            reduce using rule 86 (factor -> variable .)
    DOTDOT          reduce using rule 86 (factor -> variable .)
    TO              reduce using rule 86 (factor -> variable .)


state 108

    (87) factor -> NUMBER .

    TIMES           reduce using rule 87 (factor -> NUMBER .)
    DIVIDE          reduce using rule 87 (factor -> NUMBER .)
    DIV             reduce using rule 87 (factor -> NUMBER .)
    PLUS            reduce using rule 87 (factor -> NUMBER .)
    MINUS           reduce using rule 87 (factor -> NUMBER .)
    LESS            reduce using rule 87 (factor -> NUMBER .)
    LESS_EQUAL      reduce using rule 87 (factor -> NUMBER .)
    GREAT           reduce using rule 87 (factor -> NUMBER .)
    GREAT_EQUAL     reduce using rule 87 (factor -> NUMBER .)
    EQUAL           reduce using rule 87 (factor -> NUMBER .)
    DIFFERENT       reduce using rule 87 (factor -> NUMBER .)
    THEN            reduce using rule 87 (factor -> NUMBER .)
    MOD             reduce using rule 87 (factor -> NUMBER .)
    DO              reduce using rule 87 (factor -> NUMBER .)
    COMMA           reduce using rule 87 (factor -> NUMBER .)
    RPAREN          reduce using rule 87 (factor -> NUMBER .)
    RBRACKET        reduce using rule 87 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 87 (factor -> NUMBER .)
    END             reduce using rule 87 (factor -> NUMBER .)
    ELSE            reduce using rule 87 (factor -> NUMBER .)
    DOTDOT          reduce using rule 87 (factor -> NUMBER .)
    TO              reduce using rule 87 (factor -> NUMBER .)


state 109

    (88) factor -> STRING_LITERAL .

    TIMES           reduce using rule 88 (factor -> STRING_LITERAL .)
    DIVIDE          reduce using rule 88 (factor -> STRING_LITERAL .)
    DIV             reduce using rule 88 (factor -> STRING_LITERAL .)
    PLUS            reduce using rule 88 (factor -> STRING_LITERAL .)
    MINUS           reduce using rule 88 (factor -> STRING_LITERAL .)
    LESS            reduce using rule 88 (factor -> STRING_LITERAL .)
    LESS_EQUAL      reduce using rule 88 (factor -> STRING_LITERAL .)
    GREAT           reduce using rule 88 (factor -> STRING_LITERAL .)
    GREAT_EQUAL     reduce using rule 88 (factor -> STRING_LITERAL .)
    EQUAL           reduce using rule 88 (factor -> STRING_LITERAL .)
    DIFFERENT       reduce using rule 88 (factor -> STRING_LITERAL .)
    THEN            reduce using rule 88 (factor -> STRING_LITERAL .)
    MOD             reduce using rule 88 (factor -> STRING_LITERAL .)
    DO              reduce using rule 88 (factor -> STRING_LITERAL .)
    COMMA           reduce using rule 88 (factor -> STRING_LITERAL .)
    RPAREN          reduce using rule 88 (factor -> STRING_LITERAL .)
    RBRACKET        reduce using rule 88 (factor -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 88 (factor -> STRING_LITERAL .)
    END             reduce using rule 88 (factor -> STRING_LITERAL .)
    ELSE            reduce using rule 88 (factor -> STRING_LITERAL .)
    DOTDOT          reduce using rule 88 (factor -> STRING_LITERAL .)
    TO              reduce using rule 88 (factor -> STRING_LITERAL .)


state 110

    (43) function_call -> ID . LPAREN expression_list RPAREN
    (58) variable -> ID .
    (59) variable -> ID . LBRACKET expression RBRACKET

    LPAREN          shift and go to state 155
    TIMES           reduce using rule 58 (variable -> ID .)
    DIVIDE          reduce using rule 58 (variable -> ID .)
    DIV             reduce using rule 58 (variable -> ID .)
    PLUS            reduce using rule 58 (variable -> ID .)
    MINUS           reduce using rule 58 (variable -> ID .)
    LESS            reduce using rule 58 (variable -> ID .)
    LESS_EQUAL      reduce using rule 58 (variable -> ID .)
    GREAT           reduce using rule 58 (variable -> ID .)
    GREAT_EQUAL     reduce using rule 58 (variable -> ID .)
    EQUAL           reduce using rule 58 (variable -> ID .)
    DIFFERENT       reduce using rule 58 (variable -> ID .)
    THEN            reduce using rule 58 (variable -> ID .)
    MOD             reduce using rule 58 (variable -> ID .)
    DO              reduce using rule 58 (variable -> ID .)
    COMMA           reduce using rule 58 (variable -> ID .)
    RPAREN          reduce using rule 58 (variable -> ID .)
    RBRACKET        reduce using rule 58 (variable -> ID .)
    SEMICOLON       reduce using rule 58 (variable -> ID .)
    END             reduce using rule 58 (variable -> ID .)
    ELSE            reduce using rule 58 (variable -> ID .)
    DOTDOT          reduce using rule 58 (variable -> ID .)
    TO              reduce using rule 58 (variable -> ID .)
    LBRACKET        shift and go to state 95


state 111

    (61) while_statement -> WHILE expression . DO statement
    (80) expression -> expression . PLUS expression
    (81) expression -> expression . MINUS expression
    (82) expression -> expression . TIMES expression
    (83) expression -> expression . DIVIDE expression
    (84) expression -> expression . MOD expression

    DO              shift and go to state 156
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135


state 112

    (41) function_declaration -> FUNCTION ID LPAREN parameter_list . RPAREN COLON type_specifier SEMICOLON block SEMICOLON

    RPAREN          shift and go to state 157


state 113

    (45) parameter_list -> id_list . COLON type_specifier
    (29) id_list -> id_list . COMMA ID

    COLON           shift and go to state 158
    COMMA           shift and go to state 59


state 114

    (40) procedure_declaration -> PROCEDURE ID LPAREN parameter_list . RPAREN SEMICOLON block SEMICOLON

    RPAREN          shift and go to state 159


state 115

    (104) constant -> ID EQUAL NUMBER SEMICOLON .

    ID              reduce using rule 104 (constant -> ID EQUAL NUMBER SEMICOLON .)
    TYPE            reduce using rule 104 (constant -> ID EQUAL NUMBER SEMICOLON .)
    VAR             reduce using rule 104 (constant -> ID EQUAL NUMBER SEMICOLON .)
    FUNCTION        reduce using rule 104 (constant -> ID EQUAL NUMBER SEMICOLON .)
    PROCEDURE       reduce using rule 104 (constant -> ID EQUAL NUMBER SEMICOLON .)
    BEGIN           reduce using rule 104 (constant -> ID EQUAL NUMBER SEMICOLON .)


state 116

    (33) type_definition -> ID EQUAL type_specifier SEMICOLON .

    ID              reduce using rule 33 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    VAR             reduce using rule 33 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 33 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 33 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    BEGIN           reduce using rule 33 (type_definition -> ID EQUAL type_specifier SEMICOLON .)


state 117

    (34) type_specifier -> ARRAY LBRACKET . expression DOTDOT expression RBRACKET OF type_specifier
    (67) expression -> . simple_expression relop simple_expression
    (68) expression -> . simple_expression
    (80) expression -> . expression PLUS expression
    (81) expression -> . expression MINUS expression
    (82) expression -> . expression TIMES expression
    (83) expression -> . expression DIVIDE expression
    (84) expression -> . expression MOD expression
    (69) simple_expression -> . term simple_expression_tail
    (74) term -> . factor term_tail
    (44) factor -> . function_call
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . variable
    (87) factor -> . NUMBER
    (88) factor -> . STRING_LITERAL
    (43) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 106
    NUMBER          shift and go to state 108
    STRING_LITERAL  shift and go to state 109
    ID              shift and go to state 110

    expression                     shift and go to state 160
    simple_expression              shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    function_call                  shift and go to state 105
    variable                       shift and go to state 107

state 118

    (27) declaration -> id_list COLON type_specifier SEMICOLON .

    ID              reduce using rule 27 (declaration -> id_list COLON type_specifier SEMICOLON .)
    VAR             reduce using rule 27 (declaration -> id_list COLON type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 27 (declaration -> id_list COLON type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 27 (declaration -> id_list COLON type_specifier SEMICOLON .)
    BEGIN           reduce using rule 27 (declaration -> id_list COLON type_specifier SEMICOLON .)


state 119

    (48) statement_list_tail -> SEMICOLON statement . statement_list_tail
    (48) statement_list_tail -> . SEMICOLON statement statement_list_tail
    (49) statement_list_tail -> . empty
    (95) empty -> .

    SEMICOLON       shift and go to state 91
    END             reduce using rule 95 (empty -> .)

    statement_list_tail            shift and go to state 161
    empty                          shift and go to state 92

state 120

    (52) statement -> FOR ID COLON_EQUAL . expression TO expression DO statement
    (67) expression -> . simple_expression relop simple_expression
    (68) expression -> . simple_expression
    (80) expression -> . expression PLUS expression
    (81) expression -> . expression MINUS expression
    (82) expression -> . expression TIMES expression
    (83) expression -> . expression DIVIDE expression
    (84) expression -> . expression MOD expression
    (69) simple_expression -> . term simple_expression_tail
    (74) term -> . factor term_tail
    (44) factor -> . function_call
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . variable
    (87) factor -> . NUMBER
    (88) factor -> . STRING_LITERAL
    (43) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 106
    NUMBER          shift and go to state 108
    STRING_LITERAL  shift and go to state 109
    ID              shift and go to state 110

    expression                     shift and go to state 162
    simple_expression              shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    function_call                  shift and go to state 105
    variable                       shift and go to state 107

state 121

    (62) procedure_call -> ID LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 163


state 122

    (63) expression_list -> expression . expression_list_tail
    (80) expression -> expression . PLUS expression
    (81) expression -> expression . MINUS expression
    (82) expression -> expression . TIMES expression
    (83) expression -> expression . DIVIDE expression
    (84) expression -> expression . MOD expression
    (64) expression_list_tail -> . COMMA expression expression_list_tail
    (65) expression_list_tail -> . empty
    (95) empty -> .

    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135
    COMMA           shift and go to state 165
    RPAREN          reduce using rule 95 (empty -> .)

    expression_list_tail           shift and go to state 164
    empty                          shift and go to state 166

state 123

    (66) expression_list -> empty .

    RPAREN          reduce using rule 66 (expression_list -> empty .)


state 124

    (59) variable -> ID LBRACKET expression . RBRACKET
    (80) expression -> expression . PLUS expression
    (81) expression -> expression . MINUS expression
    (82) expression -> expression . TIMES expression
    (83) expression -> expression . DIVIDE expression
    (84) expression -> expression . MOD expression

    RBRACKET        shift and go to state 167
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135


state 125

    (97) statement -> READLN LPAREN ID . RPAREN

    RPAREN          shift and go to state 168


state 126

    (98) statement -> WRITELN LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 169


state 127

    (99) statement -> WRITE LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 170


state 128

    (100) statement -> USES ID SEMICOLON .

    SEMICOLON       reduce using rule 100 (statement -> USES ID SEMICOLON .)
    END             reduce using rule 100 (statement -> USES ID SEMICOLON .)
    ELSE            reduce using rule 100 (statement -> USES ID SEMICOLON .)


state 129

    (57) assignment_statement -> variable COLON_EQUAL expression .
    (80) expression -> expression . PLUS expression
    (81) expression -> expression . MINUS expression
    (82) expression -> expression . TIMES expression
    (83) expression -> expression . DIVIDE expression
    (84) expression -> expression . MOD expression

    SEMICOLON       reduce using rule 57 (assignment_statement -> variable COLON_EQUAL expression .)
    END             reduce using rule 57 (assignment_statement -> variable COLON_EQUAL expression .)
    ELSE            reduce using rule 57 (assignment_statement -> variable COLON_EQUAL expression .)
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135


state 130

    (60) if_statement -> IF expression THEN . statement ELSE statement
    (50) statement -> . assignment_statement
    (51) statement -> . if_statement
    (52) statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (53) statement -> . while_statement
    (54) statement -> . procedure_call
    (55) statement -> . compound_statement
    (56) statement -> . empty
    (96) statement -> . READLN
    (97) statement -> . READLN LPAREN ID RPAREN
    (98) statement -> . WRITELN LPAREN expression_list RPAREN
    (99) statement -> . WRITE LPAREN expression_list RPAREN
    (100) statement -> . USES ID SEMICOLON
    (57) assignment_statement -> . variable COLON_EQUAL expression
    (60) if_statement -> . IF expression THEN statement ELSE statement
    (61) while_statement -> . WHILE expression DO statement
    (62) procedure_call -> . ID LPAREN expression_list RPAREN
    (46) compound_statement -> . BEGIN statement_list END
    (95) empty -> .
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    FOR             shift and go to state 64
    READLN          shift and go to state 70
    WRITELN         shift and go to state 71
    WRITE           shift and go to state 72
    USES            shift and go to state 73
    IF              shift and go to state 75
    WHILE           shift and go to state 76
    ID              shift and go to state 65
    BEGIN           shift and go to state 43
    ELSE            reduce using rule 95 (empty -> .)

    statement                      shift and go to state 171
    assignment_statement           shift and go to state 62
    if_statement                   shift and go to state 63
    while_statement                shift and go to state 66
    procedure_call                 shift and go to state 67
    compound_statement             shift and go to state 68
    empty                          shift and go to state 69
    variable                       shift and go to state 74

state 131

    (80) expression -> expression PLUS . expression
    (67) expression -> . simple_expression relop simple_expression
    (68) expression -> . simple_expression
    (80) expression -> . expression PLUS expression
    (81) expression -> . expression MINUS expression
    (82) expression -> . expression TIMES expression
    (83) expression -> . expression DIVIDE expression
    (84) expression -> . expression MOD expression
    (69) simple_expression -> . term simple_expression_tail
    (74) term -> . factor term_tail
    (44) factor -> . function_call
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . variable
    (87) factor -> . NUMBER
    (88) factor -> . STRING_LITERAL
    (43) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 106
    NUMBER          shift and go to state 108
    STRING_LITERAL  shift and go to state 109
    ID              shift and go to state 110

    expression                     shift and go to state 172
    simple_expression              shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    function_call                  shift and go to state 105
    variable                       shift and go to state 107

state 132

    (81) expression -> expression MINUS . expression
    (67) expression -> . simple_expression relop simple_expression
    (68) expression -> . simple_expression
    (80) expression -> . expression PLUS expression
    (81) expression -> . expression MINUS expression
    (82) expression -> . expression TIMES expression
    (83) expression -> . expression DIVIDE expression
    (84) expression -> . expression MOD expression
    (69) simple_expression -> . term simple_expression_tail
    (74) term -> . factor term_tail
    (44) factor -> . function_call
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . variable
    (87) factor -> . NUMBER
    (88) factor -> . STRING_LITERAL
    (43) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 106
    NUMBER          shift and go to state 108
    STRING_LITERAL  shift and go to state 109
    ID              shift and go to state 110

    expression                     shift and go to state 173
    simple_expression              shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    function_call                  shift and go to state 105
    variable                       shift and go to state 107

state 133

    (82) expression -> expression TIMES . expression
    (67) expression -> . simple_expression relop simple_expression
    (68) expression -> . simple_expression
    (80) expression -> . expression PLUS expression
    (81) expression -> . expression MINUS expression
    (82) expression -> . expression TIMES expression
    (83) expression -> . expression DIVIDE expression
    (84) expression -> . expression MOD expression
    (69) simple_expression -> . term simple_expression_tail
    (74) term -> . factor term_tail
    (44) factor -> . function_call
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . variable
    (87) factor -> . NUMBER
    (88) factor -> . STRING_LITERAL
    (43) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 106
    NUMBER          shift and go to state 108
    STRING_LITERAL  shift and go to state 109
    ID              shift and go to state 110

    expression                     shift and go to state 174
    simple_expression              shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    function_call                  shift and go to state 105
    variable                       shift and go to state 107

state 134

    (83) expression -> expression DIVIDE . expression
    (67) expression -> . simple_expression relop simple_expression
    (68) expression -> . simple_expression
    (80) expression -> . expression PLUS expression
    (81) expression -> . expression MINUS expression
    (82) expression -> . expression TIMES expression
    (83) expression -> . expression DIVIDE expression
    (84) expression -> . expression MOD expression
    (69) simple_expression -> . term simple_expression_tail
    (74) term -> . factor term_tail
    (44) factor -> . function_call
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . variable
    (87) factor -> . NUMBER
    (88) factor -> . STRING_LITERAL
    (43) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 106
    NUMBER          shift and go to state 108
    STRING_LITERAL  shift and go to state 109
    ID              shift and go to state 110

    expression                     shift and go to state 175
    simple_expression              shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    function_call                  shift and go to state 105
    variable                       shift and go to state 107

state 135

    (84) expression -> expression MOD . expression
    (67) expression -> . simple_expression relop simple_expression
    (68) expression -> . simple_expression
    (80) expression -> . expression PLUS expression
    (81) expression -> . expression MINUS expression
    (82) expression -> . expression TIMES expression
    (83) expression -> . expression DIVIDE expression
    (84) expression -> . expression MOD expression
    (69) simple_expression -> . term simple_expression_tail
    (74) term -> . factor term_tail
    (44) factor -> . function_call
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . variable
    (87) factor -> . NUMBER
    (88) factor -> . STRING_LITERAL
    (43) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 106
    NUMBER          shift and go to state 108
    STRING_LITERAL  shift and go to state 109
    ID              shift and go to state 110

    expression                     shift and go to state 176
    simple_expression              shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    function_call                  shift and go to state 105
    variable                       shift and go to state 107

state 136

    (67) expression -> simple_expression relop . simple_expression
    (69) simple_expression -> . term simple_expression_tail
    (74) term -> . factor term_tail
    (44) factor -> . function_call
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . variable
    (87) factor -> . NUMBER
    (88) factor -> . STRING_LITERAL
    (43) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 106
    NUMBER          shift and go to state 108
    STRING_LITERAL  shift and go to state 109
    ID              shift and go to state 110

    simple_expression              shift and go to state 177
    term                           shift and go to state 103
    factor                         shift and go to state 104
    function_call                  shift and go to state 105
    variable                       shift and go to state 107

state 137

    (89) relop -> LESS .

    LPAREN          reduce using rule 89 (relop -> LESS .)
    NUMBER          reduce using rule 89 (relop -> LESS .)
    STRING_LITERAL  reduce using rule 89 (relop -> LESS .)
    ID              reduce using rule 89 (relop -> LESS .)


state 138

    (90) relop -> LESS_EQUAL .

    LPAREN          reduce using rule 90 (relop -> LESS_EQUAL .)
    NUMBER          reduce using rule 90 (relop -> LESS_EQUAL .)
    STRING_LITERAL  reduce using rule 90 (relop -> LESS_EQUAL .)
    ID              reduce using rule 90 (relop -> LESS_EQUAL .)


state 139

    (91) relop -> GREAT .

    LPAREN          reduce using rule 91 (relop -> GREAT .)
    NUMBER          reduce using rule 91 (relop -> GREAT .)
    STRING_LITERAL  reduce using rule 91 (relop -> GREAT .)
    ID              reduce using rule 91 (relop -> GREAT .)


state 140

    (92) relop -> GREAT_EQUAL .

    LPAREN          reduce using rule 92 (relop -> GREAT_EQUAL .)
    NUMBER          reduce using rule 92 (relop -> GREAT_EQUAL .)
    STRING_LITERAL  reduce using rule 92 (relop -> GREAT_EQUAL .)
    ID              reduce using rule 92 (relop -> GREAT_EQUAL .)


state 141

    (93) relop -> EQUAL .

    LPAREN          reduce using rule 93 (relop -> EQUAL .)
    NUMBER          reduce using rule 93 (relop -> EQUAL .)
    STRING_LITERAL  reduce using rule 93 (relop -> EQUAL .)
    ID              reduce using rule 93 (relop -> EQUAL .)


state 142

    (94) relop -> DIFFERENT .

    LPAREN          reduce using rule 94 (relop -> DIFFERENT .)
    NUMBER          reduce using rule 94 (relop -> DIFFERENT .)
    STRING_LITERAL  reduce using rule 94 (relop -> DIFFERENT .)
    ID              reduce using rule 94 (relop -> DIFFERENT .)


state 143

    (69) simple_expression -> term simple_expression_tail .

    LESS            reduce using rule 69 (simple_expression -> term simple_expression_tail .)
    LESS_EQUAL      reduce using rule 69 (simple_expression -> term simple_expression_tail .)
    GREAT           reduce using rule 69 (simple_expression -> term simple_expression_tail .)
    GREAT_EQUAL     reduce using rule 69 (simple_expression -> term simple_expression_tail .)
    EQUAL           reduce using rule 69 (simple_expression -> term simple_expression_tail .)
    DIFFERENT       reduce using rule 69 (simple_expression -> term simple_expression_tail .)
    THEN            reduce using rule 69 (simple_expression -> term simple_expression_tail .)
    PLUS            reduce using rule 69 (simple_expression -> term simple_expression_tail .)
    MINUS           reduce using rule 69 (simple_expression -> term simple_expression_tail .)
    TIMES           reduce using rule 69 (simple_expression -> term simple_expression_tail .)
    DIVIDE          reduce using rule 69 (simple_expression -> term simple_expression_tail .)
    MOD             reduce using rule 69 (simple_expression -> term simple_expression_tail .)
    DO              reduce using rule 69 (simple_expression -> term simple_expression_tail .)
    COMMA           reduce using rule 69 (simple_expression -> term simple_expression_tail .)
    RPAREN          reduce using rule 69 (simple_expression -> term simple_expression_tail .)
    RBRACKET        reduce using rule 69 (simple_expression -> term simple_expression_tail .)
    SEMICOLON       reduce using rule 69 (simple_expression -> term simple_expression_tail .)
    END             reduce using rule 69 (simple_expression -> term simple_expression_tail .)
    ELSE            reduce using rule 69 (simple_expression -> term simple_expression_tail .)
    DOTDOT          reduce using rule 69 (simple_expression -> term simple_expression_tail .)
    TO              reduce using rule 69 (simple_expression -> term simple_expression_tail .)


state 144

    (70) simple_expression_tail -> addop . term
    (74) term -> . factor term_tail
    (44) factor -> . function_call
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . variable
    (87) factor -> . NUMBER
    (88) factor -> . STRING_LITERAL
    (43) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 106
    NUMBER          shift and go to state 108
    STRING_LITERAL  shift and go to state 109
    ID              shift and go to state 110

    term                           shift and go to state 178
    factor                         shift and go to state 104
    function_call                  shift and go to state 105
    variable                       shift and go to state 107

state 145

    (71) simple_expression_tail -> empty .

    LESS            reduce using rule 71 (simple_expression_tail -> empty .)
    LESS_EQUAL      reduce using rule 71 (simple_expression_tail -> empty .)
    GREAT           reduce using rule 71 (simple_expression_tail -> empty .)
    GREAT_EQUAL     reduce using rule 71 (simple_expression_tail -> empty .)
    EQUAL           reduce using rule 71 (simple_expression_tail -> empty .)
    DIFFERENT       reduce using rule 71 (simple_expression_tail -> empty .)
    THEN            reduce using rule 71 (simple_expression_tail -> empty .)
    PLUS            reduce using rule 71 (simple_expression_tail -> empty .)
    MINUS           reduce using rule 71 (simple_expression_tail -> empty .)
    TIMES           reduce using rule 71 (simple_expression_tail -> empty .)
    DIVIDE          reduce using rule 71 (simple_expression_tail -> empty .)
    MOD             reduce using rule 71 (simple_expression_tail -> empty .)
    DO              reduce using rule 71 (simple_expression_tail -> empty .)
    COMMA           reduce using rule 71 (simple_expression_tail -> empty .)
    RPAREN          reduce using rule 71 (simple_expression_tail -> empty .)
    RBRACKET        reduce using rule 71 (simple_expression_tail -> empty .)
    SEMICOLON       reduce using rule 71 (simple_expression_tail -> empty .)
    END             reduce using rule 71 (simple_expression_tail -> empty .)
    ELSE            reduce using rule 71 (simple_expression_tail -> empty .)
    DOTDOT          reduce using rule 71 (simple_expression_tail -> empty .)
    TO              reduce using rule 71 (simple_expression_tail -> empty .)


state 146

    (72) addop -> PLUS .

    LPAREN          reduce using rule 72 (addop -> PLUS .)
    NUMBER          reduce using rule 72 (addop -> PLUS .)
    STRING_LITERAL  reduce using rule 72 (addop -> PLUS .)
    ID              reduce using rule 72 (addop -> PLUS .)


state 147

    (73) addop -> MINUS .

    LPAREN          reduce using rule 73 (addop -> MINUS .)
    NUMBER          reduce using rule 73 (addop -> MINUS .)
    STRING_LITERAL  reduce using rule 73 (addop -> MINUS .)
    ID              reduce using rule 73 (addop -> MINUS .)


state 148

    (74) term -> factor term_tail .

    PLUS            reduce using rule 74 (term -> factor term_tail .)
    MINUS           reduce using rule 74 (term -> factor term_tail .)
    LESS            reduce using rule 74 (term -> factor term_tail .)
    LESS_EQUAL      reduce using rule 74 (term -> factor term_tail .)
    GREAT           reduce using rule 74 (term -> factor term_tail .)
    GREAT_EQUAL     reduce using rule 74 (term -> factor term_tail .)
    EQUAL           reduce using rule 74 (term -> factor term_tail .)
    DIFFERENT       reduce using rule 74 (term -> factor term_tail .)
    THEN            reduce using rule 74 (term -> factor term_tail .)
    TIMES           reduce using rule 74 (term -> factor term_tail .)
    DIVIDE          reduce using rule 74 (term -> factor term_tail .)
    MOD             reduce using rule 74 (term -> factor term_tail .)
    DO              reduce using rule 74 (term -> factor term_tail .)
    COMMA           reduce using rule 74 (term -> factor term_tail .)
    RPAREN          reduce using rule 74 (term -> factor term_tail .)
    RBRACKET        reduce using rule 74 (term -> factor term_tail .)
    SEMICOLON       reduce using rule 74 (term -> factor term_tail .)
    END             reduce using rule 74 (term -> factor term_tail .)
    ELSE            reduce using rule 74 (term -> factor term_tail .)
    DOTDOT          reduce using rule 74 (term -> factor term_tail .)
    TO              reduce using rule 74 (term -> factor term_tail .)


state 149

    (75) term_tail -> mulop . factor
    (44) factor -> . function_call
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . variable
    (87) factor -> . NUMBER
    (88) factor -> . STRING_LITERAL
    (43) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 106
    NUMBER          shift and go to state 108
    STRING_LITERAL  shift and go to state 109
    ID              shift and go to state 110

    factor                         shift and go to state 179
    function_call                  shift and go to state 105
    variable                       shift and go to state 107

state 150

    (76) term_tail -> empty .

    PLUS            reduce using rule 76 (term_tail -> empty .)
    MINUS           reduce using rule 76 (term_tail -> empty .)
    LESS            reduce using rule 76 (term_tail -> empty .)
    LESS_EQUAL      reduce using rule 76 (term_tail -> empty .)
    GREAT           reduce using rule 76 (term_tail -> empty .)
    GREAT_EQUAL     reduce using rule 76 (term_tail -> empty .)
    EQUAL           reduce using rule 76 (term_tail -> empty .)
    DIFFERENT       reduce using rule 76 (term_tail -> empty .)
    THEN            reduce using rule 76 (term_tail -> empty .)
    TIMES           reduce using rule 76 (term_tail -> empty .)
    DIVIDE          reduce using rule 76 (term_tail -> empty .)
    MOD             reduce using rule 76 (term_tail -> empty .)
    DO              reduce using rule 76 (term_tail -> empty .)
    COMMA           reduce using rule 76 (term_tail -> empty .)
    RPAREN          reduce using rule 76 (term_tail -> empty .)
    RBRACKET        reduce using rule 76 (term_tail -> empty .)
    SEMICOLON       reduce using rule 76 (term_tail -> empty .)
    END             reduce using rule 76 (term_tail -> empty .)
    ELSE            reduce using rule 76 (term_tail -> empty .)
    DOTDOT          reduce using rule 76 (term_tail -> empty .)
    TO              reduce using rule 76 (term_tail -> empty .)


state 151

    (77) mulop -> TIMES .

    LPAREN          reduce using rule 77 (mulop -> TIMES .)
    NUMBER          reduce using rule 77 (mulop -> TIMES .)
    STRING_LITERAL  reduce using rule 77 (mulop -> TIMES .)
    ID              reduce using rule 77 (mulop -> TIMES .)


state 152

    (78) mulop -> DIVIDE .

    LPAREN          reduce using rule 78 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 78 (mulop -> DIVIDE .)
    STRING_LITERAL  reduce using rule 78 (mulop -> DIVIDE .)
    ID              reduce using rule 78 (mulop -> DIVIDE .)


state 153

    (79) mulop -> DIV .

    LPAREN          reduce using rule 79 (mulop -> DIV .)
    NUMBER          reduce using rule 79 (mulop -> DIV .)
    STRING_LITERAL  reduce using rule 79 (mulop -> DIV .)
    ID              reduce using rule 79 (mulop -> DIV .)


state 154

    (85) factor -> LPAREN expression . RPAREN
    (80) expression -> expression . PLUS expression
    (81) expression -> expression . MINUS expression
    (82) expression -> expression . TIMES expression
    (83) expression -> expression . DIVIDE expression
    (84) expression -> expression . MOD expression

    RPAREN          shift and go to state 180
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135


state 155

    (43) function_call -> ID LPAREN . expression_list RPAREN
    (63) expression_list -> . expression expression_list_tail
    (66) expression_list -> . empty
    (67) expression -> . simple_expression relop simple_expression
    (68) expression -> . simple_expression
    (80) expression -> . expression PLUS expression
    (81) expression -> . expression MINUS expression
    (82) expression -> . expression TIMES expression
    (83) expression -> . expression DIVIDE expression
    (84) expression -> . expression MOD expression
    (95) empty -> .
    (69) simple_expression -> . term simple_expression_tail
    (74) term -> . factor term_tail
    (44) factor -> . function_call
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . variable
    (87) factor -> . NUMBER
    (88) factor -> . STRING_LITERAL
    (43) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    RPAREN          reduce using rule 95 (empty -> .)
    LPAREN          shift and go to state 106
    NUMBER          shift and go to state 108
    STRING_LITERAL  shift and go to state 109
    ID              shift and go to state 110

    expression_list                shift and go to state 181
    expression                     shift and go to state 122
    empty                          shift and go to state 123
    simple_expression              shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    function_call                  shift and go to state 105
    variable                       shift and go to state 107

state 156

    (61) while_statement -> WHILE expression DO . statement
    (50) statement -> . assignment_statement
    (51) statement -> . if_statement
    (52) statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (53) statement -> . while_statement
    (54) statement -> . procedure_call
    (55) statement -> . compound_statement
    (56) statement -> . empty
    (96) statement -> . READLN
    (97) statement -> . READLN LPAREN ID RPAREN
    (98) statement -> . WRITELN LPAREN expression_list RPAREN
    (99) statement -> . WRITE LPAREN expression_list RPAREN
    (100) statement -> . USES ID SEMICOLON
    (57) assignment_statement -> . variable COLON_EQUAL expression
    (60) if_statement -> . IF expression THEN statement ELSE statement
    (61) while_statement -> . WHILE expression DO statement
    (62) procedure_call -> . ID LPAREN expression_list RPAREN
    (46) compound_statement -> . BEGIN statement_list END
    (95) empty -> .
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    FOR             shift and go to state 64
    READLN          shift and go to state 70
    WRITELN         shift and go to state 71
    WRITE           shift and go to state 72
    USES            shift and go to state 73
    IF              shift and go to state 75
    WHILE           shift and go to state 76
    ID              shift and go to state 65
    BEGIN           shift and go to state 43
    SEMICOLON       reduce using rule 95 (empty -> .)
    END             reduce using rule 95 (empty -> .)
    ELSE            reduce using rule 95 (empty -> .)

    statement                      shift and go to state 182
    assignment_statement           shift and go to state 62
    if_statement                   shift and go to state 63
    while_statement                shift and go to state 66
    procedure_call                 shift and go to state 67
    compound_statement             shift and go to state 68
    empty                          shift and go to state 69
    variable                       shift and go to state 74

state 157

    (41) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN . COLON type_specifier SEMICOLON block SEMICOLON

    COLON           shift and go to state 183


state 158

    (45) parameter_list -> id_list COLON . type_specifier
    (34) type_specifier -> . ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier
    (35) type_specifier -> . INTEGER
    (36) type_specifier -> . ID
    (37) type_specifier -> . LONGINT

    ARRAY           shift and go to state 84
    INTEGER         shift and go to state 85
    ID              shift and go to state 82
    LONGINT         shift and go to state 86

    type_specifier                 shift and go to state 184

state 159

    (40) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN . SEMICOLON block SEMICOLON

    SEMICOLON       shift and go to state 185


state 160

    (34) type_specifier -> ARRAY LBRACKET expression . DOTDOT expression RBRACKET OF type_specifier
    (80) expression -> expression . PLUS expression
    (81) expression -> expression . MINUS expression
    (82) expression -> expression . TIMES expression
    (83) expression -> expression . DIVIDE expression
    (84) expression -> expression . MOD expression

    DOTDOT          shift and go to state 186
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135


state 161

    (48) statement_list_tail -> SEMICOLON statement statement_list_tail .

    END             reduce using rule 48 (statement_list_tail -> SEMICOLON statement statement_list_tail .)


state 162

    (52) statement -> FOR ID COLON_EQUAL expression . TO expression DO statement
    (80) expression -> expression . PLUS expression
    (81) expression -> expression . MINUS expression
    (82) expression -> expression . TIMES expression
    (83) expression -> expression . DIVIDE expression
    (84) expression -> expression . MOD expression

    TO              shift and go to state 187
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135


state 163

    (62) procedure_call -> ID LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 62 (procedure_call -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 62 (procedure_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 62 (procedure_call -> ID LPAREN expression_list RPAREN .)


state 164

    (63) expression_list -> expression expression_list_tail .

    RPAREN          reduce using rule 63 (expression_list -> expression expression_list_tail .)


state 165

    (64) expression_list_tail -> COMMA . expression expression_list_tail
    (67) expression -> . simple_expression relop simple_expression
    (68) expression -> . simple_expression
    (80) expression -> . expression PLUS expression
    (81) expression -> . expression MINUS expression
    (82) expression -> . expression TIMES expression
    (83) expression -> . expression DIVIDE expression
    (84) expression -> . expression MOD expression
    (69) simple_expression -> . term simple_expression_tail
    (74) term -> . factor term_tail
    (44) factor -> . function_call
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . variable
    (87) factor -> . NUMBER
    (88) factor -> . STRING_LITERAL
    (43) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 106
    NUMBER          shift and go to state 108
    STRING_LITERAL  shift and go to state 109
    ID              shift and go to state 110

    expression                     shift and go to state 188
    simple_expression              shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    function_call                  shift and go to state 105
    variable                       shift and go to state 107

state 166

    (65) expression_list_tail -> empty .

    RPAREN          reduce using rule 65 (expression_list_tail -> empty .)


state 167

    (59) variable -> ID LBRACKET expression RBRACKET .

    COLON_EQUAL     reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    DIV             reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    LESS            reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    LESS_EQUAL      reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    GREAT           reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    GREAT_EQUAL     reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    DIFFERENT       reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    THEN            reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    MOD             reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    DO              reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    END             reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    DOTDOT          reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    TO              reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)


state 168

    (97) statement -> READLN LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 97 (statement -> READLN LPAREN ID RPAREN .)
    END             reduce using rule 97 (statement -> READLN LPAREN ID RPAREN .)
    ELSE            reduce using rule 97 (statement -> READLN LPAREN ID RPAREN .)


state 169

    (98) statement -> WRITELN LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 98 (statement -> WRITELN LPAREN expression_list RPAREN .)
    END             reduce using rule 98 (statement -> WRITELN LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 98 (statement -> WRITELN LPAREN expression_list RPAREN .)


state 170

    (99) statement -> WRITE LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 99 (statement -> WRITE LPAREN expression_list RPAREN .)
    END             reduce using rule 99 (statement -> WRITE LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 99 (statement -> WRITE LPAREN expression_list RPAREN .)


state 171

    (60) if_statement -> IF expression THEN statement . ELSE statement

    ELSE            shift and go to state 189


state 172

    (80) expression -> expression PLUS expression .
    (80) expression -> expression . PLUS expression
    (81) expression -> expression . MINUS expression
    (82) expression -> expression . TIMES expression
    (83) expression -> expression . DIVIDE expression
    (84) expression -> expression . MOD expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    THEN            reduce using rule 80 (expression -> expression PLUS expression .)
    DO              reduce using rule 80 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 80 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 80 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 80 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 80 (expression -> expression PLUS expression .)
    END             reduce using rule 80 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 80 (expression -> expression PLUS expression .)
    DOTDOT          reduce using rule 80 (expression -> expression PLUS expression .)
    TO              reduce using rule 80 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135

  ! PLUS            [ reduce using rule 80 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 80 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 80 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 80 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 80 (expression -> expression PLUS expression .) ]


state 173

    (81) expression -> expression MINUS expression .
    (80) expression -> expression . PLUS expression
    (81) expression -> expression . MINUS expression
    (82) expression -> expression . TIMES expression
    (83) expression -> expression . DIVIDE expression
    (84) expression -> expression . MOD expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    THEN            reduce using rule 81 (expression -> expression MINUS expression .)
    DO              reduce using rule 81 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 81 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 81 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 81 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 81 (expression -> expression MINUS expression .)
    END             reduce using rule 81 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 81 (expression -> expression MINUS expression .)
    DOTDOT          reduce using rule 81 (expression -> expression MINUS expression .)
    TO              reduce using rule 81 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135

  ! PLUS            [ reduce using rule 81 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 81 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 81 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 81 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 81 (expression -> expression MINUS expression .) ]


state 174

    (82) expression -> expression TIMES expression .
    (80) expression -> expression . PLUS expression
    (81) expression -> expression . MINUS expression
    (82) expression -> expression . TIMES expression
    (83) expression -> expression . DIVIDE expression
    (84) expression -> expression . MOD expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    THEN            reduce using rule 82 (expression -> expression TIMES expression .)
    DO              reduce using rule 82 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 82 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 82 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 82 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 82 (expression -> expression TIMES expression .)
    END             reduce using rule 82 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 82 (expression -> expression TIMES expression .)
    DOTDOT          reduce using rule 82 (expression -> expression TIMES expression .)
    TO              reduce using rule 82 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135

  ! PLUS            [ reduce using rule 82 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 82 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 82 (expression -> expression TIMES expression .) ]
  ! DIVIDE          [ reduce using rule 82 (expression -> expression TIMES expression .) ]
  ! MOD             [ reduce using rule 82 (expression -> expression TIMES expression .) ]


state 175

    (83) expression -> expression DIVIDE expression .
    (80) expression -> expression . PLUS expression
    (81) expression -> expression . MINUS expression
    (82) expression -> expression . TIMES expression
    (83) expression -> expression . DIVIDE expression
    (84) expression -> expression . MOD expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    THEN            reduce using rule 83 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 83 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 83 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 83 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 83 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 83 (expression -> expression DIVIDE expression .)
    END             reduce using rule 83 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 83 (expression -> expression DIVIDE expression .)
    DOTDOT          reduce using rule 83 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 83 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135

  ! PLUS            [ reduce using rule 83 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 83 (expression -> expression DIVIDE expression .) ]
  ! TIMES           [ reduce using rule 83 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 83 (expression -> expression DIVIDE expression .) ]
  ! MOD             [ reduce using rule 83 (expression -> expression DIVIDE expression .) ]


state 176

    (84) expression -> expression MOD expression .
    (80) expression -> expression . PLUS expression
    (81) expression -> expression . MINUS expression
    (82) expression -> expression . TIMES expression
    (83) expression -> expression . DIVIDE expression
    (84) expression -> expression . MOD expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    THEN            reduce using rule 84 (expression -> expression MOD expression .)
    DO              reduce using rule 84 (expression -> expression MOD expression .)
    COMMA           reduce using rule 84 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 84 (expression -> expression MOD expression .)
    RBRACKET        reduce using rule 84 (expression -> expression MOD expression .)
    SEMICOLON       reduce using rule 84 (expression -> expression MOD expression .)
    END             reduce using rule 84 (expression -> expression MOD expression .)
    ELSE            reduce using rule 84 (expression -> expression MOD expression .)
    DOTDOT          reduce using rule 84 (expression -> expression MOD expression .)
    TO              reduce using rule 84 (expression -> expression MOD expression .)
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135

  ! PLUS            [ reduce using rule 84 (expression -> expression MOD expression .) ]
  ! MINUS           [ reduce using rule 84 (expression -> expression MOD expression .) ]
  ! TIMES           [ reduce using rule 84 (expression -> expression MOD expression .) ]
  ! DIVIDE          [ reduce using rule 84 (expression -> expression MOD expression .) ]
  ! MOD             [ reduce using rule 84 (expression -> expression MOD expression .) ]


state 177

    (67) expression -> simple_expression relop simple_expression .

    THEN            reduce using rule 67 (expression -> simple_expression relop simple_expression .)
    PLUS            reduce using rule 67 (expression -> simple_expression relop simple_expression .)
    MINUS           reduce using rule 67 (expression -> simple_expression relop simple_expression .)
    TIMES           reduce using rule 67 (expression -> simple_expression relop simple_expression .)
    DIVIDE          reduce using rule 67 (expression -> simple_expression relop simple_expression .)
    MOD             reduce using rule 67 (expression -> simple_expression relop simple_expression .)
    DO              reduce using rule 67 (expression -> simple_expression relop simple_expression .)
    COMMA           reduce using rule 67 (expression -> simple_expression relop simple_expression .)
    RPAREN          reduce using rule 67 (expression -> simple_expression relop simple_expression .)
    RBRACKET        reduce using rule 67 (expression -> simple_expression relop simple_expression .)
    SEMICOLON       reduce using rule 67 (expression -> simple_expression relop simple_expression .)
    END             reduce using rule 67 (expression -> simple_expression relop simple_expression .)
    ELSE            reduce using rule 67 (expression -> simple_expression relop simple_expression .)
    DOTDOT          reduce using rule 67 (expression -> simple_expression relop simple_expression .)
    TO              reduce using rule 67 (expression -> simple_expression relop simple_expression .)


state 178

    (70) simple_expression_tail -> addop term .

    LESS            reduce using rule 70 (simple_expression_tail -> addop term .)
    LESS_EQUAL      reduce using rule 70 (simple_expression_tail -> addop term .)
    GREAT           reduce using rule 70 (simple_expression_tail -> addop term .)
    GREAT_EQUAL     reduce using rule 70 (simple_expression_tail -> addop term .)
    EQUAL           reduce using rule 70 (simple_expression_tail -> addop term .)
    DIFFERENT       reduce using rule 70 (simple_expression_tail -> addop term .)
    THEN            reduce using rule 70 (simple_expression_tail -> addop term .)
    PLUS            reduce using rule 70 (simple_expression_tail -> addop term .)
    MINUS           reduce using rule 70 (simple_expression_tail -> addop term .)
    TIMES           reduce using rule 70 (simple_expression_tail -> addop term .)
    DIVIDE          reduce using rule 70 (simple_expression_tail -> addop term .)
    MOD             reduce using rule 70 (simple_expression_tail -> addop term .)
    DO              reduce using rule 70 (simple_expression_tail -> addop term .)
    COMMA           reduce using rule 70 (simple_expression_tail -> addop term .)
    RPAREN          reduce using rule 70 (simple_expression_tail -> addop term .)
    RBRACKET        reduce using rule 70 (simple_expression_tail -> addop term .)
    SEMICOLON       reduce using rule 70 (simple_expression_tail -> addop term .)
    END             reduce using rule 70 (simple_expression_tail -> addop term .)
    ELSE            reduce using rule 70 (simple_expression_tail -> addop term .)
    DOTDOT          reduce using rule 70 (simple_expression_tail -> addop term .)
    TO              reduce using rule 70 (simple_expression_tail -> addop term .)


state 179

    (75) term_tail -> mulop factor .

    PLUS            reduce using rule 75 (term_tail -> mulop factor .)
    MINUS           reduce using rule 75 (term_tail -> mulop factor .)
    LESS            reduce using rule 75 (term_tail -> mulop factor .)
    LESS_EQUAL      reduce using rule 75 (term_tail -> mulop factor .)
    GREAT           reduce using rule 75 (term_tail -> mulop factor .)
    GREAT_EQUAL     reduce using rule 75 (term_tail -> mulop factor .)
    EQUAL           reduce using rule 75 (term_tail -> mulop factor .)
    DIFFERENT       reduce using rule 75 (term_tail -> mulop factor .)
    THEN            reduce using rule 75 (term_tail -> mulop factor .)
    TIMES           reduce using rule 75 (term_tail -> mulop factor .)
    DIVIDE          reduce using rule 75 (term_tail -> mulop factor .)
    MOD             reduce using rule 75 (term_tail -> mulop factor .)
    DO              reduce using rule 75 (term_tail -> mulop factor .)
    COMMA           reduce using rule 75 (term_tail -> mulop factor .)
    RPAREN          reduce using rule 75 (term_tail -> mulop factor .)
    RBRACKET        reduce using rule 75 (term_tail -> mulop factor .)
    SEMICOLON       reduce using rule 75 (term_tail -> mulop factor .)
    END             reduce using rule 75 (term_tail -> mulop factor .)
    ELSE            reduce using rule 75 (term_tail -> mulop factor .)
    DOTDOT          reduce using rule 75 (term_tail -> mulop factor .)
    TO              reduce using rule 75 (term_tail -> mulop factor .)


state 180

    (85) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    DIV             reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    LESS_EQUAL      reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    GREAT           reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    GREAT_EQUAL     reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    DIFFERENT       reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    DOTDOT          reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 85 (factor -> LPAREN expression RPAREN .)


state 181

    (43) function_call -> ID LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 190


state 182

    (61) while_statement -> WHILE expression DO statement .

    SEMICOLON       reduce using rule 61 (while_statement -> WHILE expression DO statement .)
    END             reduce using rule 61 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 61 (while_statement -> WHILE expression DO statement .)


state 183

    (41) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON . type_specifier SEMICOLON block SEMICOLON
    (34) type_specifier -> . ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier
    (35) type_specifier -> . INTEGER
    (36) type_specifier -> . ID
    (37) type_specifier -> . LONGINT

    ARRAY           shift and go to state 84
    INTEGER         shift and go to state 85
    ID              shift and go to state 82
    LONGINT         shift and go to state 86

    type_specifier                 shift and go to state 191

state 184

    (45) parameter_list -> id_list COLON type_specifier .

    RPAREN          reduce using rule 45 (parameter_list -> id_list COLON type_specifier .)


state 185

    (40) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON . block SEMICOLON
    (20) block -> . declarations compound_statement
    (21) declarations -> . VAR declaration_list procedure_declarations
    (22) declarations -> . VAR declaration_list
    (23) declarations -> . procedure_declarations
    (24) declarations -> . empty
    (42) declarations -> . function_declaration
    (38) procedure_declarations -> . procedure_declaration
    (39) procedure_declarations -> . procedure_declarations procedure_declaration
    (95) empty -> .
    (41) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (40) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON

    VAR             shift and go to state 17
    BEGIN           reduce using rule 95 (empty -> .)
    FUNCTION        shift and go to state 22
    PROCEDURE       shift and go to state 23

    block                          shift and go to state 192
    declarations                   shift and go to state 16
    procedure_declarations         shift and go to state 18
    empty                          shift and go to state 19
    function_declaration           shift and go to state 20
    procedure_declaration          shift and go to state 21

state 186

    (34) type_specifier -> ARRAY LBRACKET expression DOTDOT . expression RBRACKET OF type_specifier
    (67) expression -> . simple_expression relop simple_expression
    (68) expression -> . simple_expression
    (80) expression -> . expression PLUS expression
    (81) expression -> . expression MINUS expression
    (82) expression -> . expression TIMES expression
    (83) expression -> . expression DIVIDE expression
    (84) expression -> . expression MOD expression
    (69) simple_expression -> . term simple_expression_tail
    (74) term -> . factor term_tail
    (44) factor -> . function_call
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . variable
    (87) factor -> . NUMBER
    (88) factor -> . STRING_LITERAL
    (43) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 106
    NUMBER          shift and go to state 108
    STRING_LITERAL  shift and go to state 109
    ID              shift and go to state 110

    expression                     shift and go to state 193
    simple_expression              shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    function_call                  shift and go to state 105
    variable                       shift and go to state 107

state 187

    (52) statement -> FOR ID COLON_EQUAL expression TO . expression DO statement
    (67) expression -> . simple_expression relop simple_expression
    (68) expression -> . simple_expression
    (80) expression -> . expression PLUS expression
    (81) expression -> . expression MINUS expression
    (82) expression -> . expression TIMES expression
    (83) expression -> . expression DIVIDE expression
    (84) expression -> . expression MOD expression
    (69) simple_expression -> . term simple_expression_tail
    (74) term -> . factor term_tail
    (44) factor -> . function_call
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . variable
    (87) factor -> . NUMBER
    (88) factor -> . STRING_LITERAL
    (43) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 106
    NUMBER          shift and go to state 108
    STRING_LITERAL  shift and go to state 109
    ID              shift and go to state 110

    expression                     shift and go to state 194
    simple_expression              shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    function_call                  shift and go to state 105
    variable                       shift and go to state 107

state 188

    (64) expression_list_tail -> COMMA expression . expression_list_tail
    (80) expression -> expression . PLUS expression
    (81) expression -> expression . MINUS expression
    (82) expression -> expression . TIMES expression
    (83) expression -> expression . DIVIDE expression
    (84) expression -> expression . MOD expression
    (64) expression_list_tail -> . COMMA expression expression_list_tail
    (65) expression_list_tail -> . empty
    (95) empty -> .

    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135
    COMMA           shift and go to state 165
    RPAREN          reduce using rule 95 (empty -> .)

    expression_list_tail           shift and go to state 195
    empty                          shift and go to state 166

state 189

    (60) if_statement -> IF expression THEN statement ELSE . statement
    (50) statement -> . assignment_statement
    (51) statement -> . if_statement
    (52) statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (53) statement -> . while_statement
    (54) statement -> . procedure_call
    (55) statement -> . compound_statement
    (56) statement -> . empty
    (96) statement -> . READLN
    (97) statement -> . READLN LPAREN ID RPAREN
    (98) statement -> . WRITELN LPAREN expression_list RPAREN
    (99) statement -> . WRITE LPAREN expression_list RPAREN
    (100) statement -> . USES ID SEMICOLON
    (57) assignment_statement -> . variable COLON_EQUAL expression
    (60) if_statement -> . IF expression THEN statement ELSE statement
    (61) while_statement -> . WHILE expression DO statement
    (62) procedure_call -> . ID LPAREN expression_list RPAREN
    (46) compound_statement -> . BEGIN statement_list END
    (95) empty -> .
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    FOR             shift and go to state 64
    READLN          shift and go to state 70
    WRITELN         shift and go to state 71
    WRITE           shift and go to state 72
    USES            shift and go to state 73
    IF              shift and go to state 75
    WHILE           shift and go to state 76
    ID              shift and go to state 65
    BEGIN           shift and go to state 43
    SEMICOLON       reduce using rule 95 (empty -> .)
    END             reduce using rule 95 (empty -> .)
    ELSE            reduce using rule 95 (empty -> .)

    statement                      shift and go to state 196
    assignment_statement           shift and go to state 62
    if_statement                   shift and go to state 63
    while_statement                shift and go to state 66
    procedure_call                 shift and go to state 67
    compound_statement             shift and go to state 68
    empty                          shift and go to state 69
    variable                       shift and go to state 74

state 190

    (43) function_call -> ID LPAREN expression_list RPAREN .

    TIMES           reduce using rule 43 (function_call -> ID LPAREN expression_list RPAREN .)
    DIVIDE          reduce using rule 43 (function_call -> ID LPAREN expression_list RPAREN .)
    DIV             reduce using rule 43 (function_call -> ID LPAREN expression_list RPAREN .)
    PLUS            reduce using rule 43 (function_call -> ID LPAREN expression_list RPAREN .)
    MINUS           reduce using rule 43 (function_call -> ID LPAREN expression_list RPAREN .)
    LESS            reduce using rule 43 (function_call -> ID LPAREN expression_list RPAREN .)
    LESS_EQUAL      reduce using rule 43 (function_call -> ID LPAREN expression_list RPAREN .)
    GREAT           reduce using rule 43 (function_call -> ID LPAREN expression_list RPAREN .)
    GREAT_EQUAL     reduce using rule 43 (function_call -> ID LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 43 (function_call -> ID LPAREN expression_list RPAREN .)
    DIFFERENT       reduce using rule 43 (function_call -> ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 43 (function_call -> ID LPAREN expression_list RPAREN .)
    MOD             reduce using rule 43 (function_call -> ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 43 (function_call -> ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 43 (function_call -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 43 (function_call -> ID LPAREN expression_list RPAREN .)
    RBRACKET        reduce using rule 43 (function_call -> ID LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 43 (function_call -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 43 (function_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 43 (function_call -> ID LPAREN expression_list RPAREN .)
    DOTDOT          reduce using rule 43 (function_call -> ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 43 (function_call -> ID LPAREN expression_list RPAREN .)


state 191

    (41) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier . SEMICOLON block SEMICOLON

    SEMICOLON       shift and go to state 197


state 192

    (40) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 198


state 193

    (34) type_specifier -> ARRAY LBRACKET expression DOTDOT expression . RBRACKET OF type_specifier
    (80) expression -> expression . PLUS expression
    (81) expression -> expression . MINUS expression
    (82) expression -> expression . TIMES expression
    (83) expression -> expression . DIVIDE expression
    (84) expression -> expression . MOD expression

    RBRACKET        shift and go to state 199
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135


state 194

    (52) statement -> FOR ID COLON_EQUAL expression TO expression . DO statement
    (80) expression -> expression . PLUS expression
    (81) expression -> expression . MINUS expression
    (82) expression -> expression . TIMES expression
    (83) expression -> expression . DIVIDE expression
    (84) expression -> expression . MOD expression

    DO              shift and go to state 200
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135


state 195

    (64) expression_list_tail -> COMMA expression expression_list_tail .

    RPAREN          reduce using rule 64 (expression_list_tail -> COMMA expression expression_list_tail .)


state 196

    (60) if_statement -> IF expression THEN statement ELSE statement .

    SEMICOLON       reduce using rule 60 (if_statement -> IF expression THEN statement ELSE statement .)
    END             reduce using rule 60 (if_statement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 60 (if_statement -> IF expression THEN statement ELSE statement .)


state 197

    (41) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON . block SEMICOLON
    (20) block -> . declarations compound_statement
    (21) declarations -> . VAR declaration_list procedure_declarations
    (22) declarations -> . VAR declaration_list
    (23) declarations -> . procedure_declarations
    (24) declarations -> . empty
    (42) declarations -> . function_declaration
    (38) procedure_declarations -> . procedure_declaration
    (39) procedure_declarations -> . procedure_declarations procedure_declaration
    (95) empty -> .
    (41) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (40) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON

    VAR             shift and go to state 17
    BEGIN           reduce using rule 95 (empty -> .)
    FUNCTION        shift and go to state 22
    PROCEDURE       shift and go to state 23

    block                          shift and go to state 201
    declarations                   shift and go to state 16
    procedure_declarations         shift and go to state 18
    empty                          shift and go to state 19
    function_declaration           shift and go to state 20
    procedure_declaration          shift and go to state 21

state 198

    (40) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .

    PROCEDURE       reduce using rule 40 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    BEGIN           reduce using rule 40 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)


state 199

    (34) type_specifier -> ARRAY LBRACKET expression DOTDOT expression RBRACKET . OF type_specifier

    OF              shift and go to state 202


state 200

    (52) statement -> FOR ID COLON_EQUAL expression TO expression DO . statement
    (50) statement -> . assignment_statement
    (51) statement -> . if_statement
    (52) statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (53) statement -> . while_statement
    (54) statement -> . procedure_call
    (55) statement -> . compound_statement
    (56) statement -> . empty
    (96) statement -> . READLN
    (97) statement -> . READLN LPAREN ID RPAREN
    (98) statement -> . WRITELN LPAREN expression_list RPAREN
    (99) statement -> . WRITE LPAREN expression_list RPAREN
    (100) statement -> . USES ID SEMICOLON
    (57) assignment_statement -> . variable COLON_EQUAL expression
    (60) if_statement -> . IF expression THEN statement ELSE statement
    (61) while_statement -> . WHILE expression DO statement
    (62) procedure_call -> . ID LPAREN expression_list RPAREN
    (46) compound_statement -> . BEGIN statement_list END
    (95) empty -> .
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    FOR             shift and go to state 64
    READLN          shift and go to state 70
    WRITELN         shift and go to state 71
    WRITE           shift and go to state 72
    USES            shift and go to state 73
    IF              shift and go to state 75
    WHILE           shift and go to state 76
    ID              shift and go to state 65
    BEGIN           shift and go to state 43
    SEMICOLON       reduce using rule 95 (empty -> .)
    END             reduce using rule 95 (empty -> .)
    ELSE            reduce using rule 95 (empty -> .)

    statement                      shift and go to state 203
    assignment_statement           shift and go to state 62
    if_statement                   shift and go to state 63
    while_statement                shift and go to state 66
    procedure_call                 shift and go to state 67
    compound_statement             shift and go to state 68
    empty                          shift and go to state 69
    variable                       shift and go to state 74

state 201

    (41) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 204


state 202

    (34) type_specifier -> ARRAY LBRACKET expression DOTDOT expression RBRACKET OF . type_specifier
    (34) type_specifier -> . ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier
    (35) type_specifier -> . INTEGER
    (36) type_specifier -> . ID
    (37) type_specifier -> . LONGINT

    ARRAY           shift and go to state 84
    INTEGER         shift and go to state 85
    ID              shift and go to state 82
    LONGINT         shift and go to state 86

    type_specifier                 shift and go to state 205

state 203

    (52) statement -> FOR ID COLON_EQUAL expression TO expression DO statement .

    SEMICOLON       reduce using rule 52 (statement -> FOR ID COLON_EQUAL expression TO expression DO statement .)
    END             reduce using rule 52 (statement -> FOR ID COLON_EQUAL expression TO expression DO statement .)
    ELSE            reduce using rule 52 (statement -> FOR ID COLON_EQUAL expression TO expression DO statement .)


state 204

    (41) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .

    BEGIN           reduce using rule 41 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)


state 205

    (34) type_specifier -> ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier .

    SEMICOLON       reduce using rule 34 (type_specifier -> ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier .)
    RPAREN          reduce using rule 34 (type_specifier -> ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CONST in state 4 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 4 resolved as shift
WARNING: shift/reduce conflict for VAR in state 4 resolved as shift
WARNING: shift/reduce conflict for VAR in state 6 resolved as shift
WARNING: shift/reduce conflict for VAR in state 7 resolved as shift
WARNING: shift/reduce conflict for VAR in state 8 resolved as shift
WARNING: shift/reduce conflict for VAR in state 24 resolved as shift
WARNING: shift/reduce conflict for VAR in state 25 resolved as shift
WARNING: shift/reduce conflict for VAR in state 27 resolved as shift
WARNING: shift/reduce conflict for VAR in state 48 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 103 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 104 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 104 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 172 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 172 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 172 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 172 resolved as shift
WARNING: shift/reduce conflict for MOD in state 172 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 173 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 173 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 173 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 173 resolved as shift
WARNING: shift/reduce conflict for MOD in state 173 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 174 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 174 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 174 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 174 resolved as shift
WARNING: shift/reduce conflict for MOD in state 174 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 175 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 175 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 175 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 175 resolved as shift
WARNING: shift/reduce conflict for MOD in state 175 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 176 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 176 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 176 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 176 resolved as shift
WARNING: shift/reduce conflict for MOD in state 176 resolved as shift
