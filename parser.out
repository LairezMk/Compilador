Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    FALSE
    GOTO
    LABEL
    LBLOCK
    NIL
    PACKED
    RBLOCK
    READLINE
    SUBRANGE
    TRUE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON declaration_sections block DOT
Rule 2     declaration_sections -> declaration_sections declaration_section
Rule 3     declaration_sections -> empty
Rule 4     declaration_section -> uses_opt
Rule 5     declaration_section -> constant_declaration
Rule 6     declaration_section -> type_declaration
Rule 7     declaration_section -> var_declaration
Rule 8     declaration_section -> procedure_declarations
Rule 9     declaration_section -> function_declaration
Rule 10    declaration_section -> constructor_declaration
Rule 11    declaration_section -> method_declaration
Rule 12    method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block
Rule 13    method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block
Rule 14    method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block
Rule 15    method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block
Rule 16    constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block
Rule 17    constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block
Rule 18    uses_opt -> USES id_list SEMICOLON
Rule 19    id_list -> ID
Rule 20    id_list -> id_list COMMA ID
Rule 21    var_declaration -> VAR declaration_list
Rule 22    declaration_list -> declaration
Rule 23    declaration_list -> declaration_list declaration
Rule 24    declaration -> id_list COLON type_specifier SEMICOLON
Rule 25    block -> declaration_sections compound_statement
Rule 26    type_declaration -> TYPE type_list
Rule 27    type_list -> type_definition
Rule 28    type_list -> type_list type_definition
Rule 29    type_definition -> ID EQUAL type_specifier SEMICOLON
Rule 30    type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier
Rule 31    type_specifier -> subrange
Rule 32    type_specifier -> FILE OF type_specifier
Rule 33    type_specifier -> SET OF type_specifier
Rule 34    type_specifier -> RECORD field_list case_part END
Rule 35    type_specifier -> OBJECT field_list method_list END
Rule 36    type_specifier -> LPAREN id_list RPAREN
Rule 37    type_specifier -> BOOLEAN_LITERAL
Rule 38    type_specifier -> INTEGER
Rule 39    type_specifier -> BYTE
Rule 40    type_specifier -> CHAR
Rule 41    type_specifier -> STRING
Rule 42    type_specifier -> STRING LBRACKET NUMBER RBRACKET
Rule 43    type_specifier -> ID
Rule 44    type_expression -> type_expression COMMA subrange
Rule 45    type_expression -> subrange
Rule 46    subrange -> NUMBER DOTDOT NUMBER
Rule 47    subrange -> NUMBER DOTDOT ID
Rule 48    field_list -> field_list field
Rule 49    field_list -> field
Rule 50    field_list -> empty
Rule 51    field -> id_list COLON type_specifier
Rule 52    field -> id_list COLON type_specifier SEMICOLON
Rule 53    field -> VAR id_list COLON type_specifier
Rule 54    field -> VAR id_list COLON type_specifier SEMICOLON
Rule 55    field -> id_list LPAREN STRING_LITERAL RPAREN
Rule 56    field -> statement
Rule 57    field -> if_statement
Rule 58    field -> case_statement
Rule 59    field -> assignment_statement
Rule 60    case_part -> CASE ID COLON type_specifier OF case_list SEMICOLON
Rule 61    case_part -> empty
Rule 62    case_list -> case_list SEMICOLON case_element
Rule 63    case_list -> case_element
Rule 64    case_list_opt_semicolon -> case_list
Rule 65    case_list_opt_semicolon -> case_list SEMICOLON
Rule 66    case_element -> NUMBER COLON LPAREN field_list RPAREN
Rule 67    case_element -> NUMBER COLON field_list
Rule 68    method_list -> method_list method
Rule 69    method_list -> method
Rule 70    method_list -> empty
Rule 71    method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON
Rule 72    method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON
Rule 73    method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON
Rule 74    method -> DESTRUCTOR ID SEMICOLON
Rule 75    case_statement -> CASE expression OF case_list_opt_semicolon END SEMICOLON
Rule 76    case_statement -> CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
Rule 77    case_statement -> CASE expression OF case_list_opt_semicolon END
Rule 78    type_specifier -> LONGINT
Rule 79    procedure_declarations -> procedure_declaration
Rule 80    procedure_declarations -> procedure_declarations procedure_declaration
Rule 81    procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
Rule 82    procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON
Rule 83    function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
Rule 84    function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
Rule 85    function_declaration -> FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON block SEMICOLON
Rule 86    function_declaration -> FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
Rule 87    function_call -> ID LPAREN expression_list RPAREN
Rule 88    factor -> function_call
Rule 89    parameter_list -> parameter_list SEMICOLON parameter
Rule 90    parameter_list -> parameter
Rule 91    parameter_list -> empty
Rule 92    parameter -> ID COLON type_specifier
Rule 93    compound_statement -> BEGIN statement_list END
Rule 94    compound_statement -> BEGIN local_var_declarations statement_list END
Rule 95    local_var_declarations -> var_declaration
Rule 96    local_var_declarations -> empty
Rule 97    statement_list -> statement_list statement SEMICOLON
Rule 98    statement_list -> statement_list statement
Rule 99    statement_list -> statement
Rule 100   statement -> if_statement
Rule 101   statement -> assignment_statement
Rule 102   statement -> while_statement
Rule 103   statement -> procedure_call
Rule 104   statement -> compound_statement
Rule 105   statement -> for_statement
Rule 106   statement -> case_statement
Rule 107   statement -> with_statement
Rule 108   statement -> repeat_statement
Rule 109   statement -> empty
Rule 110   with_statement -> WITH variable DO statement
Rule 111   if_statement -> IF expression THEN statement ELSE statement
Rule 112   if_statement -> IF expression THEN statement
Rule 113   if_statement -> IF expression IN statement THEN statement ELSE statement
Rule 114   if_statement -> IF expression IN statement THEN statement
Rule 115   for_statement -> FOR ID COLON_EQUAL expression TO expression DO block
Rule 116   for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block
Rule 117   assignment_statement -> variable COLON_EQUAL expression
Rule 118   assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
Rule 119   assignment_statement -> variable PLUS COLON_EQUAL expression
Rule 120   assignment_statement -> variable MINUS COLON_EQUAL expression
Rule 121   assignment_statement -> variable TIMES COLON_EQUAL expression
Rule 122   assignment_statement -> variable DIVIDE COLON_EQUAL expression
Rule 123   assignment_statement -> ID COLON_EQUAL expression
Rule 124   variable -> ID
Rule 125   variable -> variable LBRACKET expression RBRACKET
Rule 126   variable -> variable DOT ID
Rule 127   variable -> ID LBRACKET index_list RBRACKET
Rule 128   index_list -> expression
Rule 129   index_list -> index_list COMMA expression
Rule 130   while_statement -> WHILE expression DO statement
Rule 131   procedure_call -> ID LPAREN expression_list RPAREN
Rule 132   procedure_call -> ID
Rule 133   expression_list -> expression expression_list_tail
Rule 134   expression_list_tail -> COMMA expression expression_list_tail
Rule 135   expression_list_tail -> empty
Rule 136   expression_list -> empty
Rule 137   expression -> simple_expression relop simple_expression
Rule 138   expression -> simple_expression
Rule 139   simple_expression -> term simple_expression_tail
Rule 140   simple_expression_tail -> addop term
Rule 141   simple_expression_tail -> empty
Rule 142   addop -> PLUS
Rule 143   addop -> MINUS
Rule 144   term -> factor term_tail
Rule 145   term_tail -> mulop factor
Rule 146   term_tail -> empty
Rule 147   mulop -> TIMES
Rule 148   mulop -> DIVIDE
Rule 149   mulop -> DIV
Rule 150   expression -> expression PLUS expression
Rule 151   expression -> expression MINUS expression
Rule 152   expression -> expression TIMES expression
Rule 153   expression -> expression DIVIDE expression
Rule 154   expression -> expression MOD expression
Rule 155   factor -> LPAREN expression RPAREN
Rule 156   factor -> variable
Rule 157   factor -> NUMBER
Rule 158   factor -> STRING_LITERAL
Rule 159   relop -> LESS
Rule 160   relop -> LESS_EQUAL
Rule 161   relop -> GREAT
Rule 162   relop -> GREAT_EQUAL
Rule 163   relop -> EQUAL
Rule 164   relop -> DIFFERENT
Rule 165   empty -> <empty>
Rule 166   statement -> READLN
Rule 167   statement -> READLN LPAREN variable RPAREN
Rule 168   statement -> READLN LBRACKET variable RBRACKET
Rule 169   statement -> READLN LPAREN variable_list RPAREN
Rule 170   variable_list -> variable
Rule 171   variable_list -> variable_list COMMA variable
Rule 172   statement -> WRITE LPAREN expression_list RPAREN
Rule 173   statement -> WRITELN LPAREN write_arguments RPAREN
Rule 174   statement -> WRITELN LPAREN expression RPAREN
Rule 175   write_arguments -> write_argument
Rule 176   write_arguments -> write_arguments COMMA write_argument
Rule 177   write_argument -> expression
Rule 178   write_argument -> expression COLON expression
Rule 179   write_argument -> expression COLON expression COLON expression
Rule 180   statement -> USES ID SEMICOLON
Rule 181   constant_declaration -> CONST constant_list
Rule 182   repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON
Rule 183   constant_list -> constant
Rule 184   constant_list -> constant_list constant
Rule 185   constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON
Rule 186   constant -> ID EQUAL NUMBER SEMICOLON
Rule 187   constant -> ID EQUAL STRING_LITERAL SEMICOLON
Rule 188   constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON
Rule 189   expression -> expression AND expression
Rule 190   expression -> expression OR expression
Rule 191   expression -> NOT expression

Terminals, with rules where they appear

AND                  : 189
ARRAY                : 30
BEGIN                : 93 94
BOOLEAN_LITERAL      : 37 118 188
BYTE                 : 39
CASE                 : 60 75 76 77
CHAR                 : 40
CHARACTER_LITERAL    : 185
COLON                : 14 24 51 52 53 54 60 66 67 73 83 84 85 86 92 178 179 179
COLON_EQUAL          : 115 116 117 118 119 120 121 122 123
COMMA                : 20 44 129 134 171 176
CONST                : 181
CONSTRUCTOR          : 12 16 17 71
DESTRUCTOR           : 15 74
DIFFERENT            : 164
DIV                  : 149
DIVIDE               : 122 148 153
DO                   : 110 115 116 130
DOT                  : 1 12 13 14 15 126
DOTDOT               : 46 47
DOWNTO               : 116
ELSE                 : 76 111 113
END                  : 34 35 75 76 77 93 94
EQUAL                : 29 163 185 186 187 188
FALSE                : 
FILE                 : 32
FOR                  : 115 116
FORWARD              : 84 86
FUNCTION             : 14 73 83 84 85 86
GOTO                 : 
GREAT                : 161
GREAT_EQUAL          : 162
ID                   : 1 12 12 13 13 14 14 15 15 16 17 19 20 29 43 47 60 71 72 73 74 81 82 83 84 85 86 87 92 115 116 123 124 126 127 131 132 180 185 186 187 188
IF                   : 111 112 113 114
IN                   : 113 114
INTEGER              : 38
LABEL                : 
LBLOCK               : 
LBRACKET             : 30 42 125 127 168
LESS                 : 159
LESS_EQUAL           : 160
LONGINT              : 78
LPAREN               : 12 13 14 16 17 36 55 66 71 72 73 81 82 83 84 85 86 87 131 155 167 169 172 173 174
MINUS                : 120 143 151
MOD                  : 154
NIL                  : 
NOT                  : 191
NUMBER               : 42 46 46 47 66 67 157 186
OBJECT               : 35
OF                   : 30 32 33 60 75 76 77
OR                   : 190
PACKED               : 
PLUS                 : 119 142 150
PROCEDURE            : 13 72 81 82
PROGRAM              : 1
RBLOCK               : 
RBRACKET             : 30 42 125 127 168
READLINE             : 
READLN               : 166 167 168 169
RECORD               : 34
REPEAT               : 182
RPAREN               : 12 13 14 16 17 36 55 66 71 72 73 81 82 83 84 85 86 87 131 155 167 169 172 173 174
SEMICOLON            : 1 12 13 14 15 16 17 18 24 29 52 54 60 62 65 71 72 73 74 75 76 81 81 82 82 83 83 84 84 85 85 86 86 89 97 118 180 182 185 186 187 188
SET                  : 33
STRING               : 41 42
STRING_LITERAL       : 55 158 187
SUBRANGE             : 
THEN                 : 111 112 113 114
TIMES                : 121 147 152
TO                   : 115
TRUE                 : 
TYPE                 : 26
UNTIL                : 182
USES                 : 18 180
VAR                  : 21 53 54
WHILE                : 130
WITH                 : 110
WRITE                : 172
WRITELN              : 173 174
error                : 

Nonterminals, with rules where they appear

addop                : 140
assignment_statement : 59 101
block                : 1 12 13 14 15 16 17 81 82 83 85 115 116
case_element         : 62 63
case_list            : 60 62 64 65
case_list_opt_semicolon : 75 76 77
case_part            : 34
case_statement       : 58 106
compound_statement   : 25 104
constant             : 183 184
constant_declaration : 5
constant_list        : 181 184
constructor_declaration : 10
declaration          : 22 23
declaration_list     : 21 23
declaration_section  : 2
declaration_sections : 1 2 25
empty                : 3 50 61 70 91 96 109 135 136 141 146
expression           : 75 76 77 111 112 113 114 115 115 116 116 117 119 120 121 122 123 125 128 129 130 133 134 150 150 151 151 152 152 153 153 154 154 155 174 177 178 178 179 179 179 182 189 189 190 190 191
expression_list      : 87 131 172
expression_list_tail : 133 134
factor               : 144 145
field                : 48 49
field_list           : 16 34 35 48 66 67 71 72 73
for_statement        : 105
function_call        : 88
function_declaration : 9
id_list              : 18 20 24 36 51 52 53 54 55
if_statement         : 57 100
index_list           : 127 129
local_var_declarations : 94
method               : 68 69
method_declaration   : 11
method_list          : 35 68
mulop                : 145
parameter            : 89 90
parameter_list       : 12 13 14 81 83 84 89
procedure_call       : 103
procedure_declaration : 79 80
procedure_declarations : 8 80
program              : 0
relop                : 137
repeat_statement     : 108
simple_expression    : 137 137 138
simple_expression_tail : 139
statement            : 56 97 98 99 110 111 111 112 113 113 113 114 114 130
statement_list       : 76 93 94 97 98 182
subrange             : 31 44 45
term                 : 139 140
term_tail            : 144
type_declaration     : 6
type_definition      : 27 28
type_expression      : 30 44
type_list            : 26 28
type_specifier       : 14 24 29 30 32 33 51 52 53 54 60 73 83 84 85 86 92
uses_opt             : 4
var_declaration      : 7 95
variable             : 110 117 118 119 120 121 122 125 126 156 167 168 170 171
variable_list        : 169 171
while_statement      : 102
with_statement       : 107
write_argument       : 175 176
write_arguments      : 173 176

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON declaration_sections block DOT

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON declaration_sections block DOT

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON declaration_sections block DOT

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . declaration_sections block DOT
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (165) empty -> .

    USES            reduce using rule 165 (empty -> .)
    CONST           reduce using rule 165 (empty -> .)
    TYPE            reduce using rule 165 (empty -> .)
    VAR             reduce using rule 165 (empty -> .)
    FUNCTION        reduce using rule 165 (empty -> .)
    CONSTRUCTOR     reduce using rule 165 (empty -> .)
    PROCEDURE       reduce using rule 165 (empty -> .)
    DESTRUCTOR      reduce using rule 165 (empty -> .)
    BEGIN           reduce using rule 165 (empty -> .)

    declaration_sections           shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) program -> PROGRAM ID SEMICOLON declaration_sections . block DOT
    (2) declaration_sections -> declaration_sections . declaration_section
    (25) block -> . declaration_sections compound_statement
    (4) declaration_section -> . uses_opt
    (5) declaration_section -> . constant_declaration
    (6) declaration_section -> . type_declaration
    (7) declaration_section -> . var_declaration
    (8) declaration_section -> . procedure_declarations
    (9) declaration_section -> . function_declaration
    (10) declaration_section -> . constructor_declaration
    (11) declaration_section -> . method_declaration
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (18) uses_opt -> . USES id_list SEMICOLON
    (181) constant_declaration -> . CONST constant_list
    (26) type_declaration -> . TYPE type_list
    (21) var_declaration -> . VAR declaration_list
    (79) procedure_declarations -> . procedure_declaration
    (80) procedure_declarations -> . procedure_declarations procedure_declaration
    (83) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (84) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (85) function_declaration -> . FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (86) function_declaration -> . FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (16) constructor_declaration -> . CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block
    (17) constructor_declaration -> . CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block
    (12) method_declaration -> . CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block
    (13) method_declaration -> . PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block
    (14) method_declaration -> . FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block
    (15) method_declaration -> . DESTRUCTOR ID DOT ID SEMICOLON block
    (165) empty -> .
    (81) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (82) procedure_declaration -> . PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON

  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for PROCEDURE resolved as shift
  ! shift/reduce conflict for DESTRUCTOR resolved as shift
    USES            shift and go to state 18
    CONST           shift and go to state 19
    TYPE            shift and go to state 20
    VAR             shift and go to state 21
    FUNCTION        shift and go to state 23
    CONSTRUCTOR     shift and go to state 24
    PROCEDURE       shift and go to state 25
    DESTRUCTOR      shift and go to state 26
    BEGIN           reduce using rule 165 (empty -> .)

  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! CONST           [ reduce using rule 165 (empty -> .) ]
  ! TYPE            [ reduce using rule 165 (empty -> .) ]
  ! VAR             [ reduce using rule 165 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 165 (empty -> .) ]
  ! CONSTRUCTOR     [ reduce using rule 165 (empty -> .) ]
  ! PROCEDURE       [ reduce using rule 165 (empty -> .) ]
  ! DESTRUCTOR      [ reduce using rule 165 (empty -> .) ]

    declaration_sections           shift and go to state 7
    block                          shift and go to state 8
    declaration_section            shift and go to state 9
    uses_opt                       shift and go to state 10
    constant_declaration           shift and go to state 11
    type_declaration               shift and go to state 12
    var_declaration                shift and go to state 13
    procedure_declarations         shift and go to state 14
    function_declaration           shift and go to state 15
    constructor_declaration        shift and go to state 16
    method_declaration             shift and go to state 17
    empty                          shift and go to state 6
    procedure_declaration          shift and go to state 22

state 6

    (3) declaration_sections -> empty .

    USES            reduce using rule 3 (declaration_sections -> empty .)
    CONST           reduce using rule 3 (declaration_sections -> empty .)
    TYPE            reduce using rule 3 (declaration_sections -> empty .)
    VAR             reduce using rule 3 (declaration_sections -> empty .)
    FUNCTION        reduce using rule 3 (declaration_sections -> empty .)
    CONSTRUCTOR     reduce using rule 3 (declaration_sections -> empty .)
    PROCEDURE       reduce using rule 3 (declaration_sections -> empty .)
    DESTRUCTOR      reduce using rule 3 (declaration_sections -> empty .)
    BEGIN           reduce using rule 3 (declaration_sections -> empty .)


state 7

    (25) block -> declaration_sections . compound_statement
    (2) declaration_sections -> declaration_sections . declaration_section
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (4) declaration_section -> . uses_opt
    (5) declaration_section -> . constant_declaration
    (6) declaration_section -> . type_declaration
    (7) declaration_section -> . var_declaration
    (8) declaration_section -> . procedure_declarations
    (9) declaration_section -> . function_declaration
    (10) declaration_section -> . constructor_declaration
    (11) declaration_section -> . method_declaration
    (18) uses_opt -> . USES id_list SEMICOLON
    (181) constant_declaration -> . CONST constant_list
    (26) type_declaration -> . TYPE type_list
    (21) var_declaration -> . VAR declaration_list
    (79) procedure_declarations -> . procedure_declaration
    (80) procedure_declarations -> . procedure_declarations procedure_declaration
    (83) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (84) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (85) function_declaration -> . FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (86) function_declaration -> . FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (16) constructor_declaration -> . CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block
    (17) constructor_declaration -> . CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block
    (12) method_declaration -> . CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block
    (13) method_declaration -> . PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block
    (14) method_declaration -> . FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block
    (15) method_declaration -> . DESTRUCTOR ID DOT ID SEMICOLON block
    (81) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (82) procedure_declaration -> . PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON

    BEGIN           shift and go to state 28
    USES            shift and go to state 18
    CONST           shift and go to state 19
    TYPE            shift and go to state 20
    VAR             shift and go to state 21
    FUNCTION        shift and go to state 23
    CONSTRUCTOR     shift and go to state 24
    PROCEDURE       shift and go to state 25
    DESTRUCTOR      shift and go to state 26

    compound_statement             shift and go to state 27
    declaration_section            shift and go to state 9
    uses_opt                       shift and go to state 10
    constant_declaration           shift and go to state 11
    type_declaration               shift and go to state 12
    var_declaration                shift and go to state 13
    procedure_declarations         shift and go to state 14
    function_declaration           shift and go to state 15
    constructor_declaration        shift and go to state 16
    method_declaration             shift and go to state 17
    procedure_declaration          shift and go to state 22

state 8

    (1) program -> PROGRAM ID SEMICOLON declaration_sections block . DOT

    DOT             shift and go to state 29


state 9

    (2) declaration_sections -> declaration_sections declaration_section .

    USES            reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    CONST           reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    TYPE            reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    VAR             reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    FUNCTION        reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    CONSTRUCTOR     reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    PROCEDURE       reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    DESTRUCTOR      reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    BEGIN           reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)


state 10

    (4) declaration_section -> uses_opt .

    USES            reduce using rule 4 (declaration_section -> uses_opt .)
    CONST           reduce using rule 4 (declaration_section -> uses_opt .)
    TYPE            reduce using rule 4 (declaration_section -> uses_opt .)
    VAR             reduce using rule 4 (declaration_section -> uses_opt .)
    FUNCTION        reduce using rule 4 (declaration_section -> uses_opt .)
    CONSTRUCTOR     reduce using rule 4 (declaration_section -> uses_opt .)
    PROCEDURE       reduce using rule 4 (declaration_section -> uses_opt .)
    DESTRUCTOR      reduce using rule 4 (declaration_section -> uses_opt .)
    BEGIN           reduce using rule 4 (declaration_section -> uses_opt .)


state 11

    (5) declaration_section -> constant_declaration .

    USES            reduce using rule 5 (declaration_section -> constant_declaration .)
    CONST           reduce using rule 5 (declaration_section -> constant_declaration .)
    TYPE            reduce using rule 5 (declaration_section -> constant_declaration .)
    VAR             reduce using rule 5 (declaration_section -> constant_declaration .)
    FUNCTION        reduce using rule 5 (declaration_section -> constant_declaration .)
    CONSTRUCTOR     reduce using rule 5 (declaration_section -> constant_declaration .)
    PROCEDURE       reduce using rule 5 (declaration_section -> constant_declaration .)
    DESTRUCTOR      reduce using rule 5 (declaration_section -> constant_declaration .)
    BEGIN           reduce using rule 5 (declaration_section -> constant_declaration .)


state 12

    (6) declaration_section -> type_declaration .

    USES            reduce using rule 6 (declaration_section -> type_declaration .)
    CONST           reduce using rule 6 (declaration_section -> type_declaration .)
    TYPE            reduce using rule 6 (declaration_section -> type_declaration .)
    VAR             reduce using rule 6 (declaration_section -> type_declaration .)
    FUNCTION        reduce using rule 6 (declaration_section -> type_declaration .)
    CONSTRUCTOR     reduce using rule 6 (declaration_section -> type_declaration .)
    PROCEDURE       reduce using rule 6 (declaration_section -> type_declaration .)
    DESTRUCTOR      reduce using rule 6 (declaration_section -> type_declaration .)
    BEGIN           reduce using rule 6 (declaration_section -> type_declaration .)


state 13

    (7) declaration_section -> var_declaration .

    USES            reduce using rule 7 (declaration_section -> var_declaration .)
    CONST           reduce using rule 7 (declaration_section -> var_declaration .)
    TYPE            reduce using rule 7 (declaration_section -> var_declaration .)
    VAR             reduce using rule 7 (declaration_section -> var_declaration .)
    FUNCTION        reduce using rule 7 (declaration_section -> var_declaration .)
    CONSTRUCTOR     reduce using rule 7 (declaration_section -> var_declaration .)
    PROCEDURE       reduce using rule 7 (declaration_section -> var_declaration .)
    DESTRUCTOR      reduce using rule 7 (declaration_section -> var_declaration .)
    BEGIN           reduce using rule 7 (declaration_section -> var_declaration .)


state 14

    (8) declaration_section -> procedure_declarations .
    (80) procedure_declarations -> procedure_declarations . procedure_declaration
    (81) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (82) procedure_declaration -> . PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON

  ! shift/reduce conflict for PROCEDURE resolved as shift
    USES            reduce using rule 8 (declaration_section -> procedure_declarations .)
    CONST           reduce using rule 8 (declaration_section -> procedure_declarations .)
    TYPE            reduce using rule 8 (declaration_section -> procedure_declarations .)
    VAR             reduce using rule 8 (declaration_section -> procedure_declarations .)
    FUNCTION        reduce using rule 8 (declaration_section -> procedure_declarations .)
    CONSTRUCTOR     reduce using rule 8 (declaration_section -> procedure_declarations .)
    DESTRUCTOR      reduce using rule 8 (declaration_section -> procedure_declarations .)
    BEGIN           reduce using rule 8 (declaration_section -> procedure_declarations .)
    PROCEDURE       shift and go to state 31

  ! PROCEDURE       [ reduce using rule 8 (declaration_section -> procedure_declarations .) ]

    procedure_declaration          shift and go to state 30

state 15

    (9) declaration_section -> function_declaration .

    USES            reduce using rule 9 (declaration_section -> function_declaration .)
    CONST           reduce using rule 9 (declaration_section -> function_declaration .)
    TYPE            reduce using rule 9 (declaration_section -> function_declaration .)
    VAR             reduce using rule 9 (declaration_section -> function_declaration .)
    FUNCTION        reduce using rule 9 (declaration_section -> function_declaration .)
    CONSTRUCTOR     reduce using rule 9 (declaration_section -> function_declaration .)
    PROCEDURE       reduce using rule 9 (declaration_section -> function_declaration .)
    DESTRUCTOR      reduce using rule 9 (declaration_section -> function_declaration .)
    BEGIN           reduce using rule 9 (declaration_section -> function_declaration .)


state 16

    (10) declaration_section -> constructor_declaration .

    USES            reduce using rule 10 (declaration_section -> constructor_declaration .)
    CONST           reduce using rule 10 (declaration_section -> constructor_declaration .)
    TYPE            reduce using rule 10 (declaration_section -> constructor_declaration .)
    VAR             reduce using rule 10 (declaration_section -> constructor_declaration .)
    FUNCTION        reduce using rule 10 (declaration_section -> constructor_declaration .)
    CONSTRUCTOR     reduce using rule 10 (declaration_section -> constructor_declaration .)
    PROCEDURE       reduce using rule 10 (declaration_section -> constructor_declaration .)
    DESTRUCTOR      reduce using rule 10 (declaration_section -> constructor_declaration .)
    BEGIN           reduce using rule 10 (declaration_section -> constructor_declaration .)


state 17

    (11) declaration_section -> method_declaration .

    USES            reduce using rule 11 (declaration_section -> method_declaration .)
    CONST           reduce using rule 11 (declaration_section -> method_declaration .)
    TYPE            reduce using rule 11 (declaration_section -> method_declaration .)
    VAR             reduce using rule 11 (declaration_section -> method_declaration .)
    FUNCTION        reduce using rule 11 (declaration_section -> method_declaration .)
    CONSTRUCTOR     reduce using rule 11 (declaration_section -> method_declaration .)
    PROCEDURE       reduce using rule 11 (declaration_section -> method_declaration .)
    DESTRUCTOR      reduce using rule 11 (declaration_section -> method_declaration .)
    BEGIN           reduce using rule 11 (declaration_section -> method_declaration .)


state 18

    (18) uses_opt -> USES . id_list SEMICOLON
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

    ID              shift and go to state 33

    id_list                        shift and go to state 32

state 19

    (181) constant_declaration -> CONST . constant_list
    (183) constant_list -> . constant
    (184) constant_list -> . constant_list constant
    (185) constant -> . ID EQUAL CHARACTER_LITERAL SEMICOLON
    (186) constant -> . ID EQUAL NUMBER SEMICOLON
    (187) constant -> . ID EQUAL STRING_LITERAL SEMICOLON
    (188) constant -> . ID EQUAL BOOLEAN_LITERAL SEMICOLON

    ID              shift and go to state 36

    constant_list                  shift and go to state 34
    constant                       shift and go to state 35

state 20

    (26) type_declaration -> TYPE . type_list
    (27) type_list -> . type_definition
    (28) type_list -> . type_list type_definition
    (29) type_definition -> . ID EQUAL type_specifier SEMICOLON

    ID              shift and go to state 39

    type_list                      shift and go to state 37
    type_definition                shift and go to state 38

state 21

    (21) var_declaration -> VAR . declaration_list
    (22) declaration_list -> . declaration
    (23) declaration_list -> . declaration_list declaration
    (24) declaration -> . id_list COLON type_specifier SEMICOLON
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

    ID              shift and go to state 33

    declaration_list               shift and go to state 40
    declaration                    shift and go to state 41
    id_list                        shift and go to state 42

state 22

    (79) procedure_declarations -> procedure_declaration .

    PROCEDURE       reduce using rule 79 (procedure_declarations -> procedure_declaration .)
    USES            reduce using rule 79 (procedure_declarations -> procedure_declaration .)
    CONST           reduce using rule 79 (procedure_declarations -> procedure_declaration .)
    TYPE            reduce using rule 79 (procedure_declarations -> procedure_declaration .)
    VAR             reduce using rule 79 (procedure_declarations -> procedure_declaration .)
    FUNCTION        reduce using rule 79 (procedure_declarations -> procedure_declaration .)
    CONSTRUCTOR     reduce using rule 79 (procedure_declarations -> procedure_declaration .)
    DESTRUCTOR      reduce using rule 79 (procedure_declarations -> procedure_declaration .)
    BEGIN           reduce using rule 79 (procedure_declarations -> procedure_declaration .)


state 23

    (83) function_declaration -> FUNCTION . ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (84) function_declaration -> FUNCTION . ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (85) function_declaration -> FUNCTION . ID LPAREN RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (86) function_declaration -> FUNCTION . ID LPAREN RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (14) method_declaration -> FUNCTION . ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block

    ID              shift and go to state 43


state 24

    (16) constructor_declaration -> CONSTRUCTOR . ID LPAREN field_list RPAREN SEMICOLON block
    (17) constructor_declaration -> CONSTRUCTOR . ID LPAREN RPAREN SEMICOLON block
    (12) method_declaration -> CONSTRUCTOR . ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block

    ID              shift and go to state 44


state 25

    (13) method_declaration -> PROCEDURE . ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block
    (81) procedure_declaration -> PROCEDURE . ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (82) procedure_declaration -> PROCEDURE . ID LPAREN RPAREN SEMICOLON block SEMICOLON

    ID              shift and go to state 45


state 26

    (15) method_declaration -> DESTRUCTOR . ID DOT ID SEMICOLON block

    ID              shift and go to state 46


state 27

    (25) block -> declaration_sections compound_statement .

    DOT             reduce using rule 25 (block -> declaration_sections compound_statement .)
    USES            reduce using rule 25 (block -> declaration_sections compound_statement .)
    CONST           reduce using rule 25 (block -> declaration_sections compound_statement .)
    TYPE            reduce using rule 25 (block -> declaration_sections compound_statement .)
    VAR             reduce using rule 25 (block -> declaration_sections compound_statement .)
    FUNCTION        reduce using rule 25 (block -> declaration_sections compound_statement .)
    CONSTRUCTOR     reduce using rule 25 (block -> declaration_sections compound_statement .)
    PROCEDURE       reduce using rule 25 (block -> declaration_sections compound_statement .)
    DESTRUCTOR      reduce using rule 25 (block -> declaration_sections compound_statement .)
    BEGIN           reduce using rule 25 (block -> declaration_sections compound_statement .)
    SEMICOLON       reduce using rule 25 (block -> declaration_sections compound_statement .)
    END             reduce using rule 25 (block -> declaration_sections compound_statement .)
    READLN          reduce using rule 25 (block -> declaration_sections compound_statement .)
    WRITE           reduce using rule 25 (block -> declaration_sections compound_statement .)
    WRITELN         reduce using rule 25 (block -> declaration_sections compound_statement .)
    IF              reduce using rule 25 (block -> declaration_sections compound_statement .)
    ID              reduce using rule 25 (block -> declaration_sections compound_statement .)
    WHILE           reduce using rule 25 (block -> declaration_sections compound_statement .)
    FOR             reduce using rule 25 (block -> declaration_sections compound_statement .)
    CASE            reduce using rule 25 (block -> declaration_sections compound_statement .)
    WITH            reduce using rule 25 (block -> declaration_sections compound_statement .)
    REPEAT          reduce using rule 25 (block -> declaration_sections compound_statement .)
    UNTIL           reduce using rule 25 (block -> declaration_sections compound_statement .)
    RPAREN          reduce using rule 25 (block -> declaration_sections compound_statement .)
    ELSE            reduce using rule 25 (block -> declaration_sections compound_statement .)
    THEN            reduce using rule 25 (block -> declaration_sections compound_statement .)


state 28

    (93) compound_statement -> BEGIN . statement_list END
    (94) compound_statement -> BEGIN . local_var_declarations statement_list END
    (97) statement_list -> . statement_list statement SEMICOLON
    (98) statement_list -> . statement_list statement
    (99) statement_list -> . statement
    (95) local_var_declarations -> . var_declaration
    (96) local_var_declarations -> . empty
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (21) var_declaration -> . VAR declaration_list
    (165) empty -> .
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for READLN resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    VAR             shift and go to state 21
    END             reduce using rule 165 (empty -> .)
    SEMICOLON       reduce using rule 165 (empty -> .)
    IF              shift and go to state 67
    ID              shift and go to state 66
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    CASE            shift and go to state 70
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72

  ! READLN          [ reduce using rule 165 (empty -> .) ]
  ! WRITE           [ reduce using rule 165 (empty -> .) ]
  ! WRITELN         [ reduce using rule 165 (empty -> .) ]
  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! IF              [ reduce using rule 165 (empty -> .) ]
  ! ID              [ reduce using rule 165 (empty -> .) ]
  ! WHILE           [ reduce using rule 165 (empty -> .) ]
  ! BEGIN           [ reduce using rule 165 (empty -> .) ]
  ! FOR             [ reduce using rule 165 (empty -> .) ]
  ! CASE            [ reduce using rule 165 (empty -> .) ]
  ! WITH            [ reduce using rule 165 (empty -> .) ]
  ! REPEAT          [ reduce using rule 165 (empty -> .) ]

    statement_list                 shift and go to state 47
    local_var_declarations         shift and go to state 48
    statement                      shift and go to state 49
    var_declaration                shift and go to state 50
    empty                          shift and go to state 51
    if_statement                   shift and go to state 52
    assignment_statement           shift and go to state 53
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    case_statement                 shift and go to state 58
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    variable                       shift and go to state 62

state 29

    (1) program -> PROGRAM ID SEMICOLON declaration_sections block DOT .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON declaration_sections block DOT .)


state 30

    (80) procedure_declarations -> procedure_declarations procedure_declaration .

    PROCEDURE       reduce using rule 80 (procedure_declarations -> procedure_declarations procedure_declaration .)
    USES            reduce using rule 80 (procedure_declarations -> procedure_declarations procedure_declaration .)
    CONST           reduce using rule 80 (procedure_declarations -> procedure_declarations procedure_declaration .)
    TYPE            reduce using rule 80 (procedure_declarations -> procedure_declarations procedure_declaration .)
    VAR             reduce using rule 80 (procedure_declarations -> procedure_declarations procedure_declaration .)
    FUNCTION        reduce using rule 80 (procedure_declarations -> procedure_declarations procedure_declaration .)
    CONSTRUCTOR     reduce using rule 80 (procedure_declarations -> procedure_declarations procedure_declaration .)
    DESTRUCTOR      reduce using rule 80 (procedure_declarations -> procedure_declarations procedure_declaration .)
    BEGIN           reduce using rule 80 (procedure_declarations -> procedure_declarations procedure_declaration .)


state 31

    (81) procedure_declaration -> PROCEDURE . ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (82) procedure_declaration -> PROCEDURE . ID LPAREN RPAREN SEMICOLON block SEMICOLON

    ID              shift and go to state 73


state 32

    (18) uses_opt -> USES id_list . SEMICOLON
    (20) id_list -> id_list . COMMA ID

    SEMICOLON       shift and go to state 74
    COMMA           shift and go to state 75


state 33

    (19) id_list -> ID .

    SEMICOLON       reduce using rule 19 (id_list -> ID .)
    COMMA           reduce using rule 19 (id_list -> ID .)
    COLON           reduce using rule 19 (id_list -> ID .)
    RPAREN          reduce using rule 19 (id_list -> ID .)


state 34

    (181) constant_declaration -> CONST constant_list .
    (184) constant_list -> constant_list . constant
    (185) constant -> . ID EQUAL CHARACTER_LITERAL SEMICOLON
    (186) constant -> . ID EQUAL NUMBER SEMICOLON
    (187) constant -> . ID EQUAL STRING_LITERAL SEMICOLON
    (188) constant -> . ID EQUAL BOOLEAN_LITERAL SEMICOLON

    USES            reduce using rule 181 (constant_declaration -> CONST constant_list .)
    CONST           reduce using rule 181 (constant_declaration -> CONST constant_list .)
    TYPE            reduce using rule 181 (constant_declaration -> CONST constant_list .)
    VAR             reduce using rule 181 (constant_declaration -> CONST constant_list .)
    FUNCTION        reduce using rule 181 (constant_declaration -> CONST constant_list .)
    CONSTRUCTOR     reduce using rule 181 (constant_declaration -> CONST constant_list .)
    PROCEDURE       reduce using rule 181 (constant_declaration -> CONST constant_list .)
    DESTRUCTOR      reduce using rule 181 (constant_declaration -> CONST constant_list .)
    BEGIN           reduce using rule 181 (constant_declaration -> CONST constant_list .)
    ID              shift and go to state 36

    constant                       shift and go to state 76

state 35

    (183) constant_list -> constant .

    ID              reduce using rule 183 (constant_list -> constant .)
    USES            reduce using rule 183 (constant_list -> constant .)
    CONST           reduce using rule 183 (constant_list -> constant .)
    TYPE            reduce using rule 183 (constant_list -> constant .)
    VAR             reduce using rule 183 (constant_list -> constant .)
    FUNCTION        reduce using rule 183 (constant_list -> constant .)
    CONSTRUCTOR     reduce using rule 183 (constant_list -> constant .)
    PROCEDURE       reduce using rule 183 (constant_list -> constant .)
    DESTRUCTOR      reduce using rule 183 (constant_list -> constant .)
    BEGIN           reduce using rule 183 (constant_list -> constant .)


state 36

    (185) constant -> ID . EQUAL CHARACTER_LITERAL SEMICOLON
    (186) constant -> ID . EQUAL NUMBER SEMICOLON
    (187) constant -> ID . EQUAL STRING_LITERAL SEMICOLON
    (188) constant -> ID . EQUAL BOOLEAN_LITERAL SEMICOLON

    EQUAL           shift and go to state 77


state 37

    (26) type_declaration -> TYPE type_list .
    (28) type_list -> type_list . type_definition
    (29) type_definition -> . ID EQUAL type_specifier SEMICOLON

    USES            reduce using rule 26 (type_declaration -> TYPE type_list .)
    CONST           reduce using rule 26 (type_declaration -> TYPE type_list .)
    TYPE            reduce using rule 26 (type_declaration -> TYPE type_list .)
    VAR             reduce using rule 26 (type_declaration -> TYPE type_list .)
    FUNCTION        reduce using rule 26 (type_declaration -> TYPE type_list .)
    CONSTRUCTOR     reduce using rule 26 (type_declaration -> TYPE type_list .)
    PROCEDURE       reduce using rule 26 (type_declaration -> TYPE type_list .)
    DESTRUCTOR      reduce using rule 26 (type_declaration -> TYPE type_list .)
    BEGIN           reduce using rule 26 (type_declaration -> TYPE type_list .)
    ID              shift and go to state 39

    type_definition                shift and go to state 78

state 38

    (27) type_list -> type_definition .

    ID              reduce using rule 27 (type_list -> type_definition .)
    USES            reduce using rule 27 (type_list -> type_definition .)
    CONST           reduce using rule 27 (type_list -> type_definition .)
    TYPE            reduce using rule 27 (type_list -> type_definition .)
    VAR             reduce using rule 27 (type_list -> type_definition .)
    FUNCTION        reduce using rule 27 (type_list -> type_definition .)
    CONSTRUCTOR     reduce using rule 27 (type_list -> type_definition .)
    PROCEDURE       reduce using rule 27 (type_list -> type_definition .)
    DESTRUCTOR      reduce using rule 27 (type_list -> type_definition .)
    BEGIN           reduce using rule 27 (type_list -> type_definition .)


state 39

    (29) type_definition -> ID . EQUAL type_specifier SEMICOLON

    EQUAL           shift and go to state 79


state 40

    (21) var_declaration -> VAR declaration_list .
    (23) declaration_list -> declaration_list . declaration
    (24) declaration -> . id_list COLON type_specifier SEMICOLON
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

  ! shift/reduce conflict for ID resolved as shift
    USES            reduce using rule 21 (var_declaration -> VAR declaration_list .)
    CONST           reduce using rule 21 (var_declaration -> VAR declaration_list .)
    TYPE            reduce using rule 21 (var_declaration -> VAR declaration_list .)
    VAR             reduce using rule 21 (var_declaration -> VAR declaration_list .)
    FUNCTION        reduce using rule 21 (var_declaration -> VAR declaration_list .)
    CONSTRUCTOR     reduce using rule 21 (var_declaration -> VAR declaration_list .)
    PROCEDURE       reduce using rule 21 (var_declaration -> VAR declaration_list .)
    DESTRUCTOR      reduce using rule 21 (var_declaration -> VAR declaration_list .)
    BEGIN           reduce using rule 21 (var_declaration -> VAR declaration_list .)
    READLN          reduce using rule 21 (var_declaration -> VAR declaration_list .)
    WRITE           reduce using rule 21 (var_declaration -> VAR declaration_list .)
    WRITELN         reduce using rule 21 (var_declaration -> VAR declaration_list .)
    IF              reduce using rule 21 (var_declaration -> VAR declaration_list .)
    WHILE           reduce using rule 21 (var_declaration -> VAR declaration_list .)
    FOR             reduce using rule 21 (var_declaration -> VAR declaration_list .)
    CASE            reduce using rule 21 (var_declaration -> VAR declaration_list .)
    WITH            reduce using rule 21 (var_declaration -> VAR declaration_list .)
    REPEAT          reduce using rule 21 (var_declaration -> VAR declaration_list .)
    END             reduce using rule 21 (var_declaration -> VAR declaration_list .)
    SEMICOLON       reduce using rule 21 (var_declaration -> VAR declaration_list .)
    ID              shift and go to state 33

  ! ID              [ reduce using rule 21 (var_declaration -> VAR declaration_list .) ]

    declaration                    shift and go to state 80
    id_list                        shift and go to state 42

state 41

    (22) declaration_list -> declaration .

    ID              reduce using rule 22 (declaration_list -> declaration .)
    USES            reduce using rule 22 (declaration_list -> declaration .)
    CONST           reduce using rule 22 (declaration_list -> declaration .)
    TYPE            reduce using rule 22 (declaration_list -> declaration .)
    VAR             reduce using rule 22 (declaration_list -> declaration .)
    FUNCTION        reduce using rule 22 (declaration_list -> declaration .)
    CONSTRUCTOR     reduce using rule 22 (declaration_list -> declaration .)
    PROCEDURE       reduce using rule 22 (declaration_list -> declaration .)
    DESTRUCTOR      reduce using rule 22 (declaration_list -> declaration .)
    BEGIN           reduce using rule 22 (declaration_list -> declaration .)
    READLN          reduce using rule 22 (declaration_list -> declaration .)
    WRITE           reduce using rule 22 (declaration_list -> declaration .)
    WRITELN         reduce using rule 22 (declaration_list -> declaration .)
    IF              reduce using rule 22 (declaration_list -> declaration .)
    WHILE           reduce using rule 22 (declaration_list -> declaration .)
    FOR             reduce using rule 22 (declaration_list -> declaration .)
    CASE            reduce using rule 22 (declaration_list -> declaration .)
    WITH            reduce using rule 22 (declaration_list -> declaration .)
    REPEAT          reduce using rule 22 (declaration_list -> declaration .)
    END             reduce using rule 22 (declaration_list -> declaration .)
    SEMICOLON       reduce using rule 22 (declaration_list -> declaration .)


state 42

    (24) declaration -> id_list . COLON type_specifier SEMICOLON
    (20) id_list -> id_list . COMMA ID

    COLON           shift and go to state 81
    COMMA           shift and go to state 75


state 43

    (83) function_declaration -> FUNCTION ID . LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (84) function_declaration -> FUNCTION ID . LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (85) function_declaration -> FUNCTION ID . LPAREN RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (86) function_declaration -> FUNCTION ID . LPAREN RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (14) method_declaration -> FUNCTION ID . DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block

    LPAREN          shift and go to state 82
    DOT             shift and go to state 83


state 44

    (16) constructor_declaration -> CONSTRUCTOR ID . LPAREN field_list RPAREN SEMICOLON block
    (17) constructor_declaration -> CONSTRUCTOR ID . LPAREN RPAREN SEMICOLON block
    (12) method_declaration -> CONSTRUCTOR ID . DOT ID LPAREN parameter_list RPAREN SEMICOLON block

    LPAREN          shift and go to state 84
    DOT             shift and go to state 85


state 45

    (13) method_declaration -> PROCEDURE ID . DOT ID LPAREN parameter_list RPAREN SEMICOLON block
    (81) procedure_declaration -> PROCEDURE ID . LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (82) procedure_declaration -> PROCEDURE ID . LPAREN RPAREN SEMICOLON block SEMICOLON

    DOT             shift and go to state 86
    LPAREN          shift and go to state 87


state 46

    (15) method_declaration -> DESTRUCTOR ID . DOT ID SEMICOLON block

    DOT             shift and go to state 88


state 47

    (93) compound_statement -> BEGIN statement_list . END
    (97) statement_list -> statement_list . statement SEMICOLON
    (98) statement_list -> statement_list . statement
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (165) empty -> .
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for READLN resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
    END             shift and go to state 89
    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    IF              shift and go to state 67
    ID              shift and go to state 66
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    CASE            shift and go to state 70
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72
    SEMICOLON       reduce using rule 165 (empty -> .)

  ! END             [ reduce using rule 165 (empty -> .) ]
  ! READLN          [ reduce using rule 165 (empty -> .) ]
  ! WRITE           [ reduce using rule 165 (empty -> .) ]
  ! WRITELN         [ reduce using rule 165 (empty -> .) ]
  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! IF              [ reduce using rule 165 (empty -> .) ]
  ! ID              [ reduce using rule 165 (empty -> .) ]
  ! WHILE           [ reduce using rule 165 (empty -> .) ]
  ! BEGIN           [ reduce using rule 165 (empty -> .) ]
  ! FOR             [ reduce using rule 165 (empty -> .) ]
  ! CASE            [ reduce using rule 165 (empty -> .) ]
  ! WITH            [ reduce using rule 165 (empty -> .) ]
  ! REPEAT          [ reduce using rule 165 (empty -> .) ]

    statement                      shift and go to state 90
    if_statement                   shift and go to state 52
    assignment_statement           shift and go to state 53
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    case_statement                 shift and go to state 58
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    empty                          shift and go to state 91
    variable                       shift and go to state 62

state 48

    (94) compound_statement -> BEGIN local_var_declarations . statement_list END
    (97) statement_list -> . statement_list statement SEMICOLON
    (98) statement_list -> . statement_list statement
    (99) statement_list -> . statement
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (165) empty -> .
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for READLN resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    IF              shift and go to state 67
    ID              shift and go to state 66
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    CASE            shift and go to state 70
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72
    END             reduce using rule 165 (empty -> .)
    SEMICOLON       reduce using rule 165 (empty -> .)

  ! READLN          [ reduce using rule 165 (empty -> .) ]
  ! WRITE           [ reduce using rule 165 (empty -> .) ]
  ! WRITELN         [ reduce using rule 165 (empty -> .) ]
  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! IF              [ reduce using rule 165 (empty -> .) ]
  ! ID              [ reduce using rule 165 (empty -> .) ]
  ! WHILE           [ reduce using rule 165 (empty -> .) ]
  ! BEGIN           [ reduce using rule 165 (empty -> .) ]
  ! FOR             [ reduce using rule 165 (empty -> .) ]
  ! CASE            [ reduce using rule 165 (empty -> .) ]
  ! WITH            [ reduce using rule 165 (empty -> .) ]
  ! REPEAT          [ reduce using rule 165 (empty -> .) ]

    statement_list                 shift and go to state 92
    statement                      shift and go to state 49
    if_statement                   shift and go to state 52
    assignment_statement           shift and go to state 53
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    case_statement                 shift and go to state 58
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    empty                          shift and go to state 91
    variable                       shift and go to state 62

state 49

    (99) statement_list -> statement .

    END             reduce using rule 99 (statement_list -> statement .)
    READLN          reduce using rule 99 (statement_list -> statement .)
    WRITE           reduce using rule 99 (statement_list -> statement .)
    WRITELN         reduce using rule 99 (statement_list -> statement .)
    USES            reduce using rule 99 (statement_list -> statement .)
    IF              reduce using rule 99 (statement_list -> statement .)
    ID              reduce using rule 99 (statement_list -> statement .)
    WHILE           reduce using rule 99 (statement_list -> statement .)
    BEGIN           reduce using rule 99 (statement_list -> statement .)
    FOR             reduce using rule 99 (statement_list -> statement .)
    CASE            reduce using rule 99 (statement_list -> statement .)
    WITH            reduce using rule 99 (statement_list -> statement .)
    REPEAT          reduce using rule 99 (statement_list -> statement .)
    SEMICOLON       reduce using rule 99 (statement_list -> statement .)
    UNTIL           reduce using rule 99 (statement_list -> statement .)


state 50

    (95) local_var_declarations -> var_declaration .

    READLN          reduce using rule 95 (local_var_declarations -> var_declaration .)
    WRITE           reduce using rule 95 (local_var_declarations -> var_declaration .)
    WRITELN         reduce using rule 95 (local_var_declarations -> var_declaration .)
    USES            reduce using rule 95 (local_var_declarations -> var_declaration .)
    IF              reduce using rule 95 (local_var_declarations -> var_declaration .)
    ID              reduce using rule 95 (local_var_declarations -> var_declaration .)
    WHILE           reduce using rule 95 (local_var_declarations -> var_declaration .)
    BEGIN           reduce using rule 95 (local_var_declarations -> var_declaration .)
    FOR             reduce using rule 95 (local_var_declarations -> var_declaration .)
    CASE            reduce using rule 95 (local_var_declarations -> var_declaration .)
    WITH            reduce using rule 95 (local_var_declarations -> var_declaration .)
    REPEAT          reduce using rule 95 (local_var_declarations -> var_declaration .)
    END             reduce using rule 95 (local_var_declarations -> var_declaration .)
    SEMICOLON       reduce using rule 95 (local_var_declarations -> var_declaration .)


state 51

    (96) local_var_declarations -> empty .
    (109) statement -> empty .

  ! reduce/reduce conflict for END resolved using rule 96 (local_var_declarations -> empty .)
  ! reduce/reduce conflict for READLN resolved using rule 96 (local_var_declarations -> empty .)
  ! reduce/reduce conflict for WRITE resolved using rule 96 (local_var_declarations -> empty .)
  ! reduce/reduce conflict for WRITELN resolved using rule 96 (local_var_declarations -> empty .)
  ! reduce/reduce conflict for USES resolved using rule 96 (local_var_declarations -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 96 (local_var_declarations -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 96 (local_var_declarations -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 96 (local_var_declarations -> empty .)
  ! reduce/reduce conflict for BEGIN resolved using rule 96 (local_var_declarations -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 96 (local_var_declarations -> empty .)
  ! reduce/reduce conflict for CASE resolved using rule 96 (local_var_declarations -> empty .)
  ! reduce/reduce conflict for WITH resolved using rule 96 (local_var_declarations -> empty .)
  ! reduce/reduce conflict for REPEAT resolved using rule 96 (local_var_declarations -> empty .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 96 (local_var_declarations -> empty .)
    READLN          reduce using rule 96 (local_var_declarations -> empty .)
    WRITE           reduce using rule 96 (local_var_declarations -> empty .)
    WRITELN         reduce using rule 96 (local_var_declarations -> empty .)
    USES            reduce using rule 96 (local_var_declarations -> empty .)
    IF              reduce using rule 96 (local_var_declarations -> empty .)
    ID              reduce using rule 96 (local_var_declarations -> empty .)
    WHILE           reduce using rule 96 (local_var_declarations -> empty .)
    BEGIN           reduce using rule 96 (local_var_declarations -> empty .)
    FOR             reduce using rule 96 (local_var_declarations -> empty .)
    CASE            reduce using rule 96 (local_var_declarations -> empty .)
    WITH            reduce using rule 96 (local_var_declarations -> empty .)
    REPEAT          reduce using rule 96 (local_var_declarations -> empty .)
    END             reduce using rule 96 (local_var_declarations -> empty .)
    SEMICOLON       reduce using rule 96 (local_var_declarations -> empty .)

  ! END             [ reduce using rule 109 (statement -> empty .) ]
  ! READLN          [ reduce using rule 109 (statement -> empty .) ]
  ! WRITE           [ reduce using rule 109 (statement -> empty .) ]
  ! WRITELN         [ reduce using rule 109 (statement -> empty .) ]
  ! USES            [ reduce using rule 109 (statement -> empty .) ]
  ! IF              [ reduce using rule 109 (statement -> empty .) ]
  ! ID              [ reduce using rule 109 (statement -> empty .) ]
  ! WHILE           [ reduce using rule 109 (statement -> empty .) ]
  ! BEGIN           [ reduce using rule 109 (statement -> empty .) ]
  ! FOR             [ reduce using rule 109 (statement -> empty .) ]
  ! CASE            [ reduce using rule 109 (statement -> empty .) ]
  ! WITH            [ reduce using rule 109 (statement -> empty .) ]
  ! REPEAT          [ reduce using rule 109 (statement -> empty .) ]
  ! SEMICOLON       [ reduce using rule 109 (statement -> empty .) ]


state 52

    (100) statement -> if_statement .

    END             reduce using rule 100 (statement -> if_statement .)
    READLN          reduce using rule 100 (statement -> if_statement .)
    WRITE           reduce using rule 100 (statement -> if_statement .)
    WRITELN         reduce using rule 100 (statement -> if_statement .)
    USES            reduce using rule 100 (statement -> if_statement .)
    IF              reduce using rule 100 (statement -> if_statement .)
    ID              reduce using rule 100 (statement -> if_statement .)
    WHILE           reduce using rule 100 (statement -> if_statement .)
    BEGIN           reduce using rule 100 (statement -> if_statement .)
    FOR             reduce using rule 100 (statement -> if_statement .)
    CASE            reduce using rule 100 (statement -> if_statement .)
    WITH            reduce using rule 100 (statement -> if_statement .)
    REPEAT          reduce using rule 100 (statement -> if_statement .)
    SEMICOLON       reduce using rule 100 (statement -> if_statement .)
    UNTIL           reduce using rule 100 (statement -> if_statement .)
    ELSE            reduce using rule 100 (statement -> if_statement .)
    RPAREN          reduce using rule 100 (statement -> if_statement .)
    VAR             reduce using rule 100 (statement -> if_statement .)
    CONSTRUCTOR     reduce using rule 100 (statement -> if_statement .)
    PROCEDURE       reduce using rule 100 (statement -> if_statement .)
    FUNCTION        reduce using rule 100 (statement -> if_statement .)
    DESTRUCTOR      reduce using rule 100 (statement -> if_statement .)
    THEN            reduce using rule 100 (statement -> if_statement .)


state 53

    (101) statement -> assignment_statement .

    END             reduce using rule 101 (statement -> assignment_statement .)
    READLN          reduce using rule 101 (statement -> assignment_statement .)
    WRITE           reduce using rule 101 (statement -> assignment_statement .)
    WRITELN         reduce using rule 101 (statement -> assignment_statement .)
    USES            reduce using rule 101 (statement -> assignment_statement .)
    IF              reduce using rule 101 (statement -> assignment_statement .)
    ID              reduce using rule 101 (statement -> assignment_statement .)
    WHILE           reduce using rule 101 (statement -> assignment_statement .)
    BEGIN           reduce using rule 101 (statement -> assignment_statement .)
    FOR             reduce using rule 101 (statement -> assignment_statement .)
    CASE            reduce using rule 101 (statement -> assignment_statement .)
    WITH            reduce using rule 101 (statement -> assignment_statement .)
    REPEAT          reduce using rule 101 (statement -> assignment_statement .)
    SEMICOLON       reduce using rule 101 (statement -> assignment_statement .)
    UNTIL           reduce using rule 101 (statement -> assignment_statement .)
    ELSE            reduce using rule 101 (statement -> assignment_statement .)
    RPAREN          reduce using rule 101 (statement -> assignment_statement .)
    VAR             reduce using rule 101 (statement -> assignment_statement .)
    CONSTRUCTOR     reduce using rule 101 (statement -> assignment_statement .)
    PROCEDURE       reduce using rule 101 (statement -> assignment_statement .)
    FUNCTION        reduce using rule 101 (statement -> assignment_statement .)
    DESTRUCTOR      reduce using rule 101 (statement -> assignment_statement .)
    THEN            reduce using rule 101 (statement -> assignment_statement .)


state 54

    (102) statement -> while_statement .

    END             reduce using rule 102 (statement -> while_statement .)
    READLN          reduce using rule 102 (statement -> while_statement .)
    WRITE           reduce using rule 102 (statement -> while_statement .)
    WRITELN         reduce using rule 102 (statement -> while_statement .)
    USES            reduce using rule 102 (statement -> while_statement .)
    IF              reduce using rule 102 (statement -> while_statement .)
    ID              reduce using rule 102 (statement -> while_statement .)
    WHILE           reduce using rule 102 (statement -> while_statement .)
    BEGIN           reduce using rule 102 (statement -> while_statement .)
    FOR             reduce using rule 102 (statement -> while_statement .)
    CASE            reduce using rule 102 (statement -> while_statement .)
    WITH            reduce using rule 102 (statement -> while_statement .)
    REPEAT          reduce using rule 102 (statement -> while_statement .)
    SEMICOLON       reduce using rule 102 (statement -> while_statement .)
    UNTIL           reduce using rule 102 (statement -> while_statement .)
    RPAREN          reduce using rule 102 (statement -> while_statement .)
    VAR             reduce using rule 102 (statement -> while_statement .)
    CONSTRUCTOR     reduce using rule 102 (statement -> while_statement .)
    PROCEDURE       reduce using rule 102 (statement -> while_statement .)
    FUNCTION        reduce using rule 102 (statement -> while_statement .)
    DESTRUCTOR      reduce using rule 102 (statement -> while_statement .)
    ELSE            reduce using rule 102 (statement -> while_statement .)
    THEN            reduce using rule 102 (statement -> while_statement .)


state 55

    (103) statement -> procedure_call .

    END             reduce using rule 103 (statement -> procedure_call .)
    READLN          reduce using rule 103 (statement -> procedure_call .)
    WRITE           reduce using rule 103 (statement -> procedure_call .)
    WRITELN         reduce using rule 103 (statement -> procedure_call .)
    USES            reduce using rule 103 (statement -> procedure_call .)
    IF              reduce using rule 103 (statement -> procedure_call .)
    ID              reduce using rule 103 (statement -> procedure_call .)
    WHILE           reduce using rule 103 (statement -> procedure_call .)
    BEGIN           reduce using rule 103 (statement -> procedure_call .)
    FOR             reduce using rule 103 (statement -> procedure_call .)
    CASE            reduce using rule 103 (statement -> procedure_call .)
    WITH            reduce using rule 103 (statement -> procedure_call .)
    REPEAT          reduce using rule 103 (statement -> procedure_call .)
    SEMICOLON       reduce using rule 103 (statement -> procedure_call .)
    UNTIL           reduce using rule 103 (statement -> procedure_call .)
    RPAREN          reduce using rule 103 (statement -> procedure_call .)
    VAR             reduce using rule 103 (statement -> procedure_call .)
    CONSTRUCTOR     reduce using rule 103 (statement -> procedure_call .)
    PROCEDURE       reduce using rule 103 (statement -> procedure_call .)
    FUNCTION        reduce using rule 103 (statement -> procedure_call .)
    DESTRUCTOR      reduce using rule 103 (statement -> procedure_call .)
    ELSE            reduce using rule 103 (statement -> procedure_call .)
    THEN            reduce using rule 103 (statement -> procedure_call .)


state 56

    (104) statement -> compound_statement .

    END             reduce using rule 104 (statement -> compound_statement .)
    READLN          reduce using rule 104 (statement -> compound_statement .)
    WRITE           reduce using rule 104 (statement -> compound_statement .)
    WRITELN         reduce using rule 104 (statement -> compound_statement .)
    USES            reduce using rule 104 (statement -> compound_statement .)
    IF              reduce using rule 104 (statement -> compound_statement .)
    ID              reduce using rule 104 (statement -> compound_statement .)
    WHILE           reduce using rule 104 (statement -> compound_statement .)
    BEGIN           reduce using rule 104 (statement -> compound_statement .)
    FOR             reduce using rule 104 (statement -> compound_statement .)
    CASE            reduce using rule 104 (statement -> compound_statement .)
    WITH            reduce using rule 104 (statement -> compound_statement .)
    REPEAT          reduce using rule 104 (statement -> compound_statement .)
    SEMICOLON       reduce using rule 104 (statement -> compound_statement .)
    UNTIL           reduce using rule 104 (statement -> compound_statement .)
    RPAREN          reduce using rule 104 (statement -> compound_statement .)
    VAR             reduce using rule 104 (statement -> compound_statement .)
    CONSTRUCTOR     reduce using rule 104 (statement -> compound_statement .)
    PROCEDURE       reduce using rule 104 (statement -> compound_statement .)
    FUNCTION        reduce using rule 104 (statement -> compound_statement .)
    DESTRUCTOR      reduce using rule 104 (statement -> compound_statement .)
    ELSE            reduce using rule 104 (statement -> compound_statement .)
    THEN            reduce using rule 104 (statement -> compound_statement .)


state 57

    (105) statement -> for_statement .

    END             reduce using rule 105 (statement -> for_statement .)
    READLN          reduce using rule 105 (statement -> for_statement .)
    WRITE           reduce using rule 105 (statement -> for_statement .)
    WRITELN         reduce using rule 105 (statement -> for_statement .)
    USES            reduce using rule 105 (statement -> for_statement .)
    IF              reduce using rule 105 (statement -> for_statement .)
    ID              reduce using rule 105 (statement -> for_statement .)
    WHILE           reduce using rule 105 (statement -> for_statement .)
    BEGIN           reduce using rule 105 (statement -> for_statement .)
    FOR             reduce using rule 105 (statement -> for_statement .)
    CASE            reduce using rule 105 (statement -> for_statement .)
    WITH            reduce using rule 105 (statement -> for_statement .)
    REPEAT          reduce using rule 105 (statement -> for_statement .)
    SEMICOLON       reduce using rule 105 (statement -> for_statement .)
    UNTIL           reduce using rule 105 (statement -> for_statement .)
    RPAREN          reduce using rule 105 (statement -> for_statement .)
    VAR             reduce using rule 105 (statement -> for_statement .)
    CONSTRUCTOR     reduce using rule 105 (statement -> for_statement .)
    PROCEDURE       reduce using rule 105 (statement -> for_statement .)
    FUNCTION        reduce using rule 105 (statement -> for_statement .)
    DESTRUCTOR      reduce using rule 105 (statement -> for_statement .)
    ELSE            reduce using rule 105 (statement -> for_statement .)
    THEN            reduce using rule 105 (statement -> for_statement .)


state 58

    (106) statement -> case_statement .

    END             reduce using rule 106 (statement -> case_statement .)
    READLN          reduce using rule 106 (statement -> case_statement .)
    WRITE           reduce using rule 106 (statement -> case_statement .)
    WRITELN         reduce using rule 106 (statement -> case_statement .)
    USES            reduce using rule 106 (statement -> case_statement .)
    IF              reduce using rule 106 (statement -> case_statement .)
    ID              reduce using rule 106 (statement -> case_statement .)
    WHILE           reduce using rule 106 (statement -> case_statement .)
    BEGIN           reduce using rule 106 (statement -> case_statement .)
    FOR             reduce using rule 106 (statement -> case_statement .)
    CASE            reduce using rule 106 (statement -> case_statement .)
    WITH            reduce using rule 106 (statement -> case_statement .)
    REPEAT          reduce using rule 106 (statement -> case_statement .)
    SEMICOLON       reduce using rule 106 (statement -> case_statement .)
    UNTIL           reduce using rule 106 (statement -> case_statement .)
    ELSE            reduce using rule 106 (statement -> case_statement .)
    RPAREN          reduce using rule 106 (statement -> case_statement .)
    VAR             reduce using rule 106 (statement -> case_statement .)
    CONSTRUCTOR     reduce using rule 106 (statement -> case_statement .)
    PROCEDURE       reduce using rule 106 (statement -> case_statement .)
    FUNCTION        reduce using rule 106 (statement -> case_statement .)
    DESTRUCTOR      reduce using rule 106 (statement -> case_statement .)
    THEN            reduce using rule 106 (statement -> case_statement .)


state 59

    (107) statement -> with_statement .

    END             reduce using rule 107 (statement -> with_statement .)
    READLN          reduce using rule 107 (statement -> with_statement .)
    WRITE           reduce using rule 107 (statement -> with_statement .)
    WRITELN         reduce using rule 107 (statement -> with_statement .)
    USES            reduce using rule 107 (statement -> with_statement .)
    IF              reduce using rule 107 (statement -> with_statement .)
    ID              reduce using rule 107 (statement -> with_statement .)
    WHILE           reduce using rule 107 (statement -> with_statement .)
    BEGIN           reduce using rule 107 (statement -> with_statement .)
    FOR             reduce using rule 107 (statement -> with_statement .)
    CASE            reduce using rule 107 (statement -> with_statement .)
    WITH            reduce using rule 107 (statement -> with_statement .)
    REPEAT          reduce using rule 107 (statement -> with_statement .)
    SEMICOLON       reduce using rule 107 (statement -> with_statement .)
    UNTIL           reduce using rule 107 (statement -> with_statement .)
    RPAREN          reduce using rule 107 (statement -> with_statement .)
    VAR             reduce using rule 107 (statement -> with_statement .)
    CONSTRUCTOR     reduce using rule 107 (statement -> with_statement .)
    PROCEDURE       reduce using rule 107 (statement -> with_statement .)
    FUNCTION        reduce using rule 107 (statement -> with_statement .)
    DESTRUCTOR      reduce using rule 107 (statement -> with_statement .)
    ELSE            reduce using rule 107 (statement -> with_statement .)
    THEN            reduce using rule 107 (statement -> with_statement .)


state 60

    (108) statement -> repeat_statement .

    END             reduce using rule 108 (statement -> repeat_statement .)
    READLN          reduce using rule 108 (statement -> repeat_statement .)
    WRITE           reduce using rule 108 (statement -> repeat_statement .)
    WRITELN         reduce using rule 108 (statement -> repeat_statement .)
    USES            reduce using rule 108 (statement -> repeat_statement .)
    IF              reduce using rule 108 (statement -> repeat_statement .)
    ID              reduce using rule 108 (statement -> repeat_statement .)
    WHILE           reduce using rule 108 (statement -> repeat_statement .)
    BEGIN           reduce using rule 108 (statement -> repeat_statement .)
    FOR             reduce using rule 108 (statement -> repeat_statement .)
    CASE            reduce using rule 108 (statement -> repeat_statement .)
    WITH            reduce using rule 108 (statement -> repeat_statement .)
    REPEAT          reduce using rule 108 (statement -> repeat_statement .)
    SEMICOLON       reduce using rule 108 (statement -> repeat_statement .)
    UNTIL           reduce using rule 108 (statement -> repeat_statement .)
    RPAREN          reduce using rule 108 (statement -> repeat_statement .)
    VAR             reduce using rule 108 (statement -> repeat_statement .)
    CONSTRUCTOR     reduce using rule 108 (statement -> repeat_statement .)
    PROCEDURE       reduce using rule 108 (statement -> repeat_statement .)
    FUNCTION        reduce using rule 108 (statement -> repeat_statement .)
    DESTRUCTOR      reduce using rule 108 (statement -> repeat_statement .)
    ELSE            reduce using rule 108 (statement -> repeat_statement .)
    THEN            reduce using rule 108 (statement -> repeat_statement .)


state 61

    (166) statement -> READLN .
    (167) statement -> READLN . LPAREN variable RPAREN
    (168) statement -> READLN . LBRACKET variable RBRACKET
    (169) statement -> READLN . LPAREN variable_list RPAREN

    END             reduce using rule 166 (statement -> READLN .)
    READLN          reduce using rule 166 (statement -> READLN .)
    WRITE           reduce using rule 166 (statement -> READLN .)
    WRITELN         reduce using rule 166 (statement -> READLN .)
    USES            reduce using rule 166 (statement -> READLN .)
    IF              reduce using rule 166 (statement -> READLN .)
    ID              reduce using rule 166 (statement -> READLN .)
    WHILE           reduce using rule 166 (statement -> READLN .)
    BEGIN           reduce using rule 166 (statement -> READLN .)
    FOR             reduce using rule 166 (statement -> READLN .)
    CASE            reduce using rule 166 (statement -> READLN .)
    WITH            reduce using rule 166 (statement -> READLN .)
    REPEAT          reduce using rule 166 (statement -> READLN .)
    SEMICOLON       reduce using rule 166 (statement -> READLN .)
    UNTIL           reduce using rule 166 (statement -> READLN .)
    RPAREN          reduce using rule 166 (statement -> READLN .)
    VAR             reduce using rule 166 (statement -> READLN .)
    CONSTRUCTOR     reduce using rule 166 (statement -> READLN .)
    PROCEDURE       reduce using rule 166 (statement -> READLN .)
    FUNCTION        reduce using rule 166 (statement -> READLN .)
    DESTRUCTOR      reduce using rule 166 (statement -> READLN .)
    ELSE            reduce using rule 166 (statement -> READLN .)
    THEN            reduce using rule 166 (statement -> READLN .)
    LPAREN          shift and go to state 93
    LBRACKET        shift and go to state 94


state 62

    (117) assignment_statement -> variable . COLON_EQUAL expression
    (118) assignment_statement -> variable . COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> variable . PLUS COLON_EQUAL expression
    (120) assignment_statement -> variable . MINUS COLON_EQUAL expression
    (121) assignment_statement -> variable . TIMES COLON_EQUAL expression
    (122) assignment_statement -> variable . DIVIDE COLON_EQUAL expression
    (125) variable -> variable . LBRACKET expression RBRACKET
    (126) variable -> variable . DOT ID

    COLON_EQUAL     shift and go to state 95
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    TIMES           shift and go to state 98
    DIVIDE          shift and go to state 99
    LBRACKET        shift and go to state 100
    DOT             shift and go to state 101


state 63

    (172) statement -> WRITE . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 102


state 64

    (173) statement -> WRITELN . LPAREN write_arguments RPAREN
    (174) statement -> WRITELN . LPAREN expression RPAREN

    LPAREN          shift and go to state 103


state 65

    (180) statement -> USES . ID SEMICOLON

    ID              shift and go to state 104


state 66

    (123) assignment_statement -> ID . COLON_EQUAL expression
    (131) procedure_call -> ID . LPAREN expression_list RPAREN
    (132) procedure_call -> ID .
    (124) variable -> ID .
    (127) variable -> ID . LBRACKET index_list RBRACKET

  ! shift/reduce conflict for COLON_EQUAL resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    COLON_EQUAL     shift and go to state 105
    LPAREN          shift and go to state 106
    END             reduce using rule 132 (procedure_call -> ID .)
    READLN          reduce using rule 132 (procedure_call -> ID .)
    WRITE           reduce using rule 132 (procedure_call -> ID .)
    WRITELN         reduce using rule 132 (procedure_call -> ID .)
    USES            reduce using rule 132 (procedure_call -> ID .)
    IF              reduce using rule 132 (procedure_call -> ID .)
    ID              reduce using rule 132 (procedure_call -> ID .)
    WHILE           reduce using rule 132 (procedure_call -> ID .)
    BEGIN           reduce using rule 132 (procedure_call -> ID .)
    FOR             reduce using rule 132 (procedure_call -> ID .)
    CASE            reduce using rule 132 (procedure_call -> ID .)
    WITH            reduce using rule 132 (procedure_call -> ID .)
    REPEAT          reduce using rule 132 (procedure_call -> ID .)
    SEMICOLON       reduce using rule 132 (procedure_call -> ID .)
    UNTIL           reduce using rule 132 (procedure_call -> ID .)
    ELSE            reduce using rule 132 (procedure_call -> ID .)
    RPAREN          reduce using rule 132 (procedure_call -> ID .)
    VAR             reduce using rule 132 (procedure_call -> ID .)
    CONSTRUCTOR     reduce using rule 132 (procedure_call -> ID .)
    PROCEDURE       reduce using rule 132 (procedure_call -> ID .)
    FUNCTION        reduce using rule 132 (procedure_call -> ID .)
    DESTRUCTOR      reduce using rule 132 (procedure_call -> ID .)
    THEN            reduce using rule 132 (procedure_call -> ID .)
    PLUS            reduce using rule 124 (variable -> ID .)
    MINUS           reduce using rule 124 (variable -> ID .)
    TIMES           reduce using rule 124 (variable -> ID .)
    DIVIDE          reduce using rule 124 (variable -> ID .)
    DOT             reduce using rule 124 (variable -> ID .)
    LBRACKET        shift and go to state 107

  ! COLON_EQUAL     [ reduce using rule 124 (variable -> ID .) ]
  ! LBRACKET        [ reduce using rule 124 (variable -> ID .) ]


state 67

    (111) if_statement -> IF . expression THEN statement ELSE statement
    (112) if_statement -> IF . expression THEN statement
    (113) if_statement -> IF . expression IN statement THEN statement ELSE statement
    (114) if_statement -> IF . expression IN statement THEN statement
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    expression                     shift and go to state 108
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 68

    (130) while_statement -> WHILE . expression DO statement
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    expression                     shift and go to state 119
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 69

    (115) for_statement -> FOR . ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> FOR . ID COLON_EQUAL expression DOWNTO expression DO block

    ID              shift and go to state 120


state 70

    (75) case_statement -> CASE . expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> CASE . expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> CASE . expression OF case_list_opt_semicolon END
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    expression                     shift and go to state 121
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 71

    (110) with_statement -> WITH . variable DO statement
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    ID              shift and go to state 123

    variable                       shift and go to state 122

state 72

    (182) repeat_statement -> REPEAT . statement_list UNTIL expression SEMICOLON
    (97) statement_list -> . statement_list statement SEMICOLON
    (98) statement_list -> . statement_list statement
    (99) statement_list -> . statement
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (165) empty -> .
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for READLN resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    IF              shift and go to state 67
    ID              shift and go to state 66
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    CASE            shift and go to state 70
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72
    UNTIL           reduce using rule 165 (empty -> .)
    SEMICOLON       reduce using rule 165 (empty -> .)

  ! READLN          [ reduce using rule 165 (empty -> .) ]
  ! WRITE           [ reduce using rule 165 (empty -> .) ]
  ! WRITELN         [ reduce using rule 165 (empty -> .) ]
  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! IF              [ reduce using rule 165 (empty -> .) ]
  ! ID              [ reduce using rule 165 (empty -> .) ]
  ! WHILE           [ reduce using rule 165 (empty -> .) ]
  ! BEGIN           [ reduce using rule 165 (empty -> .) ]
  ! FOR             [ reduce using rule 165 (empty -> .) ]
  ! CASE            [ reduce using rule 165 (empty -> .) ]
  ! WITH            [ reduce using rule 165 (empty -> .) ]
  ! REPEAT          [ reduce using rule 165 (empty -> .) ]

    statement_list                 shift and go to state 124
    statement                      shift and go to state 49
    if_statement                   shift and go to state 52
    assignment_statement           shift and go to state 53
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    case_statement                 shift and go to state 58
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    empty                          shift and go to state 91
    variable                       shift and go to state 62

state 73

    (81) procedure_declaration -> PROCEDURE ID . LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (82) procedure_declaration -> PROCEDURE ID . LPAREN RPAREN SEMICOLON block SEMICOLON

    LPAREN          shift and go to state 87


state 74

    (18) uses_opt -> USES id_list SEMICOLON .

    USES            reduce using rule 18 (uses_opt -> USES id_list SEMICOLON .)
    CONST           reduce using rule 18 (uses_opt -> USES id_list SEMICOLON .)
    TYPE            reduce using rule 18 (uses_opt -> USES id_list SEMICOLON .)
    VAR             reduce using rule 18 (uses_opt -> USES id_list SEMICOLON .)
    FUNCTION        reduce using rule 18 (uses_opt -> USES id_list SEMICOLON .)
    CONSTRUCTOR     reduce using rule 18 (uses_opt -> USES id_list SEMICOLON .)
    PROCEDURE       reduce using rule 18 (uses_opt -> USES id_list SEMICOLON .)
    DESTRUCTOR      reduce using rule 18 (uses_opt -> USES id_list SEMICOLON .)
    BEGIN           reduce using rule 18 (uses_opt -> USES id_list SEMICOLON .)


state 75

    (20) id_list -> id_list COMMA . ID

    ID              shift and go to state 125


state 76

    (184) constant_list -> constant_list constant .

    ID              reduce using rule 184 (constant_list -> constant_list constant .)
    USES            reduce using rule 184 (constant_list -> constant_list constant .)
    CONST           reduce using rule 184 (constant_list -> constant_list constant .)
    TYPE            reduce using rule 184 (constant_list -> constant_list constant .)
    VAR             reduce using rule 184 (constant_list -> constant_list constant .)
    FUNCTION        reduce using rule 184 (constant_list -> constant_list constant .)
    CONSTRUCTOR     reduce using rule 184 (constant_list -> constant_list constant .)
    PROCEDURE       reduce using rule 184 (constant_list -> constant_list constant .)
    DESTRUCTOR      reduce using rule 184 (constant_list -> constant_list constant .)
    BEGIN           reduce using rule 184 (constant_list -> constant_list constant .)


state 77

    (185) constant -> ID EQUAL . CHARACTER_LITERAL SEMICOLON
    (186) constant -> ID EQUAL . NUMBER SEMICOLON
    (187) constant -> ID EQUAL . STRING_LITERAL SEMICOLON
    (188) constant -> ID EQUAL . BOOLEAN_LITERAL SEMICOLON

    CHARACTER_LITERAL shift and go to state 126
    NUMBER          shift and go to state 127
    STRING_LITERAL  shift and go to state 128
    BOOLEAN_LITERAL shift and go to state 129


state 78

    (28) type_list -> type_list type_definition .

    ID              reduce using rule 28 (type_list -> type_list type_definition .)
    USES            reduce using rule 28 (type_list -> type_list type_definition .)
    CONST           reduce using rule 28 (type_list -> type_list type_definition .)
    TYPE            reduce using rule 28 (type_list -> type_list type_definition .)
    VAR             reduce using rule 28 (type_list -> type_list type_definition .)
    FUNCTION        reduce using rule 28 (type_list -> type_list type_definition .)
    CONSTRUCTOR     reduce using rule 28 (type_list -> type_list type_definition .)
    PROCEDURE       reduce using rule 28 (type_list -> type_list type_definition .)
    DESTRUCTOR      reduce using rule 28 (type_list -> type_list type_definition .)
    BEGIN           reduce using rule 28 (type_list -> type_list type_definition .)


state 79

    (29) type_definition -> ID EQUAL . type_specifier SEMICOLON
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (78) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 132
    FILE            shift and go to state 134
    SET             shift and go to state 135
    RECORD          shift and go to state 136
    OBJECT          shift and go to state 137
    LPAREN          shift and go to state 138
    BOOLEAN_LITERAL shift and go to state 139
    INTEGER         shift and go to state 140
    BYTE            shift and go to state 141
    CHAR            shift and go to state 142
    STRING          shift and go to state 143
    ID              shift and go to state 130
    LONGINT         shift and go to state 145
    NUMBER          shift and go to state 144

    type_specifier                 shift and go to state 131
    subrange                       shift and go to state 133

state 80

    (23) declaration_list -> declaration_list declaration .

    ID              reduce using rule 23 (declaration_list -> declaration_list declaration .)
    USES            reduce using rule 23 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 23 (declaration_list -> declaration_list declaration .)
    TYPE            reduce using rule 23 (declaration_list -> declaration_list declaration .)
    VAR             reduce using rule 23 (declaration_list -> declaration_list declaration .)
    FUNCTION        reduce using rule 23 (declaration_list -> declaration_list declaration .)
    CONSTRUCTOR     reduce using rule 23 (declaration_list -> declaration_list declaration .)
    PROCEDURE       reduce using rule 23 (declaration_list -> declaration_list declaration .)
    DESTRUCTOR      reduce using rule 23 (declaration_list -> declaration_list declaration .)
    BEGIN           reduce using rule 23 (declaration_list -> declaration_list declaration .)
    READLN          reduce using rule 23 (declaration_list -> declaration_list declaration .)
    WRITE           reduce using rule 23 (declaration_list -> declaration_list declaration .)
    WRITELN         reduce using rule 23 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 23 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 23 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 23 (declaration_list -> declaration_list declaration .)
    CASE            reduce using rule 23 (declaration_list -> declaration_list declaration .)
    WITH            reduce using rule 23 (declaration_list -> declaration_list declaration .)
    REPEAT          reduce using rule 23 (declaration_list -> declaration_list declaration .)
    END             reduce using rule 23 (declaration_list -> declaration_list declaration .)
    SEMICOLON       reduce using rule 23 (declaration_list -> declaration_list declaration .)


state 81

    (24) declaration -> id_list COLON . type_specifier SEMICOLON
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (78) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 132
    FILE            shift and go to state 134
    SET             shift and go to state 135
    RECORD          shift and go to state 136
    OBJECT          shift and go to state 137
    LPAREN          shift and go to state 138
    BOOLEAN_LITERAL shift and go to state 139
    INTEGER         shift and go to state 140
    BYTE            shift and go to state 141
    CHAR            shift and go to state 142
    STRING          shift and go to state 143
    ID              shift and go to state 130
    LONGINT         shift and go to state 145
    NUMBER          shift and go to state 144

    type_specifier                 shift and go to state 146
    subrange                       shift and go to state 133

state 82

    (83) function_declaration -> FUNCTION ID LPAREN . parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (84) function_declaration -> FUNCTION ID LPAREN . parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (85) function_declaration -> FUNCTION ID LPAREN . RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (86) function_declaration -> FUNCTION ID LPAREN . RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (89) parameter_list -> . parameter_list SEMICOLON parameter
    (90) parameter_list -> . parameter
    (91) parameter_list -> . empty
    (92) parameter -> . ID COLON type_specifier
    (165) empty -> .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 149
    ID              shift and go to state 147
    SEMICOLON       reduce using rule 165 (empty -> .)

  ! RPAREN          [ reduce using rule 165 (empty -> .) ]

    parameter_list                 shift and go to state 148
    parameter                      shift and go to state 150
    empty                          shift and go to state 151

state 83

    (14) method_declaration -> FUNCTION ID DOT . ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block

    ID              shift and go to state 152


state 84

    (16) constructor_declaration -> CONSTRUCTOR ID LPAREN . field_list RPAREN SEMICOLON block
    (17) constructor_declaration -> CONSTRUCTOR ID LPAREN . RPAREN SEMICOLON block
    (48) field_list -> . field_list field
    (49) field_list -> . field
    (50) field_list -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . statement
    (57) field -> . if_statement
    (58) field -> . case_statement
    (59) field -> . assignment_statement
    (165) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READLN resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
    RPAREN          shift and go to state 155
    VAR             shift and go to state 159
    ID              shift and go to state 153
    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    IF              shift and go to state 67
    CASE            shift and go to state 70
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72

  ! RPAREN          [ reduce using rule 165 (empty -> .) ]
  ! VAR             [ reduce using rule 165 (empty -> .) ]
  ! ID              [ reduce using rule 165 (empty -> .) ]
  ! READLN          [ reduce using rule 165 (empty -> .) ]
  ! WRITE           [ reduce using rule 165 (empty -> .) ]
  ! WRITELN         [ reduce using rule 165 (empty -> .) ]
  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! IF              [ reduce using rule 165 (empty -> .) ]
  ! CASE            [ reduce using rule 165 (empty -> .) ]
  ! WHILE           [ reduce using rule 165 (empty -> .) ]
  ! BEGIN           [ reduce using rule 165 (empty -> .) ]
  ! FOR             [ reduce using rule 165 (empty -> .) ]
  ! WITH            [ reduce using rule 165 (empty -> .) ]
  ! REPEAT          [ reduce using rule 165 (empty -> .) ]

    field_list                     shift and go to state 154
    field                          shift and go to state 156
    empty                          shift and go to state 157
    id_list                        shift and go to state 158
    statement                      shift and go to state 160
    if_statement                   shift and go to state 161
    case_statement                 shift and go to state 162
    assignment_statement           shift and go to state 163
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    variable                       shift and go to state 62

state 85

    (12) method_declaration -> CONSTRUCTOR ID DOT . ID LPAREN parameter_list RPAREN SEMICOLON block

    ID              shift and go to state 164


state 86

    (13) method_declaration -> PROCEDURE ID DOT . ID LPAREN parameter_list RPAREN SEMICOLON block

    ID              shift and go to state 165


state 87

    (81) procedure_declaration -> PROCEDURE ID LPAREN . parameter_list RPAREN SEMICOLON block SEMICOLON
    (82) procedure_declaration -> PROCEDURE ID LPAREN . RPAREN SEMICOLON block SEMICOLON
    (89) parameter_list -> . parameter_list SEMICOLON parameter
    (90) parameter_list -> . parameter
    (91) parameter_list -> . empty
    (92) parameter -> . ID COLON type_specifier
    (165) empty -> .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 167
    ID              shift and go to state 147
    SEMICOLON       reduce using rule 165 (empty -> .)

  ! RPAREN          [ reduce using rule 165 (empty -> .) ]

    parameter_list                 shift and go to state 166
    parameter                      shift and go to state 150
    empty                          shift and go to state 151

state 88

    (15) method_declaration -> DESTRUCTOR ID DOT . ID SEMICOLON block

    ID              shift and go to state 168


state 89

    (93) compound_statement -> BEGIN statement_list END .

    DOT             reduce using rule 93 (compound_statement -> BEGIN statement_list END .)
    USES            reduce using rule 93 (compound_statement -> BEGIN statement_list END .)
    CONST           reduce using rule 93 (compound_statement -> BEGIN statement_list END .)
    TYPE            reduce using rule 93 (compound_statement -> BEGIN statement_list END .)
    VAR             reduce using rule 93 (compound_statement -> BEGIN statement_list END .)
    FUNCTION        reduce using rule 93 (compound_statement -> BEGIN statement_list END .)
    CONSTRUCTOR     reduce using rule 93 (compound_statement -> BEGIN statement_list END .)
    PROCEDURE       reduce using rule 93 (compound_statement -> BEGIN statement_list END .)
    DESTRUCTOR      reduce using rule 93 (compound_statement -> BEGIN statement_list END .)
    BEGIN           reduce using rule 93 (compound_statement -> BEGIN statement_list END .)
    SEMICOLON       reduce using rule 93 (compound_statement -> BEGIN statement_list END .)
    END             reduce using rule 93 (compound_statement -> BEGIN statement_list END .)
    READLN          reduce using rule 93 (compound_statement -> BEGIN statement_list END .)
    WRITE           reduce using rule 93 (compound_statement -> BEGIN statement_list END .)
    WRITELN         reduce using rule 93 (compound_statement -> BEGIN statement_list END .)
    IF              reduce using rule 93 (compound_statement -> BEGIN statement_list END .)
    ID              reduce using rule 93 (compound_statement -> BEGIN statement_list END .)
    WHILE           reduce using rule 93 (compound_statement -> BEGIN statement_list END .)
    FOR             reduce using rule 93 (compound_statement -> BEGIN statement_list END .)
    CASE            reduce using rule 93 (compound_statement -> BEGIN statement_list END .)
    WITH            reduce using rule 93 (compound_statement -> BEGIN statement_list END .)
    REPEAT          reduce using rule 93 (compound_statement -> BEGIN statement_list END .)
    UNTIL           reduce using rule 93 (compound_statement -> BEGIN statement_list END .)
    RPAREN          reduce using rule 93 (compound_statement -> BEGIN statement_list END .)
    ELSE            reduce using rule 93 (compound_statement -> BEGIN statement_list END .)
    THEN            reduce using rule 93 (compound_statement -> BEGIN statement_list END .)


state 90

    (97) statement_list -> statement_list statement . SEMICOLON
    (98) statement_list -> statement_list statement .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 169
    END             reduce using rule 98 (statement_list -> statement_list statement .)
    READLN          reduce using rule 98 (statement_list -> statement_list statement .)
    WRITE           reduce using rule 98 (statement_list -> statement_list statement .)
    WRITELN         reduce using rule 98 (statement_list -> statement_list statement .)
    USES            reduce using rule 98 (statement_list -> statement_list statement .)
    IF              reduce using rule 98 (statement_list -> statement_list statement .)
    ID              reduce using rule 98 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 98 (statement_list -> statement_list statement .)
    BEGIN           reduce using rule 98 (statement_list -> statement_list statement .)
    FOR             reduce using rule 98 (statement_list -> statement_list statement .)
    CASE            reduce using rule 98 (statement_list -> statement_list statement .)
    WITH            reduce using rule 98 (statement_list -> statement_list statement .)
    REPEAT          reduce using rule 98 (statement_list -> statement_list statement .)
    UNTIL           reduce using rule 98 (statement_list -> statement_list statement .)

  ! SEMICOLON       [ reduce using rule 98 (statement_list -> statement_list statement .) ]


state 91

    (109) statement -> empty .

    SEMICOLON       reduce using rule 109 (statement -> empty .)
    END             reduce using rule 109 (statement -> empty .)
    READLN          reduce using rule 109 (statement -> empty .)
    WRITE           reduce using rule 109 (statement -> empty .)
    WRITELN         reduce using rule 109 (statement -> empty .)
    USES            reduce using rule 109 (statement -> empty .)
    IF              reduce using rule 109 (statement -> empty .)
    ID              reduce using rule 109 (statement -> empty .)
    WHILE           reduce using rule 109 (statement -> empty .)
    BEGIN           reduce using rule 109 (statement -> empty .)
    FOR             reduce using rule 109 (statement -> empty .)
    CASE            reduce using rule 109 (statement -> empty .)
    WITH            reduce using rule 109 (statement -> empty .)
    REPEAT          reduce using rule 109 (statement -> empty .)
    UNTIL           reduce using rule 109 (statement -> empty .)
    RPAREN          reduce using rule 109 (statement -> empty .)
    VAR             reduce using rule 109 (statement -> empty .)
    ELSE            reduce using rule 109 (statement -> empty .)
    CONSTRUCTOR     reduce using rule 109 (statement -> empty .)
    PROCEDURE       reduce using rule 109 (statement -> empty .)
    FUNCTION        reduce using rule 109 (statement -> empty .)
    DESTRUCTOR      reduce using rule 109 (statement -> empty .)
    THEN            reduce using rule 109 (statement -> empty .)


state 92

    (94) compound_statement -> BEGIN local_var_declarations statement_list . END
    (97) statement_list -> statement_list . statement SEMICOLON
    (98) statement_list -> statement_list . statement
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (165) empty -> .
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for READLN resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
    END             shift and go to state 170
    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    IF              shift and go to state 67
    ID              shift and go to state 66
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    CASE            shift and go to state 70
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72
    SEMICOLON       reduce using rule 165 (empty -> .)

  ! END             [ reduce using rule 165 (empty -> .) ]
  ! READLN          [ reduce using rule 165 (empty -> .) ]
  ! WRITE           [ reduce using rule 165 (empty -> .) ]
  ! WRITELN         [ reduce using rule 165 (empty -> .) ]
  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! IF              [ reduce using rule 165 (empty -> .) ]
  ! ID              [ reduce using rule 165 (empty -> .) ]
  ! WHILE           [ reduce using rule 165 (empty -> .) ]
  ! BEGIN           [ reduce using rule 165 (empty -> .) ]
  ! FOR             [ reduce using rule 165 (empty -> .) ]
  ! CASE            [ reduce using rule 165 (empty -> .) ]
  ! WITH            [ reduce using rule 165 (empty -> .) ]
  ! REPEAT          [ reduce using rule 165 (empty -> .) ]

    statement                      shift and go to state 90
    if_statement                   shift and go to state 52
    assignment_statement           shift and go to state 53
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    case_statement                 shift and go to state 58
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    empty                          shift and go to state 91
    variable                       shift and go to state 62

state 93

    (167) statement -> READLN LPAREN . variable RPAREN
    (169) statement -> READLN LPAREN . variable_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET
    (170) variable_list -> . variable
    (171) variable_list -> . variable_list COMMA variable

    ID              shift and go to state 123

    variable                       shift and go to state 171
    variable_list                  shift and go to state 172

state 94

    (168) statement -> READLN LBRACKET . variable RBRACKET
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    ID              shift and go to state 123

    variable                       shift and go to state 173

state 95

    (117) assignment_statement -> variable COLON_EQUAL . expression
    (118) assignment_statement -> variable COLON_EQUAL . BOOLEAN_LITERAL SEMICOLON
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    BOOLEAN_LITERAL shift and go to state 175
    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    variable                       shift and go to state 115
    expression                     shift and go to state 174
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113

state 96

    (119) assignment_statement -> variable PLUS . COLON_EQUAL expression

    COLON_EQUAL     shift and go to state 176


state 97

    (120) assignment_statement -> variable MINUS . COLON_EQUAL expression

    COLON_EQUAL     shift and go to state 177


state 98

    (121) assignment_statement -> variable TIMES . COLON_EQUAL expression

    COLON_EQUAL     shift and go to state 178


state 99

    (122) assignment_statement -> variable DIVIDE . COLON_EQUAL expression

    COLON_EQUAL     shift and go to state 179


state 100

    (125) variable -> variable LBRACKET . expression RBRACKET
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    variable                       shift and go to state 115
    expression                     shift and go to state 180
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113

state 101

    (126) variable -> variable DOT . ID

    ID              shift and go to state 181


state 102

    (172) statement -> WRITE LPAREN . expression_list RPAREN
    (133) expression_list -> . expression expression_list_tail
    (136) expression_list -> . empty
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (165) empty -> .
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    RPAREN          reduce using rule 165 (empty -> .)
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    expression_list                shift and go to state 182
    expression                     shift and go to state 183
    empty                          shift and go to state 184
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 103

    (173) statement -> WRITELN LPAREN . write_arguments RPAREN
    (174) statement -> WRITELN LPAREN . expression RPAREN
    (175) write_arguments -> . write_argument
    (176) write_arguments -> . write_arguments COMMA write_argument
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (177) write_argument -> . expression
    (178) write_argument -> . expression COLON expression
    (179) write_argument -> . expression COLON expression COLON expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    write_arguments                shift and go to state 185
    expression                     shift and go to state 186
    write_argument                 shift and go to state 187
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 104

    (180) statement -> USES ID . SEMICOLON

    SEMICOLON       shift and go to state 188


state 105

    (123) assignment_statement -> ID COLON_EQUAL . expression
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    expression                     shift and go to state 189
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 106

    (131) procedure_call -> ID LPAREN . expression_list RPAREN
    (133) expression_list -> . expression expression_list_tail
    (136) expression_list -> . empty
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (165) empty -> .
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    RPAREN          reduce using rule 165 (empty -> .)
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    expression_list                shift and go to state 190
    expression                     shift and go to state 183
    empty                          shift and go to state 184
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 107

    (127) variable -> ID LBRACKET . index_list RBRACKET
    (128) index_list -> . expression
    (129) index_list -> . index_list COMMA expression
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    index_list                     shift and go to state 191
    expression                     shift and go to state 192
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 108

    (111) if_statement -> IF expression . THEN statement ELSE statement
    (112) if_statement -> IF expression . THEN statement
    (113) if_statement -> IF expression . IN statement THEN statement ELSE statement
    (114) if_statement -> IF expression . IN statement THEN statement
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression

    THEN            shift and go to state 193
    IN              shift and go to state 194
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201


state 109

    (137) expression -> simple_expression . relop simple_expression
    (138) expression -> simple_expression .
    (159) relop -> . LESS
    (160) relop -> . LESS_EQUAL
    (161) relop -> . GREAT
    (162) relop -> . GREAT_EQUAL
    (163) relop -> . EQUAL
    (164) relop -> . DIFFERENT

    THEN            reduce using rule 138 (expression -> simple_expression .)
    IN              reduce using rule 138 (expression -> simple_expression .)
    PLUS            reduce using rule 138 (expression -> simple_expression .)
    MINUS           reduce using rule 138 (expression -> simple_expression .)
    TIMES           reduce using rule 138 (expression -> simple_expression .)
    DIVIDE          reduce using rule 138 (expression -> simple_expression .)
    MOD             reduce using rule 138 (expression -> simple_expression .)
    AND             reduce using rule 138 (expression -> simple_expression .)
    OR              reduce using rule 138 (expression -> simple_expression .)
    DO              reduce using rule 138 (expression -> simple_expression .)
    OF              reduce using rule 138 (expression -> simple_expression .)
    END             reduce using rule 138 (expression -> simple_expression .)
    READLN          reduce using rule 138 (expression -> simple_expression .)
    WRITE           reduce using rule 138 (expression -> simple_expression .)
    WRITELN         reduce using rule 138 (expression -> simple_expression .)
    USES            reduce using rule 138 (expression -> simple_expression .)
    IF              reduce using rule 138 (expression -> simple_expression .)
    ID              reduce using rule 138 (expression -> simple_expression .)
    WHILE           reduce using rule 138 (expression -> simple_expression .)
    BEGIN           reduce using rule 138 (expression -> simple_expression .)
    FOR             reduce using rule 138 (expression -> simple_expression .)
    CASE            reduce using rule 138 (expression -> simple_expression .)
    WITH            reduce using rule 138 (expression -> simple_expression .)
    REPEAT          reduce using rule 138 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 138 (expression -> simple_expression .)
    UNTIL           reduce using rule 138 (expression -> simple_expression .)
    RPAREN          reduce using rule 138 (expression -> simple_expression .)
    VAR             reduce using rule 138 (expression -> simple_expression .)
    CONSTRUCTOR     reduce using rule 138 (expression -> simple_expression .)
    PROCEDURE       reduce using rule 138 (expression -> simple_expression .)
    FUNCTION        reduce using rule 138 (expression -> simple_expression .)
    DESTRUCTOR      reduce using rule 138 (expression -> simple_expression .)
    ELSE            reduce using rule 138 (expression -> simple_expression .)
    RBRACKET        reduce using rule 138 (expression -> simple_expression .)
    COMMA           reduce using rule 138 (expression -> simple_expression .)
    COLON           reduce using rule 138 (expression -> simple_expression .)
    TO              reduce using rule 138 (expression -> simple_expression .)
    DOWNTO          reduce using rule 138 (expression -> simple_expression .)
    LESS            shift and go to state 203
    LESS_EQUAL      shift and go to state 204
    GREAT           shift and go to state 205
    GREAT_EQUAL     shift and go to state 206
    EQUAL           shift and go to state 207
    DIFFERENT       shift and go to state 208

    relop                          shift and go to state 202

state 110

    (191) expression -> NOT . expression
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    expression                     shift and go to state 209
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 111

    (139) simple_expression -> term . simple_expression_tail
    (140) simple_expression_tail -> . addop term
    (141) simple_expression_tail -> . empty
    (142) addop -> . PLUS
    (143) addop -> . MINUS
    (165) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 213
    MINUS           shift and go to state 214
    LESS            reduce using rule 165 (empty -> .)
    LESS_EQUAL      reduce using rule 165 (empty -> .)
    GREAT           reduce using rule 165 (empty -> .)
    GREAT_EQUAL     reduce using rule 165 (empty -> .)
    EQUAL           reduce using rule 165 (empty -> .)
    DIFFERENT       reduce using rule 165 (empty -> .)
    THEN            reduce using rule 165 (empty -> .)
    IN              reduce using rule 165 (empty -> .)
    TIMES           reduce using rule 165 (empty -> .)
    DIVIDE          reduce using rule 165 (empty -> .)
    MOD             reduce using rule 165 (empty -> .)
    AND             reduce using rule 165 (empty -> .)
    OR              reduce using rule 165 (empty -> .)
    DO              reduce using rule 165 (empty -> .)
    OF              reduce using rule 165 (empty -> .)
    END             reduce using rule 165 (empty -> .)
    READLN          reduce using rule 165 (empty -> .)
    WRITE           reduce using rule 165 (empty -> .)
    WRITELN         reduce using rule 165 (empty -> .)
    USES            reduce using rule 165 (empty -> .)
    IF              reduce using rule 165 (empty -> .)
    ID              reduce using rule 165 (empty -> .)
    WHILE           reduce using rule 165 (empty -> .)
    BEGIN           reduce using rule 165 (empty -> .)
    FOR             reduce using rule 165 (empty -> .)
    CASE            reduce using rule 165 (empty -> .)
    WITH            reduce using rule 165 (empty -> .)
    REPEAT          reduce using rule 165 (empty -> .)
    SEMICOLON       reduce using rule 165 (empty -> .)
    UNTIL           reduce using rule 165 (empty -> .)
    RPAREN          reduce using rule 165 (empty -> .)
    VAR             reduce using rule 165 (empty -> .)
    CONSTRUCTOR     reduce using rule 165 (empty -> .)
    PROCEDURE       reduce using rule 165 (empty -> .)
    FUNCTION        reduce using rule 165 (empty -> .)
    DESTRUCTOR      reduce using rule 165 (empty -> .)
    ELSE            reduce using rule 165 (empty -> .)
    RBRACKET        reduce using rule 165 (empty -> .)
    COMMA           reduce using rule 165 (empty -> .)
    COLON           reduce using rule 165 (empty -> .)
    TO              reduce using rule 165 (empty -> .)
    DOWNTO          reduce using rule 165 (empty -> .)

  ! PLUS            [ reduce using rule 165 (empty -> .) ]
  ! MINUS           [ reduce using rule 165 (empty -> .) ]

    simple_expression_tail         shift and go to state 210
    addop                          shift and go to state 211
    empty                          shift and go to state 212

state 112

    (144) term -> factor . term_tail
    (145) term_tail -> . mulop factor
    (146) term_tail -> . empty
    (147) mulop -> . TIMES
    (148) mulop -> . DIVIDE
    (149) mulop -> . DIV
    (165) empty -> .

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    TIMES           shift and go to state 218
    DIVIDE          shift and go to state 219
    DIV             shift and go to state 220
    PLUS            reduce using rule 165 (empty -> .)
    MINUS           reduce using rule 165 (empty -> .)
    LESS            reduce using rule 165 (empty -> .)
    LESS_EQUAL      reduce using rule 165 (empty -> .)
    GREAT           reduce using rule 165 (empty -> .)
    GREAT_EQUAL     reduce using rule 165 (empty -> .)
    EQUAL           reduce using rule 165 (empty -> .)
    DIFFERENT       reduce using rule 165 (empty -> .)
    THEN            reduce using rule 165 (empty -> .)
    IN              reduce using rule 165 (empty -> .)
    MOD             reduce using rule 165 (empty -> .)
    AND             reduce using rule 165 (empty -> .)
    OR              reduce using rule 165 (empty -> .)
    DO              reduce using rule 165 (empty -> .)
    OF              reduce using rule 165 (empty -> .)
    END             reduce using rule 165 (empty -> .)
    READLN          reduce using rule 165 (empty -> .)
    WRITE           reduce using rule 165 (empty -> .)
    WRITELN         reduce using rule 165 (empty -> .)
    USES            reduce using rule 165 (empty -> .)
    IF              reduce using rule 165 (empty -> .)
    ID              reduce using rule 165 (empty -> .)
    WHILE           reduce using rule 165 (empty -> .)
    BEGIN           reduce using rule 165 (empty -> .)
    FOR             reduce using rule 165 (empty -> .)
    CASE            reduce using rule 165 (empty -> .)
    WITH            reduce using rule 165 (empty -> .)
    REPEAT          reduce using rule 165 (empty -> .)
    SEMICOLON       reduce using rule 165 (empty -> .)
    UNTIL           reduce using rule 165 (empty -> .)
    RPAREN          reduce using rule 165 (empty -> .)
    VAR             reduce using rule 165 (empty -> .)
    CONSTRUCTOR     reduce using rule 165 (empty -> .)
    PROCEDURE       reduce using rule 165 (empty -> .)
    FUNCTION        reduce using rule 165 (empty -> .)
    DESTRUCTOR      reduce using rule 165 (empty -> .)
    ELSE            reduce using rule 165 (empty -> .)
    RBRACKET        reduce using rule 165 (empty -> .)
    COMMA           reduce using rule 165 (empty -> .)
    COLON           reduce using rule 165 (empty -> .)
    TO              reduce using rule 165 (empty -> .)
    DOWNTO          reduce using rule 165 (empty -> .)

  ! TIMES           [ reduce using rule 165 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 165 (empty -> .) ]

    term_tail                      shift and go to state 215
    mulop                          shift and go to state 216
    empty                          shift and go to state 217

state 113

    (88) factor -> function_call .

    TIMES           reduce using rule 88 (factor -> function_call .)
    DIVIDE          reduce using rule 88 (factor -> function_call .)
    DIV             reduce using rule 88 (factor -> function_call .)
    PLUS            reduce using rule 88 (factor -> function_call .)
    MINUS           reduce using rule 88 (factor -> function_call .)
    LESS            reduce using rule 88 (factor -> function_call .)
    LESS_EQUAL      reduce using rule 88 (factor -> function_call .)
    GREAT           reduce using rule 88 (factor -> function_call .)
    GREAT_EQUAL     reduce using rule 88 (factor -> function_call .)
    EQUAL           reduce using rule 88 (factor -> function_call .)
    DIFFERENT       reduce using rule 88 (factor -> function_call .)
    THEN            reduce using rule 88 (factor -> function_call .)
    IN              reduce using rule 88 (factor -> function_call .)
    MOD             reduce using rule 88 (factor -> function_call .)
    AND             reduce using rule 88 (factor -> function_call .)
    OR              reduce using rule 88 (factor -> function_call .)
    DO              reduce using rule 88 (factor -> function_call .)
    OF              reduce using rule 88 (factor -> function_call .)
    END             reduce using rule 88 (factor -> function_call .)
    READLN          reduce using rule 88 (factor -> function_call .)
    WRITE           reduce using rule 88 (factor -> function_call .)
    WRITELN         reduce using rule 88 (factor -> function_call .)
    USES            reduce using rule 88 (factor -> function_call .)
    IF              reduce using rule 88 (factor -> function_call .)
    ID              reduce using rule 88 (factor -> function_call .)
    WHILE           reduce using rule 88 (factor -> function_call .)
    BEGIN           reduce using rule 88 (factor -> function_call .)
    FOR             reduce using rule 88 (factor -> function_call .)
    CASE            reduce using rule 88 (factor -> function_call .)
    WITH            reduce using rule 88 (factor -> function_call .)
    REPEAT          reduce using rule 88 (factor -> function_call .)
    SEMICOLON       reduce using rule 88 (factor -> function_call .)
    UNTIL           reduce using rule 88 (factor -> function_call .)
    RPAREN          reduce using rule 88 (factor -> function_call .)
    VAR             reduce using rule 88 (factor -> function_call .)
    CONSTRUCTOR     reduce using rule 88 (factor -> function_call .)
    PROCEDURE       reduce using rule 88 (factor -> function_call .)
    FUNCTION        reduce using rule 88 (factor -> function_call .)
    DESTRUCTOR      reduce using rule 88 (factor -> function_call .)
    ELSE            reduce using rule 88 (factor -> function_call .)
    RBRACKET        reduce using rule 88 (factor -> function_call .)
    COMMA           reduce using rule 88 (factor -> function_call .)
    COLON           reduce using rule 88 (factor -> function_call .)
    TO              reduce using rule 88 (factor -> function_call .)
    DOWNTO          reduce using rule 88 (factor -> function_call .)


state 114

    (155) factor -> LPAREN . expression RPAREN
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    expression                     shift and go to state 221
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 115

    (156) factor -> variable .
    (125) variable -> variable . LBRACKET expression RBRACKET
    (126) variable -> variable . DOT ID

    TIMES           reduce using rule 156 (factor -> variable .)
    DIVIDE          reduce using rule 156 (factor -> variable .)
    DIV             reduce using rule 156 (factor -> variable .)
    PLUS            reduce using rule 156 (factor -> variable .)
    MINUS           reduce using rule 156 (factor -> variable .)
    LESS            reduce using rule 156 (factor -> variable .)
    LESS_EQUAL      reduce using rule 156 (factor -> variable .)
    GREAT           reduce using rule 156 (factor -> variable .)
    GREAT_EQUAL     reduce using rule 156 (factor -> variable .)
    EQUAL           reduce using rule 156 (factor -> variable .)
    DIFFERENT       reduce using rule 156 (factor -> variable .)
    THEN            reduce using rule 156 (factor -> variable .)
    IN              reduce using rule 156 (factor -> variable .)
    MOD             reduce using rule 156 (factor -> variable .)
    AND             reduce using rule 156 (factor -> variable .)
    OR              reduce using rule 156 (factor -> variable .)
    DO              reduce using rule 156 (factor -> variable .)
    OF              reduce using rule 156 (factor -> variable .)
    END             reduce using rule 156 (factor -> variable .)
    READLN          reduce using rule 156 (factor -> variable .)
    WRITE           reduce using rule 156 (factor -> variable .)
    WRITELN         reduce using rule 156 (factor -> variable .)
    USES            reduce using rule 156 (factor -> variable .)
    IF              reduce using rule 156 (factor -> variable .)
    ID              reduce using rule 156 (factor -> variable .)
    WHILE           reduce using rule 156 (factor -> variable .)
    BEGIN           reduce using rule 156 (factor -> variable .)
    FOR             reduce using rule 156 (factor -> variable .)
    CASE            reduce using rule 156 (factor -> variable .)
    WITH            reduce using rule 156 (factor -> variable .)
    REPEAT          reduce using rule 156 (factor -> variable .)
    SEMICOLON       reduce using rule 156 (factor -> variable .)
    UNTIL           reduce using rule 156 (factor -> variable .)
    RPAREN          reduce using rule 156 (factor -> variable .)
    VAR             reduce using rule 156 (factor -> variable .)
    CONSTRUCTOR     reduce using rule 156 (factor -> variable .)
    PROCEDURE       reduce using rule 156 (factor -> variable .)
    FUNCTION        reduce using rule 156 (factor -> variable .)
    DESTRUCTOR      reduce using rule 156 (factor -> variable .)
    ELSE            reduce using rule 156 (factor -> variable .)
    RBRACKET        reduce using rule 156 (factor -> variable .)
    COMMA           reduce using rule 156 (factor -> variable .)
    COLON           reduce using rule 156 (factor -> variable .)
    TO              reduce using rule 156 (factor -> variable .)
    DOWNTO          reduce using rule 156 (factor -> variable .)
    LBRACKET        shift and go to state 100
    DOT             shift and go to state 101


state 116

    (157) factor -> NUMBER .

    TIMES           reduce using rule 157 (factor -> NUMBER .)
    DIVIDE          reduce using rule 157 (factor -> NUMBER .)
    DIV             reduce using rule 157 (factor -> NUMBER .)
    PLUS            reduce using rule 157 (factor -> NUMBER .)
    MINUS           reduce using rule 157 (factor -> NUMBER .)
    LESS            reduce using rule 157 (factor -> NUMBER .)
    LESS_EQUAL      reduce using rule 157 (factor -> NUMBER .)
    GREAT           reduce using rule 157 (factor -> NUMBER .)
    GREAT_EQUAL     reduce using rule 157 (factor -> NUMBER .)
    EQUAL           reduce using rule 157 (factor -> NUMBER .)
    DIFFERENT       reduce using rule 157 (factor -> NUMBER .)
    THEN            reduce using rule 157 (factor -> NUMBER .)
    IN              reduce using rule 157 (factor -> NUMBER .)
    MOD             reduce using rule 157 (factor -> NUMBER .)
    AND             reduce using rule 157 (factor -> NUMBER .)
    OR              reduce using rule 157 (factor -> NUMBER .)
    DO              reduce using rule 157 (factor -> NUMBER .)
    OF              reduce using rule 157 (factor -> NUMBER .)
    END             reduce using rule 157 (factor -> NUMBER .)
    READLN          reduce using rule 157 (factor -> NUMBER .)
    WRITE           reduce using rule 157 (factor -> NUMBER .)
    WRITELN         reduce using rule 157 (factor -> NUMBER .)
    USES            reduce using rule 157 (factor -> NUMBER .)
    IF              reduce using rule 157 (factor -> NUMBER .)
    ID              reduce using rule 157 (factor -> NUMBER .)
    WHILE           reduce using rule 157 (factor -> NUMBER .)
    BEGIN           reduce using rule 157 (factor -> NUMBER .)
    FOR             reduce using rule 157 (factor -> NUMBER .)
    CASE            reduce using rule 157 (factor -> NUMBER .)
    WITH            reduce using rule 157 (factor -> NUMBER .)
    REPEAT          reduce using rule 157 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 157 (factor -> NUMBER .)
    UNTIL           reduce using rule 157 (factor -> NUMBER .)
    RPAREN          reduce using rule 157 (factor -> NUMBER .)
    VAR             reduce using rule 157 (factor -> NUMBER .)
    CONSTRUCTOR     reduce using rule 157 (factor -> NUMBER .)
    PROCEDURE       reduce using rule 157 (factor -> NUMBER .)
    FUNCTION        reduce using rule 157 (factor -> NUMBER .)
    DESTRUCTOR      reduce using rule 157 (factor -> NUMBER .)
    ELSE            reduce using rule 157 (factor -> NUMBER .)
    RBRACKET        reduce using rule 157 (factor -> NUMBER .)
    COMMA           reduce using rule 157 (factor -> NUMBER .)
    COLON           reduce using rule 157 (factor -> NUMBER .)
    TO              reduce using rule 157 (factor -> NUMBER .)
    DOWNTO          reduce using rule 157 (factor -> NUMBER .)


state 117

    (158) factor -> STRING_LITERAL .

    TIMES           reduce using rule 158 (factor -> STRING_LITERAL .)
    DIVIDE          reduce using rule 158 (factor -> STRING_LITERAL .)
    DIV             reduce using rule 158 (factor -> STRING_LITERAL .)
    PLUS            reduce using rule 158 (factor -> STRING_LITERAL .)
    MINUS           reduce using rule 158 (factor -> STRING_LITERAL .)
    LESS            reduce using rule 158 (factor -> STRING_LITERAL .)
    LESS_EQUAL      reduce using rule 158 (factor -> STRING_LITERAL .)
    GREAT           reduce using rule 158 (factor -> STRING_LITERAL .)
    GREAT_EQUAL     reduce using rule 158 (factor -> STRING_LITERAL .)
    EQUAL           reduce using rule 158 (factor -> STRING_LITERAL .)
    DIFFERENT       reduce using rule 158 (factor -> STRING_LITERAL .)
    THEN            reduce using rule 158 (factor -> STRING_LITERAL .)
    IN              reduce using rule 158 (factor -> STRING_LITERAL .)
    MOD             reduce using rule 158 (factor -> STRING_LITERAL .)
    AND             reduce using rule 158 (factor -> STRING_LITERAL .)
    OR              reduce using rule 158 (factor -> STRING_LITERAL .)
    DO              reduce using rule 158 (factor -> STRING_LITERAL .)
    OF              reduce using rule 158 (factor -> STRING_LITERAL .)
    END             reduce using rule 158 (factor -> STRING_LITERAL .)
    READLN          reduce using rule 158 (factor -> STRING_LITERAL .)
    WRITE           reduce using rule 158 (factor -> STRING_LITERAL .)
    WRITELN         reduce using rule 158 (factor -> STRING_LITERAL .)
    USES            reduce using rule 158 (factor -> STRING_LITERAL .)
    IF              reduce using rule 158 (factor -> STRING_LITERAL .)
    ID              reduce using rule 158 (factor -> STRING_LITERAL .)
    WHILE           reduce using rule 158 (factor -> STRING_LITERAL .)
    BEGIN           reduce using rule 158 (factor -> STRING_LITERAL .)
    FOR             reduce using rule 158 (factor -> STRING_LITERAL .)
    CASE            reduce using rule 158 (factor -> STRING_LITERAL .)
    WITH            reduce using rule 158 (factor -> STRING_LITERAL .)
    REPEAT          reduce using rule 158 (factor -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 158 (factor -> STRING_LITERAL .)
    UNTIL           reduce using rule 158 (factor -> STRING_LITERAL .)
    RPAREN          reduce using rule 158 (factor -> STRING_LITERAL .)
    VAR             reduce using rule 158 (factor -> STRING_LITERAL .)
    CONSTRUCTOR     reduce using rule 158 (factor -> STRING_LITERAL .)
    PROCEDURE       reduce using rule 158 (factor -> STRING_LITERAL .)
    FUNCTION        reduce using rule 158 (factor -> STRING_LITERAL .)
    DESTRUCTOR      reduce using rule 158 (factor -> STRING_LITERAL .)
    ELSE            reduce using rule 158 (factor -> STRING_LITERAL .)
    RBRACKET        reduce using rule 158 (factor -> STRING_LITERAL .)
    COMMA           reduce using rule 158 (factor -> STRING_LITERAL .)
    COLON           reduce using rule 158 (factor -> STRING_LITERAL .)
    TO              reduce using rule 158 (factor -> STRING_LITERAL .)
    DOWNTO          reduce using rule 158 (factor -> STRING_LITERAL .)


state 118

    (87) function_call -> ID . LPAREN expression_list RPAREN
    (124) variable -> ID .
    (127) variable -> ID . LBRACKET index_list RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    LPAREN          shift and go to state 222
    DOT             reduce using rule 124 (variable -> ID .)
    TIMES           reduce using rule 124 (variable -> ID .)
    DIVIDE          reduce using rule 124 (variable -> ID .)
    DIV             reduce using rule 124 (variable -> ID .)
    PLUS            reduce using rule 124 (variable -> ID .)
    MINUS           reduce using rule 124 (variable -> ID .)
    LESS            reduce using rule 124 (variable -> ID .)
    LESS_EQUAL      reduce using rule 124 (variable -> ID .)
    GREAT           reduce using rule 124 (variable -> ID .)
    GREAT_EQUAL     reduce using rule 124 (variable -> ID .)
    EQUAL           reduce using rule 124 (variable -> ID .)
    DIFFERENT       reduce using rule 124 (variable -> ID .)
    THEN            reduce using rule 124 (variable -> ID .)
    IN              reduce using rule 124 (variable -> ID .)
    MOD             reduce using rule 124 (variable -> ID .)
    AND             reduce using rule 124 (variable -> ID .)
    OR              reduce using rule 124 (variable -> ID .)
    DO              reduce using rule 124 (variable -> ID .)
    OF              reduce using rule 124 (variable -> ID .)
    END             reduce using rule 124 (variable -> ID .)
    READLN          reduce using rule 124 (variable -> ID .)
    WRITE           reduce using rule 124 (variable -> ID .)
    WRITELN         reduce using rule 124 (variable -> ID .)
    USES            reduce using rule 124 (variable -> ID .)
    IF              reduce using rule 124 (variable -> ID .)
    ID              reduce using rule 124 (variable -> ID .)
    WHILE           reduce using rule 124 (variable -> ID .)
    BEGIN           reduce using rule 124 (variable -> ID .)
    FOR             reduce using rule 124 (variable -> ID .)
    CASE            reduce using rule 124 (variable -> ID .)
    WITH            reduce using rule 124 (variable -> ID .)
    REPEAT          reduce using rule 124 (variable -> ID .)
    SEMICOLON       reduce using rule 124 (variable -> ID .)
    UNTIL           reduce using rule 124 (variable -> ID .)
    RPAREN          reduce using rule 124 (variable -> ID .)
    VAR             reduce using rule 124 (variable -> ID .)
    CONSTRUCTOR     reduce using rule 124 (variable -> ID .)
    PROCEDURE       reduce using rule 124 (variable -> ID .)
    FUNCTION        reduce using rule 124 (variable -> ID .)
    DESTRUCTOR      reduce using rule 124 (variable -> ID .)
    ELSE            reduce using rule 124 (variable -> ID .)
    RBRACKET        reduce using rule 124 (variable -> ID .)
    COMMA           reduce using rule 124 (variable -> ID .)
    COLON           reduce using rule 124 (variable -> ID .)
    TO              reduce using rule 124 (variable -> ID .)
    DOWNTO          reduce using rule 124 (variable -> ID .)
    LBRACKET        shift and go to state 107

  ! LBRACKET        [ reduce using rule 124 (variable -> ID .) ]


state 119

    (130) while_statement -> WHILE expression . DO statement
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression

    DO              shift and go to state 223
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201


state 120

    (115) for_statement -> FOR ID . COLON_EQUAL expression TO expression DO block
    (116) for_statement -> FOR ID . COLON_EQUAL expression DOWNTO expression DO block

    COLON_EQUAL     shift and go to state 224


state 121

    (75) case_statement -> CASE expression . OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> CASE expression . OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> CASE expression . OF case_list_opt_semicolon END
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression

    OF              shift and go to state 225
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201


state 122

    (110) with_statement -> WITH variable . DO statement
    (125) variable -> variable . LBRACKET expression RBRACKET
    (126) variable -> variable . DOT ID

    DO              shift and go to state 226
    LBRACKET        shift and go to state 100
    DOT             shift and go to state 101


state 123

    (124) variable -> ID .
    (127) variable -> ID . LBRACKET index_list RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    DO              reduce using rule 124 (variable -> ID .)
    DOT             reduce using rule 124 (variable -> ID .)
    RPAREN          reduce using rule 124 (variable -> ID .)
    COMMA           reduce using rule 124 (variable -> ID .)
    RBRACKET        reduce using rule 124 (variable -> ID .)
    LBRACKET        shift and go to state 107

  ! LBRACKET        [ reduce using rule 124 (variable -> ID .) ]


state 124

    (182) repeat_statement -> REPEAT statement_list . UNTIL expression SEMICOLON
    (97) statement_list -> statement_list . statement SEMICOLON
    (98) statement_list -> statement_list . statement
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (165) empty -> .
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for READLN resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
    UNTIL           shift and go to state 227
    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    IF              shift and go to state 67
    ID              shift and go to state 66
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    CASE            shift and go to state 70
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72
    SEMICOLON       reduce using rule 165 (empty -> .)

  ! UNTIL           [ reduce using rule 165 (empty -> .) ]
  ! READLN          [ reduce using rule 165 (empty -> .) ]
  ! WRITE           [ reduce using rule 165 (empty -> .) ]
  ! WRITELN         [ reduce using rule 165 (empty -> .) ]
  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! IF              [ reduce using rule 165 (empty -> .) ]
  ! ID              [ reduce using rule 165 (empty -> .) ]
  ! WHILE           [ reduce using rule 165 (empty -> .) ]
  ! BEGIN           [ reduce using rule 165 (empty -> .) ]
  ! FOR             [ reduce using rule 165 (empty -> .) ]
  ! CASE            [ reduce using rule 165 (empty -> .) ]
  ! WITH            [ reduce using rule 165 (empty -> .) ]
  ! REPEAT          [ reduce using rule 165 (empty -> .) ]

    statement                      shift and go to state 90
    if_statement                   shift and go to state 52
    assignment_statement           shift and go to state 53
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    case_statement                 shift and go to state 58
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    empty                          shift and go to state 91
    variable                       shift and go to state 62

state 125

    (20) id_list -> id_list COMMA ID .

    SEMICOLON       reduce using rule 20 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 20 (id_list -> id_list COMMA ID .)
    COLON           reduce using rule 20 (id_list -> id_list COMMA ID .)
    LPAREN          reduce using rule 20 (id_list -> id_list COMMA ID .)
    RPAREN          reduce using rule 20 (id_list -> id_list COMMA ID .)


state 126

    (185) constant -> ID EQUAL CHARACTER_LITERAL . SEMICOLON

    SEMICOLON       shift and go to state 228


state 127

    (186) constant -> ID EQUAL NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 229


state 128

    (187) constant -> ID EQUAL STRING_LITERAL . SEMICOLON

    SEMICOLON       shift and go to state 230


state 129

    (188) constant -> ID EQUAL BOOLEAN_LITERAL . SEMICOLON

    SEMICOLON       shift and go to state 231


state 130

    (43) type_specifier -> ID .

    SEMICOLON       reduce using rule 43 (type_specifier -> ID .)
    RPAREN          reduce using rule 43 (type_specifier -> ID .)
    VAR             reduce using rule 43 (type_specifier -> ID .)
    ID              reduce using rule 43 (type_specifier -> ID .)
    READLN          reduce using rule 43 (type_specifier -> ID .)
    WRITE           reduce using rule 43 (type_specifier -> ID .)
    WRITELN         reduce using rule 43 (type_specifier -> ID .)
    USES            reduce using rule 43 (type_specifier -> ID .)
    IF              reduce using rule 43 (type_specifier -> ID .)
    CASE            reduce using rule 43 (type_specifier -> ID .)
    WHILE           reduce using rule 43 (type_specifier -> ID .)
    BEGIN           reduce using rule 43 (type_specifier -> ID .)
    FOR             reduce using rule 43 (type_specifier -> ID .)
    WITH            reduce using rule 43 (type_specifier -> ID .)
    REPEAT          reduce using rule 43 (type_specifier -> ID .)
    END             reduce using rule 43 (type_specifier -> ID .)
    CONSTRUCTOR     reduce using rule 43 (type_specifier -> ID .)
    PROCEDURE       reduce using rule 43 (type_specifier -> ID .)
    FUNCTION        reduce using rule 43 (type_specifier -> ID .)
    DESTRUCTOR      reduce using rule 43 (type_specifier -> ID .)
    ELSE            reduce using rule 43 (type_specifier -> ID .)
    OF              reduce using rule 43 (type_specifier -> ID .)


state 131

    (29) type_definition -> ID EQUAL type_specifier . SEMICOLON

    SEMICOLON       shift and go to state 232


state 132

    (30) type_specifier -> ARRAY . LBRACKET type_expression RBRACKET OF type_specifier

    LBRACKET        shift and go to state 233


state 133

    (31) type_specifier -> subrange .

    SEMICOLON       reduce using rule 31 (type_specifier -> subrange .)
    RPAREN          reduce using rule 31 (type_specifier -> subrange .)
    VAR             reduce using rule 31 (type_specifier -> subrange .)
    ID              reduce using rule 31 (type_specifier -> subrange .)
    READLN          reduce using rule 31 (type_specifier -> subrange .)
    WRITE           reduce using rule 31 (type_specifier -> subrange .)
    WRITELN         reduce using rule 31 (type_specifier -> subrange .)
    USES            reduce using rule 31 (type_specifier -> subrange .)
    IF              reduce using rule 31 (type_specifier -> subrange .)
    CASE            reduce using rule 31 (type_specifier -> subrange .)
    WHILE           reduce using rule 31 (type_specifier -> subrange .)
    BEGIN           reduce using rule 31 (type_specifier -> subrange .)
    FOR             reduce using rule 31 (type_specifier -> subrange .)
    WITH            reduce using rule 31 (type_specifier -> subrange .)
    REPEAT          reduce using rule 31 (type_specifier -> subrange .)
    END             reduce using rule 31 (type_specifier -> subrange .)
    CONSTRUCTOR     reduce using rule 31 (type_specifier -> subrange .)
    PROCEDURE       reduce using rule 31 (type_specifier -> subrange .)
    FUNCTION        reduce using rule 31 (type_specifier -> subrange .)
    DESTRUCTOR      reduce using rule 31 (type_specifier -> subrange .)
    ELSE            reduce using rule 31 (type_specifier -> subrange .)
    OF              reduce using rule 31 (type_specifier -> subrange .)


state 134

    (32) type_specifier -> FILE . OF type_specifier

    OF              shift and go to state 234


state 135

    (33) type_specifier -> SET . OF type_specifier

    OF              shift and go to state 235


state 136

    (34) type_specifier -> RECORD . field_list case_part END
    (48) field_list -> . field_list field
    (49) field_list -> . field
    (50) field_list -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . statement
    (57) field -> . if_statement
    (58) field -> . case_statement
    (59) field -> . assignment_statement
    (165) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READLN resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
    VAR             shift and go to state 159
    END             reduce using rule 165 (empty -> .)
    ID              shift and go to state 153
    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    IF              shift and go to state 67
    CASE            shift and go to state 70
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72

  ! CASE            [ reduce using rule 165 (empty -> .) ]
  ! VAR             [ reduce using rule 165 (empty -> .) ]
  ! ID              [ reduce using rule 165 (empty -> .) ]
  ! READLN          [ reduce using rule 165 (empty -> .) ]
  ! WRITE           [ reduce using rule 165 (empty -> .) ]
  ! WRITELN         [ reduce using rule 165 (empty -> .) ]
  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! IF              [ reduce using rule 165 (empty -> .) ]
  ! WHILE           [ reduce using rule 165 (empty -> .) ]
  ! BEGIN           [ reduce using rule 165 (empty -> .) ]
  ! FOR             [ reduce using rule 165 (empty -> .) ]
  ! WITH            [ reduce using rule 165 (empty -> .) ]
  ! REPEAT          [ reduce using rule 165 (empty -> .) ]

    field_list                     shift and go to state 236
    field                          shift and go to state 156
    empty                          shift and go to state 157
    id_list                        shift and go to state 158
    statement                      shift and go to state 160
    if_statement                   shift and go to state 161
    case_statement                 shift and go to state 162
    assignment_statement           shift and go to state 163
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    variable                       shift and go to state 62

state 137

    (35) type_specifier -> OBJECT . field_list method_list END
    (48) field_list -> . field_list field
    (49) field_list -> . field
    (50) field_list -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . statement
    (57) field -> . if_statement
    (58) field -> . case_statement
    (59) field -> . assignment_statement
    (165) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READLN resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
    VAR             shift and go to state 159
    CONSTRUCTOR     reduce using rule 165 (empty -> .)
    PROCEDURE       reduce using rule 165 (empty -> .)
    FUNCTION        reduce using rule 165 (empty -> .)
    DESTRUCTOR      reduce using rule 165 (empty -> .)
    END             reduce using rule 165 (empty -> .)
    ID              shift and go to state 153
    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    IF              shift and go to state 67
    CASE            shift and go to state 70
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72

  ! VAR             [ reduce using rule 165 (empty -> .) ]
  ! ID              [ reduce using rule 165 (empty -> .) ]
  ! READLN          [ reduce using rule 165 (empty -> .) ]
  ! WRITE           [ reduce using rule 165 (empty -> .) ]
  ! WRITELN         [ reduce using rule 165 (empty -> .) ]
  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! IF              [ reduce using rule 165 (empty -> .) ]
  ! CASE            [ reduce using rule 165 (empty -> .) ]
  ! WHILE           [ reduce using rule 165 (empty -> .) ]
  ! BEGIN           [ reduce using rule 165 (empty -> .) ]
  ! FOR             [ reduce using rule 165 (empty -> .) ]
  ! WITH            [ reduce using rule 165 (empty -> .) ]
  ! REPEAT          [ reduce using rule 165 (empty -> .) ]

    field_list                     shift and go to state 237
    field                          shift and go to state 156
    empty                          shift and go to state 157
    id_list                        shift and go to state 158
    statement                      shift and go to state 160
    if_statement                   shift and go to state 161
    case_statement                 shift and go to state 162
    assignment_statement           shift and go to state 163
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    variable                       shift and go to state 62

state 138

    (36) type_specifier -> LPAREN . id_list RPAREN
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

    ID              shift and go to state 33

    id_list                        shift and go to state 238

state 139

    (37) type_specifier -> BOOLEAN_LITERAL .

    SEMICOLON       reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    RPAREN          reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    VAR             reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    ID              reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    READLN          reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    WRITE           reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    WRITELN         reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    USES            reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    IF              reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    CASE            reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    WHILE           reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    BEGIN           reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    FOR             reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    WITH            reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    REPEAT          reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    END             reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    CONSTRUCTOR     reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    PROCEDURE       reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    FUNCTION        reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    DESTRUCTOR      reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    ELSE            reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    OF              reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)


state 140

    (38) type_specifier -> INTEGER .

    SEMICOLON       reduce using rule 38 (type_specifier -> INTEGER .)
    RPAREN          reduce using rule 38 (type_specifier -> INTEGER .)
    VAR             reduce using rule 38 (type_specifier -> INTEGER .)
    ID              reduce using rule 38 (type_specifier -> INTEGER .)
    READLN          reduce using rule 38 (type_specifier -> INTEGER .)
    WRITE           reduce using rule 38 (type_specifier -> INTEGER .)
    WRITELN         reduce using rule 38 (type_specifier -> INTEGER .)
    USES            reduce using rule 38 (type_specifier -> INTEGER .)
    IF              reduce using rule 38 (type_specifier -> INTEGER .)
    CASE            reduce using rule 38 (type_specifier -> INTEGER .)
    WHILE           reduce using rule 38 (type_specifier -> INTEGER .)
    BEGIN           reduce using rule 38 (type_specifier -> INTEGER .)
    FOR             reduce using rule 38 (type_specifier -> INTEGER .)
    WITH            reduce using rule 38 (type_specifier -> INTEGER .)
    REPEAT          reduce using rule 38 (type_specifier -> INTEGER .)
    END             reduce using rule 38 (type_specifier -> INTEGER .)
    CONSTRUCTOR     reduce using rule 38 (type_specifier -> INTEGER .)
    PROCEDURE       reduce using rule 38 (type_specifier -> INTEGER .)
    FUNCTION        reduce using rule 38 (type_specifier -> INTEGER .)
    DESTRUCTOR      reduce using rule 38 (type_specifier -> INTEGER .)
    ELSE            reduce using rule 38 (type_specifier -> INTEGER .)
    OF              reduce using rule 38 (type_specifier -> INTEGER .)


state 141

    (39) type_specifier -> BYTE .

    SEMICOLON       reduce using rule 39 (type_specifier -> BYTE .)
    RPAREN          reduce using rule 39 (type_specifier -> BYTE .)
    VAR             reduce using rule 39 (type_specifier -> BYTE .)
    ID              reduce using rule 39 (type_specifier -> BYTE .)
    READLN          reduce using rule 39 (type_specifier -> BYTE .)
    WRITE           reduce using rule 39 (type_specifier -> BYTE .)
    WRITELN         reduce using rule 39 (type_specifier -> BYTE .)
    USES            reduce using rule 39 (type_specifier -> BYTE .)
    IF              reduce using rule 39 (type_specifier -> BYTE .)
    CASE            reduce using rule 39 (type_specifier -> BYTE .)
    WHILE           reduce using rule 39 (type_specifier -> BYTE .)
    BEGIN           reduce using rule 39 (type_specifier -> BYTE .)
    FOR             reduce using rule 39 (type_specifier -> BYTE .)
    WITH            reduce using rule 39 (type_specifier -> BYTE .)
    REPEAT          reduce using rule 39 (type_specifier -> BYTE .)
    END             reduce using rule 39 (type_specifier -> BYTE .)
    CONSTRUCTOR     reduce using rule 39 (type_specifier -> BYTE .)
    PROCEDURE       reduce using rule 39 (type_specifier -> BYTE .)
    FUNCTION        reduce using rule 39 (type_specifier -> BYTE .)
    DESTRUCTOR      reduce using rule 39 (type_specifier -> BYTE .)
    ELSE            reduce using rule 39 (type_specifier -> BYTE .)
    OF              reduce using rule 39 (type_specifier -> BYTE .)


state 142

    (40) type_specifier -> CHAR .

    SEMICOLON       reduce using rule 40 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 40 (type_specifier -> CHAR .)
    VAR             reduce using rule 40 (type_specifier -> CHAR .)
    ID              reduce using rule 40 (type_specifier -> CHAR .)
    READLN          reduce using rule 40 (type_specifier -> CHAR .)
    WRITE           reduce using rule 40 (type_specifier -> CHAR .)
    WRITELN         reduce using rule 40 (type_specifier -> CHAR .)
    USES            reduce using rule 40 (type_specifier -> CHAR .)
    IF              reduce using rule 40 (type_specifier -> CHAR .)
    CASE            reduce using rule 40 (type_specifier -> CHAR .)
    WHILE           reduce using rule 40 (type_specifier -> CHAR .)
    BEGIN           reduce using rule 40 (type_specifier -> CHAR .)
    FOR             reduce using rule 40 (type_specifier -> CHAR .)
    WITH            reduce using rule 40 (type_specifier -> CHAR .)
    REPEAT          reduce using rule 40 (type_specifier -> CHAR .)
    END             reduce using rule 40 (type_specifier -> CHAR .)
    CONSTRUCTOR     reduce using rule 40 (type_specifier -> CHAR .)
    PROCEDURE       reduce using rule 40 (type_specifier -> CHAR .)
    FUNCTION        reduce using rule 40 (type_specifier -> CHAR .)
    DESTRUCTOR      reduce using rule 40 (type_specifier -> CHAR .)
    ELSE            reduce using rule 40 (type_specifier -> CHAR .)
    OF              reduce using rule 40 (type_specifier -> CHAR .)


state 143

    (41) type_specifier -> STRING .
    (42) type_specifier -> STRING . LBRACKET NUMBER RBRACKET

    SEMICOLON       reduce using rule 41 (type_specifier -> STRING .)
    RPAREN          reduce using rule 41 (type_specifier -> STRING .)
    VAR             reduce using rule 41 (type_specifier -> STRING .)
    ID              reduce using rule 41 (type_specifier -> STRING .)
    READLN          reduce using rule 41 (type_specifier -> STRING .)
    WRITE           reduce using rule 41 (type_specifier -> STRING .)
    WRITELN         reduce using rule 41 (type_specifier -> STRING .)
    USES            reduce using rule 41 (type_specifier -> STRING .)
    IF              reduce using rule 41 (type_specifier -> STRING .)
    CASE            reduce using rule 41 (type_specifier -> STRING .)
    WHILE           reduce using rule 41 (type_specifier -> STRING .)
    BEGIN           reduce using rule 41 (type_specifier -> STRING .)
    FOR             reduce using rule 41 (type_specifier -> STRING .)
    WITH            reduce using rule 41 (type_specifier -> STRING .)
    REPEAT          reduce using rule 41 (type_specifier -> STRING .)
    END             reduce using rule 41 (type_specifier -> STRING .)
    CONSTRUCTOR     reduce using rule 41 (type_specifier -> STRING .)
    PROCEDURE       reduce using rule 41 (type_specifier -> STRING .)
    FUNCTION        reduce using rule 41 (type_specifier -> STRING .)
    DESTRUCTOR      reduce using rule 41 (type_specifier -> STRING .)
    ELSE            reduce using rule 41 (type_specifier -> STRING .)
    OF              reduce using rule 41 (type_specifier -> STRING .)
    LBRACKET        shift and go to state 239


state 144

    (46) subrange -> NUMBER . DOTDOT NUMBER
    (47) subrange -> NUMBER . DOTDOT ID

    DOTDOT          shift and go to state 240


state 145

    (78) type_specifier -> LONGINT .

    SEMICOLON       reduce using rule 78 (type_specifier -> LONGINT .)
    RPAREN          reduce using rule 78 (type_specifier -> LONGINT .)
    VAR             reduce using rule 78 (type_specifier -> LONGINT .)
    ID              reduce using rule 78 (type_specifier -> LONGINT .)
    READLN          reduce using rule 78 (type_specifier -> LONGINT .)
    WRITE           reduce using rule 78 (type_specifier -> LONGINT .)
    WRITELN         reduce using rule 78 (type_specifier -> LONGINT .)
    USES            reduce using rule 78 (type_specifier -> LONGINT .)
    IF              reduce using rule 78 (type_specifier -> LONGINT .)
    CASE            reduce using rule 78 (type_specifier -> LONGINT .)
    WHILE           reduce using rule 78 (type_specifier -> LONGINT .)
    BEGIN           reduce using rule 78 (type_specifier -> LONGINT .)
    FOR             reduce using rule 78 (type_specifier -> LONGINT .)
    WITH            reduce using rule 78 (type_specifier -> LONGINT .)
    REPEAT          reduce using rule 78 (type_specifier -> LONGINT .)
    END             reduce using rule 78 (type_specifier -> LONGINT .)
    CONSTRUCTOR     reduce using rule 78 (type_specifier -> LONGINT .)
    PROCEDURE       reduce using rule 78 (type_specifier -> LONGINT .)
    FUNCTION        reduce using rule 78 (type_specifier -> LONGINT .)
    DESTRUCTOR      reduce using rule 78 (type_specifier -> LONGINT .)
    ELSE            reduce using rule 78 (type_specifier -> LONGINT .)
    OF              reduce using rule 78 (type_specifier -> LONGINT .)


state 146

    (24) declaration -> id_list COLON type_specifier . SEMICOLON

    SEMICOLON       shift and go to state 241


state 147

    (92) parameter -> ID . COLON type_specifier

    COLON           shift and go to state 242


state 148

    (83) function_declaration -> FUNCTION ID LPAREN parameter_list . RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (84) function_declaration -> FUNCTION ID LPAREN parameter_list . RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (89) parameter_list -> parameter_list . SEMICOLON parameter

    RPAREN          shift and go to state 243
    SEMICOLON       shift and go to state 244


state 149

    (85) function_declaration -> FUNCTION ID LPAREN RPAREN . COLON type_specifier SEMICOLON block SEMICOLON
    (86) function_declaration -> FUNCTION ID LPAREN RPAREN . COLON type_specifier SEMICOLON FORWARD SEMICOLON

    COLON           shift and go to state 245


state 150

    (90) parameter_list -> parameter .

    RPAREN          reduce using rule 90 (parameter_list -> parameter .)
    SEMICOLON       reduce using rule 90 (parameter_list -> parameter .)


state 151

    (91) parameter_list -> empty .

    RPAREN          reduce using rule 91 (parameter_list -> empty .)
    SEMICOLON       reduce using rule 91 (parameter_list -> empty .)


state 152

    (14) method_declaration -> FUNCTION ID DOT ID . LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block

    LPAREN          shift and go to state 246


state 153

    (19) id_list -> ID .
    (123) assignment_statement -> ID . COLON_EQUAL expression
    (131) procedure_call -> ID . LPAREN expression_list RPAREN
    (132) procedure_call -> ID .
    (124) variable -> ID .
    (127) variable -> ID . LBRACKET index_list RBRACKET

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for COLON_EQUAL resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    COLON           reduce using rule 19 (id_list -> ID .)
    COMMA           reduce using rule 19 (id_list -> ID .)
    COLON_EQUAL     shift and go to state 105
    LPAREN          shift and go to state 106
    RPAREN          reduce using rule 132 (procedure_call -> ID .)
    VAR             reduce using rule 132 (procedure_call -> ID .)
    ID              reduce using rule 132 (procedure_call -> ID .)
    READLN          reduce using rule 132 (procedure_call -> ID .)
    WRITE           reduce using rule 132 (procedure_call -> ID .)
    WRITELN         reduce using rule 132 (procedure_call -> ID .)
    USES            reduce using rule 132 (procedure_call -> ID .)
    IF              reduce using rule 132 (procedure_call -> ID .)
    CASE            reduce using rule 132 (procedure_call -> ID .)
    WHILE           reduce using rule 132 (procedure_call -> ID .)
    BEGIN           reduce using rule 132 (procedure_call -> ID .)
    FOR             reduce using rule 132 (procedure_call -> ID .)
    WITH            reduce using rule 132 (procedure_call -> ID .)
    REPEAT          reduce using rule 132 (procedure_call -> ID .)
    END             reduce using rule 132 (procedure_call -> ID .)
    CONSTRUCTOR     reduce using rule 132 (procedure_call -> ID .)
    PROCEDURE       reduce using rule 132 (procedure_call -> ID .)
    FUNCTION        reduce using rule 132 (procedure_call -> ID .)
    DESTRUCTOR      reduce using rule 132 (procedure_call -> ID .)
    SEMICOLON       reduce using rule 132 (procedure_call -> ID .)
    ELSE            reduce using rule 132 (procedure_call -> ID .)
    PLUS            reduce using rule 124 (variable -> ID .)
    MINUS           reduce using rule 124 (variable -> ID .)
    TIMES           reduce using rule 124 (variable -> ID .)
    DIVIDE          reduce using rule 124 (variable -> ID .)
    DOT             reduce using rule 124 (variable -> ID .)
    LBRACKET        shift and go to state 107

  ! LPAREN          [ reduce using rule 19 (id_list -> ID .) ]
  ! COLON_EQUAL     [ reduce using rule 124 (variable -> ID .) ]
  ! LBRACKET        [ reduce using rule 124 (variable -> ID .) ]


state 154

    (16) constructor_declaration -> CONSTRUCTOR ID LPAREN field_list . RPAREN SEMICOLON block
    (48) field_list -> field_list . field
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . statement
    (57) field -> . if_statement
    (58) field -> . case_statement
    (59) field -> . assignment_statement
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (165) empty -> .
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READLN resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
    RPAREN          shift and go to state 247
    VAR             shift and go to state 159
    ID              shift and go to state 153
    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    IF              shift and go to state 67
    CASE            shift and go to state 70
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72

  ! RPAREN          [ reduce using rule 165 (empty -> .) ]
  ! VAR             [ reduce using rule 165 (empty -> .) ]
  ! ID              [ reduce using rule 165 (empty -> .) ]
  ! READLN          [ reduce using rule 165 (empty -> .) ]
  ! WRITE           [ reduce using rule 165 (empty -> .) ]
  ! WRITELN         [ reduce using rule 165 (empty -> .) ]
  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! IF              [ reduce using rule 165 (empty -> .) ]
  ! CASE            [ reduce using rule 165 (empty -> .) ]
  ! WHILE           [ reduce using rule 165 (empty -> .) ]
  ! BEGIN           [ reduce using rule 165 (empty -> .) ]
  ! FOR             [ reduce using rule 165 (empty -> .) ]
  ! WITH            [ reduce using rule 165 (empty -> .) ]
  ! REPEAT          [ reduce using rule 165 (empty -> .) ]

    field                          shift and go to state 248
    id_list                        shift and go to state 158
    statement                      shift and go to state 160
    if_statement                   shift and go to state 161
    case_statement                 shift and go to state 162
    assignment_statement           shift and go to state 163
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    empty                          shift and go to state 91
    variable                       shift and go to state 62

state 155

    (17) constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN . SEMICOLON block

    SEMICOLON       shift and go to state 249


state 156

    (49) field_list -> field .

    RPAREN          reduce using rule 49 (field_list -> field .)
    VAR             reduce using rule 49 (field_list -> field .)
    ID              reduce using rule 49 (field_list -> field .)
    READLN          reduce using rule 49 (field_list -> field .)
    WRITE           reduce using rule 49 (field_list -> field .)
    WRITELN         reduce using rule 49 (field_list -> field .)
    USES            reduce using rule 49 (field_list -> field .)
    IF              reduce using rule 49 (field_list -> field .)
    CASE            reduce using rule 49 (field_list -> field .)
    WHILE           reduce using rule 49 (field_list -> field .)
    BEGIN           reduce using rule 49 (field_list -> field .)
    FOR             reduce using rule 49 (field_list -> field .)
    WITH            reduce using rule 49 (field_list -> field .)
    REPEAT          reduce using rule 49 (field_list -> field .)
    END             reduce using rule 49 (field_list -> field .)
    CONSTRUCTOR     reduce using rule 49 (field_list -> field .)
    PROCEDURE       reduce using rule 49 (field_list -> field .)
    FUNCTION        reduce using rule 49 (field_list -> field .)
    DESTRUCTOR      reduce using rule 49 (field_list -> field .)
    SEMICOLON       reduce using rule 49 (field_list -> field .)
    ELSE            reduce using rule 49 (field_list -> field .)


state 157

    (50) field_list -> empty .
    (109) statement -> empty .

  ! reduce/reduce conflict for RPAREN resolved using rule 50 (field_list -> empty .)
  ! reduce/reduce conflict for VAR resolved using rule 50 (field_list -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 50 (field_list -> empty .)
  ! reduce/reduce conflict for READLN resolved using rule 50 (field_list -> empty .)
  ! reduce/reduce conflict for WRITE resolved using rule 50 (field_list -> empty .)
  ! reduce/reduce conflict for WRITELN resolved using rule 50 (field_list -> empty .)
  ! reduce/reduce conflict for USES resolved using rule 50 (field_list -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 50 (field_list -> empty .)
  ! reduce/reduce conflict for CASE resolved using rule 50 (field_list -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 50 (field_list -> empty .)
  ! reduce/reduce conflict for BEGIN resolved using rule 50 (field_list -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 50 (field_list -> empty .)
  ! reduce/reduce conflict for WITH resolved using rule 50 (field_list -> empty .)
  ! reduce/reduce conflict for REPEAT resolved using rule 50 (field_list -> empty .)
  ! reduce/reduce conflict for END resolved using rule 50 (field_list -> empty .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 50 (field_list -> empty .)
  ! reduce/reduce conflict for PROCEDURE resolved using rule 50 (field_list -> empty .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 50 (field_list -> empty .)
  ! reduce/reduce conflict for DESTRUCTOR resolved using rule 50 (field_list -> empty .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 50 (field_list -> empty .)
  ! reduce/reduce conflict for ELSE resolved using rule 50 (field_list -> empty .)
    RPAREN          reduce using rule 50 (field_list -> empty .)
    VAR             reduce using rule 50 (field_list -> empty .)
    ID              reduce using rule 50 (field_list -> empty .)
    READLN          reduce using rule 50 (field_list -> empty .)
    WRITE           reduce using rule 50 (field_list -> empty .)
    WRITELN         reduce using rule 50 (field_list -> empty .)
    USES            reduce using rule 50 (field_list -> empty .)
    IF              reduce using rule 50 (field_list -> empty .)
    CASE            reduce using rule 50 (field_list -> empty .)
    WHILE           reduce using rule 50 (field_list -> empty .)
    BEGIN           reduce using rule 50 (field_list -> empty .)
    FOR             reduce using rule 50 (field_list -> empty .)
    WITH            reduce using rule 50 (field_list -> empty .)
    REPEAT          reduce using rule 50 (field_list -> empty .)
    END             reduce using rule 50 (field_list -> empty .)
    CONSTRUCTOR     reduce using rule 50 (field_list -> empty .)
    PROCEDURE       reduce using rule 50 (field_list -> empty .)
    FUNCTION        reduce using rule 50 (field_list -> empty .)
    DESTRUCTOR      reduce using rule 50 (field_list -> empty .)
    SEMICOLON       reduce using rule 50 (field_list -> empty .)
    ELSE            reduce using rule 50 (field_list -> empty .)

  ! RPAREN          [ reduce using rule 109 (statement -> empty .) ]
  ! VAR             [ reduce using rule 109 (statement -> empty .) ]
  ! ID              [ reduce using rule 109 (statement -> empty .) ]
  ! READLN          [ reduce using rule 109 (statement -> empty .) ]
  ! WRITE           [ reduce using rule 109 (statement -> empty .) ]
  ! WRITELN         [ reduce using rule 109 (statement -> empty .) ]
  ! USES            [ reduce using rule 109 (statement -> empty .) ]
  ! IF              [ reduce using rule 109 (statement -> empty .) ]
  ! CASE            [ reduce using rule 109 (statement -> empty .) ]
  ! WHILE           [ reduce using rule 109 (statement -> empty .) ]
  ! BEGIN           [ reduce using rule 109 (statement -> empty .) ]
  ! FOR             [ reduce using rule 109 (statement -> empty .) ]
  ! WITH            [ reduce using rule 109 (statement -> empty .) ]
  ! REPEAT          [ reduce using rule 109 (statement -> empty .) ]
  ! END             [ reduce using rule 109 (statement -> empty .) ]
  ! CONSTRUCTOR     [ reduce using rule 109 (statement -> empty .) ]
  ! PROCEDURE       [ reduce using rule 109 (statement -> empty .) ]
  ! FUNCTION        [ reduce using rule 109 (statement -> empty .) ]
  ! DESTRUCTOR      [ reduce using rule 109 (statement -> empty .) ]
  ! SEMICOLON       [ reduce using rule 109 (statement -> empty .) ]
  ! ELSE            [ reduce using rule 109 (statement -> empty .) ]


state 158

    (51) field -> id_list . COLON type_specifier
    (52) field -> id_list . COLON type_specifier SEMICOLON
    (55) field -> id_list . LPAREN STRING_LITERAL RPAREN
    (20) id_list -> id_list . COMMA ID

    COLON           shift and go to state 250
    LPAREN          shift and go to state 251
    COMMA           shift and go to state 75


state 159

    (53) field -> VAR . id_list COLON type_specifier
    (54) field -> VAR . id_list COLON type_specifier SEMICOLON
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

    ID              shift and go to state 33

    id_list                        shift and go to state 252

state 160

    (56) field -> statement .

    RPAREN          reduce using rule 56 (field -> statement .)
    VAR             reduce using rule 56 (field -> statement .)
    ID              reduce using rule 56 (field -> statement .)
    READLN          reduce using rule 56 (field -> statement .)
    WRITE           reduce using rule 56 (field -> statement .)
    WRITELN         reduce using rule 56 (field -> statement .)
    USES            reduce using rule 56 (field -> statement .)
    IF              reduce using rule 56 (field -> statement .)
    CASE            reduce using rule 56 (field -> statement .)
    WHILE           reduce using rule 56 (field -> statement .)
    BEGIN           reduce using rule 56 (field -> statement .)
    FOR             reduce using rule 56 (field -> statement .)
    WITH            reduce using rule 56 (field -> statement .)
    REPEAT          reduce using rule 56 (field -> statement .)
    END             reduce using rule 56 (field -> statement .)
    CONSTRUCTOR     reduce using rule 56 (field -> statement .)
    PROCEDURE       reduce using rule 56 (field -> statement .)
    FUNCTION        reduce using rule 56 (field -> statement .)
    DESTRUCTOR      reduce using rule 56 (field -> statement .)
    SEMICOLON       reduce using rule 56 (field -> statement .)
    ELSE            reduce using rule 56 (field -> statement .)


state 161

    (57) field -> if_statement .
    (100) statement -> if_statement .

  ! reduce/reduce conflict for RPAREN resolved using rule 57 (field -> if_statement .)
  ! reduce/reduce conflict for VAR resolved using rule 57 (field -> if_statement .)
  ! reduce/reduce conflict for ID resolved using rule 57 (field -> if_statement .)
  ! reduce/reduce conflict for READLN resolved using rule 57 (field -> if_statement .)
  ! reduce/reduce conflict for WRITE resolved using rule 57 (field -> if_statement .)
  ! reduce/reduce conflict for WRITELN resolved using rule 57 (field -> if_statement .)
  ! reduce/reduce conflict for USES resolved using rule 57 (field -> if_statement .)
  ! reduce/reduce conflict for IF resolved using rule 57 (field -> if_statement .)
  ! reduce/reduce conflict for CASE resolved using rule 57 (field -> if_statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 57 (field -> if_statement .)
  ! reduce/reduce conflict for BEGIN resolved using rule 57 (field -> if_statement .)
  ! reduce/reduce conflict for FOR resolved using rule 57 (field -> if_statement .)
  ! reduce/reduce conflict for WITH resolved using rule 57 (field -> if_statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 57 (field -> if_statement .)
  ! reduce/reduce conflict for END resolved using rule 57 (field -> if_statement .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 57 (field -> if_statement .)
  ! reduce/reduce conflict for PROCEDURE resolved using rule 57 (field -> if_statement .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 57 (field -> if_statement .)
  ! reduce/reduce conflict for DESTRUCTOR resolved using rule 57 (field -> if_statement .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 57 (field -> if_statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 57 (field -> if_statement .)
    RPAREN          reduce using rule 57 (field -> if_statement .)
    VAR             reduce using rule 57 (field -> if_statement .)
    ID              reduce using rule 57 (field -> if_statement .)
    READLN          reduce using rule 57 (field -> if_statement .)
    WRITE           reduce using rule 57 (field -> if_statement .)
    WRITELN         reduce using rule 57 (field -> if_statement .)
    USES            reduce using rule 57 (field -> if_statement .)
    IF              reduce using rule 57 (field -> if_statement .)
    CASE            reduce using rule 57 (field -> if_statement .)
    WHILE           reduce using rule 57 (field -> if_statement .)
    BEGIN           reduce using rule 57 (field -> if_statement .)
    FOR             reduce using rule 57 (field -> if_statement .)
    WITH            reduce using rule 57 (field -> if_statement .)
    REPEAT          reduce using rule 57 (field -> if_statement .)
    END             reduce using rule 57 (field -> if_statement .)
    CONSTRUCTOR     reduce using rule 57 (field -> if_statement .)
    PROCEDURE       reduce using rule 57 (field -> if_statement .)
    FUNCTION        reduce using rule 57 (field -> if_statement .)
    DESTRUCTOR      reduce using rule 57 (field -> if_statement .)
    SEMICOLON       reduce using rule 57 (field -> if_statement .)
    ELSE            reduce using rule 57 (field -> if_statement .)

  ! RPAREN          [ reduce using rule 100 (statement -> if_statement .) ]
  ! VAR             [ reduce using rule 100 (statement -> if_statement .) ]
  ! ID              [ reduce using rule 100 (statement -> if_statement .) ]
  ! READLN          [ reduce using rule 100 (statement -> if_statement .) ]
  ! WRITE           [ reduce using rule 100 (statement -> if_statement .) ]
  ! WRITELN         [ reduce using rule 100 (statement -> if_statement .) ]
  ! USES            [ reduce using rule 100 (statement -> if_statement .) ]
  ! IF              [ reduce using rule 100 (statement -> if_statement .) ]
  ! CASE            [ reduce using rule 100 (statement -> if_statement .) ]
  ! WHILE           [ reduce using rule 100 (statement -> if_statement .) ]
  ! BEGIN           [ reduce using rule 100 (statement -> if_statement .) ]
  ! FOR             [ reduce using rule 100 (statement -> if_statement .) ]
  ! WITH            [ reduce using rule 100 (statement -> if_statement .) ]
  ! REPEAT          [ reduce using rule 100 (statement -> if_statement .) ]
  ! END             [ reduce using rule 100 (statement -> if_statement .) ]
  ! CONSTRUCTOR     [ reduce using rule 100 (statement -> if_statement .) ]
  ! PROCEDURE       [ reduce using rule 100 (statement -> if_statement .) ]
  ! FUNCTION        [ reduce using rule 100 (statement -> if_statement .) ]
  ! DESTRUCTOR      [ reduce using rule 100 (statement -> if_statement .) ]
  ! SEMICOLON       [ reduce using rule 100 (statement -> if_statement .) ]
  ! ELSE            [ reduce using rule 100 (statement -> if_statement .) ]


state 162

    (58) field -> case_statement .
    (106) statement -> case_statement .

  ! reduce/reduce conflict for RPAREN resolved using rule 58 (field -> case_statement .)
  ! reduce/reduce conflict for VAR resolved using rule 58 (field -> case_statement .)
  ! reduce/reduce conflict for ID resolved using rule 58 (field -> case_statement .)
  ! reduce/reduce conflict for READLN resolved using rule 58 (field -> case_statement .)
  ! reduce/reduce conflict for WRITE resolved using rule 58 (field -> case_statement .)
  ! reduce/reduce conflict for WRITELN resolved using rule 58 (field -> case_statement .)
  ! reduce/reduce conflict for USES resolved using rule 58 (field -> case_statement .)
  ! reduce/reduce conflict for IF resolved using rule 58 (field -> case_statement .)
  ! reduce/reduce conflict for CASE resolved using rule 58 (field -> case_statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 58 (field -> case_statement .)
  ! reduce/reduce conflict for BEGIN resolved using rule 58 (field -> case_statement .)
  ! reduce/reduce conflict for FOR resolved using rule 58 (field -> case_statement .)
  ! reduce/reduce conflict for WITH resolved using rule 58 (field -> case_statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 58 (field -> case_statement .)
  ! reduce/reduce conflict for END resolved using rule 58 (field -> case_statement .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 58 (field -> case_statement .)
  ! reduce/reduce conflict for PROCEDURE resolved using rule 58 (field -> case_statement .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 58 (field -> case_statement .)
  ! reduce/reduce conflict for DESTRUCTOR resolved using rule 58 (field -> case_statement .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 58 (field -> case_statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 58 (field -> case_statement .)
    RPAREN          reduce using rule 58 (field -> case_statement .)
    VAR             reduce using rule 58 (field -> case_statement .)
    ID              reduce using rule 58 (field -> case_statement .)
    READLN          reduce using rule 58 (field -> case_statement .)
    WRITE           reduce using rule 58 (field -> case_statement .)
    WRITELN         reduce using rule 58 (field -> case_statement .)
    USES            reduce using rule 58 (field -> case_statement .)
    IF              reduce using rule 58 (field -> case_statement .)
    CASE            reduce using rule 58 (field -> case_statement .)
    WHILE           reduce using rule 58 (field -> case_statement .)
    BEGIN           reduce using rule 58 (field -> case_statement .)
    FOR             reduce using rule 58 (field -> case_statement .)
    WITH            reduce using rule 58 (field -> case_statement .)
    REPEAT          reduce using rule 58 (field -> case_statement .)
    END             reduce using rule 58 (field -> case_statement .)
    CONSTRUCTOR     reduce using rule 58 (field -> case_statement .)
    PROCEDURE       reduce using rule 58 (field -> case_statement .)
    FUNCTION        reduce using rule 58 (field -> case_statement .)
    DESTRUCTOR      reduce using rule 58 (field -> case_statement .)
    SEMICOLON       reduce using rule 58 (field -> case_statement .)
    ELSE            reduce using rule 58 (field -> case_statement .)

  ! RPAREN          [ reduce using rule 106 (statement -> case_statement .) ]
  ! VAR             [ reduce using rule 106 (statement -> case_statement .) ]
  ! ID              [ reduce using rule 106 (statement -> case_statement .) ]
  ! READLN          [ reduce using rule 106 (statement -> case_statement .) ]
  ! WRITE           [ reduce using rule 106 (statement -> case_statement .) ]
  ! WRITELN         [ reduce using rule 106 (statement -> case_statement .) ]
  ! USES            [ reduce using rule 106 (statement -> case_statement .) ]
  ! IF              [ reduce using rule 106 (statement -> case_statement .) ]
  ! CASE            [ reduce using rule 106 (statement -> case_statement .) ]
  ! WHILE           [ reduce using rule 106 (statement -> case_statement .) ]
  ! BEGIN           [ reduce using rule 106 (statement -> case_statement .) ]
  ! FOR             [ reduce using rule 106 (statement -> case_statement .) ]
  ! WITH            [ reduce using rule 106 (statement -> case_statement .) ]
  ! REPEAT          [ reduce using rule 106 (statement -> case_statement .) ]
  ! END             [ reduce using rule 106 (statement -> case_statement .) ]
  ! CONSTRUCTOR     [ reduce using rule 106 (statement -> case_statement .) ]
  ! PROCEDURE       [ reduce using rule 106 (statement -> case_statement .) ]
  ! FUNCTION        [ reduce using rule 106 (statement -> case_statement .) ]
  ! DESTRUCTOR      [ reduce using rule 106 (statement -> case_statement .) ]
  ! SEMICOLON       [ reduce using rule 106 (statement -> case_statement .) ]
  ! ELSE            [ reduce using rule 106 (statement -> case_statement .) ]


state 163

    (59) field -> assignment_statement .
    (101) statement -> assignment_statement .

  ! reduce/reduce conflict for RPAREN resolved using rule 59 (field -> assignment_statement .)
  ! reduce/reduce conflict for VAR resolved using rule 59 (field -> assignment_statement .)
  ! reduce/reduce conflict for ID resolved using rule 59 (field -> assignment_statement .)
  ! reduce/reduce conflict for READLN resolved using rule 59 (field -> assignment_statement .)
  ! reduce/reduce conflict for WRITE resolved using rule 59 (field -> assignment_statement .)
  ! reduce/reduce conflict for WRITELN resolved using rule 59 (field -> assignment_statement .)
  ! reduce/reduce conflict for USES resolved using rule 59 (field -> assignment_statement .)
  ! reduce/reduce conflict for IF resolved using rule 59 (field -> assignment_statement .)
  ! reduce/reduce conflict for CASE resolved using rule 59 (field -> assignment_statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 59 (field -> assignment_statement .)
  ! reduce/reduce conflict for BEGIN resolved using rule 59 (field -> assignment_statement .)
  ! reduce/reduce conflict for FOR resolved using rule 59 (field -> assignment_statement .)
  ! reduce/reduce conflict for WITH resolved using rule 59 (field -> assignment_statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 59 (field -> assignment_statement .)
  ! reduce/reduce conflict for END resolved using rule 59 (field -> assignment_statement .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 59 (field -> assignment_statement .)
  ! reduce/reduce conflict for PROCEDURE resolved using rule 59 (field -> assignment_statement .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 59 (field -> assignment_statement .)
  ! reduce/reduce conflict for DESTRUCTOR resolved using rule 59 (field -> assignment_statement .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 59 (field -> assignment_statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 59 (field -> assignment_statement .)
    RPAREN          reduce using rule 59 (field -> assignment_statement .)
    VAR             reduce using rule 59 (field -> assignment_statement .)
    ID              reduce using rule 59 (field -> assignment_statement .)
    READLN          reduce using rule 59 (field -> assignment_statement .)
    WRITE           reduce using rule 59 (field -> assignment_statement .)
    WRITELN         reduce using rule 59 (field -> assignment_statement .)
    USES            reduce using rule 59 (field -> assignment_statement .)
    IF              reduce using rule 59 (field -> assignment_statement .)
    CASE            reduce using rule 59 (field -> assignment_statement .)
    WHILE           reduce using rule 59 (field -> assignment_statement .)
    BEGIN           reduce using rule 59 (field -> assignment_statement .)
    FOR             reduce using rule 59 (field -> assignment_statement .)
    WITH            reduce using rule 59 (field -> assignment_statement .)
    REPEAT          reduce using rule 59 (field -> assignment_statement .)
    END             reduce using rule 59 (field -> assignment_statement .)
    CONSTRUCTOR     reduce using rule 59 (field -> assignment_statement .)
    PROCEDURE       reduce using rule 59 (field -> assignment_statement .)
    FUNCTION        reduce using rule 59 (field -> assignment_statement .)
    DESTRUCTOR      reduce using rule 59 (field -> assignment_statement .)
    SEMICOLON       reduce using rule 59 (field -> assignment_statement .)
    ELSE            reduce using rule 59 (field -> assignment_statement .)

  ! RPAREN          [ reduce using rule 101 (statement -> assignment_statement .) ]
  ! VAR             [ reduce using rule 101 (statement -> assignment_statement .) ]
  ! ID              [ reduce using rule 101 (statement -> assignment_statement .) ]
  ! READLN          [ reduce using rule 101 (statement -> assignment_statement .) ]
  ! WRITE           [ reduce using rule 101 (statement -> assignment_statement .) ]
  ! WRITELN         [ reduce using rule 101 (statement -> assignment_statement .) ]
  ! USES            [ reduce using rule 101 (statement -> assignment_statement .) ]
  ! IF              [ reduce using rule 101 (statement -> assignment_statement .) ]
  ! CASE            [ reduce using rule 101 (statement -> assignment_statement .) ]
  ! WHILE           [ reduce using rule 101 (statement -> assignment_statement .) ]
  ! BEGIN           [ reduce using rule 101 (statement -> assignment_statement .) ]
  ! FOR             [ reduce using rule 101 (statement -> assignment_statement .) ]
  ! WITH            [ reduce using rule 101 (statement -> assignment_statement .) ]
  ! REPEAT          [ reduce using rule 101 (statement -> assignment_statement .) ]
  ! END             [ reduce using rule 101 (statement -> assignment_statement .) ]
  ! CONSTRUCTOR     [ reduce using rule 101 (statement -> assignment_statement .) ]
  ! PROCEDURE       [ reduce using rule 101 (statement -> assignment_statement .) ]
  ! FUNCTION        [ reduce using rule 101 (statement -> assignment_statement .) ]
  ! DESTRUCTOR      [ reduce using rule 101 (statement -> assignment_statement .) ]
  ! SEMICOLON       [ reduce using rule 101 (statement -> assignment_statement .) ]
  ! ELSE            [ reduce using rule 101 (statement -> assignment_statement .) ]


state 164

    (12) method_declaration -> CONSTRUCTOR ID DOT ID . LPAREN parameter_list RPAREN SEMICOLON block

    LPAREN          shift and go to state 253


state 165

    (13) method_declaration -> PROCEDURE ID DOT ID . LPAREN parameter_list RPAREN SEMICOLON block

    LPAREN          shift and go to state 254


state 166

    (81) procedure_declaration -> PROCEDURE ID LPAREN parameter_list . RPAREN SEMICOLON block SEMICOLON
    (89) parameter_list -> parameter_list . SEMICOLON parameter

    RPAREN          shift and go to state 255
    SEMICOLON       shift and go to state 244


state 167

    (82) procedure_declaration -> PROCEDURE ID LPAREN RPAREN . SEMICOLON block SEMICOLON

    SEMICOLON       shift and go to state 256


state 168

    (15) method_declaration -> DESTRUCTOR ID DOT ID . SEMICOLON block

    SEMICOLON       shift and go to state 257


state 169

    (97) statement_list -> statement_list statement SEMICOLON .

    END             reduce using rule 97 (statement_list -> statement_list statement SEMICOLON .)
    READLN          reduce using rule 97 (statement_list -> statement_list statement SEMICOLON .)
    WRITE           reduce using rule 97 (statement_list -> statement_list statement SEMICOLON .)
    WRITELN         reduce using rule 97 (statement_list -> statement_list statement SEMICOLON .)
    USES            reduce using rule 97 (statement_list -> statement_list statement SEMICOLON .)
    IF              reduce using rule 97 (statement_list -> statement_list statement SEMICOLON .)
    ID              reduce using rule 97 (statement_list -> statement_list statement SEMICOLON .)
    WHILE           reduce using rule 97 (statement_list -> statement_list statement SEMICOLON .)
    BEGIN           reduce using rule 97 (statement_list -> statement_list statement SEMICOLON .)
    FOR             reduce using rule 97 (statement_list -> statement_list statement SEMICOLON .)
    CASE            reduce using rule 97 (statement_list -> statement_list statement SEMICOLON .)
    WITH            reduce using rule 97 (statement_list -> statement_list statement SEMICOLON .)
    REPEAT          reduce using rule 97 (statement_list -> statement_list statement SEMICOLON .)
    SEMICOLON       reduce using rule 97 (statement_list -> statement_list statement SEMICOLON .)
    UNTIL           reduce using rule 97 (statement_list -> statement_list statement SEMICOLON .)


state 170

    (94) compound_statement -> BEGIN local_var_declarations statement_list END .

    DOT             reduce using rule 94 (compound_statement -> BEGIN local_var_declarations statement_list END .)
    USES            reduce using rule 94 (compound_statement -> BEGIN local_var_declarations statement_list END .)
    CONST           reduce using rule 94 (compound_statement -> BEGIN local_var_declarations statement_list END .)
    TYPE            reduce using rule 94 (compound_statement -> BEGIN local_var_declarations statement_list END .)
    VAR             reduce using rule 94 (compound_statement -> BEGIN local_var_declarations statement_list END .)
    FUNCTION        reduce using rule 94 (compound_statement -> BEGIN local_var_declarations statement_list END .)
    CONSTRUCTOR     reduce using rule 94 (compound_statement -> BEGIN local_var_declarations statement_list END .)
    PROCEDURE       reduce using rule 94 (compound_statement -> BEGIN local_var_declarations statement_list END .)
    DESTRUCTOR      reduce using rule 94 (compound_statement -> BEGIN local_var_declarations statement_list END .)
    BEGIN           reduce using rule 94 (compound_statement -> BEGIN local_var_declarations statement_list END .)
    SEMICOLON       reduce using rule 94 (compound_statement -> BEGIN local_var_declarations statement_list END .)
    END             reduce using rule 94 (compound_statement -> BEGIN local_var_declarations statement_list END .)
    READLN          reduce using rule 94 (compound_statement -> BEGIN local_var_declarations statement_list END .)
    WRITE           reduce using rule 94 (compound_statement -> BEGIN local_var_declarations statement_list END .)
    WRITELN         reduce using rule 94 (compound_statement -> BEGIN local_var_declarations statement_list END .)
    IF              reduce using rule 94 (compound_statement -> BEGIN local_var_declarations statement_list END .)
    ID              reduce using rule 94 (compound_statement -> BEGIN local_var_declarations statement_list END .)
    WHILE           reduce using rule 94 (compound_statement -> BEGIN local_var_declarations statement_list END .)
    FOR             reduce using rule 94 (compound_statement -> BEGIN local_var_declarations statement_list END .)
    CASE            reduce using rule 94 (compound_statement -> BEGIN local_var_declarations statement_list END .)
    WITH            reduce using rule 94 (compound_statement -> BEGIN local_var_declarations statement_list END .)
    REPEAT          reduce using rule 94 (compound_statement -> BEGIN local_var_declarations statement_list END .)
    UNTIL           reduce using rule 94 (compound_statement -> BEGIN local_var_declarations statement_list END .)
    RPAREN          reduce using rule 94 (compound_statement -> BEGIN local_var_declarations statement_list END .)
    ELSE            reduce using rule 94 (compound_statement -> BEGIN local_var_declarations statement_list END .)
    THEN            reduce using rule 94 (compound_statement -> BEGIN local_var_declarations statement_list END .)


state 171

    (167) statement -> READLN LPAREN variable . RPAREN
    (125) variable -> variable . LBRACKET expression RBRACKET
    (126) variable -> variable . DOT ID
    (170) variable_list -> variable .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 258
    LBRACKET        shift and go to state 100
    DOT             shift and go to state 101
    COMMA           reduce using rule 170 (variable_list -> variable .)

  ! RPAREN          [ reduce using rule 170 (variable_list -> variable .) ]


state 172

    (169) statement -> READLN LPAREN variable_list . RPAREN
    (171) variable_list -> variable_list . COMMA variable

    RPAREN          shift and go to state 259
    COMMA           shift and go to state 260


state 173

    (168) statement -> READLN LBRACKET variable . RBRACKET
    (125) variable -> variable . LBRACKET expression RBRACKET
    (126) variable -> variable . DOT ID

    RBRACKET        shift and go to state 261
    LBRACKET        shift and go to state 100
    DOT             shift and go to state 101


state 174

    (117) assignment_statement -> variable COLON_EQUAL expression .
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression

    END             reduce using rule 117 (assignment_statement -> variable COLON_EQUAL expression .)
    READLN          reduce using rule 117 (assignment_statement -> variable COLON_EQUAL expression .)
    WRITE           reduce using rule 117 (assignment_statement -> variable COLON_EQUAL expression .)
    WRITELN         reduce using rule 117 (assignment_statement -> variable COLON_EQUAL expression .)
    USES            reduce using rule 117 (assignment_statement -> variable COLON_EQUAL expression .)
    IF              reduce using rule 117 (assignment_statement -> variable COLON_EQUAL expression .)
    ID              reduce using rule 117 (assignment_statement -> variable COLON_EQUAL expression .)
    WHILE           reduce using rule 117 (assignment_statement -> variable COLON_EQUAL expression .)
    BEGIN           reduce using rule 117 (assignment_statement -> variable COLON_EQUAL expression .)
    FOR             reduce using rule 117 (assignment_statement -> variable COLON_EQUAL expression .)
    CASE            reduce using rule 117 (assignment_statement -> variable COLON_EQUAL expression .)
    WITH            reduce using rule 117 (assignment_statement -> variable COLON_EQUAL expression .)
    REPEAT          reduce using rule 117 (assignment_statement -> variable COLON_EQUAL expression .)
    SEMICOLON       reduce using rule 117 (assignment_statement -> variable COLON_EQUAL expression .)
    UNTIL           reduce using rule 117 (assignment_statement -> variable COLON_EQUAL expression .)
    RPAREN          reduce using rule 117 (assignment_statement -> variable COLON_EQUAL expression .)
    VAR             reduce using rule 117 (assignment_statement -> variable COLON_EQUAL expression .)
    CONSTRUCTOR     reduce using rule 117 (assignment_statement -> variable COLON_EQUAL expression .)
    PROCEDURE       reduce using rule 117 (assignment_statement -> variable COLON_EQUAL expression .)
    FUNCTION        reduce using rule 117 (assignment_statement -> variable COLON_EQUAL expression .)
    DESTRUCTOR      reduce using rule 117 (assignment_statement -> variable COLON_EQUAL expression .)
    ELSE            reduce using rule 117 (assignment_statement -> variable COLON_EQUAL expression .)
    THEN            reduce using rule 117 (assignment_statement -> variable COLON_EQUAL expression .)
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201


state 175

    (118) assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL . SEMICOLON

    SEMICOLON       shift and go to state 262


state 176

    (119) assignment_statement -> variable PLUS COLON_EQUAL . expression
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    variable                       shift and go to state 115
    expression                     shift and go to state 263
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113

state 177

    (120) assignment_statement -> variable MINUS COLON_EQUAL . expression
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    variable                       shift and go to state 115
    expression                     shift and go to state 264
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113

state 178

    (121) assignment_statement -> variable TIMES COLON_EQUAL . expression
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    variable                       shift and go to state 115
    expression                     shift and go to state 265
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113

state 179

    (122) assignment_statement -> variable DIVIDE COLON_EQUAL . expression
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    variable                       shift and go to state 115
    expression                     shift and go to state 266
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113

state 180

    (125) variable -> variable LBRACKET expression . RBRACKET
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression

    RBRACKET        shift and go to state 267
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201


state 181

    (126) variable -> variable DOT ID .

    COLON_EQUAL     reduce using rule 126 (variable -> variable DOT ID .)
    PLUS            reduce using rule 126 (variable -> variable DOT ID .)
    MINUS           reduce using rule 126 (variable -> variable DOT ID .)
    TIMES           reduce using rule 126 (variable -> variable DOT ID .)
    DIVIDE          reduce using rule 126 (variable -> variable DOT ID .)
    LBRACKET        reduce using rule 126 (variable -> variable DOT ID .)
    DOT             reduce using rule 126 (variable -> variable DOT ID .)
    DIV             reduce using rule 126 (variable -> variable DOT ID .)
    LESS            reduce using rule 126 (variable -> variable DOT ID .)
    LESS_EQUAL      reduce using rule 126 (variable -> variable DOT ID .)
    GREAT           reduce using rule 126 (variable -> variable DOT ID .)
    GREAT_EQUAL     reduce using rule 126 (variable -> variable DOT ID .)
    EQUAL           reduce using rule 126 (variable -> variable DOT ID .)
    DIFFERENT       reduce using rule 126 (variable -> variable DOT ID .)
    THEN            reduce using rule 126 (variable -> variable DOT ID .)
    IN              reduce using rule 126 (variable -> variable DOT ID .)
    MOD             reduce using rule 126 (variable -> variable DOT ID .)
    AND             reduce using rule 126 (variable -> variable DOT ID .)
    OR              reduce using rule 126 (variable -> variable DOT ID .)
    DO              reduce using rule 126 (variable -> variable DOT ID .)
    OF              reduce using rule 126 (variable -> variable DOT ID .)
    RPAREN          reduce using rule 126 (variable -> variable DOT ID .)
    COMMA           reduce using rule 126 (variable -> variable DOT ID .)
    RBRACKET        reduce using rule 126 (variable -> variable DOT ID .)
    END             reduce using rule 126 (variable -> variable DOT ID .)
    READLN          reduce using rule 126 (variable -> variable DOT ID .)
    WRITE           reduce using rule 126 (variable -> variable DOT ID .)
    WRITELN         reduce using rule 126 (variable -> variable DOT ID .)
    USES            reduce using rule 126 (variable -> variable DOT ID .)
    IF              reduce using rule 126 (variable -> variable DOT ID .)
    ID              reduce using rule 126 (variable -> variable DOT ID .)
    WHILE           reduce using rule 126 (variable -> variable DOT ID .)
    BEGIN           reduce using rule 126 (variable -> variable DOT ID .)
    FOR             reduce using rule 126 (variable -> variable DOT ID .)
    CASE            reduce using rule 126 (variable -> variable DOT ID .)
    WITH            reduce using rule 126 (variable -> variable DOT ID .)
    REPEAT          reduce using rule 126 (variable -> variable DOT ID .)
    SEMICOLON       reduce using rule 126 (variable -> variable DOT ID .)
    UNTIL           reduce using rule 126 (variable -> variable DOT ID .)
    VAR             reduce using rule 126 (variable -> variable DOT ID .)
    CONSTRUCTOR     reduce using rule 126 (variable -> variable DOT ID .)
    PROCEDURE       reduce using rule 126 (variable -> variable DOT ID .)
    FUNCTION        reduce using rule 126 (variable -> variable DOT ID .)
    DESTRUCTOR      reduce using rule 126 (variable -> variable DOT ID .)
    ELSE            reduce using rule 126 (variable -> variable DOT ID .)
    COLON           reduce using rule 126 (variable -> variable DOT ID .)
    TO              reduce using rule 126 (variable -> variable DOT ID .)
    DOWNTO          reduce using rule 126 (variable -> variable DOT ID .)


state 182

    (172) statement -> WRITE LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 268


state 183

    (133) expression_list -> expression . expression_list_tail
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression
    (134) expression_list_tail -> . COMMA expression expression_list_tail
    (135) expression_list_tail -> . empty
    (165) empty -> .

    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201
    COMMA           shift and go to state 270
    RPAREN          reduce using rule 165 (empty -> .)

    expression_list_tail           shift and go to state 269
    empty                          shift and go to state 271

state 184

    (136) expression_list -> empty .

    RPAREN          reduce using rule 136 (expression_list -> empty .)


state 185

    (173) statement -> WRITELN LPAREN write_arguments . RPAREN
    (176) write_arguments -> write_arguments . COMMA write_argument

    RPAREN          shift and go to state 272
    COMMA           shift and go to state 273


state 186

    (174) statement -> WRITELN LPAREN expression . RPAREN
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression
    (177) write_argument -> expression .
    (178) write_argument -> expression . COLON expression
    (179) write_argument -> expression . COLON expression COLON expression

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 274
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201
    COMMA           reduce using rule 177 (write_argument -> expression .)
    COLON           shift and go to state 275

  ! RPAREN          [ reduce using rule 177 (write_argument -> expression .) ]


state 187

    (175) write_arguments -> write_argument .

    RPAREN          reduce using rule 175 (write_arguments -> write_argument .)
    COMMA           reduce using rule 175 (write_arguments -> write_argument .)


state 188

    (180) statement -> USES ID SEMICOLON .

    END             reduce using rule 180 (statement -> USES ID SEMICOLON .)
    READLN          reduce using rule 180 (statement -> USES ID SEMICOLON .)
    WRITE           reduce using rule 180 (statement -> USES ID SEMICOLON .)
    WRITELN         reduce using rule 180 (statement -> USES ID SEMICOLON .)
    USES            reduce using rule 180 (statement -> USES ID SEMICOLON .)
    IF              reduce using rule 180 (statement -> USES ID SEMICOLON .)
    ID              reduce using rule 180 (statement -> USES ID SEMICOLON .)
    WHILE           reduce using rule 180 (statement -> USES ID SEMICOLON .)
    BEGIN           reduce using rule 180 (statement -> USES ID SEMICOLON .)
    FOR             reduce using rule 180 (statement -> USES ID SEMICOLON .)
    CASE            reduce using rule 180 (statement -> USES ID SEMICOLON .)
    WITH            reduce using rule 180 (statement -> USES ID SEMICOLON .)
    REPEAT          reduce using rule 180 (statement -> USES ID SEMICOLON .)
    SEMICOLON       reduce using rule 180 (statement -> USES ID SEMICOLON .)
    UNTIL           reduce using rule 180 (statement -> USES ID SEMICOLON .)
    RPAREN          reduce using rule 180 (statement -> USES ID SEMICOLON .)
    VAR             reduce using rule 180 (statement -> USES ID SEMICOLON .)
    CONSTRUCTOR     reduce using rule 180 (statement -> USES ID SEMICOLON .)
    PROCEDURE       reduce using rule 180 (statement -> USES ID SEMICOLON .)
    FUNCTION        reduce using rule 180 (statement -> USES ID SEMICOLON .)
    DESTRUCTOR      reduce using rule 180 (statement -> USES ID SEMICOLON .)
    ELSE            reduce using rule 180 (statement -> USES ID SEMICOLON .)
    THEN            reduce using rule 180 (statement -> USES ID SEMICOLON .)


state 189

    (123) assignment_statement -> ID COLON_EQUAL expression .
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression

    END             reduce using rule 123 (assignment_statement -> ID COLON_EQUAL expression .)
    READLN          reduce using rule 123 (assignment_statement -> ID COLON_EQUAL expression .)
    WRITE           reduce using rule 123 (assignment_statement -> ID COLON_EQUAL expression .)
    WRITELN         reduce using rule 123 (assignment_statement -> ID COLON_EQUAL expression .)
    USES            reduce using rule 123 (assignment_statement -> ID COLON_EQUAL expression .)
    IF              reduce using rule 123 (assignment_statement -> ID COLON_EQUAL expression .)
    ID              reduce using rule 123 (assignment_statement -> ID COLON_EQUAL expression .)
    WHILE           reduce using rule 123 (assignment_statement -> ID COLON_EQUAL expression .)
    BEGIN           reduce using rule 123 (assignment_statement -> ID COLON_EQUAL expression .)
    FOR             reduce using rule 123 (assignment_statement -> ID COLON_EQUAL expression .)
    CASE            reduce using rule 123 (assignment_statement -> ID COLON_EQUAL expression .)
    WITH            reduce using rule 123 (assignment_statement -> ID COLON_EQUAL expression .)
    REPEAT          reduce using rule 123 (assignment_statement -> ID COLON_EQUAL expression .)
    SEMICOLON       reduce using rule 123 (assignment_statement -> ID COLON_EQUAL expression .)
    UNTIL           reduce using rule 123 (assignment_statement -> ID COLON_EQUAL expression .)
    RPAREN          reduce using rule 123 (assignment_statement -> ID COLON_EQUAL expression .)
    VAR             reduce using rule 123 (assignment_statement -> ID COLON_EQUAL expression .)
    CONSTRUCTOR     reduce using rule 123 (assignment_statement -> ID COLON_EQUAL expression .)
    PROCEDURE       reduce using rule 123 (assignment_statement -> ID COLON_EQUAL expression .)
    FUNCTION        reduce using rule 123 (assignment_statement -> ID COLON_EQUAL expression .)
    DESTRUCTOR      reduce using rule 123 (assignment_statement -> ID COLON_EQUAL expression .)
    ELSE            reduce using rule 123 (assignment_statement -> ID COLON_EQUAL expression .)
    THEN            reduce using rule 123 (assignment_statement -> ID COLON_EQUAL expression .)
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201


state 190

    (131) procedure_call -> ID LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 276


state 191

    (127) variable -> ID LBRACKET index_list . RBRACKET
    (129) index_list -> index_list . COMMA expression

    RBRACKET        shift and go to state 277
    COMMA           shift and go to state 278


state 192

    (128) index_list -> expression .
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression

    RBRACKET        reduce using rule 128 (index_list -> expression .)
    COMMA           reduce using rule 128 (index_list -> expression .)
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201


state 193

    (111) if_statement -> IF expression THEN . statement ELSE statement
    (112) if_statement -> IF expression THEN . statement
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (165) empty -> .
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for READLN resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    IF              shift and go to state 67
    ID              shift and go to state 66
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    CASE            shift and go to state 70
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72
    ELSE            reduce using rule 165 (empty -> .)
    END             reduce using rule 165 (empty -> .)
    SEMICOLON       reduce using rule 165 (empty -> .)
    UNTIL           reduce using rule 165 (empty -> .)
    RPAREN          reduce using rule 165 (empty -> .)
    VAR             reduce using rule 165 (empty -> .)
    CONSTRUCTOR     reduce using rule 165 (empty -> .)
    PROCEDURE       reduce using rule 165 (empty -> .)
    FUNCTION        reduce using rule 165 (empty -> .)
    DESTRUCTOR      reduce using rule 165 (empty -> .)
    THEN            reduce using rule 165 (empty -> .)

  ! READLN          [ reduce using rule 165 (empty -> .) ]
  ! WRITE           [ reduce using rule 165 (empty -> .) ]
  ! WRITELN         [ reduce using rule 165 (empty -> .) ]
  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! IF              [ reduce using rule 165 (empty -> .) ]
  ! ID              [ reduce using rule 165 (empty -> .) ]
  ! WHILE           [ reduce using rule 165 (empty -> .) ]
  ! BEGIN           [ reduce using rule 165 (empty -> .) ]
  ! FOR             [ reduce using rule 165 (empty -> .) ]
  ! CASE            [ reduce using rule 165 (empty -> .) ]
  ! WITH            [ reduce using rule 165 (empty -> .) ]
  ! REPEAT          [ reduce using rule 165 (empty -> .) ]

    statement                      shift and go to state 279
    if_statement                   shift and go to state 52
    assignment_statement           shift and go to state 53
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    case_statement                 shift and go to state 58
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    empty                          shift and go to state 91
    variable                       shift and go to state 62

state 194

    (113) if_statement -> IF expression IN . statement THEN statement ELSE statement
    (114) if_statement -> IF expression IN . statement THEN statement
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (165) empty -> .
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    IF              shift and go to state 67
    ID              shift and go to state 66
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    CASE            shift and go to state 70
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72
    THEN            reduce using rule 165 (empty -> .)

    statement                      shift and go to state 280
    if_statement                   shift and go to state 52
    assignment_statement           shift and go to state 53
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    case_statement                 shift and go to state 58
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    empty                          shift and go to state 91
    variable                       shift and go to state 62

state 195

    (150) expression -> expression PLUS . expression
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    expression                     shift and go to state 281
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 196

    (151) expression -> expression MINUS . expression
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    expression                     shift and go to state 282
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 197

    (152) expression -> expression TIMES . expression
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    expression                     shift and go to state 283
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 198

    (153) expression -> expression DIVIDE . expression
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    expression                     shift and go to state 284
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 199

    (154) expression -> expression MOD . expression
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    expression                     shift and go to state 285
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 200

    (189) expression -> expression AND . expression
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    expression                     shift and go to state 286
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 201

    (190) expression -> expression OR . expression
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    expression                     shift and go to state 287
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 202

    (137) expression -> simple_expression relop . simple_expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    simple_expression              shift and go to state 288
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 203

    (159) relop -> LESS .

    LPAREN          reduce using rule 159 (relop -> LESS .)
    NUMBER          reduce using rule 159 (relop -> LESS .)
    STRING_LITERAL  reduce using rule 159 (relop -> LESS .)
    ID              reduce using rule 159 (relop -> LESS .)


state 204

    (160) relop -> LESS_EQUAL .

    LPAREN          reduce using rule 160 (relop -> LESS_EQUAL .)
    NUMBER          reduce using rule 160 (relop -> LESS_EQUAL .)
    STRING_LITERAL  reduce using rule 160 (relop -> LESS_EQUAL .)
    ID              reduce using rule 160 (relop -> LESS_EQUAL .)


state 205

    (161) relop -> GREAT .

    LPAREN          reduce using rule 161 (relop -> GREAT .)
    NUMBER          reduce using rule 161 (relop -> GREAT .)
    STRING_LITERAL  reduce using rule 161 (relop -> GREAT .)
    ID              reduce using rule 161 (relop -> GREAT .)


state 206

    (162) relop -> GREAT_EQUAL .

    LPAREN          reduce using rule 162 (relop -> GREAT_EQUAL .)
    NUMBER          reduce using rule 162 (relop -> GREAT_EQUAL .)
    STRING_LITERAL  reduce using rule 162 (relop -> GREAT_EQUAL .)
    ID              reduce using rule 162 (relop -> GREAT_EQUAL .)


state 207

    (163) relop -> EQUAL .

    LPAREN          reduce using rule 163 (relop -> EQUAL .)
    NUMBER          reduce using rule 163 (relop -> EQUAL .)
    STRING_LITERAL  reduce using rule 163 (relop -> EQUAL .)
    ID              reduce using rule 163 (relop -> EQUAL .)


state 208

    (164) relop -> DIFFERENT .

    LPAREN          reduce using rule 164 (relop -> DIFFERENT .)
    NUMBER          reduce using rule 164 (relop -> DIFFERENT .)
    STRING_LITERAL  reduce using rule 164 (relop -> DIFFERENT .)
    ID              reduce using rule 164 (relop -> DIFFERENT .)


state 209

    (191) expression -> NOT expression .
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 191 (expression -> NOT expression .)
    IN              reduce using rule 191 (expression -> NOT expression .)
    DO              reduce using rule 191 (expression -> NOT expression .)
    OF              reduce using rule 191 (expression -> NOT expression .)
    END             reduce using rule 191 (expression -> NOT expression .)
    READLN          reduce using rule 191 (expression -> NOT expression .)
    WRITE           reduce using rule 191 (expression -> NOT expression .)
    WRITELN         reduce using rule 191 (expression -> NOT expression .)
    USES            reduce using rule 191 (expression -> NOT expression .)
    IF              reduce using rule 191 (expression -> NOT expression .)
    ID              reduce using rule 191 (expression -> NOT expression .)
    WHILE           reduce using rule 191 (expression -> NOT expression .)
    BEGIN           reduce using rule 191 (expression -> NOT expression .)
    FOR             reduce using rule 191 (expression -> NOT expression .)
    CASE            reduce using rule 191 (expression -> NOT expression .)
    WITH            reduce using rule 191 (expression -> NOT expression .)
    REPEAT          reduce using rule 191 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 191 (expression -> NOT expression .)
    UNTIL           reduce using rule 191 (expression -> NOT expression .)
    RPAREN          reduce using rule 191 (expression -> NOT expression .)
    VAR             reduce using rule 191 (expression -> NOT expression .)
    CONSTRUCTOR     reduce using rule 191 (expression -> NOT expression .)
    PROCEDURE       reduce using rule 191 (expression -> NOT expression .)
    FUNCTION        reduce using rule 191 (expression -> NOT expression .)
    DESTRUCTOR      reduce using rule 191 (expression -> NOT expression .)
    ELSE            reduce using rule 191 (expression -> NOT expression .)
    RBRACKET        reduce using rule 191 (expression -> NOT expression .)
    COMMA           reduce using rule 191 (expression -> NOT expression .)
    COLON           reduce using rule 191 (expression -> NOT expression .)
    TO              reduce using rule 191 (expression -> NOT expression .)
    DOWNTO          reduce using rule 191 (expression -> NOT expression .)
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201

  ! PLUS            [ reduce using rule 191 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 191 (expression -> NOT expression .) ]
  ! TIMES           [ reduce using rule 191 (expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 191 (expression -> NOT expression .) ]
  ! MOD             [ reduce using rule 191 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 191 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 191 (expression -> NOT expression .) ]


state 210

    (139) simple_expression -> term simple_expression_tail .

    LESS            reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    LESS_EQUAL      reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    GREAT           reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    GREAT_EQUAL     reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    EQUAL           reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    DIFFERENT       reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    THEN            reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    IN              reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    PLUS            reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    MINUS           reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    TIMES           reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    DIVIDE          reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    MOD             reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    AND             reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    OR              reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    DO              reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    OF              reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    END             reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    READLN          reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    WRITE           reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    WRITELN         reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    USES            reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    IF              reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    ID              reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    WHILE           reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    BEGIN           reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    FOR             reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    CASE            reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    WITH            reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    REPEAT          reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    SEMICOLON       reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    UNTIL           reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    RPAREN          reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    VAR             reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    CONSTRUCTOR     reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    PROCEDURE       reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    FUNCTION        reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    DESTRUCTOR      reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    ELSE            reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    RBRACKET        reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    COMMA           reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    COLON           reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    TO              reduce using rule 139 (simple_expression -> term simple_expression_tail .)
    DOWNTO          reduce using rule 139 (simple_expression -> term simple_expression_tail .)


state 211

    (140) simple_expression_tail -> addop . term
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    term                           shift and go to state 289
    factor                         shift and go to state 112
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 212

    (141) simple_expression_tail -> empty .

    LESS            reduce using rule 141 (simple_expression_tail -> empty .)
    LESS_EQUAL      reduce using rule 141 (simple_expression_tail -> empty .)
    GREAT           reduce using rule 141 (simple_expression_tail -> empty .)
    GREAT_EQUAL     reduce using rule 141 (simple_expression_tail -> empty .)
    EQUAL           reduce using rule 141 (simple_expression_tail -> empty .)
    DIFFERENT       reduce using rule 141 (simple_expression_tail -> empty .)
    THEN            reduce using rule 141 (simple_expression_tail -> empty .)
    IN              reduce using rule 141 (simple_expression_tail -> empty .)
    PLUS            reduce using rule 141 (simple_expression_tail -> empty .)
    MINUS           reduce using rule 141 (simple_expression_tail -> empty .)
    TIMES           reduce using rule 141 (simple_expression_tail -> empty .)
    DIVIDE          reduce using rule 141 (simple_expression_tail -> empty .)
    MOD             reduce using rule 141 (simple_expression_tail -> empty .)
    AND             reduce using rule 141 (simple_expression_tail -> empty .)
    OR              reduce using rule 141 (simple_expression_tail -> empty .)
    DO              reduce using rule 141 (simple_expression_tail -> empty .)
    OF              reduce using rule 141 (simple_expression_tail -> empty .)
    END             reduce using rule 141 (simple_expression_tail -> empty .)
    READLN          reduce using rule 141 (simple_expression_tail -> empty .)
    WRITE           reduce using rule 141 (simple_expression_tail -> empty .)
    WRITELN         reduce using rule 141 (simple_expression_tail -> empty .)
    USES            reduce using rule 141 (simple_expression_tail -> empty .)
    IF              reduce using rule 141 (simple_expression_tail -> empty .)
    ID              reduce using rule 141 (simple_expression_tail -> empty .)
    WHILE           reduce using rule 141 (simple_expression_tail -> empty .)
    BEGIN           reduce using rule 141 (simple_expression_tail -> empty .)
    FOR             reduce using rule 141 (simple_expression_tail -> empty .)
    CASE            reduce using rule 141 (simple_expression_tail -> empty .)
    WITH            reduce using rule 141 (simple_expression_tail -> empty .)
    REPEAT          reduce using rule 141 (simple_expression_tail -> empty .)
    SEMICOLON       reduce using rule 141 (simple_expression_tail -> empty .)
    UNTIL           reduce using rule 141 (simple_expression_tail -> empty .)
    RPAREN          reduce using rule 141 (simple_expression_tail -> empty .)
    VAR             reduce using rule 141 (simple_expression_tail -> empty .)
    CONSTRUCTOR     reduce using rule 141 (simple_expression_tail -> empty .)
    PROCEDURE       reduce using rule 141 (simple_expression_tail -> empty .)
    FUNCTION        reduce using rule 141 (simple_expression_tail -> empty .)
    DESTRUCTOR      reduce using rule 141 (simple_expression_tail -> empty .)
    ELSE            reduce using rule 141 (simple_expression_tail -> empty .)
    RBRACKET        reduce using rule 141 (simple_expression_tail -> empty .)
    COMMA           reduce using rule 141 (simple_expression_tail -> empty .)
    COLON           reduce using rule 141 (simple_expression_tail -> empty .)
    TO              reduce using rule 141 (simple_expression_tail -> empty .)
    DOWNTO          reduce using rule 141 (simple_expression_tail -> empty .)


state 213

    (142) addop -> PLUS .

    LPAREN          reduce using rule 142 (addop -> PLUS .)
    NUMBER          reduce using rule 142 (addop -> PLUS .)
    STRING_LITERAL  reduce using rule 142 (addop -> PLUS .)
    ID              reduce using rule 142 (addop -> PLUS .)


state 214

    (143) addop -> MINUS .

    LPAREN          reduce using rule 143 (addop -> MINUS .)
    NUMBER          reduce using rule 143 (addop -> MINUS .)
    STRING_LITERAL  reduce using rule 143 (addop -> MINUS .)
    ID              reduce using rule 143 (addop -> MINUS .)


state 215

    (144) term -> factor term_tail .

    PLUS            reduce using rule 144 (term -> factor term_tail .)
    MINUS           reduce using rule 144 (term -> factor term_tail .)
    LESS            reduce using rule 144 (term -> factor term_tail .)
    LESS_EQUAL      reduce using rule 144 (term -> factor term_tail .)
    GREAT           reduce using rule 144 (term -> factor term_tail .)
    GREAT_EQUAL     reduce using rule 144 (term -> factor term_tail .)
    EQUAL           reduce using rule 144 (term -> factor term_tail .)
    DIFFERENT       reduce using rule 144 (term -> factor term_tail .)
    THEN            reduce using rule 144 (term -> factor term_tail .)
    IN              reduce using rule 144 (term -> factor term_tail .)
    TIMES           reduce using rule 144 (term -> factor term_tail .)
    DIVIDE          reduce using rule 144 (term -> factor term_tail .)
    MOD             reduce using rule 144 (term -> factor term_tail .)
    AND             reduce using rule 144 (term -> factor term_tail .)
    OR              reduce using rule 144 (term -> factor term_tail .)
    DO              reduce using rule 144 (term -> factor term_tail .)
    OF              reduce using rule 144 (term -> factor term_tail .)
    END             reduce using rule 144 (term -> factor term_tail .)
    READLN          reduce using rule 144 (term -> factor term_tail .)
    WRITE           reduce using rule 144 (term -> factor term_tail .)
    WRITELN         reduce using rule 144 (term -> factor term_tail .)
    USES            reduce using rule 144 (term -> factor term_tail .)
    IF              reduce using rule 144 (term -> factor term_tail .)
    ID              reduce using rule 144 (term -> factor term_tail .)
    WHILE           reduce using rule 144 (term -> factor term_tail .)
    BEGIN           reduce using rule 144 (term -> factor term_tail .)
    FOR             reduce using rule 144 (term -> factor term_tail .)
    CASE            reduce using rule 144 (term -> factor term_tail .)
    WITH            reduce using rule 144 (term -> factor term_tail .)
    REPEAT          reduce using rule 144 (term -> factor term_tail .)
    SEMICOLON       reduce using rule 144 (term -> factor term_tail .)
    UNTIL           reduce using rule 144 (term -> factor term_tail .)
    RPAREN          reduce using rule 144 (term -> factor term_tail .)
    VAR             reduce using rule 144 (term -> factor term_tail .)
    CONSTRUCTOR     reduce using rule 144 (term -> factor term_tail .)
    PROCEDURE       reduce using rule 144 (term -> factor term_tail .)
    FUNCTION        reduce using rule 144 (term -> factor term_tail .)
    DESTRUCTOR      reduce using rule 144 (term -> factor term_tail .)
    ELSE            reduce using rule 144 (term -> factor term_tail .)
    RBRACKET        reduce using rule 144 (term -> factor term_tail .)
    COMMA           reduce using rule 144 (term -> factor term_tail .)
    COLON           reduce using rule 144 (term -> factor term_tail .)
    TO              reduce using rule 144 (term -> factor term_tail .)
    DOWNTO          reduce using rule 144 (term -> factor term_tail .)


state 216

    (145) term_tail -> mulop . factor
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    factor                         shift and go to state 290
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 217

    (146) term_tail -> empty .

    PLUS            reduce using rule 146 (term_tail -> empty .)
    MINUS           reduce using rule 146 (term_tail -> empty .)
    LESS            reduce using rule 146 (term_tail -> empty .)
    LESS_EQUAL      reduce using rule 146 (term_tail -> empty .)
    GREAT           reduce using rule 146 (term_tail -> empty .)
    GREAT_EQUAL     reduce using rule 146 (term_tail -> empty .)
    EQUAL           reduce using rule 146 (term_tail -> empty .)
    DIFFERENT       reduce using rule 146 (term_tail -> empty .)
    THEN            reduce using rule 146 (term_tail -> empty .)
    IN              reduce using rule 146 (term_tail -> empty .)
    TIMES           reduce using rule 146 (term_tail -> empty .)
    DIVIDE          reduce using rule 146 (term_tail -> empty .)
    MOD             reduce using rule 146 (term_tail -> empty .)
    AND             reduce using rule 146 (term_tail -> empty .)
    OR              reduce using rule 146 (term_tail -> empty .)
    DO              reduce using rule 146 (term_tail -> empty .)
    OF              reduce using rule 146 (term_tail -> empty .)
    END             reduce using rule 146 (term_tail -> empty .)
    READLN          reduce using rule 146 (term_tail -> empty .)
    WRITE           reduce using rule 146 (term_tail -> empty .)
    WRITELN         reduce using rule 146 (term_tail -> empty .)
    USES            reduce using rule 146 (term_tail -> empty .)
    IF              reduce using rule 146 (term_tail -> empty .)
    ID              reduce using rule 146 (term_tail -> empty .)
    WHILE           reduce using rule 146 (term_tail -> empty .)
    BEGIN           reduce using rule 146 (term_tail -> empty .)
    FOR             reduce using rule 146 (term_tail -> empty .)
    CASE            reduce using rule 146 (term_tail -> empty .)
    WITH            reduce using rule 146 (term_tail -> empty .)
    REPEAT          reduce using rule 146 (term_tail -> empty .)
    SEMICOLON       reduce using rule 146 (term_tail -> empty .)
    UNTIL           reduce using rule 146 (term_tail -> empty .)
    RPAREN          reduce using rule 146 (term_tail -> empty .)
    VAR             reduce using rule 146 (term_tail -> empty .)
    CONSTRUCTOR     reduce using rule 146 (term_tail -> empty .)
    PROCEDURE       reduce using rule 146 (term_tail -> empty .)
    FUNCTION        reduce using rule 146 (term_tail -> empty .)
    DESTRUCTOR      reduce using rule 146 (term_tail -> empty .)
    ELSE            reduce using rule 146 (term_tail -> empty .)
    RBRACKET        reduce using rule 146 (term_tail -> empty .)
    COMMA           reduce using rule 146 (term_tail -> empty .)
    COLON           reduce using rule 146 (term_tail -> empty .)
    TO              reduce using rule 146 (term_tail -> empty .)
    DOWNTO          reduce using rule 146 (term_tail -> empty .)


state 218

    (147) mulop -> TIMES .

    LPAREN          reduce using rule 147 (mulop -> TIMES .)
    NUMBER          reduce using rule 147 (mulop -> TIMES .)
    STRING_LITERAL  reduce using rule 147 (mulop -> TIMES .)
    ID              reduce using rule 147 (mulop -> TIMES .)


state 219

    (148) mulop -> DIVIDE .

    LPAREN          reduce using rule 148 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 148 (mulop -> DIVIDE .)
    STRING_LITERAL  reduce using rule 148 (mulop -> DIVIDE .)
    ID              reduce using rule 148 (mulop -> DIVIDE .)


state 220

    (149) mulop -> DIV .

    LPAREN          reduce using rule 149 (mulop -> DIV .)
    NUMBER          reduce using rule 149 (mulop -> DIV .)
    STRING_LITERAL  reduce using rule 149 (mulop -> DIV .)
    ID              reduce using rule 149 (mulop -> DIV .)


state 221

    (155) factor -> LPAREN expression . RPAREN
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression

    RPAREN          shift and go to state 291
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201


state 222

    (87) function_call -> ID LPAREN . expression_list RPAREN
    (133) expression_list -> . expression expression_list_tail
    (136) expression_list -> . empty
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (165) empty -> .
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    RPAREN          reduce using rule 165 (empty -> .)
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    expression_list                shift and go to state 292
    expression                     shift and go to state 183
    empty                          shift and go to state 184
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 223

    (130) while_statement -> WHILE expression DO . statement
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (165) empty -> .
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for READLN resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    IF              shift and go to state 67
    ID              shift and go to state 66
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    CASE            shift and go to state 70
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72
    ELSE            reduce using rule 165 (empty -> .)
    END             reduce using rule 165 (empty -> .)
    SEMICOLON       reduce using rule 165 (empty -> .)
    UNTIL           reduce using rule 165 (empty -> .)
    RPAREN          reduce using rule 165 (empty -> .)
    VAR             reduce using rule 165 (empty -> .)
    CONSTRUCTOR     reduce using rule 165 (empty -> .)
    PROCEDURE       reduce using rule 165 (empty -> .)
    FUNCTION        reduce using rule 165 (empty -> .)
    DESTRUCTOR      reduce using rule 165 (empty -> .)
    THEN            reduce using rule 165 (empty -> .)

  ! READLN          [ reduce using rule 165 (empty -> .) ]
  ! WRITE           [ reduce using rule 165 (empty -> .) ]
  ! WRITELN         [ reduce using rule 165 (empty -> .) ]
  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! IF              [ reduce using rule 165 (empty -> .) ]
  ! ID              [ reduce using rule 165 (empty -> .) ]
  ! WHILE           [ reduce using rule 165 (empty -> .) ]
  ! BEGIN           [ reduce using rule 165 (empty -> .) ]
  ! FOR             [ reduce using rule 165 (empty -> .) ]
  ! CASE            [ reduce using rule 165 (empty -> .) ]
  ! WITH            [ reduce using rule 165 (empty -> .) ]
  ! REPEAT          [ reduce using rule 165 (empty -> .) ]

    statement                      shift and go to state 293
    if_statement                   shift and go to state 52
    assignment_statement           shift and go to state 53
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    case_statement                 shift and go to state 58
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    empty                          shift and go to state 91
    variable                       shift and go to state 62

state 224

    (115) for_statement -> FOR ID COLON_EQUAL . expression TO expression DO block
    (116) for_statement -> FOR ID COLON_EQUAL . expression DOWNTO expression DO block
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    expression                     shift and go to state 294
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 225

    (75) case_statement -> CASE expression OF . case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> CASE expression OF . case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> CASE expression OF . case_list_opt_semicolon END
    (64) case_list_opt_semicolon -> . case_list
    (65) case_list_opt_semicolon -> . case_list SEMICOLON
    (62) case_list -> . case_list SEMICOLON case_element
    (63) case_list -> . case_element
    (66) case_element -> . NUMBER COLON LPAREN field_list RPAREN
    (67) case_element -> . NUMBER COLON field_list

    NUMBER          shift and go to state 298

    case_list_opt_semicolon        shift and go to state 295
    case_list                      shift and go to state 296
    case_element                   shift and go to state 297

state 226

    (110) with_statement -> WITH variable DO . statement
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (165) empty -> .
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for READLN resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    IF              shift and go to state 67
    ID              shift and go to state 66
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    CASE            shift and go to state 70
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72
    ELSE            reduce using rule 165 (empty -> .)
    END             reduce using rule 165 (empty -> .)
    SEMICOLON       reduce using rule 165 (empty -> .)
    UNTIL           reduce using rule 165 (empty -> .)
    RPAREN          reduce using rule 165 (empty -> .)
    VAR             reduce using rule 165 (empty -> .)
    CONSTRUCTOR     reduce using rule 165 (empty -> .)
    PROCEDURE       reduce using rule 165 (empty -> .)
    FUNCTION        reduce using rule 165 (empty -> .)
    DESTRUCTOR      reduce using rule 165 (empty -> .)
    THEN            reduce using rule 165 (empty -> .)

  ! READLN          [ reduce using rule 165 (empty -> .) ]
  ! WRITE           [ reduce using rule 165 (empty -> .) ]
  ! WRITELN         [ reduce using rule 165 (empty -> .) ]
  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! IF              [ reduce using rule 165 (empty -> .) ]
  ! ID              [ reduce using rule 165 (empty -> .) ]
  ! WHILE           [ reduce using rule 165 (empty -> .) ]
  ! BEGIN           [ reduce using rule 165 (empty -> .) ]
  ! FOR             [ reduce using rule 165 (empty -> .) ]
  ! CASE            [ reduce using rule 165 (empty -> .) ]
  ! WITH            [ reduce using rule 165 (empty -> .) ]
  ! REPEAT          [ reduce using rule 165 (empty -> .) ]

    variable                       shift and go to state 62
    statement                      shift and go to state 299
    if_statement                   shift and go to state 52
    assignment_statement           shift and go to state 53
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    case_statement                 shift and go to state 58
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    empty                          shift and go to state 91

state 227

    (182) repeat_statement -> REPEAT statement_list UNTIL . expression SEMICOLON
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    expression                     shift and go to state 300
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 228

    (185) constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .

    ID              reduce using rule 185 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    USES            reduce using rule 185 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    CONST           reduce using rule 185 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    TYPE            reduce using rule 185 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    VAR             reduce using rule 185 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    FUNCTION        reduce using rule 185 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    CONSTRUCTOR     reduce using rule 185 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    PROCEDURE       reduce using rule 185 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    DESTRUCTOR      reduce using rule 185 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    BEGIN           reduce using rule 185 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)


state 229

    (186) constant -> ID EQUAL NUMBER SEMICOLON .

    ID              reduce using rule 186 (constant -> ID EQUAL NUMBER SEMICOLON .)
    USES            reduce using rule 186 (constant -> ID EQUAL NUMBER SEMICOLON .)
    CONST           reduce using rule 186 (constant -> ID EQUAL NUMBER SEMICOLON .)
    TYPE            reduce using rule 186 (constant -> ID EQUAL NUMBER SEMICOLON .)
    VAR             reduce using rule 186 (constant -> ID EQUAL NUMBER SEMICOLON .)
    FUNCTION        reduce using rule 186 (constant -> ID EQUAL NUMBER SEMICOLON .)
    CONSTRUCTOR     reduce using rule 186 (constant -> ID EQUAL NUMBER SEMICOLON .)
    PROCEDURE       reduce using rule 186 (constant -> ID EQUAL NUMBER SEMICOLON .)
    DESTRUCTOR      reduce using rule 186 (constant -> ID EQUAL NUMBER SEMICOLON .)
    BEGIN           reduce using rule 186 (constant -> ID EQUAL NUMBER SEMICOLON .)


state 230

    (187) constant -> ID EQUAL STRING_LITERAL SEMICOLON .

    ID              reduce using rule 187 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    USES            reduce using rule 187 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    CONST           reduce using rule 187 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    TYPE            reduce using rule 187 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    VAR             reduce using rule 187 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    FUNCTION        reduce using rule 187 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    CONSTRUCTOR     reduce using rule 187 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    PROCEDURE       reduce using rule 187 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    DESTRUCTOR      reduce using rule 187 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    BEGIN           reduce using rule 187 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)


state 231

    (188) constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .

    ID              reduce using rule 188 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    USES            reduce using rule 188 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    CONST           reduce using rule 188 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    TYPE            reduce using rule 188 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    VAR             reduce using rule 188 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    FUNCTION        reduce using rule 188 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    CONSTRUCTOR     reduce using rule 188 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    PROCEDURE       reduce using rule 188 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    DESTRUCTOR      reduce using rule 188 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    BEGIN           reduce using rule 188 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)


state 232

    (29) type_definition -> ID EQUAL type_specifier SEMICOLON .

    ID              reduce using rule 29 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    USES            reduce using rule 29 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    CONST           reduce using rule 29 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    TYPE            reduce using rule 29 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    VAR             reduce using rule 29 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 29 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    CONSTRUCTOR     reduce using rule 29 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 29 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    DESTRUCTOR      reduce using rule 29 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    BEGIN           reduce using rule 29 (type_definition -> ID EQUAL type_specifier SEMICOLON .)


state 233

    (30) type_specifier -> ARRAY LBRACKET . type_expression RBRACKET OF type_specifier
    (44) type_expression -> . type_expression COMMA subrange
    (45) type_expression -> . subrange
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    NUMBER          shift and go to state 144

    type_expression                shift and go to state 301
    subrange                       shift and go to state 302

state 234

    (32) type_specifier -> FILE OF . type_specifier
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (78) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 132
    FILE            shift and go to state 134
    SET             shift and go to state 135
    RECORD          shift and go to state 136
    OBJECT          shift and go to state 137
    LPAREN          shift and go to state 138
    BOOLEAN_LITERAL shift and go to state 139
    INTEGER         shift and go to state 140
    BYTE            shift and go to state 141
    CHAR            shift and go to state 142
    STRING          shift and go to state 143
    ID              shift and go to state 130
    LONGINT         shift and go to state 145
    NUMBER          shift and go to state 144

    type_specifier                 shift and go to state 303
    subrange                       shift and go to state 133

state 235

    (33) type_specifier -> SET OF . type_specifier
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (78) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 132
    FILE            shift and go to state 134
    SET             shift and go to state 135
    RECORD          shift and go to state 136
    OBJECT          shift and go to state 137
    LPAREN          shift and go to state 138
    BOOLEAN_LITERAL shift and go to state 139
    INTEGER         shift and go to state 140
    BYTE            shift and go to state 141
    CHAR            shift and go to state 142
    STRING          shift and go to state 143
    ID              shift and go to state 130
    LONGINT         shift and go to state 145
    NUMBER          shift and go to state 144

    type_specifier                 shift and go to state 304
    subrange                       shift and go to state 133

state 236

    (34) type_specifier -> RECORD field_list . case_part END
    (48) field_list -> field_list . field
    (60) case_part -> . CASE ID COLON type_specifier OF case_list SEMICOLON
    (61) case_part -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . statement
    (57) field -> . if_statement
    (58) field -> . case_statement
    (59) field -> . assignment_statement
    (165) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READLN resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
    CASE            shift and go to state 306
    VAR             shift and go to state 159
    END             reduce using rule 165 (empty -> .)
    ID              shift and go to state 153
    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72

  ! CASE            [ reduce using rule 165 (empty -> .) ]
  ! VAR             [ reduce using rule 165 (empty -> .) ]
  ! ID              [ reduce using rule 165 (empty -> .) ]
  ! READLN          [ reduce using rule 165 (empty -> .) ]
  ! WRITE           [ reduce using rule 165 (empty -> .) ]
  ! WRITELN         [ reduce using rule 165 (empty -> .) ]
  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! IF              [ reduce using rule 165 (empty -> .) ]
  ! WHILE           [ reduce using rule 165 (empty -> .) ]
  ! BEGIN           [ reduce using rule 165 (empty -> .) ]
  ! FOR             [ reduce using rule 165 (empty -> .) ]
  ! WITH            [ reduce using rule 165 (empty -> .) ]
  ! REPEAT          [ reduce using rule 165 (empty -> .) ]

    case_part                      shift and go to state 305
    field                          shift and go to state 248
    empty                          shift and go to state 307
    id_list                        shift and go to state 158
    statement                      shift and go to state 160
    if_statement                   shift and go to state 161
    case_statement                 shift and go to state 162
    assignment_statement           shift and go to state 163
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    variable                       shift and go to state 62

state 237

    (35) type_specifier -> OBJECT field_list . method_list END
    (48) field_list -> field_list . field
    (68) method_list -> . method_list method
    (69) method_list -> . method
    (70) method_list -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . statement
    (57) field -> . if_statement
    (58) field -> . case_statement
    (59) field -> . assignment_statement
    (71) method -> . CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON
    (72) method -> . PROCEDURE ID LPAREN field_list RPAREN SEMICOLON
    (73) method -> . FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON
    (74) method -> . DESTRUCTOR ID SEMICOLON
    (165) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for PROCEDURE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DESTRUCTOR resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READLN resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
    VAR             shift and go to state 159
    CONSTRUCTOR     shift and go to state 311
    PROCEDURE       shift and go to state 312
    FUNCTION        shift and go to state 313
    DESTRUCTOR      shift and go to state 314
    END             reduce using rule 165 (empty -> .)
    ID              shift and go to state 153
    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    IF              shift and go to state 67
    CASE            shift and go to state 70
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72

  ! CONSTRUCTOR     [ reduce using rule 165 (empty -> .) ]
  ! PROCEDURE       [ reduce using rule 165 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 165 (empty -> .) ]
  ! DESTRUCTOR      [ reduce using rule 165 (empty -> .) ]
  ! VAR             [ reduce using rule 165 (empty -> .) ]
  ! ID              [ reduce using rule 165 (empty -> .) ]
  ! READLN          [ reduce using rule 165 (empty -> .) ]
  ! WRITE           [ reduce using rule 165 (empty -> .) ]
  ! WRITELN         [ reduce using rule 165 (empty -> .) ]
  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! IF              [ reduce using rule 165 (empty -> .) ]
  ! CASE            [ reduce using rule 165 (empty -> .) ]
  ! WHILE           [ reduce using rule 165 (empty -> .) ]
  ! BEGIN           [ reduce using rule 165 (empty -> .) ]
  ! FOR             [ reduce using rule 165 (empty -> .) ]
  ! WITH            [ reduce using rule 165 (empty -> .) ]
  ! REPEAT          [ reduce using rule 165 (empty -> .) ]

    method_list                    shift and go to state 308
    field                          shift and go to state 248
    method                         shift and go to state 309
    empty                          shift and go to state 310
    id_list                        shift and go to state 158
    statement                      shift and go to state 160
    if_statement                   shift and go to state 161
    case_statement                 shift and go to state 162
    assignment_statement           shift and go to state 163
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    variable                       shift and go to state 62

state 238

    (36) type_specifier -> LPAREN id_list . RPAREN
    (20) id_list -> id_list . COMMA ID

    RPAREN          shift and go to state 315
    COMMA           shift and go to state 75


state 239

    (42) type_specifier -> STRING LBRACKET . NUMBER RBRACKET

    NUMBER          shift and go to state 316


state 240

    (46) subrange -> NUMBER DOTDOT . NUMBER
    (47) subrange -> NUMBER DOTDOT . ID

    NUMBER          shift and go to state 317
    ID              shift and go to state 318


state 241

    (24) declaration -> id_list COLON type_specifier SEMICOLON .

    ID              reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    USES            reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    CONST           reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    TYPE            reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    VAR             reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    CONSTRUCTOR     reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    DESTRUCTOR      reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    BEGIN           reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    READLN          reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    WRITE           reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    WRITELN         reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    IF              reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    WHILE           reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    FOR             reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    CASE            reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    WITH            reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    REPEAT          reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    END             reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    SEMICOLON       reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)


state 242

    (92) parameter -> ID COLON . type_specifier
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (78) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 132
    FILE            shift and go to state 134
    SET             shift and go to state 135
    RECORD          shift and go to state 136
    OBJECT          shift and go to state 137
    LPAREN          shift and go to state 138
    BOOLEAN_LITERAL shift and go to state 139
    INTEGER         shift and go to state 140
    BYTE            shift and go to state 141
    CHAR            shift and go to state 142
    STRING          shift and go to state 143
    ID              shift and go to state 130
    LONGINT         shift and go to state 145
    NUMBER          shift and go to state 144

    type_specifier                 shift and go to state 319
    subrange                       shift and go to state 133

state 243

    (83) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN . COLON type_specifier SEMICOLON block SEMICOLON
    (84) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN . COLON type_specifier SEMICOLON FORWARD SEMICOLON

    COLON           shift and go to state 320


state 244

    (89) parameter_list -> parameter_list SEMICOLON . parameter
    (92) parameter -> . ID COLON type_specifier

    ID              shift and go to state 147

    parameter                      shift and go to state 321

state 245

    (85) function_declaration -> FUNCTION ID LPAREN RPAREN COLON . type_specifier SEMICOLON block SEMICOLON
    (86) function_declaration -> FUNCTION ID LPAREN RPAREN COLON . type_specifier SEMICOLON FORWARD SEMICOLON
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (78) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 132
    FILE            shift and go to state 134
    SET             shift and go to state 135
    RECORD          shift and go to state 136
    OBJECT          shift and go to state 137
    LPAREN          shift and go to state 138
    BOOLEAN_LITERAL shift and go to state 139
    INTEGER         shift and go to state 140
    BYTE            shift and go to state 141
    CHAR            shift and go to state 142
    STRING          shift and go to state 143
    ID              shift and go to state 130
    LONGINT         shift and go to state 145
    NUMBER          shift and go to state 144

    type_specifier                 shift and go to state 322
    subrange                       shift and go to state 133

state 246

    (14) method_declaration -> FUNCTION ID DOT ID LPAREN . parameter_list RPAREN COLON type_specifier SEMICOLON block
    (89) parameter_list -> . parameter_list SEMICOLON parameter
    (90) parameter_list -> . parameter
    (91) parameter_list -> . empty
    (92) parameter -> . ID COLON type_specifier
    (165) empty -> .

    ID              shift and go to state 147
    RPAREN          reduce using rule 165 (empty -> .)
    SEMICOLON       reduce using rule 165 (empty -> .)

    parameter_list                 shift and go to state 323
    parameter                      shift and go to state 150
    empty                          shift and go to state 151

state 247

    (16) constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN . SEMICOLON block

    SEMICOLON       shift and go to state 324


state 248

    (48) field_list -> field_list field .

    RPAREN          reduce using rule 48 (field_list -> field_list field .)
    VAR             reduce using rule 48 (field_list -> field_list field .)
    ID              reduce using rule 48 (field_list -> field_list field .)
    READLN          reduce using rule 48 (field_list -> field_list field .)
    WRITE           reduce using rule 48 (field_list -> field_list field .)
    WRITELN         reduce using rule 48 (field_list -> field_list field .)
    USES            reduce using rule 48 (field_list -> field_list field .)
    IF              reduce using rule 48 (field_list -> field_list field .)
    CASE            reduce using rule 48 (field_list -> field_list field .)
    WHILE           reduce using rule 48 (field_list -> field_list field .)
    BEGIN           reduce using rule 48 (field_list -> field_list field .)
    FOR             reduce using rule 48 (field_list -> field_list field .)
    WITH            reduce using rule 48 (field_list -> field_list field .)
    REPEAT          reduce using rule 48 (field_list -> field_list field .)
    END             reduce using rule 48 (field_list -> field_list field .)
    CONSTRUCTOR     reduce using rule 48 (field_list -> field_list field .)
    PROCEDURE       reduce using rule 48 (field_list -> field_list field .)
    FUNCTION        reduce using rule 48 (field_list -> field_list field .)
    DESTRUCTOR      reduce using rule 48 (field_list -> field_list field .)
    SEMICOLON       reduce using rule 48 (field_list -> field_list field .)
    ELSE            reduce using rule 48 (field_list -> field_list field .)


state 249

    (17) constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON . block
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (165) empty -> .

    BEGIN           reduce using rule 165 (empty -> .)
    USES            reduce using rule 165 (empty -> .)
    CONST           reduce using rule 165 (empty -> .)
    TYPE            reduce using rule 165 (empty -> .)
    VAR             reduce using rule 165 (empty -> .)
    FUNCTION        reduce using rule 165 (empty -> .)
    CONSTRUCTOR     reduce using rule 165 (empty -> .)
    PROCEDURE       reduce using rule 165 (empty -> .)
    DESTRUCTOR      reduce using rule 165 (empty -> .)

    block                          shift and go to state 325
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 250

    (51) field -> id_list COLON . type_specifier
    (52) field -> id_list COLON . type_specifier SEMICOLON
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (78) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 132
    FILE            shift and go to state 134
    SET             shift and go to state 135
    RECORD          shift and go to state 136
    OBJECT          shift and go to state 137
    LPAREN          shift and go to state 138
    BOOLEAN_LITERAL shift and go to state 139
    INTEGER         shift and go to state 140
    BYTE            shift and go to state 141
    CHAR            shift and go to state 142
    STRING          shift and go to state 143
    ID              shift and go to state 130
    LONGINT         shift and go to state 145
    NUMBER          shift and go to state 144

    type_specifier                 shift and go to state 326
    subrange                       shift and go to state 133

state 251

    (55) field -> id_list LPAREN . STRING_LITERAL RPAREN

    STRING_LITERAL  shift and go to state 327


state 252

    (53) field -> VAR id_list . COLON type_specifier
    (54) field -> VAR id_list . COLON type_specifier SEMICOLON
    (20) id_list -> id_list . COMMA ID

    COLON           shift and go to state 328
    COMMA           shift and go to state 75


state 253

    (12) method_declaration -> CONSTRUCTOR ID DOT ID LPAREN . parameter_list RPAREN SEMICOLON block
    (89) parameter_list -> . parameter_list SEMICOLON parameter
    (90) parameter_list -> . parameter
    (91) parameter_list -> . empty
    (92) parameter -> . ID COLON type_specifier
    (165) empty -> .

    ID              shift and go to state 147
    RPAREN          reduce using rule 165 (empty -> .)
    SEMICOLON       reduce using rule 165 (empty -> .)

    parameter_list                 shift and go to state 329
    parameter                      shift and go to state 150
    empty                          shift and go to state 151

state 254

    (13) method_declaration -> PROCEDURE ID DOT ID LPAREN . parameter_list RPAREN SEMICOLON block
    (89) parameter_list -> . parameter_list SEMICOLON parameter
    (90) parameter_list -> . parameter
    (91) parameter_list -> . empty
    (92) parameter -> . ID COLON type_specifier
    (165) empty -> .

    ID              shift and go to state 147
    RPAREN          reduce using rule 165 (empty -> .)
    SEMICOLON       reduce using rule 165 (empty -> .)

    parameter_list                 shift and go to state 330
    parameter                      shift and go to state 150
    empty                          shift and go to state 151

state 255

    (81) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN . SEMICOLON block SEMICOLON

    SEMICOLON       shift and go to state 331


state 256

    (82) procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON . block SEMICOLON
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (165) empty -> .

    BEGIN           reduce using rule 165 (empty -> .)
    USES            reduce using rule 165 (empty -> .)
    CONST           reduce using rule 165 (empty -> .)
    TYPE            reduce using rule 165 (empty -> .)
    VAR             reduce using rule 165 (empty -> .)
    FUNCTION        reduce using rule 165 (empty -> .)
    CONSTRUCTOR     reduce using rule 165 (empty -> .)
    PROCEDURE       reduce using rule 165 (empty -> .)
    DESTRUCTOR      reduce using rule 165 (empty -> .)

    block                          shift and go to state 332
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 257

    (15) method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON . block
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (165) empty -> .

    BEGIN           reduce using rule 165 (empty -> .)
    USES            reduce using rule 165 (empty -> .)
    CONST           reduce using rule 165 (empty -> .)
    TYPE            reduce using rule 165 (empty -> .)
    VAR             reduce using rule 165 (empty -> .)
    FUNCTION        reduce using rule 165 (empty -> .)
    CONSTRUCTOR     reduce using rule 165 (empty -> .)
    PROCEDURE       reduce using rule 165 (empty -> .)
    DESTRUCTOR      reduce using rule 165 (empty -> .)

    block                          shift and go to state 333
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 258

    (167) statement -> READLN LPAREN variable RPAREN .

    END             reduce using rule 167 (statement -> READLN LPAREN variable RPAREN .)
    READLN          reduce using rule 167 (statement -> READLN LPAREN variable RPAREN .)
    WRITE           reduce using rule 167 (statement -> READLN LPAREN variable RPAREN .)
    WRITELN         reduce using rule 167 (statement -> READLN LPAREN variable RPAREN .)
    USES            reduce using rule 167 (statement -> READLN LPAREN variable RPAREN .)
    IF              reduce using rule 167 (statement -> READLN LPAREN variable RPAREN .)
    ID              reduce using rule 167 (statement -> READLN LPAREN variable RPAREN .)
    WHILE           reduce using rule 167 (statement -> READLN LPAREN variable RPAREN .)
    BEGIN           reduce using rule 167 (statement -> READLN LPAREN variable RPAREN .)
    FOR             reduce using rule 167 (statement -> READLN LPAREN variable RPAREN .)
    CASE            reduce using rule 167 (statement -> READLN LPAREN variable RPAREN .)
    WITH            reduce using rule 167 (statement -> READLN LPAREN variable RPAREN .)
    REPEAT          reduce using rule 167 (statement -> READLN LPAREN variable RPAREN .)
    SEMICOLON       reduce using rule 167 (statement -> READLN LPAREN variable RPAREN .)
    UNTIL           reduce using rule 167 (statement -> READLN LPAREN variable RPAREN .)
    RPAREN          reduce using rule 167 (statement -> READLN LPAREN variable RPAREN .)
    VAR             reduce using rule 167 (statement -> READLN LPAREN variable RPAREN .)
    CONSTRUCTOR     reduce using rule 167 (statement -> READLN LPAREN variable RPAREN .)
    PROCEDURE       reduce using rule 167 (statement -> READLN LPAREN variable RPAREN .)
    FUNCTION        reduce using rule 167 (statement -> READLN LPAREN variable RPAREN .)
    DESTRUCTOR      reduce using rule 167 (statement -> READLN LPAREN variable RPAREN .)
    ELSE            reduce using rule 167 (statement -> READLN LPAREN variable RPAREN .)
    THEN            reduce using rule 167 (statement -> READLN LPAREN variable RPAREN .)


state 259

    (169) statement -> READLN LPAREN variable_list RPAREN .

    END             reduce using rule 169 (statement -> READLN LPAREN variable_list RPAREN .)
    READLN          reduce using rule 169 (statement -> READLN LPAREN variable_list RPAREN .)
    WRITE           reduce using rule 169 (statement -> READLN LPAREN variable_list RPAREN .)
    WRITELN         reduce using rule 169 (statement -> READLN LPAREN variable_list RPAREN .)
    USES            reduce using rule 169 (statement -> READLN LPAREN variable_list RPAREN .)
    IF              reduce using rule 169 (statement -> READLN LPAREN variable_list RPAREN .)
    ID              reduce using rule 169 (statement -> READLN LPAREN variable_list RPAREN .)
    WHILE           reduce using rule 169 (statement -> READLN LPAREN variable_list RPAREN .)
    BEGIN           reduce using rule 169 (statement -> READLN LPAREN variable_list RPAREN .)
    FOR             reduce using rule 169 (statement -> READLN LPAREN variable_list RPAREN .)
    CASE            reduce using rule 169 (statement -> READLN LPAREN variable_list RPAREN .)
    WITH            reduce using rule 169 (statement -> READLN LPAREN variable_list RPAREN .)
    REPEAT          reduce using rule 169 (statement -> READLN LPAREN variable_list RPAREN .)
    SEMICOLON       reduce using rule 169 (statement -> READLN LPAREN variable_list RPAREN .)
    UNTIL           reduce using rule 169 (statement -> READLN LPAREN variable_list RPAREN .)
    RPAREN          reduce using rule 169 (statement -> READLN LPAREN variable_list RPAREN .)
    VAR             reduce using rule 169 (statement -> READLN LPAREN variable_list RPAREN .)
    CONSTRUCTOR     reduce using rule 169 (statement -> READLN LPAREN variable_list RPAREN .)
    PROCEDURE       reduce using rule 169 (statement -> READLN LPAREN variable_list RPAREN .)
    FUNCTION        reduce using rule 169 (statement -> READLN LPAREN variable_list RPAREN .)
    DESTRUCTOR      reduce using rule 169 (statement -> READLN LPAREN variable_list RPAREN .)
    ELSE            reduce using rule 169 (statement -> READLN LPAREN variable_list RPAREN .)
    THEN            reduce using rule 169 (statement -> READLN LPAREN variable_list RPAREN .)


state 260

    (171) variable_list -> variable_list COMMA . variable
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    ID              shift and go to state 123

    variable                       shift and go to state 334

state 261

    (168) statement -> READLN LBRACKET variable RBRACKET .

    END             reduce using rule 168 (statement -> READLN LBRACKET variable RBRACKET .)
    READLN          reduce using rule 168 (statement -> READLN LBRACKET variable RBRACKET .)
    WRITE           reduce using rule 168 (statement -> READLN LBRACKET variable RBRACKET .)
    WRITELN         reduce using rule 168 (statement -> READLN LBRACKET variable RBRACKET .)
    USES            reduce using rule 168 (statement -> READLN LBRACKET variable RBRACKET .)
    IF              reduce using rule 168 (statement -> READLN LBRACKET variable RBRACKET .)
    ID              reduce using rule 168 (statement -> READLN LBRACKET variable RBRACKET .)
    WHILE           reduce using rule 168 (statement -> READLN LBRACKET variable RBRACKET .)
    BEGIN           reduce using rule 168 (statement -> READLN LBRACKET variable RBRACKET .)
    FOR             reduce using rule 168 (statement -> READLN LBRACKET variable RBRACKET .)
    CASE            reduce using rule 168 (statement -> READLN LBRACKET variable RBRACKET .)
    WITH            reduce using rule 168 (statement -> READLN LBRACKET variable RBRACKET .)
    REPEAT          reduce using rule 168 (statement -> READLN LBRACKET variable RBRACKET .)
    SEMICOLON       reduce using rule 168 (statement -> READLN LBRACKET variable RBRACKET .)
    UNTIL           reduce using rule 168 (statement -> READLN LBRACKET variable RBRACKET .)
    RPAREN          reduce using rule 168 (statement -> READLN LBRACKET variable RBRACKET .)
    VAR             reduce using rule 168 (statement -> READLN LBRACKET variable RBRACKET .)
    CONSTRUCTOR     reduce using rule 168 (statement -> READLN LBRACKET variable RBRACKET .)
    PROCEDURE       reduce using rule 168 (statement -> READLN LBRACKET variable RBRACKET .)
    FUNCTION        reduce using rule 168 (statement -> READLN LBRACKET variable RBRACKET .)
    DESTRUCTOR      reduce using rule 168 (statement -> READLN LBRACKET variable RBRACKET .)
    ELSE            reduce using rule 168 (statement -> READLN LBRACKET variable RBRACKET .)
    THEN            reduce using rule 168 (statement -> READLN LBRACKET variable RBRACKET .)


state 262

    (118) assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .

    END             reduce using rule 118 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    READLN          reduce using rule 118 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    WRITE           reduce using rule 118 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    WRITELN         reduce using rule 118 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    USES            reduce using rule 118 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    IF              reduce using rule 118 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    ID              reduce using rule 118 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    WHILE           reduce using rule 118 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    BEGIN           reduce using rule 118 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    FOR             reduce using rule 118 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    CASE            reduce using rule 118 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    WITH            reduce using rule 118 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    REPEAT          reduce using rule 118 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    SEMICOLON       reduce using rule 118 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    UNTIL           reduce using rule 118 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    RPAREN          reduce using rule 118 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    VAR             reduce using rule 118 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    CONSTRUCTOR     reduce using rule 118 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    PROCEDURE       reduce using rule 118 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    FUNCTION        reduce using rule 118 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    DESTRUCTOR      reduce using rule 118 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    ELSE            reduce using rule 118 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    THEN            reduce using rule 118 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)


state 263

    (119) assignment_statement -> variable PLUS COLON_EQUAL expression .
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression

    END             reduce using rule 119 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    READLN          reduce using rule 119 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    WRITE           reduce using rule 119 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    WRITELN         reduce using rule 119 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    USES            reduce using rule 119 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    IF              reduce using rule 119 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    ID              reduce using rule 119 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    WHILE           reduce using rule 119 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    BEGIN           reduce using rule 119 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    FOR             reduce using rule 119 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    CASE            reduce using rule 119 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    WITH            reduce using rule 119 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    REPEAT          reduce using rule 119 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    SEMICOLON       reduce using rule 119 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    UNTIL           reduce using rule 119 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    RPAREN          reduce using rule 119 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    VAR             reduce using rule 119 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    CONSTRUCTOR     reduce using rule 119 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    PROCEDURE       reduce using rule 119 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    FUNCTION        reduce using rule 119 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    DESTRUCTOR      reduce using rule 119 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    ELSE            reduce using rule 119 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    THEN            reduce using rule 119 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201


state 264

    (120) assignment_statement -> variable MINUS COLON_EQUAL expression .
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression

    END             reduce using rule 120 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    READLN          reduce using rule 120 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    WRITE           reduce using rule 120 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    WRITELN         reduce using rule 120 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    USES            reduce using rule 120 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    IF              reduce using rule 120 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    ID              reduce using rule 120 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    WHILE           reduce using rule 120 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    BEGIN           reduce using rule 120 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    FOR             reduce using rule 120 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    CASE            reduce using rule 120 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    WITH            reduce using rule 120 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    REPEAT          reduce using rule 120 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    SEMICOLON       reduce using rule 120 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    UNTIL           reduce using rule 120 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    RPAREN          reduce using rule 120 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    VAR             reduce using rule 120 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    CONSTRUCTOR     reduce using rule 120 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    PROCEDURE       reduce using rule 120 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    FUNCTION        reduce using rule 120 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    DESTRUCTOR      reduce using rule 120 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    ELSE            reduce using rule 120 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    THEN            reduce using rule 120 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201


state 265

    (121) assignment_statement -> variable TIMES COLON_EQUAL expression .
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression

    END             reduce using rule 121 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    READLN          reduce using rule 121 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    WRITE           reduce using rule 121 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    WRITELN         reduce using rule 121 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    USES            reduce using rule 121 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    IF              reduce using rule 121 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    ID              reduce using rule 121 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    WHILE           reduce using rule 121 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    BEGIN           reduce using rule 121 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    FOR             reduce using rule 121 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    CASE            reduce using rule 121 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    WITH            reduce using rule 121 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    REPEAT          reduce using rule 121 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    SEMICOLON       reduce using rule 121 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    UNTIL           reduce using rule 121 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    RPAREN          reduce using rule 121 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    VAR             reduce using rule 121 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    CONSTRUCTOR     reduce using rule 121 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    PROCEDURE       reduce using rule 121 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    FUNCTION        reduce using rule 121 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    DESTRUCTOR      reduce using rule 121 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    ELSE            reduce using rule 121 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    THEN            reduce using rule 121 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201


state 266

    (122) assignment_statement -> variable DIVIDE COLON_EQUAL expression .
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression

    END             reduce using rule 122 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    READLN          reduce using rule 122 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    WRITE           reduce using rule 122 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    WRITELN         reduce using rule 122 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    USES            reduce using rule 122 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    IF              reduce using rule 122 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    ID              reduce using rule 122 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    WHILE           reduce using rule 122 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    BEGIN           reduce using rule 122 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    FOR             reduce using rule 122 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    CASE            reduce using rule 122 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    WITH            reduce using rule 122 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    REPEAT          reduce using rule 122 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    SEMICOLON       reduce using rule 122 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    UNTIL           reduce using rule 122 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    RPAREN          reduce using rule 122 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    VAR             reduce using rule 122 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    CONSTRUCTOR     reduce using rule 122 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    PROCEDURE       reduce using rule 122 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    FUNCTION        reduce using rule 122 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    DESTRUCTOR      reduce using rule 122 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    ELSE            reduce using rule 122 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    THEN            reduce using rule 122 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201


state 267

    (125) variable -> variable LBRACKET expression RBRACKET .

    COLON_EQUAL     reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    DOT             reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    DIV             reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    LESS            reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    LESS_EQUAL      reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    GREAT           reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    GREAT_EQUAL     reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    DIFFERENT       reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    THEN            reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    IN              reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    MOD             reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    AND             reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    OR              reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    DO              reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    OF              reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    END             reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    READLN          reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    WRITE           reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    WRITELN         reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    USES            reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    IF              reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    ID              reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    BEGIN           reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    FOR             reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    CASE            reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    WITH            reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    REPEAT          reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    UNTIL           reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    VAR             reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    CONSTRUCTOR     reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    PROCEDURE       reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    FUNCTION        reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    DESTRUCTOR      reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    COLON           reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    TO              reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)
    DOWNTO          reduce using rule 125 (variable -> variable LBRACKET expression RBRACKET .)


state 268

    (172) statement -> WRITE LPAREN expression_list RPAREN .

    END             reduce using rule 172 (statement -> WRITE LPAREN expression_list RPAREN .)
    READLN          reduce using rule 172 (statement -> WRITE LPAREN expression_list RPAREN .)
    WRITE           reduce using rule 172 (statement -> WRITE LPAREN expression_list RPAREN .)
    WRITELN         reduce using rule 172 (statement -> WRITE LPAREN expression_list RPAREN .)
    USES            reduce using rule 172 (statement -> WRITE LPAREN expression_list RPAREN .)
    IF              reduce using rule 172 (statement -> WRITE LPAREN expression_list RPAREN .)
    ID              reduce using rule 172 (statement -> WRITE LPAREN expression_list RPAREN .)
    WHILE           reduce using rule 172 (statement -> WRITE LPAREN expression_list RPAREN .)
    BEGIN           reduce using rule 172 (statement -> WRITE LPAREN expression_list RPAREN .)
    FOR             reduce using rule 172 (statement -> WRITE LPAREN expression_list RPAREN .)
    CASE            reduce using rule 172 (statement -> WRITE LPAREN expression_list RPAREN .)
    WITH            reduce using rule 172 (statement -> WRITE LPAREN expression_list RPAREN .)
    REPEAT          reduce using rule 172 (statement -> WRITE LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 172 (statement -> WRITE LPAREN expression_list RPAREN .)
    UNTIL           reduce using rule 172 (statement -> WRITE LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 172 (statement -> WRITE LPAREN expression_list RPAREN .)
    VAR             reduce using rule 172 (statement -> WRITE LPAREN expression_list RPAREN .)
    CONSTRUCTOR     reduce using rule 172 (statement -> WRITE LPAREN expression_list RPAREN .)
    PROCEDURE       reduce using rule 172 (statement -> WRITE LPAREN expression_list RPAREN .)
    FUNCTION        reduce using rule 172 (statement -> WRITE LPAREN expression_list RPAREN .)
    DESTRUCTOR      reduce using rule 172 (statement -> WRITE LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 172 (statement -> WRITE LPAREN expression_list RPAREN .)
    THEN            reduce using rule 172 (statement -> WRITE LPAREN expression_list RPAREN .)


state 269

    (133) expression_list -> expression expression_list_tail .

    RPAREN          reduce using rule 133 (expression_list -> expression expression_list_tail .)


state 270

    (134) expression_list_tail -> COMMA . expression expression_list_tail
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    expression                     shift and go to state 335
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 271

    (135) expression_list_tail -> empty .

    RPAREN          reduce using rule 135 (expression_list_tail -> empty .)


state 272

    (173) statement -> WRITELN LPAREN write_arguments RPAREN .

    END             reduce using rule 173 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    READLN          reduce using rule 173 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    WRITE           reduce using rule 173 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    WRITELN         reduce using rule 173 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    USES            reduce using rule 173 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    IF              reduce using rule 173 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    ID              reduce using rule 173 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    WHILE           reduce using rule 173 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    BEGIN           reduce using rule 173 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    FOR             reduce using rule 173 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    CASE            reduce using rule 173 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    WITH            reduce using rule 173 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    REPEAT          reduce using rule 173 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    SEMICOLON       reduce using rule 173 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    UNTIL           reduce using rule 173 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    RPAREN          reduce using rule 173 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    VAR             reduce using rule 173 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    CONSTRUCTOR     reduce using rule 173 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    PROCEDURE       reduce using rule 173 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    FUNCTION        reduce using rule 173 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    DESTRUCTOR      reduce using rule 173 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    ELSE            reduce using rule 173 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    THEN            reduce using rule 173 (statement -> WRITELN LPAREN write_arguments RPAREN .)


state 273

    (176) write_arguments -> write_arguments COMMA . write_argument
    (177) write_argument -> . expression
    (178) write_argument -> . expression COLON expression
    (179) write_argument -> . expression COLON expression COLON expression
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    write_argument                 shift and go to state 336
    expression                     shift and go to state 337
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 274

    (174) statement -> WRITELN LPAREN expression RPAREN .

    END             reduce using rule 174 (statement -> WRITELN LPAREN expression RPAREN .)
    READLN          reduce using rule 174 (statement -> WRITELN LPAREN expression RPAREN .)
    WRITE           reduce using rule 174 (statement -> WRITELN LPAREN expression RPAREN .)
    WRITELN         reduce using rule 174 (statement -> WRITELN LPAREN expression RPAREN .)
    USES            reduce using rule 174 (statement -> WRITELN LPAREN expression RPAREN .)
    IF              reduce using rule 174 (statement -> WRITELN LPAREN expression RPAREN .)
    ID              reduce using rule 174 (statement -> WRITELN LPAREN expression RPAREN .)
    WHILE           reduce using rule 174 (statement -> WRITELN LPAREN expression RPAREN .)
    BEGIN           reduce using rule 174 (statement -> WRITELN LPAREN expression RPAREN .)
    FOR             reduce using rule 174 (statement -> WRITELN LPAREN expression RPAREN .)
    CASE            reduce using rule 174 (statement -> WRITELN LPAREN expression RPAREN .)
    WITH            reduce using rule 174 (statement -> WRITELN LPAREN expression RPAREN .)
    REPEAT          reduce using rule 174 (statement -> WRITELN LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 174 (statement -> WRITELN LPAREN expression RPAREN .)
    UNTIL           reduce using rule 174 (statement -> WRITELN LPAREN expression RPAREN .)
    RPAREN          reduce using rule 174 (statement -> WRITELN LPAREN expression RPAREN .)
    VAR             reduce using rule 174 (statement -> WRITELN LPAREN expression RPAREN .)
    CONSTRUCTOR     reduce using rule 174 (statement -> WRITELN LPAREN expression RPAREN .)
    PROCEDURE       reduce using rule 174 (statement -> WRITELN LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 174 (statement -> WRITELN LPAREN expression RPAREN .)
    DESTRUCTOR      reduce using rule 174 (statement -> WRITELN LPAREN expression RPAREN .)
    ELSE            reduce using rule 174 (statement -> WRITELN LPAREN expression RPAREN .)
    THEN            reduce using rule 174 (statement -> WRITELN LPAREN expression RPAREN .)


state 275

    (178) write_argument -> expression COLON . expression
    (179) write_argument -> expression COLON . expression COLON expression
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    expression                     shift and go to state 338
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 276

    (131) procedure_call -> ID LPAREN expression_list RPAREN .

    END             reduce using rule 131 (procedure_call -> ID LPAREN expression_list RPAREN .)
    READLN          reduce using rule 131 (procedure_call -> ID LPAREN expression_list RPAREN .)
    WRITE           reduce using rule 131 (procedure_call -> ID LPAREN expression_list RPAREN .)
    WRITELN         reduce using rule 131 (procedure_call -> ID LPAREN expression_list RPAREN .)
    USES            reduce using rule 131 (procedure_call -> ID LPAREN expression_list RPAREN .)
    IF              reduce using rule 131 (procedure_call -> ID LPAREN expression_list RPAREN .)
    ID              reduce using rule 131 (procedure_call -> ID LPAREN expression_list RPAREN .)
    WHILE           reduce using rule 131 (procedure_call -> ID LPAREN expression_list RPAREN .)
    BEGIN           reduce using rule 131 (procedure_call -> ID LPAREN expression_list RPAREN .)
    FOR             reduce using rule 131 (procedure_call -> ID LPAREN expression_list RPAREN .)
    CASE            reduce using rule 131 (procedure_call -> ID LPAREN expression_list RPAREN .)
    WITH            reduce using rule 131 (procedure_call -> ID LPAREN expression_list RPAREN .)
    REPEAT          reduce using rule 131 (procedure_call -> ID LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 131 (procedure_call -> ID LPAREN expression_list RPAREN .)
    UNTIL           reduce using rule 131 (procedure_call -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 131 (procedure_call -> ID LPAREN expression_list RPAREN .)
    VAR             reduce using rule 131 (procedure_call -> ID LPAREN expression_list RPAREN .)
    CONSTRUCTOR     reduce using rule 131 (procedure_call -> ID LPAREN expression_list RPAREN .)
    PROCEDURE       reduce using rule 131 (procedure_call -> ID LPAREN expression_list RPAREN .)
    FUNCTION        reduce using rule 131 (procedure_call -> ID LPAREN expression_list RPAREN .)
    DESTRUCTOR      reduce using rule 131 (procedure_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 131 (procedure_call -> ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 131 (procedure_call -> ID LPAREN expression_list RPAREN .)


state 277

    (127) variable -> ID LBRACKET index_list RBRACKET .

    COLON_EQUAL     reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    PLUS            reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    MINUS           reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    TIMES           reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    DIVIDE          reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    LBRACKET        reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    DOT             reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    DIV             reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    LESS            reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    LESS_EQUAL      reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    GREAT           reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    GREAT_EQUAL     reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    EQUAL           reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    DIFFERENT       reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    THEN            reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    IN              reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    MOD             reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    AND             reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    OR              reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    DO              reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    OF              reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    RPAREN          reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    COMMA           reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    RBRACKET        reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    END             reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    READLN          reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    WRITE           reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    WRITELN         reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    USES            reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    IF              reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    ID              reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    WHILE           reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    BEGIN           reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    FOR             reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    CASE            reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    WITH            reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    REPEAT          reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    SEMICOLON       reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    UNTIL           reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    VAR             reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    CONSTRUCTOR     reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    PROCEDURE       reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    FUNCTION        reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    DESTRUCTOR      reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    ELSE            reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    COLON           reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    TO              reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)
    DOWNTO          reduce using rule 127 (variable -> ID LBRACKET index_list RBRACKET .)


state 278

    (129) index_list -> index_list COMMA . expression
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    expression                     shift and go to state 339
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 279

    (111) if_statement -> IF expression THEN statement . ELSE statement
    (112) if_statement -> IF expression THEN statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 340
    END             reduce using rule 112 (if_statement -> IF expression THEN statement .)
    READLN          reduce using rule 112 (if_statement -> IF expression THEN statement .)
    WRITE           reduce using rule 112 (if_statement -> IF expression THEN statement .)
    WRITELN         reduce using rule 112 (if_statement -> IF expression THEN statement .)
    USES            reduce using rule 112 (if_statement -> IF expression THEN statement .)
    IF              reduce using rule 112 (if_statement -> IF expression THEN statement .)
    ID              reduce using rule 112 (if_statement -> IF expression THEN statement .)
    WHILE           reduce using rule 112 (if_statement -> IF expression THEN statement .)
    BEGIN           reduce using rule 112 (if_statement -> IF expression THEN statement .)
    FOR             reduce using rule 112 (if_statement -> IF expression THEN statement .)
    CASE            reduce using rule 112 (if_statement -> IF expression THEN statement .)
    WITH            reduce using rule 112 (if_statement -> IF expression THEN statement .)
    REPEAT          reduce using rule 112 (if_statement -> IF expression THEN statement .)
    SEMICOLON       reduce using rule 112 (if_statement -> IF expression THEN statement .)
    UNTIL           reduce using rule 112 (if_statement -> IF expression THEN statement .)
    RPAREN          reduce using rule 112 (if_statement -> IF expression THEN statement .)
    VAR             reduce using rule 112 (if_statement -> IF expression THEN statement .)
    CONSTRUCTOR     reduce using rule 112 (if_statement -> IF expression THEN statement .)
    PROCEDURE       reduce using rule 112 (if_statement -> IF expression THEN statement .)
    FUNCTION        reduce using rule 112 (if_statement -> IF expression THEN statement .)
    DESTRUCTOR      reduce using rule 112 (if_statement -> IF expression THEN statement .)
    THEN            reduce using rule 112 (if_statement -> IF expression THEN statement .)

  ! ELSE            [ reduce using rule 112 (if_statement -> IF expression THEN statement .) ]


state 280

    (113) if_statement -> IF expression IN statement . THEN statement ELSE statement
    (114) if_statement -> IF expression IN statement . THEN statement

    THEN            shift and go to state 341


state 281

    (150) expression -> expression PLUS expression .
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 150 (expression -> expression PLUS expression .)
    IN              reduce using rule 150 (expression -> expression PLUS expression .)
    DO              reduce using rule 150 (expression -> expression PLUS expression .)
    OF              reduce using rule 150 (expression -> expression PLUS expression .)
    END             reduce using rule 150 (expression -> expression PLUS expression .)
    READLN          reduce using rule 150 (expression -> expression PLUS expression .)
    WRITE           reduce using rule 150 (expression -> expression PLUS expression .)
    WRITELN         reduce using rule 150 (expression -> expression PLUS expression .)
    USES            reduce using rule 150 (expression -> expression PLUS expression .)
    IF              reduce using rule 150 (expression -> expression PLUS expression .)
    ID              reduce using rule 150 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 150 (expression -> expression PLUS expression .)
    BEGIN           reduce using rule 150 (expression -> expression PLUS expression .)
    FOR             reduce using rule 150 (expression -> expression PLUS expression .)
    CASE            reduce using rule 150 (expression -> expression PLUS expression .)
    WITH            reduce using rule 150 (expression -> expression PLUS expression .)
    REPEAT          reduce using rule 150 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 150 (expression -> expression PLUS expression .)
    UNTIL           reduce using rule 150 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 150 (expression -> expression PLUS expression .)
    VAR             reduce using rule 150 (expression -> expression PLUS expression .)
    CONSTRUCTOR     reduce using rule 150 (expression -> expression PLUS expression .)
    PROCEDURE       reduce using rule 150 (expression -> expression PLUS expression .)
    FUNCTION        reduce using rule 150 (expression -> expression PLUS expression .)
    DESTRUCTOR      reduce using rule 150 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 150 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 150 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 150 (expression -> expression PLUS expression .)
    COLON           reduce using rule 150 (expression -> expression PLUS expression .)
    TO              reduce using rule 150 (expression -> expression PLUS expression .)
    DOWNTO          reduce using rule 150 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201

  ! PLUS            [ reduce using rule 150 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 150 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 150 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 150 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 150 (expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 150 (expression -> expression PLUS expression .) ]
  ! OR              [ reduce using rule 150 (expression -> expression PLUS expression .) ]


state 282

    (151) expression -> expression MINUS expression .
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 151 (expression -> expression MINUS expression .)
    IN              reduce using rule 151 (expression -> expression MINUS expression .)
    DO              reduce using rule 151 (expression -> expression MINUS expression .)
    OF              reduce using rule 151 (expression -> expression MINUS expression .)
    END             reduce using rule 151 (expression -> expression MINUS expression .)
    READLN          reduce using rule 151 (expression -> expression MINUS expression .)
    WRITE           reduce using rule 151 (expression -> expression MINUS expression .)
    WRITELN         reduce using rule 151 (expression -> expression MINUS expression .)
    USES            reduce using rule 151 (expression -> expression MINUS expression .)
    IF              reduce using rule 151 (expression -> expression MINUS expression .)
    ID              reduce using rule 151 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 151 (expression -> expression MINUS expression .)
    BEGIN           reduce using rule 151 (expression -> expression MINUS expression .)
    FOR             reduce using rule 151 (expression -> expression MINUS expression .)
    CASE            reduce using rule 151 (expression -> expression MINUS expression .)
    WITH            reduce using rule 151 (expression -> expression MINUS expression .)
    REPEAT          reduce using rule 151 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 151 (expression -> expression MINUS expression .)
    UNTIL           reduce using rule 151 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 151 (expression -> expression MINUS expression .)
    VAR             reduce using rule 151 (expression -> expression MINUS expression .)
    CONSTRUCTOR     reduce using rule 151 (expression -> expression MINUS expression .)
    PROCEDURE       reduce using rule 151 (expression -> expression MINUS expression .)
    FUNCTION        reduce using rule 151 (expression -> expression MINUS expression .)
    DESTRUCTOR      reduce using rule 151 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 151 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 151 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 151 (expression -> expression MINUS expression .)
    COLON           reduce using rule 151 (expression -> expression MINUS expression .)
    TO              reduce using rule 151 (expression -> expression MINUS expression .)
    DOWNTO          reduce using rule 151 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201

  ! PLUS            [ reduce using rule 151 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 151 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 151 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 151 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 151 (expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 151 (expression -> expression MINUS expression .) ]
  ! OR              [ reduce using rule 151 (expression -> expression MINUS expression .) ]


state 283

    (152) expression -> expression TIMES expression .
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 152 (expression -> expression TIMES expression .)
    IN              reduce using rule 152 (expression -> expression TIMES expression .)
    DO              reduce using rule 152 (expression -> expression TIMES expression .)
    OF              reduce using rule 152 (expression -> expression TIMES expression .)
    END             reduce using rule 152 (expression -> expression TIMES expression .)
    READLN          reduce using rule 152 (expression -> expression TIMES expression .)
    WRITE           reduce using rule 152 (expression -> expression TIMES expression .)
    WRITELN         reduce using rule 152 (expression -> expression TIMES expression .)
    USES            reduce using rule 152 (expression -> expression TIMES expression .)
    IF              reduce using rule 152 (expression -> expression TIMES expression .)
    ID              reduce using rule 152 (expression -> expression TIMES expression .)
    WHILE           reduce using rule 152 (expression -> expression TIMES expression .)
    BEGIN           reduce using rule 152 (expression -> expression TIMES expression .)
    FOR             reduce using rule 152 (expression -> expression TIMES expression .)
    CASE            reduce using rule 152 (expression -> expression TIMES expression .)
    WITH            reduce using rule 152 (expression -> expression TIMES expression .)
    REPEAT          reduce using rule 152 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 152 (expression -> expression TIMES expression .)
    UNTIL           reduce using rule 152 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 152 (expression -> expression TIMES expression .)
    VAR             reduce using rule 152 (expression -> expression TIMES expression .)
    CONSTRUCTOR     reduce using rule 152 (expression -> expression TIMES expression .)
    PROCEDURE       reduce using rule 152 (expression -> expression TIMES expression .)
    FUNCTION        reduce using rule 152 (expression -> expression TIMES expression .)
    DESTRUCTOR      reduce using rule 152 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 152 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 152 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 152 (expression -> expression TIMES expression .)
    COLON           reduce using rule 152 (expression -> expression TIMES expression .)
    TO              reduce using rule 152 (expression -> expression TIMES expression .)
    DOWNTO          reduce using rule 152 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201

  ! PLUS            [ reduce using rule 152 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 152 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 152 (expression -> expression TIMES expression .) ]
  ! DIVIDE          [ reduce using rule 152 (expression -> expression TIMES expression .) ]
  ! MOD             [ reduce using rule 152 (expression -> expression TIMES expression .) ]
  ! AND             [ reduce using rule 152 (expression -> expression TIMES expression .) ]
  ! OR              [ reduce using rule 152 (expression -> expression TIMES expression .) ]


state 284

    (153) expression -> expression DIVIDE expression .
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 153 (expression -> expression DIVIDE expression .)
    IN              reduce using rule 153 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 153 (expression -> expression DIVIDE expression .)
    OF              reduce using rule 153 (expression -> expression DIVIDE expression .)
    END             reduce using rule 153 (expression -> expression DIVIDE expression .)
    READLN          reduce using rule 153 (expression -> expression DIVIDE expression .)
    WRITE           reduce using rule 153 (expression -> expression DIVIDE expression .)
    WRITELN         reduce using rule 153 (expression -> expression DIVIDE expression .)
    USES            reduce using rule 153 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 153 (expression -> expression DIVIDE expression .)
    ID              reduce using rule 153 (expression -> expression DIVIDE expression .)
    WHILE           reduce using rule 153 (expression -> expression DIVIDE expression .)
    BEGIN           reduce using rule 153 (expression -> expression DIVIDE expression .)
    FOR             reduce using rule 153 (expression -> expression DIVIDE expression .)
    CASE            reduce using rule 153 (expression -> expression DIVIDE expression .)
    WITH            reduce using rule 153 (expression -> expression DIVIDE expression .)
    REPEAT          reduce using rule 153 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 153 (expression -> expression DIVIDE expression .)
    UNTIL           reduce using rule 153 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 153 (expression -> expression DIVIDE expression .)
    VAR             reduce using rule 153 (expression -> expression DIVIDE expression .)
    CONSTRUCTOR     reduce using rule 153 (expression -> expression DIVIDE expression .)
    PROCEDURE       reduce using rule 153 (expression -> expression DIVIDE expression .)
    FUNCTION        reduce using rule 153 (expression -> expression DIVIDE expression .)
    DESTRUCTOR      reduce using rule 153 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 153 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 153 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 153 (expression -> expression DIVIDE expression .)
    COLON           reduce using rule 153 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 153 (expression -> expression DIVIDE expression .)
    DOWNTO          reduce using rule 153 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201

  ! PLUS            [ reduce using rule 153 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 153 (expression -> expression DIVIDE expression .) ]
  ! TIMES           [ reduce using rule 153 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 153 (expression -> expression DIVIDE expression .) ]
  ! MOD             [ reduce using rule 153 (expression -> expression DIVIDE expression .) ]
  ! AND             [ reduce using rule 153 (expression -> expression DIVIDE expression .) ]
  ! OR              [ reduce using rule 153 (expression -> expression DIVIDE expression .) ]


state 285

    (154) expression -> expression MOD expression .
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 154 (expression -> expression MOD expression .)
    IN              reduce using rule 154 (expression -> expression MOD expression .)
    DO              reduce using rule 154 (expression -> expression MOD expression .)
    OF              reduce using rule 154 (expression -> expression MOD expression .)
    END             reduce using rule 154 (expression -> expression MOD expression .)
    READLN          reduce using rule 154 (expression -> expression MOD expression .)
    WRITE           reduce using rule 154 (expression -> expression MOD expression .)
    WRITELN         reduce using rule 154 (expression -> expression MOD expression .)
    USES            reduce using rule 154 (expression -> expression MOD expression .)
    IF              reduce using rule 154 (expression -> expression MOD expression .)
    ID              reduce using rule 154 (expression -> expression MOD expression .)
    WHILE           reduce using rule 154 (expression -> expression MOD expression .)
    BEGIN           reduce using rule 154 (expression -> expression MOD expression .)
    FOR             reduce using rule 154 (expression -> expression MOD expression .)
    CASE            reduce using rule 154 (expression -> expression MOD expression .)
    WITH            reduce using rule 154 (expression -> expression MOD expression .)
    REPEAT          reduce using rule 154 (expression -> expression MOD expression .)
    SEMICOLON       reduce using rule 154 (expression -> expression MOD expression .)
    UNTIL           reduce using rule 154 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 154 (expression -> expression MOD expression .)
    VAR             reduce using rule 154 (expression -> expression MOD expression .)
    CONSTRUCTOR     reduce using rule 154 (expression -> expression MOD expression .)
    PROCEDURE       reduce using rule 154 (expression -> expression MOD expression .)
    FUNCTION        reduce using rule 154 (expression -> expression MOD expression .)
    DESTRUCTOR      reduce using rule 154 (expression -> expression MOD expression .)
    ELSE            reduce using rule 154 (expression -> expression MOD expression .)
    RBRACKET        reduce using rule 154 (expression -> expression MOD expression .)
    COMMA           reduce using rule 154 (expression -> expression MOD expression .)
    COLON           reduce using rule 154 (expression -> expression MOD expression .)
    TO              reduce using rule 154 (expression -> expression MOD expression .)
    DOWNTO          reduce using rule 154 (expression -> expression MOD expression .)
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201

  ! PLUS            [ reduce using rule 154 (expression -> expression MOD expression .) ]
  ! MINUS           [ reduce using rule 154 (expression -> expression MOD expression .) ]
  ! TIMES           [ reduce using rule 154 (expression -> expression MOD expression .) ]
  ! DIVIDE          [ reduce using rule 154 (expression -> expression MOD expression .) ]
  ! MOD             [ reduce using rule 154 (expression -> expression MOD expression .) ]
  ! AND             [ reduce using rule 154 (expression -> expression MOD expression .) ]
  ! OR              [ reduce using rule 154 (expression -> expression MOD expression .) ]


state 286

    (189) expression -> expression AND expression .
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 189 (expression -> expression AND expression .)
    IN              reduce using rule 189 (expression -> expression AND expression .)
    DO              reduce using rule 189 (expression -> expression AND expression .)
    OF              reduce using rule 189 (expression -> expression AND expression .)
    END             reduce using rule 189 (expression -> expression AND expression .)
    READLN          reduce using rule 189 (expression -> expression AND expression .)
    WRITE           reduce using rule 189 (expression -> expression AND expression .)
    WRITELN         reduce using rule 189 (expression -> expression AND expression .)
    USES            reduce using rule 189 (expression -> expression AND expression .)
    IF              reduce using rule 189 (expression -> expression AND expression .)
    ID              reduce using rule 189 (expression -> expression AND expression .)
    WHILE           reduce using rule 189 (expression -> expression AND expression .)
    BEGIN           reduce using rule 189 (expression -> expression AND expression .)
    FOR             reduce using rule 189 (expression -> expression AND expression .)
    CASE            reduce using rule 189 (expression -> expression AND expression .)
    WITH            reduce using rule 189 (expression -> expression AND expression .)
    REPEAT          reduce using rule 189 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 189 (expression -> expression AND expression .)
    UNTIL           reduce using rule 189 (expression -> expression AND expression .)
    RPAREN          reduce using rule 189 (expression -> expression AND expression .)
    VAR             reduce using rule 189 (expression -> expression AND expression .)
    CONSTRUCTOR     reduce using rule 189 (expression -> expression AND expression .)
    PROCEDURE       reduce using rule 189 (expression -> expression AND expression .)
    FUNCTION        reduce using rule 189 (expression -> expression AND expression .)
    DESTRUCTOR      reduce using rule 189 (expression -> expression AND expression .)
    ELSE            reduce using rule 189 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 189 (expression -> expression AND expression .)
    COMMA           reduce using rule 189 (expression -> expression AND expression .)
    COLON           reduce using rule 189 (expression -> expression AND expression .)
    TO              reduce using rule 189 (expression -> expression AND expression .)
    DOWNTO          reduce using rule 189 (expression -> expression AND expression .)
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201

  ! PLUS            [ reduce using rule 189 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 189 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 189 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 189 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 189 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 189 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 189 (expression -> expression AND expression .) ]


state 287

    (190) expression -> expression OR expression .
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 190 (expression -> expression OR expression .)
    IN              reduce using rule 190 (expression -> expression OR expression .)
    DO              reduce using rule 190 (expression -> expression OR expression .)
    OF              reduce using rule 190 (expression -> expression OR expression .)
    END             reduce using rule 190 (expression -> expression OR expression .)
    READLN          reduce using rule 190 (expression -> expression OR expression .)
    WRITE           reduce using rule 190 (expression -> expression OR expression .)
    WRITELN         reduce using rule 190 (expression -> expression OR expression .)
    USES            reduce using rule 190 (expression -> expression OR expression .)
    IF              reduce using rule 190 (expression -> expression OR expression .)
    ID              reduce using rule 190 (expression -> expression OR expression .)
    WHILE           reduce using rule 190 (expression -> expression OR expression .)
    BEGIN           reduce using rule 190 (expression -> expression OR expression .)
    FOR             reduce using rule 190 (expression -> expression OR expression .)
    CASE            reduce using rule 190 (expression -> expression OR expression .)
    WITH            reduce using rule 190 (expression -> expression OR expression .)
    REPEAT          reduce using rule 190 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 190 (expression -> expression OR expression .)
    UNTIL           reduce using rule 190 (expression -> expression OR expression .)
    RPAREN          reduce using rule 190 (expression -> expression OR expression .)
    VAR             reduce using rule 190 (expression -> expression OR expression .)
    CONSTRUCTOR     reduce using rule 190 (expression -> expression OR expression .)
    PROCEDURE       reduce using rule 190 (expression -> expression OR expression .)
    FUNCTION        reduce using rule 190 (expression -> expression OR expression .)
    DESTRUCTOR      reduce using rule 190 (expression -> expression OR expression .)
    ELSE            reduce using rule 190 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 190 (expression -> expression OR expression .)
    COMMA           reduce using rule 190 (expression -> expression OR expression .)
    COLON           reduce using rule 190 (expression -> expression OR expression .)
    TO              reduce using rule 190 (expression -> expression OR expression .)
    DOWNTO          reduce using rule 190 (expression -> expression OR expression .)
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201

  ! PLUS            [ reduce using rule 190 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 190 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 190 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 190 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 190 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 190 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 190 (expression -> expression OR expression .) ]


state 288

    (137) expression -> simple_expression relop simple_expression .

    THEN            reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    IN              reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    PLUS            reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    MINUS           reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    TIMES           reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    DIVIDE          reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    MOD             reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    AND             reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    OR              reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    DO              reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    OF              reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    END             reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    READLN          reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    WRITE           reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    WRITELN         reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    USES            reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    IF              reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    ID              reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    WHILE           reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    BEGIN           reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    FOR             reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    CASE            reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    WITH            reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    REPEAT          reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    SEMICOLON       reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    UNTIL           reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    RPAREN          reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    VAR             reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    CONSTRUCTOR     reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    PROCEDURE       reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    FUNCTION        reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    DESTRUCTOR      reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    ELSE            reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    RBRACKET        reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    COMMA           reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    COLON           reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    TO              reduce using rule 137 (expression -> simple_expression relop simple_expression .)
    DOWNTO          reduce using rule 137 (expression -> simple_expression relop simple_expression .)


state 289

    (140) simple_expression_tail -> addop term .

    LESS            reduce using rule 140 (simple_expression_tail -> addop term .)
    LESS_EQUAL      reduce using rule 140 (simple_expression_tail -> addop term .)
    GREAT           reduce using rule 140 (simple_expression_tail -> addop term .)
    GREAT_EQUAL     reduce using rule 140 (simple_expression_tail -> addop term .)
    EQUAL           reduce using rule 140 (simple_expression_tail -> addop term .)
    DIFFERENT       reduce using rule 140 (simple_expression_tail -> addop term .)
    THEN            reduce using rule 140 (simple_expression_tail -> addop term .)
    IN              reduce using rule 140 (simple_expression_tail -> addop term .)
    PLUS            reduce using rule 140 (simple_expression_tail -> addop term .)
    MINUS           reduce using rule 140 (simple_expression_tail -> addop term .)
    TIMES           reduce using rule 140 (simple_expression_tail -> addop term .)
    DIVIDE          reduce using rule 140 (simple_expression_tail -> addop term .)
    MOD             reduce using rule 140 (simple_expression_tail -> addop term .)
    AND             reduce using rule 140 (simple_expression_tail -> addop term .)
    OR              reduce using rule 140 (simple_expression_tail -> addop term .)
    DO              reduce using rule 140 (simple_expression_tail -> addop term .)
    OF              reduce using rule 140 (simple_expression_tail -> addop term .)
    END             reduce using rule 140 (simple_expression_tail -> addop term .)
    READLN          reduce using rule 140 (simple_expression_tail -> addop term .)
    WRITE           reduce using rule 140 (simple_expression_tail -> addop term .)
    WRITELN         reduce using rule 140 (simple_expression_tail -> addop term .)
    USES            reduce using rule 140 (simple_expression_tail -> addop term .)
    IF              reduce using rule 140 (simple_expression_tail -> addop term .)
    ID              reduce using rule 140 (simple_expression_tail -> addop term .)
    WHILE           reduce using rule 140 (simple_expression_tail -> addop term .)
    BEGIN           reduce using rule 140 (simple_expression_tail -> addop term .)
    FOR             reduce using rule 140 (simple_expression_tail -> addop term .)
    CASE            reduce using rule 140 (simple_expression_tail -> addop term .)
    WITH            reduce using rule 140 (simple_expression_tail -> addop term .)
    REPEAT          reduce using rule 140 (simple_expression_tail -> addop term .)
    SEMICOLON       reduce using rule 140 (simple_expression_tail -> addop term .)
    UNTIL           reduce using rule 140 (simple_expression_tail -> addop term .)
    RPAREN          reduce using rule 140 (simple_expression_tail -> addop term .)
    VAR             reduce using rule 140 (simple_expression_tail -> addop term .)
    CONSTRUCTOR     reduce using rule 140 (simple_expression_tail -> addop term .)
    PROCEDURE       reduce using rule 140 (simple_expression_tail -> addop term .)
    FUNCTION        reduce using rule 140 (simple_expression_tail -> addop term .)
    DESTRUCTOR      reduce using rule 140 (simple_expression_tail -> addop term .)
    ELSE            reduce using rule 140 (simple_expression_tail -> addop term .)
    RBRACKET        reduce using rule 140 (simple_expression_tail -> addop term .)
    COMMA           reduce using rule 140 (simple_expression_tail -> addop term .)
    COLON           reduce using rule 140 (simple_expression_tail -> addop term .)
    TO              reduce using rule 140 (simple_expression_tail -> addop term .)
    DOWNTO          reduce using rule 140 (simple_expression_tail -> addop term .)


state 290

    (145) term_tail -> mulop factor .

    PLUS            reduce using rule 145 (term_tail -> mulop factor .)
    MINUS           reduce using rule 145 (term_tail -> mulop factor .)
    LESS            reduce using rule 145 (term_tail -> mulop factor .)
    LESS_EQUAL      reduce using rule 145 (term_tail -> mulop factor .)
    GREAT           reduce using rule 145 (term_tail -> mulop factor .)
    GREAT_EQUAL     reduce using rule 145 (term_tail -> mulop factor .)
    EQUAL           reduce using rule 145 (term_tail -> mulop factor .)
    DIFFERENT       reduce using rule 145 (term_tail -> mulop factor .)
    THEN            reduce using rule 145 (term_tail -> mulop factor .)
    IN              reduce using rule 145 (term_tail -> mulop factor .)
    TIMES           reduce using rule 145 (term_tail -> mulop factor .)
    DIVIDE          reduce using rule 145 (term_tail -> mulop factor .)
    MOD             reduce using rule 145 (term_tail -> mulop factor .)
    AND             reduce using rule 145 (term_tail -> mulop factor .)
    OR              reduce using rule 145 (term_tail -> mulop factor .)
    DO              reduce using rule 145 (term_tail -> mulop factor .)
    OF              reduce using rule 145 (term_tail -> mulop factor .)
    END             reduce using rule 145 (term_tail -> mulop factor .)
    READLN          reduce using rule 145 (term_tail -> mulop factor .)
    WRITE           reduce using rule 145 (term_tail -> mulop factor .)
    WRITELN         reduce using rule 145 (term_tail -> mulop factor .)
    USES            reduce using rule 145 (term_tail -> mulop factor .)
    IF              reduce using rule 145 (term_tail -> mulop factor .)
    ID              reduce using rule 145 (term_tail -> mulop factor .)
    WHILE           reduce using rule 145 (term_tail -> mulop factor .)
    BEGIN           reduce using rule 145 (term_tail -> mulop factor .)
    FOR             reduce using rule 145 (term_tail -> mulop factor .)
    CASE            reduce using rule 145 (term_tail -> mulop factor .)
    WITH            reduce using rule 145 (term_tail -> mulop factor .)
    REPEAT          reduce using rule 145 (term_tail -> mulop factor .)
    SEMICOLON       reduce using rule 145 (term_tail -> mulop factor .)
    UNTIL           reduce using rule 145 (term_tail -> mulop factor .)
    RPAREN          reduce using rule 145 (term_tail -> mulop factor .)
    VAR             reduce using rule 145 (term_tail -> mulop factor .)
    CONSTRUCTOR     reduce using rule 145 (term_tail -> mulop factor .)
    PROCEDURE       reduce using rule 145 (term_tail -> mulop factor .)
    FUNCTION        reduce using rule 145 (term_tail -> mulop factor .)
    DESTRUCTOR      reduce using rule 145 (term_tail -> mulop factor .)
    ELSE            reduce using rule 145 (term_tail -> mulop factor .)
    RBRACKET        reduce using rule 145 (term_tail -> mulop factor .)
    COMMA           reduce using rule 145 (term_tail -> mulop factor .)
    COLON           reduce using rule 145 (term_tail -> mulop factor .)
    TO              reduce using rule 145 (term_tail -> mulop factor .)
    DOWNTO          reduce using rule 145 (term_tail -> mulop factor .)


state 291

    (155) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    DIV             reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    LESS_EQUAL      reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    GREAT           reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    GREAT_EQUAL     reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    DIFFERENT       reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    IN              reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    OF              reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    READLN          reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    WRITE           reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    WRITELN         reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    USES            reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    ID              reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    BEGIN           reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    FOR             reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    CASE            reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    WITH            reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    REPEAT          reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    VAR             reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    CONSTRUCTOR     reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    PROCEDURE       reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    DESTRUCTOR      reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    COLON           reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 155 (factor -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 155 (factor -> LPAREN expression RPAREN .)


state 292

    (87) function_call -> ID LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 342


state 293

    (130) while_statement -> WHILE expression DO statement .

    END             reduce using rule 130 (while_statement -> WHILE expression DO statement .)
    READLN          reduce using rule 130 (while_statement -> WHILE expression DO statement .)
    WRITE           reduce using rule 130 (while_statement -> WHILE expression DO statement .)
    WRITELN         reduce using rule 130 (while_statement -> WHILE expression DO statement .)
    USES            reduce using rule 130 (while_statement -> WHILE expression DO statement .)
    IF              reduce using rule 130 (while_statement -> WHILE expression DO statement .)
    ID              reduce using rule 130 (while_statement -> WHILE expression DO statement .)
    WHILE           reduce using rule 130 (while_statement -> WHILE expression DO statement .)
    BEGIN           reduce using rule 130 (while_statement -> WHILE expression DO statement .)
    FOR             reduce using rule 130 (while_statement -> WHILE expression DO statement .)
    CASE            reduce using rule 130 (while_statement -> WHILE expression DO statement .)
    WITH            reduce using rule 130 (while_statement -> WHILE expression DO statement .)
    REPEAT          reduce using rule 130 (while_statement -> WHILE expression DO statement .)
    SEMICOLON       reduce using rule 130 (while_statement -> WHILE expression DO statement .)
    UNTIL           reduce using rule 130 (while_statement -> WHILE expression DO statement .)
    RPAREN          reduce using rule 130 (while_statement -> WHILE expression DO statement .)
    VAR             reduce using rule 130 (while_statement -> WHILE expression DO statement .)
    CONSTRUCTOR     reduce using rule 130 (while_statement -> WHILE expression DO statement .)
    PROCEDURE       reduce using rule 130 (while_statement -> WHILE expression DO statement .)
    FUNCTION        reduce using rule 130 (while_statement -> WHILE expression DO statement .)
    DESTRUCTOR      reduce using rule 130 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 130 (while_statement -> WHILE expression DO statement .)
    THEN            reduce using rule 130 (while_statement -> WHILE expression DO statement .)


state 294

    (115) for_statement -> FOR ID COLON_EQUAL expression . TO expression DO block
    (116) for_statement -> FOR ID COLON_EQUAL expression . DOWNTO expression DO block
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression

    TO              shift and go to state 343
    DOWNTO          shift and go to state 344
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201


state 295

    (75) case_statement -> CASE expression OF case_list_opt_semicolon . END SEMICOLON
    (76) case_statement -> CASE expression OF case_list_opt_semicolon . ELSE statement_list END SEMICOLON
    (77) case_statement -> CASE expression OF case_list_opt_semicolon . END

    END             shift and go to state 345
    ELSE            shift and go to state 346


state 296

    (64) case_list_opt_semicolon -> case_list .
    (65) case_list_opt_semicolon -> case_list . SEMICOLON
    (62) case_list -> case_list . SEMICOLON case_element

    END             reduce using rule 64 (case_list_opt_semicolon -> case_list .)
    ELSE            reduce using rule 64 (case_list_opt_semicolon -> case_list .)
    SEMICOLON       shift and go to state 347


state 297

    (63) case_list -> case_element .

    SEMICOLON       reduce using rule 63 (case_list -> case_element .)
    END             reduce using rule 63 (case_list -> case_element .)
    ELSE            reduce using rule 63 (case_list -> case_element .)


state 298

    (66) case_element -> NUMBER . COLON LPAREN field_list RPAREN
    (67) case_element -> NUMBER . COLON field_list

    COLON           shift and go to state 348


state 299

    (110) with_statement -> WITH variable DO statement .

    END             reduce using rule 110 (with_statement -> WITH variable DO statement .)
    READLN          reduce using rule 110 (with_statement -> WITH variable DO statement .)
    WRITE           reduce using rule 110 (with_statement -> WITH variable DO statement .)
    WRITELN         reduce using rule 110 (with_statement -> WITH variable DO statement .)
    USES            reduce using rule 110 (with_statement -> WITH variable DO statement .)
    IF              reduce using rule 110 (with_statement -> WITH variable DO statement .)
    ID              reduce using rule 110 (with_statement -> WITH variable DO statement .)
    WHILE           reduce using rule 110 (with_statement -> WITH variable DO statement .)
    BEGIN           reduce using rule 110 (with_statement -> WITH variable DO statement .)
    FOR             reduce using rule 110 (with_statement -> WITH variable DO statement .)
    CASE            reduce using rule 110 (with_statement -> WITH variable DO statement .)
    WITH            reduce using rule 110 (with_statement -> WITH variable DO statement .)
    REPEAT          reduce using rule 110 (with_statement -> WITH variable DO statement .)
    SEMICOLON       reduce using rule 110 (with_statement -> WITH variable DO statement .)
    UNTIL           reduce using rule 110 (with_statement -> WITH variable DO statement .)
    RPAREN          reduce using rule 110 (with_statement -> WITH variable DO statement .)
    VAR             reduce using rule 110 (with_statement -> WITH variable DO statement .)
    CONSTRUCTOR     reduce using rule 110 (with_statement -> WITH variable DO statement .)
    PROCEDURE       reduce using rule 110 (with_statement -> WITH variable DO statement .)
    FUNCTION        reduce using rule 110 (with_statement -> WITH variable DO statement .)
    DESTRUCTOR      reduce using rule 110 (with_statement -> WITH variable DO statement .)
    ELSE            reduce using rule 110 (with_statement -> WITH variable DO statement .)
    THEN            reduce using rule 110 (with_statement -> WITH variable DO statement .)


state 300

    (182) repeat_statement -> REPEAT statement_list UNTIL expression . SEMICOLON
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression

    SEMICOLON       shift and go to state 349
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201


state 301

    (30) type_specifier -> ARRAY LBRACKET type_expression . RBRACKET OF type_specifier
    (44) type_expression -> type_expression . COMMA subrange

    RBRACKET        shift and go to state 350
    COMMA           shift and go to state 351


state 302

    (45) type_expression -> subrange .

    RBRACKET        reduce using rule 45 (type_expression -> subrange .)
    COMMA           reduce using rule 45 (type_expression -> subrange .)


state 303

    (32) type_specifier -> FILE OF type_specifier .

    SEMICOLON       reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    RPAREN          reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    VAR             reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    ID              reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    READLN          reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    WRITE           reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    WRITELN         reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    USES            reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    IF              reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    CASE            reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    WHILE           reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    BEGIN           reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    FOR             reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    WITH            reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    REPEAT          reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    END             reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    CONSTRUCTOR     reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    PROCEDURE       reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    FUNCTION        reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    DESTRUCTOR      reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    ELSE            reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    OF              reduce using rule 32 (type_specifier -> FILE OF type_specifier .)


state 304

    (33) type_specifier -> SET OF type_specifier .

    SEMICOLON       reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    RPAREN          reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    VAR             reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    ID              reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    READLN          reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    WRITE           reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    WRITELN         reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    USES            reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    IF              reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    CASE            reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    WHILE           reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    BEGIN           reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    FOR             reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    WITH            reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    REPEAT          reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    END             reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    CONSTRUCTOR     reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    PROCEDURE       reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    FUNCTION        reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    DESTRUCTOR      reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    ELSE            reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    OF              reduce using rule 33 (type_specifier -> SET OF type_specifier .)


state 305

    (34) type_specifier -> RECORD field_list case_part . END

    END             shift and go to state 352


state 306

    (60) case_part -> CASE . ID COLON type_specifier OF case_list SEMICOLON
    (75) case_statement -> CASE . expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> CASE . expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> CASE . expression OF case_list_opt_semicolon END
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    ID              shift and go to state 353
    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117

    expression                     shift and go to state 121
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 307

    (61) case_part -> empty .
    (109) statement -> empty .

  ! reduce/reduce conflict for END resolved using rule 61 (case_part -> empty .)
    END             reduce using rule 61 (case_part -> empty .)
    CASE            reduce using rule 109 (statement -> empty .)
    VAR             reduce using rule 109 (statement -> empty .)
    ID              reduce using rule 109 (statement -> empty .)
    READLN          reduce using rule 109 (statement -> empty .)
    WRITE           reduce using rule 109 (statement -> empty .)
    WRITELN         reduce using rule 109 (statement -> empty .)
    USES            reduce using rule 109 (statement -> empty .)
    IF              reduce using rule 109 (statement -> empty .)
    WHILE           reduce using rule 109 (statement -> empty .)
    BEGIN           reduce using rule 109 (statement -> empty .)
    FOR             reduce using rule 109 (statement -> empty .)
    WITH            reduce using rule 109 (statement -> empty .)
    REPEAT          reduce using rule 109 (statement -> empty .)

  ! END             [ reduce using rule 109 (statement -> empty .) ]


state 308

    (35) type_specifier -> OBJECT field_list method_list . END
    (68) method_list -> method_list . method
    (71) method -> . CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON
    (72) method -> . PROCEDURE ID LPAREN field_list RPAREN SEMICOLON
    (73) method -> . FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON
    (74) method -> . DESTRUCTOR ID SEMICOLON

    END             shift and go to state 354
    CONSTRUCTOR     shift and go to state 311
    PROCEDURE       shift and go to state 312
    FUNCTION        shift and go to state 313
    DESTRUCTOR      shift and go to state 314

    method                         shift and go to state 355

state 309

    (69) method_list -> method .

    END             reduce using rule 69 (method_list -> method .)
    CONSTRUCTOR     reduce using rule 69 (method_list -> method .)
    PROCEDURE       reduce using rule 69 (method_list -> method .)
    FUNCTION        reduce using rule 69 (method_list -> method .)
    DESTRUCTOR      reduce using rule 69 (method_list -> method .)


state 310

    (70) method_list -> empty .
    (109) statement -> empty .

  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 70 (method_list -> empty .)
  ! reduce/reduce conflict for PROCEDURE resolved using rule 70 (method_list -> empty .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 70 (method_list -> empty .)
  ! reduce/reduce conflict for DESTRUCTOR resolved using rule 70 (method_list -> empty .)
  ! reduce/reduce conflict for END resolved using rule 70 (method_list -> empty .)
    END             reduce using rule 70 (method_list -> empty .)
    CONSTRUCTOR     reduce using rule 70 (method_list -> empty .)
    PROCEDURE       reduce using rule 70 (method_list -> empty .)
    FUNCTION        reduce using rule 70 (method_list -> empty .)
    DESTRUCTOR      reduce using rule 70 (method_list -> empty .)
    VAR             reduce using rule 109 (statement -> empty .)
    ID              reduce using rule 109 (statement -> empty .)
    READLN          reduce using rule 109 (statement -> empty .)
    WRITE           reduce using rule 109 (statement -> empty .)
    WRITELN         reduce using rule 109 (statement -> empty .)
    USES            reduce using rule 109 (statement -> empty .)
    IF              reduce using rule 109 (statement -> empty .)
    CASE            reduce using rule 109 (statement -> empty .)
    WHILE           reduce using rule 109 (statement -> empty .)
    BEGIN           reduce using rule 109 (statement -> empty .)
    FOR             reduce using rule 109 (statement -> empty .)
    WITH            reduce using rule 109 (statement -> empty .)
    REPEAT          reduce using rule 109 (statement -> empty .)

  ! CONSTRUCTOR     [ reduce using rule 109 (statement -> empty .) ]
  ! PROCEDURE       [ reduce using rule 109 (statement -> empty .) ]
  ! FUNCTION        [ reduce using rule 109 (statement -> empty .) ]
  ! DESTRUCTOR      [ reduce using rule 109 (statement -> empty .) ]
  ! END             [ reduce using rule 109 (statement -> empty .) ]


state 311

    (71) method -> CONSTRUCTOR . ID LPAREN field_list RPAREN SEMICOLON

    ID              shift and go to state 356


state 312

    (72) method -> PROCEDURE . ID LPAREN field_list RPAREN SEMICOLON

    ID              shift and go to state 357


state 313

    (73) method -> FUNCTION . ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON

    ID              shift and go to state 358


state 314

    (74) method -> DESTRUCTOR . ID SEMICOLON

    ID              shift and go to state 359


state 315

    (36) type_specifier -> LPAREN id_list RPAREN .

    SEMICOLON       reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    RPAREN          reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    VAR             reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    ID              reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    READLN          reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    WRITE           reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    WRITELN         reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    USES            reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    IF              reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    CASE            reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    WHILE           reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    BEGIN           reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    FOR             reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    WITH            reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    REPEAT          reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    END             reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    CONSTRUCTOR     reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    PROCEDURE       reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    FUNCTION        reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    DESTRUCTOR      reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    ELSE            reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    OF              reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)


state 316

    (42) type_specifier -> STRING LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 360


state 317

    (46) subrange -> NUMBER DOTDOT NUMBER .

    SEMICOLON       reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    RBRACKET        reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    COMMA           reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    RPAREN          reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    VAR             reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    ID              reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    READLN          reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    WRITE           reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    WRITELN         reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    USES            reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    IF              reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    CASE            reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    WHILE           reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    BEGIN           reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    FOR             reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    WITH            reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    REPEAT          reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    END             reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    CONSTRUCTOR     reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    PROCEDURE       reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    FUNCTION        reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    DESTRUCTOR      reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    ELSE            reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    OF              reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)


state 318

    (47) subrange -> NUMBER DOTDOT ID .

    SEMICOLON       reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    RBRACKET        reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    COMMA           reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    RPAREN          reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    VAR             reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    ID              reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    READLN          reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    WRITE           reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    WRITELN         reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    USES            reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    IF              reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    CASE            reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    WHILE           reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    BEGIN           reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    FOR             reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    WITH            reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    REPEAT          reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    END             reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    CONSTRUCTOR     reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    PROCEDURE       reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    FUNCTION        reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    DESTRUCTOR      reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    ELSE            reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    OF              reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)


state 319

    (92) parameter -> ID COLON type_specifier .

    RPAREN          reduce using rule 92 (parameter -> ID COLON type_specifier .)
    SEMICOLON       reduce using rule 92 (parameter -> ID COLON type_specifier .)


state 320

    (83) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON . type_specifier SEMICOLON block SEMICOLON
    (84) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON . type_specifier SEMICOLON FORWARD SEMICOLON
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (78) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 132
    FILE            shift and go to state 134
    SET             shift and go to state 135
    RECORD          shift and go to state 136
    OBJECT          shift and go to state 137
    LPAREN          shift and go to state 138
    BOOLEAN_LITERAL shift and go to state 139
    INTEGER         shift and go to state 140
    BYTE            shift and go to state 141
    CHAR            shift and go to state 142
    STRING          shift and go to state 143
    ID              shift and go to state 130
    LONGINT         shift and go to state 145
    NUMBER          shift and go to state 144

    type_specifier                 shift and go to state 361
    subrange                       shift and go to state 133

state 321

    (89) parameter_list -> parameter_list SEMICOLON parameter .

    RPAREN          reduce using rule 89 (parameter_list -> parameter_list SEMICOLON parameter .)
    SEMICOLON       reduce using rule 89 (parameter_list -> parameter_list SEMICOLON parameter .)


state 322

    (85) function_declaration -> FUNCTION ID LPAREN RPAREN COLON type_specifier . SEMICOLON block SEMICOLON
    (86) function_declaration -> FUNCTION ID LPAREN RPAREN COLON type_specifier . SEMICOLON FORWARD SEMICOLON

    SEMICOLON       shift and go to state 362


state 323

    (14) method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list . RPAREN COLON type_specifier SEMICOLON block
    (89) parameter_list -> parameter_list . SEMICOLON parameter

    RPAREN          shift and go to state 363
    SEMICOLON       shift and go to state 244


state 324

    (16) constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON . block
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (165) empty -> .

    BEGIN           reduce using rule 165 (empty -> .)
    USES            reduce using rule 165 (empty -> .)
    CONST           reduce using rule 165 (empty -> .)
    TYPE            reduce using rule 165 (empty -> .)
    VAR             reduce using rule 165 (empty -> .)
    FUNCTION        reduce using rule 165 (empty -> .)
    CONSTRUCTOR     reduce using rule 165 (empty -> .)
    PROCEDURE       reduce using rule 165 (empty -> .)
    DESTRUCTOR      reduce using rule 165 (empty -> .)

    block                          shift and go to state 364
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 325

    (17) constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block .

    USES            reduce using rule 17 (constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block .)
    CONST           reduce using rule 17 (constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block .)
    TYPE            reduce using rule 17 (constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block .)
    VAR             reduce using rule 17 (constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block .)
    FUNCTION        reduce using rule 17 (constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block .)
    CONSTRUCTOR     reduce using rule 17 (constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block .)
    PROCEDURE       reduce using rule 17 (constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block .)
    DESTRUCTOR      reduce using rule 17 (constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block .)
    BEGIN           reduce using rule 17 (constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block .)


state 326

    (51) field -> id_list COLON type_specifier .
    (52) field -> id_list COLON type_specifier . SEMICOLON

  ! shift/reduce conflict for SEMICOLON resolved as shift
    RPAREN          reduce using rule 51 (field -> id_list COLON type_specifier .)
    VAR             reduce using rule 51 (field -> id_list COLON type_specifier .)
    ID              reduce using rule 51 (field -> id_list COLON type_specifier .)
    READLN          reduce using rule 51 (field -> id_list COLON type_specifier .)
    WRITE           reduce using rule 51 (field -> id_list COLON type_specifier .)
    WRITELN         reduce using rule 51 (field -> id_list COLON type_specifier .)
    USES            reduce using rule 51 (field -> id_list COLON type_specifier .)
    IF              reduce using rule 51 (field -> id_list COLON type_specifier .)
    CASE            reduce using rule 51 (field -> id_list COLON type_specifier .)
    WHILE           reduce using rule 51 (field -> id_list COLON type_specifier .)
    BEGIN           reduce using rule 51 (field -> id_list COLON type_specifier .)
    FOR             reduce using rule 51 (field -> id_list COLON type_specifier .)
    WITH            reduce using rule 51 (field -> id_list COLON type_specifier .)
    REPEAT          reduce using rule 51 (field -> id_list COLON type_specifier .)
    END             reduce using rule 51 (field -> id_list COLON type_specifier .)
    CONSTRUCTOR     reduce using rule 51 (field -> id_list COLON type_specifier .)
    PROCEDURE       reduce using rule 51 (field -> id_list COLON type_specifier .)
    FUNCTION        reduce using rule 51 (field -> id_list COLON type_specifier .)
    DESTRUCTOR      reduce using rule 51 (field -> id_list COLON type_specifier .)
    ELSE            reduce using rule 51 (field -> id_list COLON type_specifier .)
    SEMICOLON       shift and go to state 365

  ! SEMICOLON       [ reduce using rule 51 (field -> id_list COLON type_specifier .) ]


state 327

    (55) field -> id_list LPAREN STRING_LITERAL . RPAREN

    RPAREN          shift and go to state 366


state 328

    (53) field -> VAR id_list COLON . type_specifier
    (54) field -> VAR id_list COLON . type_specifier SEMICOLON
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (78) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 132
    FILE            shift and go to state 134
    SET             shift and go to state 135
    RECORD          shift and go to state 136
    OBJECT          shift and go to state 137
    LPAREN          shift and go to state 138
    BOOLEAN_LITERAL shift and go to state 139
    INTEGER         shift and go to state 140
    BYTE            shift and go to state 141
    CHAR            shift and go to state 142
    STRING          shift and go to state 143
    ID              shift and go to state 130
    LONGINT         shift and go to state 145
    NUMBER          shift and go to state 144

    type_specifier                 shift and go to state 367
    subrange                       shift and go to state 133

state 329

    (12) method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list . RPAREN SEMICOLON block
    (89) parameter_list -> parameter_list . SEMICOLON parameter

    RPAREN          shift and go to state 368
    SEMICOLON       shift and go to state 244


state 330

    (13) method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list . RPAREN SEMICOLON block
    (89) parameter_list -> parameter_list . SEMICOLON parameter

    RPAREN          shift and go to state 369
    SEMICOLON       shift and go to state 244


state 331

    (81) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON . block SEMICOLON
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (165) empty -> .

    BEGIN           reduce using rule 165 (empty -> .)
    USES            reduce using rule 165 (empty -> .)
    CONST           reduce using rule 165 (empty -> .)
    TYPE            reduce using rule 165 (empty -> .)
    VAR             reduce using rule 165 (empty -> .)
    FUNCTION        reduce using rule 165 (empty -> .)
    CONSTRUCTOR     reduce using rule 165 (empty -> .)
    PROCEDURE       reduce using rule 165 (empty -> .)
    DESTRUCTOR      reduce using rule 165 (empty -> .)

    block                          shift and go to state 370
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 332

    (82) procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 371


state 333

    (15) method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block .

    USES            reduce using rule 15 (method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block .)
    CONST           reduce using rule 15 (method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block .)
    TYPE            reduce using rule 15 (method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block .)
    VAR             reduce using rule 15 (method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block .)
    FUNCTION        reduce using rule 15 (method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block .)
    CONSTRUCTOR     reduce using rule 15 (method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block .)
    PROCEDURE       reduce using rule 15 (method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block .)
    DESTRUCTOR      reduce using rule 15 (method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block .)
    BEGIN           reduce using rule 15 (method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block .)


state 334

    (171) variable_list -> variable_list COMMA variable .
    (125) variable -> variable . LBRACKET expression RBRACKET
    (126) variable -> variable . DOT ID

    RPAREN          reduce using rule 171 (variable_list -> variable_list COMMA variable .)
    COMMA           reduce using rule 171 (variable_list -> variable_list COMMA variable .)
    LBRACKET        shift and go to state 100
    DOT             shift and go to state 101


state 335

    (134) expression_list_tail -> COMMA expression . expression_list_tail
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression
    (134) expression_list_tail -> . COMMA expression expression_list_tail
    (135) expression_list_tail -> . empty
    (165) empty -> .

    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201
    COMMA           shift and go to state 270
    RPAREN          reduce using rule 165 (empty -> .)

    expression_list_tail           shift and go to state 372
    empty                          shift and go to state 271

state 336

    (176) write_arguments -> write_arguments COMMA write_argument .

    RPAREN          reduce using rule 176 (write_arguments -> write_arguments COMMA write_argument .)
    COMMA           reduce using rule 176 (write_arguments -> write_arguments COMMA write_argument .)


state 337

    (177) write_argument -> expression .
    (178) write_argument -> expression . COLON expression
    (179) write_argument -> expression . COLON expression COLON expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression

    RPAREN          reduce using rule 177 (write_argument -> expression .)
    COMMA           reduce using rule 177 (write_argument -> expression .)
    COLON           shift and go to state 275
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201


state 338

    (178) write_argument -> expression COLON expression .
    (179) write_argument -> expression COLON expression . COLON expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression

    RPAREN          reduce using rule 178 (write_argument -> expression COLON expression .)
    COMMA           reduce using rule 178 (write_argument -> expression COLON expression .)
    COLON           shift and go to state 373
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201


state 339

    (129) index_list -> index_list COMMA expression .
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression

    RBRACKET        reduce using rule 129 (index_list -> index_list COMMA expression .)
    COMMA           reduce using rule 129 (index_list -> index_list COMMA expression .)
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201


state 340

    (111) if_statement -> IF expression THEN statement ELSE . statement
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (165) empty -> .
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for READLN resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    IF              shift and go to state 67
    ID              shift and go to state 66
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    CASE            shift and go to state 70
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72
    ELSE            reduce using rule 165 (empty -> .)
    END             reduce using rule 165 (empty -> .)
    SEMICOLON       reduce using rule 165 (empty -> .)
    UNTIL           reduce using rule 165 (empty -> .)
    RPAREN          reduce using rule 165 (empty -> .)
    VAR             reduce using rule 165 (empty -> .)
    CONSTRUCTOR     reduce using rule 165 (empty -> .)
    PROCEDURE       reduce using rule 165 (empty -> .)
    FUNCTION        reduce using rule 165 (empty -> .)
    DESTRUCTOR      reduce using rule 165 (empty -> .)
    THEN            reduce using rule 165 (empty -> .)

  ! READLN          [ reduce using rule 165 (empty -> .) ]
  ! WRITE           [ reduce using rule 165 (empty -> .) ]
  ! WRITELN         [ reduce using rule 165 (empty -> .) ]
  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! IF              [ reduce using rule 165 (empty -> .) ]
  ! ID              [ reduce using rule 165 (empty -> .) ]
  ! WHILE           [ reduce using rule 165 (empty -> .) ]
  ! BEGIN           [ reduce using rule 165 (empty -> .) ]
  ! FOR             [ reduce using rule 165 (empty -> .) ]
  ! CASE            [ reduce using rule 165 (empty -> .) ]
  ! WITH            [ reduce using rule 165 (empty -> .) ]
  ! REPEAT          [ reduce using rule 165 (empty -> .) ]

    statement                      shift and go to state 374
    if_statement                   shift and go to state 52
    assignment_statement           shift and go to state 53
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    case_statement                 shift and go to state 58
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    empty                          shift and go to state 91
    variable                       shift and go to state 62

state 341

    (113) if_statement -> IF expression IN statement THEN . statement ELSE statement
    (114) if_statement -> IF expression IN statement THEN . statement
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (165) empty -> .
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for READLN resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    IF              shift and go to state 67
    ID              shift and go to state 66
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    CASE            shift and go to state 70
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72
    ELSE            reduce using rule 165 (empty -> .)
    END             reduce using rule 165 (empty -> .)
    SEMICOLON       reduce using rule 165 (empty -> .)
    UNTIL           reduce using rule 165 (empty -> .)
    RPAREN          reduce using rule 165 (empty -> .)
    VAR             reduce using rule 165 (empty -> .)
    CONSTRUCTOR     reduce using rule 165 (empty -> .)
    PROCEDURE       reduce using rule 165 (empty -> .)
    FUNCTION        reduce using rule 165 (empty -> .)
    DESTRUCTOR      reduce using rule 165 (empty -> .)
    THEN            reduce using rule 165 (empty -> .)

  ! READLN          [ reduce using rule 165 (empty -> .) ]
  ! WRITE           [ reduce using rule 165 (empty -> .) ]
  ! WRITELN         [ reduce using rule 165 (empty -> .) ]
  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! IF              [ reduce using rule 165 (empty -> .) ]
  ! ID              [ reduce using rule 165 (empty -> .) ]
  ! WHILE           [ reduce using rule 165 (empty -> .) ]
  ! BEGIN           [ reduce using rule 165 (empty -> .) ]
  ! FOR             [ reduce using rule 165 (empty -> .) ]
  ! CASE            [ reduce using rule 165 (empty -> .) ]
  ! WITH            [ reduce using rule 165 (empty -> .) ]
  ! REPEAT          [ reduce using rule 165 (empty -> .) ]

    statement                      shift and go to state 375
    if_statement                   shift and go to state 52
    assignment_statement           shift and go to state 53
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    case_statement                 shift and go to state 58
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    empty                          shift and go to state 91
    variable                       shift and go to state 62

state 342

    (87) function_call -> ID LPAREN expression_list RPAREN .

    TIMES           reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    DIVIDE          reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    DIV             reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    PLUS            reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    MINUS           reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    LESS            reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    LESS_EQUAL      reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    GREAT           reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    GREAT_EQUAL     reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    DIFFERENT       reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    IN              reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    MOD             reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    AND             reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    OR              reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    OF              reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    READLN          reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    WRITE           reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    WRITELN         reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    USES            reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    IF              reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    ID              reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    WHILE           reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    BEGIN           reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    FOR             reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    CASE            reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    WITH            reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    REPEAT          reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    UNTIL           reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    VAR             reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    CONSTRUCTOR     reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    PROCEDURE       reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    FUNCTION        reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    DESTRUCTOR      reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    RBRACKET        reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    COLON           reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)
    DOWNTO          reduce using rule 87 (function_call -> ID LPAREN expression_list RPAREN .)


state 343

    (115) for_statement -> FOR ID COLON_EQUAL expression TO . expression DO block
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    expression                     shift and go to state 376
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 344

    (116) for_statement -> FOR ID COLON_EQUAL expression DOWNTO . expression DO block
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    expression                     shift and go to state 377
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 345

    (75) case_statement -> CASE expression OF case_list_opt_semicolon END . SEMICOLON
    (77) case_statement -> CASE expression OF case_list_opt_semicolon END .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 378
    END             reduce using rule 77 (case_statement -> CASE expression OF case_list_opt_semicolon END .)
    READLN          reduce using rule 77 (case_statement -> CASE expression OF case_list_opt_semicolon END .)
    WRITE           reduce using rule 77 (case_statement -> CASE expression OF case_list_opt_semicolon END .)
    WRITELN         reduce using rule 77 (case_statement -> CASE expression OF case_list_opt_semicolon END .)
    USES            reduce using rule 77 (case_statement -> CASE expression OF case_list_opt_semicolon END .)
    IF              reduce using rule 77 (case_statement -> CASE expression OF case_list_opt_semicolon END .)
    ID              reduce using rule 77 (case_statement -> CASE expression OF case_list_opt_semicolon END .)
    WHILE           reduce using rule 77 (case_statement -> CASE expression OF case_list_opt_semicolon END .)
    BEGIN           reduce using rule 77 (case_statement -> CASE expression OF case_list_opt_semicolon END .)
    FOR             reduce using rule 77 (case_statement -> CASE expression OF case_list_opt_semicolon END .)
    CASE            reduce using rule 77 (case_statement -> CASE expression OF case_list_opt_semicolon END .)
    WITH            reduce using rule 77 (case_statement -> CASE expression OF case_list_opt_semicolon END .)
    REPEAT          reduce using rule 77 (case_statement -> CASE expression OF case_list_opt_semicolon END .)
    UNTIL           reduce using rule 77 (case_statement -> CASE expression OF case_list_opt_semicolon END .)
    RPAREN          reduce using rule 77 (case_statement -> CASE expression OF case_list_opt_semicolon END .)
    VAR             reduce using rule 77 (case_statement -> CASE expression OF case_list_opt_semicolon END .)
    CONSTRUCTOR     reduce using rule 77 (case_statement -> CASE expression OF case_list_opt_semicolon END .)
    PROCEDURE       reduce using rule 77 (case_statement -> CASE expression OF case_list_opt_semicolon END .)
    FUNCTION        reduce using rule 77 (case_statement -> CASE expression OF case_list_opt_semicolon END .)
    DESTRUCTOR      reduce using rule 77 (case_statement -> CASE expression OF case_list_opt_semicolon END .)
    ELSE            reduce using rule 77 (case_statement -> CASE expression OF case_list_opt_semicolon END .)
    THEN            reduce using rule 77 (case_statement -> CASE expression OF case_list_opt_semicolon END .)

  ! SEMICOLON       [ reduce using rule 77 (case_statement -> CASE expression OF case_list_opt_semicolon END .) ]


state 346

    (76) case_statement -> CASE expression OF case_list_opt_semicolon ELSE . statement_list END SEMICOLON
    (97) statement_list -> . statement_list statement SEMICOLON
    (98) statement_list -> . statement_list statement
    (99) statement_list -> . statement
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (165) empty -> .
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for READLN resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    IF              shift and go to state 67
    ID              shift and go to state 66
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    CASE            shift and go to state 70
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72
    END             reduce using rule 165 (empty -> .)
    SEMICOLON       reduce using rule 165 (empty -> .)

  ! READLN          [ reduce using rule 165 (empty -> .) ]
  ! WRITE           [ reduce using rule 165 (empty -> .) ]
  ! WRITELN         [ reduce using rule 165 (empty -> .) ]
  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! IF              [ reduce using rule 165 (empty -> .) ]
  ! ID              [ reduce using rule 165 (empty -> .) ]
  ! WHILE           [ reduce using rule 165 (empty -> .) ]
  ! BEGIN           [ reduce using rule 165 (empty -> .) ]
  ! FOR             [ reduce using rule 165 (empty -> .) ]
  ! CASE            [ reduce using rule 165 (empty -> .) ]
  ! WITH            [ reduce using rule 165 (empty -> .) ]
  ! REPEAT          [ reduce using rule 165 (empty -> .) ]

    statement_list                 shift and go to state 379
    statement                      shift and go to state 49
    if_statement                   shift and go to state 52
    assignment_statement           shift and go to state 53
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    case_statement                 shift and go to state 58
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    empty                          shift and go to state 91
    variable                       shift and go to state 62

state 347

    (65) case_list_opt_semicolon -> case_list SEMICOLON .
    (62) case_list -> case_list SEMICOLON . case_element
    (66) case_element -> . NUMBER COLON LPAREN field_list RPAREN
    (67) case_element -> . NUMBER COLON field_list

    END             reduce using rule 65 (case_list_opt_semicolon -> case_list SEMICOLON .)
    ELSE            reduce using rule 65 (case_list_opt_semicolon -> case_list SEMICOLON .)
    NUMBER          shift and go to state 298

    case_element                   shift and go to state 380

state 348

    (66) case_element -> NUMBER COLON . LPAREN field_list RPAREN
    (67) case_element -> NUMBER COLON . field_list
    (48) field_list -> . field_list field
    (49) field_list -> . field
    (50) field_list -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . statement
    (57) field -> . if_statement
    (58) field -> . case_statement
    (59) field -> . assignment_statement
    (165) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READLN resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
    LPAREN          shift and go to state 381
    VAR             shift and go to state 159
    SEMICOLON       reduce using rule 165 (empty -> .)
    END             reduce using rule 165 (empty -> .)
    ELSE            reduce using rule 165 (empty -> .)
    ID              shift and go to state 153
    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    IF              shift and go to state 67
    CASE            shift and go to state 70
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72

  ! VAR             [ reduce using rule 165 (empty -> .) ]
  ! ID              [ reduce using rule 165 (empty -> .) ]
  ! READLN          [ reduce using rule 165 (empty -> .) ]
  ! WRITE           [ reduce using rule 165 (empty -> .) ]
  ! WRITELN         [ reduce using rule 165 (empty -> .) ]
  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! IF              [ reduce using rule 165 (empty -> .) ]
  ! CASE            [ reduce using rule 165 (empty -> .) ]
  ! WHILE           [ reduce using rule 165 (empty -> .) ]
  ! BEGIN           [ reduce using rule 165 (empty -> .) ]
  ! FOR             [ reduce using rule 165 (empty -> .) ]
  ! WITH            [ reduce using rule 165 (empty -> .) ]
  ! REPEAT          [ reduce using rule 165 (empty -> .) ]

    field_list                     shift and go to state 382
    field                          shift and go to state 156
    empty                          shift and go to state 157
    id_list                        shift and go to state 158
    statement                      shift and go to state 160
    if_statement                   shift and go to state 161
    case_statement                 shift and go to state 162
    assignment_statement           shift and go to state 163
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    variable                       shift and go to state 62

state 349

    (182) repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .

    END             reduce using rule 182 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    READLN          reduce using rule 182 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    WRITE           reduce using rule 182 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    WRITELN         reduce using rule 182 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    USES            reduce using rule 182 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    IF              reduce using rule 182 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    ID              reduce using rule 182 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    WHILE           reduce using rule 182 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    BEGIN           reduce using rule 182 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    FOR             reduce using rule 182 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    CASE            reduce using rule 182 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    WITH            reduce using rule 182 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    REPEAT          reduce using rule 182 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    SEMICOLON       reduce using rule 182 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    UNTIL           reduce using rule 182 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    RPAREN          reduce using rule 182 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    VAR             reduce using rule 182 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    CONSTRUCTOR     reduce using rule 182 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    PROCEDURE       reduce using rule 182 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    FUNCTION        reduce using rule 182 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    DESTRUCTOR      reduce using rule 182 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    ELSE            reduce using rule 182 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    THEN            reduce using rule 182 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)


state 350

    (30) type_specifier -> ARRAY LBRACKET type_expression RBRACKET . OF type_specifier

    OF              shift and go to state 383


state 351

    (44) type_expression -> type_expression COMMA . subrange
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    NUMBER          shift and go to state 144

    subrange                       shift and go to state 384

state 352

    (34) type_specifier -> RECORD field_list case_part END .

    SEMICOLON       reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    RPAREN          reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    VAR             reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    ID              reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    READLN          reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    WRITE           reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    WRITELN         reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    USES            reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    IF              reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    CASE            reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    WHILE           reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    BEGIN           reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    FOR             reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    WITH            reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    REPEAT          reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    END             reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    CONSTRUCTOR     reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    PROCEDURE       reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    FUNCTION        reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    DESTRUCTOR      reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    ELSE            reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    OF              reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)


state 353

    (60) case_part -> CASE ID . COLON type_specifier OF case_list SEMICOLON
    (87) function_call -> ID . LPAREN expression_list RPAREN
    (124) variable -> ID .
    (127) variable -> ID . LBRACKET index_list RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    COLON           shift and go to state 385
    LPAREN          shift and go to state 222
    DOT             reduce using rule 124 (variable -> ID .)
    TIMES           reduce using rule 124 (variable -> ID .)
    DIVIDE          reduce using rule 124 (variable -> ID .)
    DIV             reduce using rule 124 (variable -> ID .)
    PLUS            reduce using rule 124 (variable -> ID .)
    MINUS           reduce using rule 124 (variable -> ID .)
    LESS            reduce using rule 124 (variable -> ID .)
    LESS_EQUAL      reduce using rule 124 (variable -> ID .)
    GREAT           reduce using rule 124 (variable -> ID .)
    GREAT_EQUAL     reduce using rule 124 (variable -> ID .)
    EQUAL           reduce using rule 124 (variable -> ID .)
    DIFFERENT       reduce using rule 124 (variable -> ID .)
    OF              reduce using rule 124 (variable -> ID .)
    MOD             reduce using rule 124 (variable -> ID .)
    AND             reduce using rule 124 (variable -> ID .)
    OR              reduce using rule 124 (variable -> ID .)
    LBRACKET        shift and go to state 107

  ! LBRACKET        [ reduce using rule 124 (variable -> ID .) ]


state 354

    (35) type_specifier -> OBJECT field_list method_list END .

    SEMICOLON       reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    RPAREN          reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    VAR             reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    ID              reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    READLN          reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    WRITE           reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    WRITELN         reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    USES            reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    IF              reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    CASE            reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    WHILE           reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    BEGIN           reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    FOR             reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    WITH            reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    REPEAT          reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    END             reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    CONSTRUCTOR     reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    PROCEDURE       reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    FUNCTION        reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    DESTRUCTOR      reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    ELSE            reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    OF              reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)


state 355

    (68) method_list -> method_list method .

    END             reduce using rule 68 (method_list -> method_list method .)
    CONSTRUCTOR     reduce using rule 68 (method_list -> method_list method .)
    PROCEDURE       reduce using rule 68 (method_list -> method_list method .)
    FUNCTION        reduce using rule 68 (method_list -> method_list method .)
    DESTRUCTOR      reduce using rule 68 (method_list -> method_list method .)


state 356

    (71) method -> CONSTRUCTOR ID . LPAREN field_list RPAREN SEMICOLON

    LPAREN          shift and go to state 386


state 357

    (72) method -> PROCEDURE ID . LPAREN field_list RPAREN SEMICOLON

    LPAREN          shift and go to state 387


state 358

    (73) method -> FUNCTION ID . LPAREN field_list RPAREN COLON type_specifier SEMICOLON

    LPAREN          shift and go to state 388


state 359

    (74) method -> DESTRUCTOR ID . SEMICOLON

    SEMICOLON       shift and go to state 389


state 360

    (42) type_specifier -> STRING LBRACKET NUMBER RBRACKET .

    SEMICOLON       reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    RPAREN          reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    VAR             reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    ID              reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    READLN          reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    WRITE           reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    WRITELN         reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    USES            reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    IF              reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    CASE            reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    WHILE           reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    BEGIN           reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    FOR             reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    WITH            reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    REPEAT          reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    END             reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    CONSTRUCTOR     reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    PROCEDURE       reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    FUNCTION        reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    DESTRUCTOR      reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    ELSE            reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    OF              reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)


state 361

    (83) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier . SEMICOLON block SEMICOLON
    (84) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier . SEMICOLON FORWARD SEMICOLON

    SEMICOLON       shift and go to state 390


state 362

    (85) function_declaration -> FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON . block SEMICOLON
    (86) function_declaration -> FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON . FORWARD SEMICOLON
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (165) empty -> .

    FORWARD         shift and go to state 392
    BEGIN           reduce using rule 165 (empty -> .)
    USES            reduce using rule 165 (empty -> .)
    CONST           reduce using rule 165 (empty -> .)
    TYPE            reduce using rule 165 (empty -> .)
    VAR             reduce using rule 165 (empty -> .)
    FUNCTION        reduce using rule 165 (empty -> .)
    CONSTRUCTOR     reduce using rule 165 (empty -> .)
    PROCEDURE       reduce using rule 165 (empty -> .)
    DESTRUCTOR      reduce using rule 165 (empty -> .)

    block                          shift and go to state 391
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 363

    (14) method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN . COLON type_specifier SEMICOLON block

    COLON           shift and go to state 393


state 364

    (16) constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block .

    USES            reduce using rule 16 (constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block .)
    CONST           reduce using rule 16 (constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block .)
    TYPE            reduce using rule 16 (constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block .)
    VAR             reduce using rule 16 (constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block .)
    FUNCTION        reduce using rule 16 (constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block .)
    CONSTRUCTOR     reduce using rule 16 (constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block .)
    PROCEDURE       reduce using rule 16 (constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block .)
    DESTRUCTOR      reduce using rule 16 (constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block .)
    BEGIN           reduce using rule 16 (constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block .)


state 365

    (52) field -> id_list COLON type_specifier SEMICOLON .

    RPAREN          reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    VAR             reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    ID              reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    READLN          reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    WRITE           reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    WRITELN         reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    USES            reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    IF              reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    CASE            reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    WHILE           reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    BEGIN           reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    FOR             reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    WITH            reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    REPEAT          reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    END             reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    CONSTRUCTOR     reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    DESTRUCTOR      reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    SEMICOLON       reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    ELSE            reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)


state 366

    (55) field -> id_list LPAREN STRING_LITERAL RPAREN .

    RPAREN          reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    VAR             reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    ID              reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    READLN          reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    WRITE           reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    WRITELN         reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    USES            reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    IF              reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    CASE            reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    WHILE           reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    BEGIN           reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    FOR             reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    WITH            reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    REPEAT          reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    END             reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    CONSTRUCTOR     reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    PROCEDURE       reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    FUNCTION        reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    DESTRUCTOR      reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    SEMICOLON       reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    ELSE            reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)


state 367

    (53) field -> VAR id_list COLON type_specifier .
    (54) field -> VAR id_list COLON type_specifier . SEMICOLON

  ! shift/reduce conflict for SEMICOLON resolved as shift
    RPAREN          reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    VAR             reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    ID              reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    READLN          reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    WRITE           reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    WRITELN         reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    USES            reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    IF              reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    CASE            reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    WHILE           reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    BEGIN           reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    FOR             reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    WITH            reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    REPEAT          reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    END             reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    CONSTRUCTOR     reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    PROCEDURE       reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    FUNCTION        reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    DESTRUCTOR      reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    ELSE            reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    SEMICOLON       shift and go to state 394

  ! SEMICOLON       [ reduce using rule 53 (field -> VAR id_list COLON type_specifier .) ]


state 368

    (12) method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN . SEMICOLON block

    SEMICOLON       shift and go to state 395


state 369

    (13) method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN . SEMICOLON block

    SEMICOLON       shift and go to state 396


state 370

    (81) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 397


state 371

    (82) procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .

    PROCEDURE       reduce using rule 82 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    USES            reduce using rule 82 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    CONST           reduce using rule 82 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    TYPE            reduce using rule 82 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    VAR             reduce using rule 82 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 82 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    CONSTRUCTOR     reduce using rule 82 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    DESTRUCTOR      reduce using rule 82 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    BEGIN           reduce using rule 82 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)


state 372

    (134) expression_list_tail -> COMMA expression expression_list_tail .

    RPAREN          reduce using rule 134 (expression_list_tail -> COMMA expression expression_list_tail .)


state 373

    (179) write_argument -> expression COLON expression COLON . expression
    (137) expression -> . simple_expression relop simple_expression
    (138) expression -> . simple_expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression TIMES expression
    (153) expression -> . expression DIVIDE expression
    (154) expression -> . expression MOD expression
    (189) expression -> . expression AND expression
    (190) expression -> . expression OR expression
    (191) expression -> . NOT expression
    (139) simple_expression -> . term simple_expression_tail
    (144) term -> . factor term_tail
    (88) factor -> . function_call
    (155) factor -> . LPAREN expression RPAREN
    (156) factor -> . variable
    (157) factor -> . NUMBER
    (158) factor -> . STRING_LITERAL
    (87) function_call -> . ID LPAREN expression_list RPAREN
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 110
    LPAREN          shift and go to state 114
    NUMBER          shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    ID              shift and go to state 118

    expression                     shift and go to state 398
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    function_call                  shift and go to state 113
    variable                       shift and go to state 115

state 374

    (111) if_statement -> IF expression THEN statement ELSE statement .

    END             reduce using rule 111 (if_statement -> IF expression THEN statement ELSE statement .)
    READLN          reduce using rule 111 (if_statement -> IF expression THEN statement ELSE statement .)
    WRITE           reduce using rule 111 (if_statement -> IF expression THEN statement ELSE statement .)
    WRITELN         reduce using rule 111 (if_statement -> IF expression THEN statement ELSE statement .)
    USES            reduce using rule 111 (if_statement -> IF expression THEN statement ELSE statement .)
    IF              reduce using rule 111 (if_statement -> IF expression THEN statement ELSE statement .)
    ID              reduce using rule 111 (if_statement -> IF expression THEN statement ELSE statement .)
    WHILE           reduce using rule 111 (if_statement -> IF expression THEN statement ELSE statement .)
    BEGIN           reduce using rule 111 (if_statement -> IF expression THEN statement ELSE statement .)
    FOR             reduce using rule 111 (if_statement -> IF expression THEN statement ELSE statement .)
    CASE            reduce using rule 111 (if_statement -> IF expression THEN statement ELSE statement .)
    WITH            reduce using rule 111 (if_statement -> IF expression THEN statement ELSE statement .)
    REPEAT          reduce using rule 111 (if_statement -> IF expression THEN statement ELSE statement .)
    SEMICOLON       reduce using rule 111 (if_statement -> IF expression THEN statement ELSE statement .)
    UNTIL           reduce using rule 111 (if_statement -> IF expression THEN statement ELSE statement .)
    RPAREN          reduce using rule 111 (if_statement -> IF expression THEN statement ELSE statement .)
    VAR             reduce using rule 111 (if_statement -> IF expression THEN statement ELSE statement .)
    CONSTRUCTOR     reduce using rule 111 (if_statement -> IF expression THEN statement ELSE statement .)
    PROCEDURE       reduce using rule 111 (if_statement -> IF expression THEN statement ELSE statement .)
    FUNCTION        reduce using rule 111 (if_statement -> IF expression THEN statement ELSE statement .)
    DESTRUCTOR      reduce using rule 111 (if_statement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 111 (if_statement -> IF expression THEN statement ELSE statement .)
    THEN            reduce using rule 111 (if_statement -> IF expression THEN statement ELSE statement .)


state 375

    (113) if_statement -> IF expression IN statement THEN statement . ELSE statement
    (114) if_statement -> IF expression IN statement THEN statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 399
    END             reduce using rule 114 (if_statement -> IF expression IN statement THEN statement .)
    READLN          reduce using rule 114 (if_statement -> IF expression IN statement THEN statement .)
    WRITE           reduce using rule 114 (if_statement -> IF expression IN statement THEN statement .)
    WRITELN         reduce using rule 114 (if_statement -> IF expression IN statement THEN statement .)
    USES            reduce using rule 114 (if_statement -> IF expression IN statement THEN statement .)
    IF              reduce using rule 114 (if_statement -> IF expression IN statement THEN statement .)
    ID              reduce using rule 114 (if_statement -> IF expression IN statement THEN statement .)
    WHILE           reduce using rule 114 (if_statement -> IF expression IN statement THEN statement .)
    BEGIN           reduce using rule 114 (if_statement -> IF expression IN statement THEN statement .)
    FOR             reduce using rule 114 (if_statement -> IF expression IN statement THEN statement .)
    CASE            reduce using rule 114 (if_statement -> IF expression IN statement THEN statement .)
    WITH            reduce using rule 114 (if_statement -> IF expression IN statement THEN statement .)
    REPEAT          reduce using rule 114 (if_statement -> IF expression IN statement THEN statement .)
    SEMICOLON       reduce using rule 114 (if_statement -> IF expression IN statement THEN statement .)
    UNTIL           reduce using rule 114 (if_statement -> IF expression IN statement THEN statement .)
    RPAREN          reduce using rule 114 (if_statement -> IF expression IN statement THEN statement .)
    VAR             reduce using rule 114 (if_statement -> IF expression IN statement THEN statement .)
    CONSTRUCTOR     reduce using rule 114 (if_statement -> IF expression IN statement THEN statement .)
    PROCEDURE       reduce using rule 114 (if_statement -> IF expression IN statement THEN statement .)
    FUNCTION        reduce using rule 114 (if_statement -> IF expression IN statement THEN statement .)
    DESTRUCTOR      reduce using rule 114 (if_statement -> IF expression IN statement THEN statement .)
    THEN            reduce using rule 114 (if_statement -> IF expression IN statement THEN statement .)

  ! ELSE            [ reduce using rule 114 (if_statement -> IF expression IN statement THEN statement .) ]


state 376

    (115) for_statement -> FOR ID COLON_EQUAL expression TO expression . DO block
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression

    DO              shift and go to state 400
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201


state 377

    (116) for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression . DO block
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression

    DO              shift and go to state 401
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201


state 378

    (75) case_statement -> CASE expression OF case_list_opt_semicolon END SEMICOLON .

    END             reduce using rule 75 (case_statement -> CASE expression OF case_list_opt_semicolon END SEMICOLON .)
    READLN          reduce using rule 75 (case_statement -> CASE expression OF case_list_opt_semicolon END SEMICOLON .)
    WRITE           reduce using rule 75 (case_statement -> CASE expression OF case_list_opt_semicolon END SEMICOLON .)
    WRITELN         reduce using rule 75 (case_statement -> CASE expression OF case_list_opt_semicolon END SEMICOLON .)
    USES            reduce using rule 75 (case_statement -> CASE expression OF case_list_opt_semicolon END SEMICOLON .)
    IF              reduce using rule 75 (case_statement -> CASE expression OF case_list_opt_semicolon END SEMICOLON .)
    ID              reduce using rule 75 (case_statement -> CASE expression OF case_list_opt_semicolon END SEMICOLON .)
    WHILE           reduce using rule 75 (case_statement -> CASE expression OF case_list_opt_semicolon END SEMICOLON .)
    BEGIN           reduce using rule 75 (case_statement -> CASE expression OF case_list_opt_semicolon END SEMICOLON .)
    FOR             reduce using rule 75 (case_statement -> CASE expression OF case_list_opt_semicolon END SEMICOLON .)
    CASE            reduce using rule 75 (case_statement -> CASE expression OF case_list_opt_semicolon END SEMICOLON .)
    WITH            reduce using rule 75 (case_statement -> CASE expression OF case_list_opt_semicolon END SEMICOLON .)
    REPEAT          reduce using rule 75 (case_statement -> CASE expression OF case_list_opt_semicolon END SEMICOLON .)
    SEMICOLON       reduce using rule 75 (case_statement -> CASE expression OF case_list_opt_semicolon END SEMICOLON .)
    UNTIL           reduce using rule 75 (case_statement -> CASE expression OF case_list_opt_semicolon END SEMICOLON .)
    RPAREN          reduce using rule 75 (case_statement -> CASE expression OF case_list_opt_semicolon END SEMICOLON .)
    VAR             reduce using rule 75 (case_statement -> CASE expression OF case_list_opt_semicolon END SEMICOLON .)
    CONSTRUCTOR     reduce using rule 75 (case_statement -> CASE expression OF case_list_opt_semicolon END SEMICOLON .)
    PROCEDURE       reduce using rule 75 (case_statement -> CASE expression OF case_list_opt_semicolon END SEMICOLON .)
    FUNCTION        reduce using rule 75 (case_statement -> CASE expression OF case_list_opt_semicolon END SEMICOLON .)
    DESTRUCTOR      reduce using rule 75 (case_statement -> CASE expression OF case_list_opt_semicolon END SEMICOLON .)
    ELSE            reduce using rule 75 (case_statement -> CASE expression OF case_list_opt_semicolon END SEMICOLON .)
    THEN            reduce using rule 75 (case_statement -> CASE expression OF case_list_opt_semicolon END SEMICOLON .)


state 379

    (76) case_statement -> CASE expression OF case_list_opt_semicolon ELSE statement_list . END SEMICOLON
    (97) statement_list -> statement_list . statement SEMICOLON
    (98) statement_list -> statement_list . statement
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (165) empty -> .
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for READLN resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
    END             shift and go to state 402
    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    IF              shift and go to state 67
    ID              shift and go to state 66
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    CASE            shift and go to state 70
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72
    SEMICOLON       reduce using rule 165 (empty -> .)

  ! END             [ reduce using rule 165 (empty -> .) ]
  ! READLN          [ reduce using rule 165 (empty -> .) ]
  ! WRITE           [ reduce using rule 165 (empty -> .) ]
  ! WRITELN         [ reduce using rule 165 (empty -> .) ]
  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! IF              [ reduce using rule 165 (empty -> .) ]
  ! ID              [ reduce using rule 165 (empty -> .) ]
  ! WHILE           [ reduce using rule 165 (empty -> .) ]
  ! BEGIN           [ reduce using rule 165 (empty -> .) ]
  ! FOR             [ reduce using rule 165 (empty -> .) ]
  ! CASE            [ reduce using rule 165 (empty -> .) ]
  ! WITH            [ reduce using rule 165 (empty -> .) ]
  ! REPEAT          [ reduce using rule 165 (empty -> .) ]

    statement                      shift and go to state 90
    if_statement                   shift and go to state 52
    assignment_statement           shift and go to state 53
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    case_statement                 shift and go to state 58
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    empty                          shift and go to state 91
    variable                       shift and go to state 62

state 380

    (62) case_list -> case_list SEMICOLON case_element .

    SEMICOLON       reduce using rule 62 (case_list -> case_list SEMICOLON case_element .)
    END             reduce using rule 62 (case_list -> case_list SEMICOLON case_element .)
    ELSE            reduce using rule 62 (case_list -> case_list SEMICOLON case_element .)


state 381

    (66) case_element -> NUMBER COLON LPAREN . field_list RPAREN
    (48) field_list -> . field_list field
    (49) field_list -> . field
    (50) field_list -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . statement
    (57) field -> . if_statement
    (58) field -> . case_statement
    (59) field -> . assignment_statement
    (165) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READLN resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
    VAR             shift and go to state 159
    RPAREN          reduce using rule 165 (empty -> .)
    ID              shift and go to state 153
    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    IF              shift and go to state 67
    CASE            shift and go to state 70
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72

  ! VAR             [ reduce using rule 165 (empty -> .) ]
  ! ID              [ reduce using rule 165 (empty -> .) ]
  ! READLN          [ reduce using rule 165 (empty -> .) ]
  ! WRITE           [ reduce using rule 165 (empty -> .) ]
  ! WRITELN         [ reduce using rule 165 (empty -> .) ]
  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! IF              [ reduce using rule 165 (empty -> .) ]
  ! CASE            [ reduce using rule 165 (empty -> .) ]
  ! WHILE           [ reduce using rule 165 (empty -> .) ]
  ! BEGIN           [ reduce using rule 165 (empty -> .) ]
  ! FOR             [ reduce using rule 165 (empty -> .) ]
  ! WITH            [ reduce using rule 165 (empty -> .) ]
  ! REPEAT          [ reduce using rule 165 (empty -> .) ]

    field_list                     shift and go to state 403
    field                          shift and go to state 156
    empty                          shift and go to state 157
    id_list                        shift and go to state 158
    statement                      shift and go to state 160
    if_statement                   shift and go to state 161
    case_statement                 shift and go to state 162
    assignment_statement           shift and go to state 163
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    variable                       shift and go to state 62

state 382

    (67) case_element -> NUMBER COLON field_list .
    (48) field_list -> field_list . field
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . statement
    (57) field -> . if_statement
    (58) field -> . case_statement
    (59) field -> . assignment_statement
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (165) empty -> .
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READLN resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! reduce/reduce conflict for SEMICOLON resolved using rule 67 (case_element -> NUMBER COLON field_list .)
  ! reduce/reduce conflict for END resolved using rule 67 (case_element -> NUMBER COLON field_list .)
  ! reduce/reduce conflict for ELSE resolved using rule 67 (case_element -> NUMBER COLON field_list .)
    SEMICOLON       reduce using rule 67 (case_element -> NUMBER COLON field_list .)
    END             reduce using rule 67 (case_element -> NUMBER COLON field_list .)
    ELSE            reduce using rule 67 (case_element -> NUMBER COLON field_list .)
    VAR             shift and go to state 159
    ID              shift and go to state 153
    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    IF              shift and go to state 67
    CASE            shift and go to state 70
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72

  ! VAR             [ reduce using rule 165 (empty -> .) ]
  ! ID              [ reduce using rule 165 (empty -> .) ]
  ! READLN          [ reduce using rule 165 (empty -> .) ]
  ! WRITE           [ reduce using rule 165 (empty -> .) ]
  ! WRITELN         [ reduce using rule 165 (empty -> .) ]
  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! IF              [ reduce using rule 165 (empty -> .) ]
  ! CASE            [ reduce using rule 165 (empty -> .) ]
  ! WHILE           [ reduce using rule 165 (empty -> .) ]
  ! BEGIN           [ reduce using rule 165 (empty -> .) ]
  ! FOR             [ reduce using rule 165 (empty -> .) ]
  ! WITH            [ reduce using rule 165 (empty -> .) ]
  ! REPEAT          [ reduce using rule 165 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 165 (empty -> .) ]
  ! END             [ reduce using rule 165 (empty -> .) ]
  ! ELSE            [ reduce using rule 165 (empty -> .) ]

    field                          shift and go to state 248
    id_list                        shift and go to state 158
    statement                      shift and go to state 160
    if_statement                   shift and go to state 161
    case_statement                 shift and go to state 162
    assignment_statement           shift and go to state 163
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    empty                          shift and go to state 91
    variable                       shift and go to state 62

state 383

    (30) type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF . type_specifier
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (78) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 132
    FILE            shift and go to state 134
    SET             shift and go to state 135
    RECORD          shift and go to state 136
    OBJECT          shift and go to state 137
    LPAREN          shift and go to state 138
    BOOLEAN_LITERAL shift and go to state 139
    INTEGER         shift and go to state 140
    BYTE            shift and go to state 141
    CHAR            shift and go to state 142
    STRING          shift and go to state 143
    ID              shift and go to state 130
    LONGINT         shift and go to state 145
    NUMBER          shift and go to state 144

    type_specifier                 shift and go to state 404
    subrange                       shift and go to state 133

state 384

    (44) type_expression -> type_expression COMMA subrange .

    RBRACKET        reduce using rule 44 (type_expression -> type_expression COMMA subrange .)
    COMMA           reduce using rule 44 (type_expression -> type_expression COMMA subrange .)


state 385

    (60) case_part -> CASE ID COLON . type_specifier OF case_list SEMICOLON
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (78) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 132
    FILE            shift and go to state 134
    SET             shift and go to state 135
    RECORD          shift and go to state 136
    OBJECT          shift and go to state 137
    LPAREN          shift and go to state 138
    BOOLEAN_LITERAL shift and go to state 139
    INTEGER         shift and go to state 140
    BYTE            shift and go to state 141
    CHAR            shift and go to state 142
    STRING          shift and go to state 143
    ID              shift and go to state 130
    LONGINT         shift and go to state 145
    NUMBER          shift and go to state 144

    type_specifier                 shift and go to state 405
    subrange                       shift and go to state 133

state 386

    (71) method -> CONSTRUCTOR ID LPAREN . field_list RPAREN SEMICOLON
    (48) field_list -> . field_list field
    (49) field_list -> . field
    (50) field_list -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . statement
    (57) field -> . if_statement
    (58) field -> . case_statement
    (59) field -> . assignment_statement
    (165) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READLN resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
    VAR             shift and go to state 159
    RPAREN          reduce using rule 165 (empty -> .)
    ID              shift and go to state 153
    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    IF              shift and go to state 67
    CASE            shift and go to state 70
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72

  ! VAR             [ reduce using rule 165 (empty -> .) ]
  ! ID              [ reduce using rule 165 (empty -> .) ]
  ! READLN          [ reduce using rule 165 (empty -> .) ]
  ! WRITE           [ reduce using rule 165 (empty -> .) ]
  ! WRITELN         [ reduce using rule 165 (empty -> .) ]
  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! IF              [ reduce using rule 165 (empty -> .) ]
  ! CASE            [ reduce using rule 165 (empty -> .) ]
  ! WHILE           [ reduce using rule 165 (empty -> .) ]
  ! BEGIN           [ reduce using rule 165 (empty -> .) ]
  ! FOR             [ reduce using rule 165 (empty -> .) ]
  ! WITH            [ reduce using rule 165 (empty -> .) ]
  ! REPEAT          [ reduce using rule 165 (empty -> .) ]

    field_list                     shift and go to state 406
    field                          shift and go to state 156
    empty                          shift and go to state 157
    id_list                        shift and go to state 158
    statement                      shift and go to state 160
    if_statement                   shift and go to state 161
    case_statement                 shift and go to state 162
    assignment_statement           shift and go to state 163
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    variable                       shift and go to state 62

state 387

    (72) method -> PROCEDURE ID LPAREN . field_list RPAREN SEMICOLON
    (48) field_list -> . field_list field
    (49) field_list -> . field
    (50) field_list -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . statement
    (57) field -> . if_statement
    (58) field -> . case_statement
    (59) field -> . assignment_statement
    (165) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READLN resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
    VAR             shift and go to state 159
    RPAREN          reduce using rule 165 (empty -> .)
    ID              shift and go to state 153
    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    IF              shift and go to state 67
    CASE            shift and go to state 70
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72

  ! VAR             [ reduce using rule 165 (empty -> .) ]
  ! ID              [ reduce using rule 165 (empty -> .) ]
  ! READLN          [ reduce using rule 165 (empty -> .) ]
  ! WRITE           [ reduce using rule 165 (empty -> .) ]
  ! WRITELN         [ reduce using rule 165 (empty -> .) ]
  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! IF              [ reduce using rule 165 (empty -> .) ]
  ! CASE            [ reduce using rule 165 (empty -> .) ]
  ! WHILE           [ reduce using rule 165 (empty -> .) ]
  ! BEGIN           [ reduce using rule 165 (empty -> .) ]
  ! FOR             [ reduce using rule 165 (empty -> .) ]
  ! WITH            [ reduce using rule 165 (empty -> .) ]
  ! REPEAT          [ reduce using rule 165 (empty -> .) ]

    field_list                     shift and go to state 407
    field                          shift and go to state 156
    empty                          shift and go to state 157
    id_list                        shift and go to state 158
    statement                      shift and go to state 160
    if_statement                   shift and go to state 161
    case_statement                 shift and go to state 162
    assignment_statement           shift and go to state 163
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    variable                       shift and go to state 62

state 388

    (73) method -> FUNCTION ID LPAREN . field_list RPAREN COLON type_specifier SEMICOLON
    (48) field_list -> . field_list field
    (49) field_list -> . field
    (50) field_list -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . statement
    (57) field -> . if_statement
    (58) field -> . case_statement
    (59) field -> . assignment_statement
    (165) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READLN resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
    VAR             shift and go to state 159
    RPAREN          reduce using rule 165 (empty -> .)
    ID              shift and go to state 153
    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    IF              shift and go to state 67
    CASE            shift and go to state 70
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72

  ! VAR             [ reduce using rule 165 (empty -> .) ]
  ! ID              [ reduce using rule 165 (empty -> .) ]
  ! READLN          [ reduce using rule 165 (empty -> .) ]
  ! WRITE           [ reduce using rule 165 (empty -> .) ]
  ! WRITELN         [ reduce using rule 165 (empty -> .) ]
  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! IF              [ reduce using rule 165 (empty -> .) ]
  ! CASE            [ reduce using rule 165 (empty -> .) ]
  ! WHILE           [ reduce using rule 165 (empty -> .) ]
  ! BEGIN           [ reduce using rule 165 (empty -> .) ]
  ! FOR             [ reduce using rule 165 (empty -> .) ]
  ! WITH            [ reduce using rule 165 (empty -> .) ]
  ! REPEAT          [ reduce using rule 165 (empty -> .) ]

    field_list                     shift and go to state 408
    field                          shift and go to state 156
    empty                          shift and go to state 157
    id_list                        shift and go to state 158
    statement                      shift and go to state 160
    if_statement                   shift and go to state 161
    case_statement                 shift and go to state 162
    assignment_statement           shift and go to state 163
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    variable                       shift and go to state 62

state 389

    (74) method -> DESTRUCTOR ID SEMICOLON .

    END             reduce using rule 74 (method -> DESTRUCTOR ID SEMICOLON .)
    CONSTRUCTOR     reduce using rule 74 (method -> DESTRUCTOR ID SEMICOLON .)
    PROCEDURE       reduce using rule 74 (method -> DESTRUCTOR ID SEMICOLON .)
    FUNCTION        reduce using rule 74 (method -> DESTRUCTOR ID SEMICOLON .)
    DESTRUCTOR      reduce using rule 74 (method -> DESTRUCTOR ID SEMICOLON .)


state 390

    (83) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON . block SEMICOLON
    (84) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON . FORWARD SEMICOLON
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (165) empty -> .

    FORWARD         shift and go to state 410
    BEGIN           reduce using rule 165 (empty -> .)
    USES            reduce using rule 165 (empty -> .)
    CONST           reduce using rule 165 (empty -> .)
    TYPE            reduce using rule 165 (empty -> .)
    VAR             reduce using rule 165 (empty -> .)
    FUNCTION        reduce using rule 165 (empty -> .)
    CONSTRUCTOR     reduce using rule 165 (empty -> .)
    PROCEDURE       reduce using rule 165 (empty -> .)
    DESTRUCTOR      reduce using rule 165 (empty -> .)

    block                          shift and go to state 409
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 391

    (85) function_declaration -> FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 411


state 392

    (86) function_declaration -> FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON FORWARD . SEMICOLON

    SEMICOLON       shift and go to state 412


state 393

    (14) method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON . type_specifier SEMICOLON block
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (78) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 132
    FILE            shift and go to state 134
    SET             shift and go to state 135
    RECORD          shift and go to state 136
    OBJECT          shift and go to state 137
    LPAREN          shift and go to state 138
    BOOLEAN_LITERAL shift and go to state 139
    INTEGER         shift and go to state 140
    BYTE            shift and go to state 141
    CHAR            shift and go to state 142
    STRING          shift and go to state 143
    ID              shift and go to state 130
    LONGINT         shift and go to state 145
    NUMBER          shift and go to state 144

    type_specifier                 shift and go to state 413
    subrange                       shift and go to state 133

state 394

    (54) field -> VAR id_list COLON type_specifier SEMICOLON .

    RPAREN          reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    VAR             reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    ID              reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    READLN          reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    WRITE           reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    WRITELN         reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    USES            reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    IF              reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    CASE            reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    WHILE           reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    BEGIN           reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    FOR             reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    WITH            reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    REPEAT          reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    END             reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    CONSTRUCTOR     reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    DESTRUCTOR      reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    SEMICOLON       reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    ELSE            reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)


state 395

    (12) method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON . block
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (165) empty -> .

    BEGIN           reduce using rule 165 (empty -> .)
    USES            reduce using rule 165 (empty -> .)
    CONST           reduce using rule 165 (empty -> .)
    TYPE            reduce using rule 165 (empty -> .)
    VAR             reduce using rule 165 (empty -> .)
    FUNCTION        reduce using rule 165 (empty -> .)
    CONSTRUCTOR     reduce using rule 165 (empty -> .)
    PROCEDURE       reduce using rule 165 (empty -> .)
    DESTRUCTOR      reduce using rule 165 (empty -> .)

    block                          shift and go to state 414
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 396

    (13) method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON . block
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (165) empty -> .

    BEGIN           reduce using rule 165 (empty -> .)
    USES            reduce using rule 165 (empty -> .)
    CONST           reduce using rule 165 (empty -> .)
    TYPE            reduce using rule 165 (empty -> .)
    VAR             reduce using rule 165 (empty -> .)
    FUNCTION        reduce using rule 165 (empty -> .)
    CONSTRUCTOR     reduce using rule 165 (empty -> .)
    PROCEDURE       reduce using rule 165 (empty -> .)
    DESTRUCTOR      reduce using rule 165 (empty -> .)

    block                          shift and go to state 415
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 397

    (81) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .

    PROCEDURE       reduce using rule 81 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    USES            reduce using rule 81 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    CONST           reduce using rule 81 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    TYPE            reduce using rule 81 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    VAR             reduce using rule 81 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 81 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    CONSTRUCTOR     reduce using rule 81 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    DESTRUCTOR      reduce using rule 81 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    BEGIN           reduce using rule 81 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)


state 398

    (179) write_argument -> expression COLON expression COLON expression .
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . TIMES expression
    (153) expression -> expression . DIVIDE expression
    (154) expression -> expression . MOD expression
    (189) expression -> expression . AND expression
    (190) expression -> expression . OR expression

    RPAREN          reduce using rule 179 (write_argument -> expression COLON expression COLON expression .)
    COMMA           reduce using rule 179 (write_argument -> expression COLON expression COLON expression .)
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 199
    AND             shift and go to state 200
    OR              shift and go to state 201


state 399

    (113) if_statement -> IF expression IN statement THEN statement ELSE . statement
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (165) empty -> .
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for READLN resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    IF              shift and go to state 67
    ID              shift and go to state 66
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    CASE            shift and go to state 70
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72
    ELSE            reduce using rule 165 (empty -> .)
    END             reduce using rule 165 (empty -> .)
    SEMICOLON       reduce using rule 165 (empty -> .)
    UNTIL           reduce using rule 165 (empty -> .)
    RPAREN          reduce using rule 165 (empty -> .)
    VAR             reduce using rule 165 (empty -> .)
    CONSTRUCTOR     reduce using rule 165 (empty -> .)
    PROCEDURE       reduce using rule 165 (empty -> .)
    FUNCTION        reduce using rule 165 (empty -> .)
    DESTRUCTOR      reduce using rule 165 (empty -> .)
    THEN            reduce using rule 165 (empty -> .)

  ! READLN          [ reduce using rule 165 (empty -> .) ]
  ! WRITE           [ reduce using rule 165 (empty -> .) ]
  ! WRITELN         [ reduce using rule 165 (empty -> .) ]
  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! IF              [ reduce using rule 165 (empty -> .) ]
  ! ID              [ reduce using rule 165 (empty -> .) ]
  ! WHILE           [ reduce using rule 165 (empty -> .) ]
  ! BEGIN           [ reduce using rule 165 (empty -> .) ]
  ! FOR             [ reduce using rule 165 (empty -> .) ]
  ! CASE            [ reduce using rule 165 (empty -> .) ]
  ! WITH            [ reduce using rule 165 (empty -> .) ]
  ! REPEAT          [ reduce using rule 165 (empty -> .) ]

    statement                      shift and go to state 416
    if_statement                   shift and go to state 52
    assignment_statement           shift and go to state 53
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    case_statement                 shift and go to state 58
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    empty                          shift and go to state 91
    variable                       shift and go to state 62

state 400

    (115) for_statement -> FOR ID COLON_EQUAL expression TO expression DO . block
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (165) empty -> .

    BEGIN           reduce using rule 165 (empty -> .)
    USES            reduce using rule 165 (empty -> .)
    CONST           reduce using rule 165 (empty -> .)
    TYPE            reduce using rule 165 (empty -> .)
    VAR             reduce using rule 165 (empty -> .)
    FUNCTION        reduce using rule 165 (empty -> .)
    CONSTRUCTOR     reduce using rule 165 (empty -> .)
    PROCEDURE       reduce using rule 165 (empty -> .)
    DESTRUCTOR      reduce using rule 165 (empty -> .)

    block                          shift and go to state 417
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 401

    (116) for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO . block
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (165) empty -> .

    BEGIN           reduce using rule 165 (empty -> .)
    USES            reduce using rule 165 (empty -> .)
    CONST           reduce using rule 165 (empty -> .)
    TYPE            reduce using rule 165 (empty -> .)
    VAR             reduce using rule 165 (empty -> .)
    FUNCTION        reduce using rule 165 (empty -> .)
    CONSTRUCTOR     reduce using rule 165 (empty -> .)
    PROCEDURE       reduce using rule 165 (empty -> .)
    DESTRUCTOR      reduce using rule 165 (empty -> .)

    block                          shift and go to state 418
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 402

    (76) case_statement -> CASE expression OF case_list_opt_semicolon ELSE statement_list END . SEMICOLON

    SEMICOLON       shift and go to state 419


state 403

    (66) case_element -> NUMBER COLON LPAREN field_list . RPAREN
    (48) field_list -> field_list . field
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . statement
    (57) field -> . if_statement
    (58) field -> . case_statement
    (59) field -> . assignment_statement
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (165) empty -> .
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READLN resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
    RPAREN          shift and go to state 420
    VAR             shift and go to state 159
    ID              shift and go to state 153
    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    IF              shift and go to state 67
    CASE            shift and go to state 70
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72

  ! RPAREN          [ reduce using rule 165 (empty -> .) ]
  ! VAR             [ reduce using rule 165 (empty -> .) ]
  ! ID              [ reduce using rule 165 (empty -> .) ]
  ! READLN          [ reduce using rule 165 (empty -> .) ]
  ! WRITE           [ reduce using rule 165 (empty -> .) ]
  ! WRITELN         [ reduce using rule 165 (empty -> .) ]
  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! IF              [ reduce using rule 165 (empty -> .) ]
  ! CASE            [ reduce using rule 165 (empty -> .) ]
  ! WHILE           [ reduce using rule 165 (empty -> .) ]
  ! BEGIN           [ reduce using rule 165 (empty -> .) ]
  ! FOR             [ reduce using rule 165 (empty -> .) ]
  ! WITH            [ reduce using rule 165 (empty -> .) ]
  ! REPEAT          [ reduce using rule 165 (empty -> .) ]

    field                          shift and go to state 248
    id_list                        shift and go to state 158
    statement                      shift and go to state 160
    if_statement                   shift and go to state 161
    case_statement                 shift and go to state 162
    assignment_statement           shift and go to state 163
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    empty                          shift and go to state 91
    variable                       shift and go to state 62

state 404

    (30) type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .

    SEMICOLON       reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    RPAREN          reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    VAR             reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    ID              reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    READLN          reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    WRITE           reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    WRITELN         reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    USES            reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    IF              reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    CASE            reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    WHILE           reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    BEGIN           reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    FOR             reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    WITH            reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    REPEAT          reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    END             reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    CONSTRUCTOR     reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    PROCEDURE       reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    FUNCTION        reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    DESTRUCTOR      reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    ELSE            reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    OF              reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)


state 405

    (60) case_part -> CASE ID COLON type_specifier . OF case_list SEMICOLON

    OF              shift and go to state 421


state 406

    (71) method -> CONSTRUCTOR ID LPAREN field_list . RPAREN SEMICOLON
    (48) field_list -> field_list . field
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . statement
    (57) field -> . if_statement
    (58) field -> . case_statement
    (59) field -> . assignment_statement
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (165) empty -> .
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READLN resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
    RPAREN          shift and go to state 422
    VAR             shift and go to state 159
    ID              shift and go to state 153
    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    IF              shift and go to state 67
    CASE            shift and go to state 70
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72

  ! RPAREN          [ reduce using rule 165 (empty -> .) ]
  ! VAR             [ reduce using rule 165 (empty -> .) ]
  ! ID              [ reduce using rule 165 (empty -> .) ]
  ! READLN          [ reduce using rule 165 (empty -> .) ]
  ! WRITE           [ reduce using rule 165 (empty -> .) ]
  ! WRITELN         [ reduce using rule 165 (empty -> .) ]
  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! IF              [ reduce using rule 165 (empty -> .) ]
  ! CASE            [ reduce using rule 165 (empty -> .) ]
  ! WHILE           [ reduce using rule 165 (empty -> .) ]
  ! BEGIN           [ reduce using rule 165 (empty -> .) ]
  ! FOR             [ reduce using rule 165 (empty -> .) ]
  ! WITH            [ reduce using rule 165 (empty -> .) ]
  ! REPEAT          [ reduce using rule 165 (empty -> .) ]

    field                          shift and go to state 248
    id_list                        shift and go to state 158
    statement                      shift and go to state 160
    if_statement                   shift and go to state 161
    case_statement                 shift and go to state 162
    assignment_statement           shift and go to state 163
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    empty                          shift and go to state 91
    variable                       shift and go to state 62

state 407

    (72) method -> PROCEDURE ID LPAREN field_list . RPAREN SEMICOLON
    (48) field_list -> field_list . field
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . statement
    (57) field -> . if_statement
    (58) field -> . case_statement
    (59) field -> . assignment_statement
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (165) empty -> .
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READLN resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
    RPAREN          shift and go to state 423
    VAR             shift and go to state 159
    ID              shift and go to state 153
    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    IF              shift and go to state 67
    CASE            shift and go to state 70
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72

  ! RPAREN          [ reduce using rule 165 (empty -> .) ]
  ! VAR             [ reduce using rule 165 (empty -> .) ]
  ! ID              [ reduce using rule 165 (empty -> .) ]
  ! READLN          [ reduce using rule 165 (empty -> .) ]
  ! WRITE           [ reduce using rule 165 (empty -> .) ]
  ! WRITELN         [ reduce using rule 165 (empty -> .) ]
  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! IF              [ reduce using rule 165 (empty -> .) ]
  ! CASE            [ reduce using rule 165 (empty -> .) ]
  ! WHILE           [ reduce using rule 165 (empty -> .) ]
  ! BEGIN           [ reduce using rule 165 (empty -> .) ]
  ! FOR             [ reduce using rule 165 (empty -> .) ]
  ! WITH            [ reduce using rule 165 (empty -> .) ]
  ! REPEAT          [ reduce using rule 165 (empty -> .) ]

    field                          shift and go to state 248
    id_list                        shift and go to state 158
    statement                      shift and go to state 160
    if_statement                   shift and go to state 161
    case_statement                 shift and go to state 162
    assignment_statement           shift and go to state 163
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    empty                          shift and go to state 91
    variable                       shift and go to state 62

state 408

    (73) method -> FUNCTION ID LPAREN field_list . RPAREN COLON type_specifier SEMICOLON
    (48) field_list -> field_list . field
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . statement
    (57) field -> . if_statement
    (58) field -> . case_statement
    (59) field -> . assignment_statement
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (100) statement -> . if_statement
    (101) statement -> . assignment_statement
    (102) statement -> . while_statement
    (103) statement -> . procedure_call
    (104) statement -> . compound_statement
    (105) statement -> . for_statement
    (106) statement -> . case_statement
    (107) statement -> . with_statement
    (108) statement -> . repeat_statement
    (109) statement -> . empty
    (166) statement -> . READLN
    (167) statement -> . READLN LPAREN variable RPAREN
    (168) statement -> . READLN LBRACKET variable RBRACKET
    (169) statement -> . READLN LPAREN variable_list RPAREN
    (172) statement -> . WRITE LPAREN expression_list RPAREN
    (173) statement -> . WRITELN LPAREN write_arguments RPAREN
    (174) statement -> . WRITELN LPAREN expression RPAREN
    (180) statement -> . USES ID SEMICOLON
    (111) if_statement -> . IF expression THEN statement ELSE statement
    (112) if_statement -> . IF expression THEN statement
    (113) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (114) if_statement -> . IF expression IN statement THEN statement
    (75) case_statement -> . CASE expression OF case_list_opt_semicolon END SEMICOLON
    (76) case_statement -> . CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON
    (77) case_statement -> . CASE expression OF case_list_opt_semicolon END
    (117) assignment_statement -> . variable COLON_EQUAL expression
    (118) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (119) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (120) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (121) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (122) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (123) assignment_statement -> . ID COLON_EQUAL expression
    (130) while_statement -> . WHILE expression DO statement
    (131) procedure_call -> . ID LPAREN expression_list RPAREN
    (132) procedure_call -> . ID
    (93) compound_statement -> . BEGIN statement_list END
    (94) compound_statement -> . BEGIN local_var_declarations statement_list END
    (115) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (116) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (110) with_statement -> . WITH variable DO statement
    (182) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (165) empty -> .
    (124) variable -> . ID
    (125) variable -> . variable LBRACKET expression RBRACKET
    (126) variable -> . variable DOT ID
    (127) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READLN resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
    RPAREN          shift and go to state 424
    VAR             shift and go to state 159
    ID              shift and go to state 153
    READLN          shift and go to state 61
    WRITE           shift and go to state 63
    WRITELN         shift and go to state 64
    USES            shift and go to state 65
    IF              shift and go to state 67
    CASE            shift and go to state 70
    WHILE           shift and go to state 68
    BEGIN           shift and go to state 28
    FOR             shift and go to state 69
    WITH            shift and go to state 71
    REPEAT          shift and go to state 72

  ! RPAREN          [ reduce using rule 165 (empty -> .) ]
  ! VAR             [ reduce using rule 165 (empty -> .) ]
  ! ID              [ reduce using rule 165 (empty -> .) ]
  ! READLN          [ reduce using rule 165 (empty -> .) ]
  ! WRITE           [ reduce using rule 165 (empty -> .) ]
  ! WRITELN         [ reduce using rule 165 (empty -> .) ]
  ! USES            [ reduce using rule 165 (empty -> .) ]
  ! IF              [ reduce using rule 165 (empty -> .) ]
  ! CASE            [ reduce using rule 165 (empty -> .) ]
  ! WHILE           [ reduce using rule 165 (empty -> .) ]
  ! BEGIN           [ reduce using rule 165 (empty -> .) ]
  ! FOR             [ reduce using rule 165 (empty -> .) ]
  ! WITH            [ reduce using rule 165 (empty -> .) ]
  ! REPEAT          [ reduce using rule 165 (empty -> .) ]

    field                          shift and go to state 248
    id_list                        shift and go to state 158
    statement                      shift and go to state 160
    if_statement                   shift and go to state 161
    case_statement                 shift and go to state 162
    assignment_statement           shift and go to state 163
    while_statement                shift and go to state 54
    procedure_call                 shift and go to state 55
    compound_statement             shift and go to state 56
    for_statement                  shift and go to state 57
    with_statement                 shift and go to state 59
    repeat_statement               shift and go to state 60
    empty                          shift and go to state 91
    variable                       shift and go to state 62

state 409

    (83) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 425


state 410

    (84) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD . SEMICOLON

    SEMICOLON       shift and go to state 426


state 411

    (85) function_declaration -> FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON block SEMICOLON .

    USES            reduce using rule 85 (function_declaration -> FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    CONST           reduce using rule 85 (function_declaration -> FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    TYPE            reduce using rule 85 (function_declaration -> FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    VAR             reduce using rule 85 (function_declaration -> FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 85 (function_declaration -> FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    CONSTRUCTOR     reduce using rule 85 (function_declaration -> FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    PROCEDURE       reduce using rule 85 (function_declaration -> FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    DESTRUCTOR      reduce using rule 85 (function_declaration -> FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    BEGIN           reduce using rule 85 (function_declaration -> FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)


state 412

    (86) function_declaration -> FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .

    USES            reduce using rule 86 (function_declaration -> FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    CONST           reduce using rule 86 (function_declaration -> FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    TYPE            reduce using rule 86 (function_declaration -> FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    VAR             reduce using rule 86 (function_declaration -> FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    FUNCTION        reduce using rule 86 (function_declaration -> FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    CONSTRUCTOR     reduce using rule 86 (function_declaration -> FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    PROCEDURE       reduce using rule 86 (function_declaration -> FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    DESTRUCTOR      reduce using rule 86 (function_declaration -> FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    BEGIN           reduce using rule 86 (function_declaration -> FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)


state 413

    (14) method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier . SEMICOLON block

    SEMICOLON       shift and go to state 427


state 414

    (12) method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .

    USES            reduce using rule 12 (method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    CONST           reduce using rule 12 (method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    TYPE            reduce using rule 12 (method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    VAR             reduce using rule 12 (method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    FUNCTION        reduce using rule 12 (method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    CONSTRUCTOR     reduce using rule 12 (method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    PROCEDURE       reduce using rule 12 (method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    DESTRUCTOR      reduce using rule 12 (method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    BEGIN           reduce using rule 12 (method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)


state 415

    (13) method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .

    USES            reduce using rule 13 (method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    CONST           reduce using rule 13 (method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    TYPE            reduce using rule 13 (method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    VAR             reduce using rule 13 (method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    FUNCTION        reduce using rule 13 (method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    CONSTRUCTOR     reduce using rule 13 (method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    PROCEDURE       reduce using rule 13 (method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    DESTRUCTOR      reduce using rule 13 (method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    BEGIN           reduce using rule 13 (method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)


state 416

    (113) if_statement -> IF expression IN statement THEN statement ELSE statement .

    END             reduce using rule 113 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    READLN          reduce using rule 113 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    WRITE           reduce using rule 113 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    WRITELN         reduce using rule 113 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    USES            reduce using rule 113 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    IF              reduce using rule 113 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    ID              reduce using rule 113 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    WHILE           reduce using rule 113 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    BEGIN           reduce using rule 113 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    FOR             reduce using rule 113 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    CASE            reduce using rule 113 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    WITH            reduce using rule 113 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    REPEAT          reduce using rule 113 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    SEMICOLON       reduce using rule 113 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    UNTIL           reduce using rule 113 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    RPAREN          reduce using rule 113 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    VAR             reduce using rule 113 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    CONSTRUCTOR     reduce using rule 113 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    PROCEDURE       reduce using rule 113 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    FUNCTION        reduce using rule 113 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    DESTRUCTOR      reduce using rule 113 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    ELSE            reduce using rule 113 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    THEN            reduce using rule 113 (if_statement -> IF expression IN statement THEN statement ELSE statement .)


state 417

    (115) for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .

    END             reduce using rule 115 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    READLN          reduce using rule 115 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    WRITE           reduce using rule 115 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    WRITELN         reduce using rule 115 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    USES            reduce using rule 115 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    IF              reduce using rule 115 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    ID              reduce using rule 115 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    WHILE           reduce using rule 115 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    BEGIN           reduce using rule 115 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    FOR             reduce using rule 115 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    CASE            reduce using rule 115 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    WITH            reduce using rule 115 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    REPEAT          reduce using rule 115 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    SEMICOLON       reduce using rule 115 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    UNTIL           reduce using rule 115 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    RPAREN          reduce using rule 115 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    VAR             reduce using rule 115 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    CONSTRUCTOR     reduce using rule 115 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    PROCEDURE       reduce using rule 115 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    FUNCTION        reduce using rule 115 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    DESTRUCTOR      reduce using rule 115 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    ELSE            reduce using rule 115 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    THEN            reduce using rule 115 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)


state 418

    (116) for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .

    END             reduce using rule 116 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    READLN          reduce using rule 116 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    WRITE           reduce using rule 116 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    WRITELN         reduce using rule 116 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    USES            reduce using rule 116 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    IF              reduce using rule 116 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    ID              reduce using rule 116 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    WHILE           reduce using rule 116 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    BEGIN           reduce using rule 116 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    FOR             reduce using rule 116 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    CASE            reduce using rule 116 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    WITH            reduce using rule 116 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    REPEAT          reduce using rule 116 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    SEMICOLON       reduce using rule 116 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    UNTIL           reduce using rule 116 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    RPAREN          reduce using rule 116 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    VAR             reduce using rule 116 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    CONSTRUCTOR     reduce using rule 116 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    PROCEDURE       reduce using rule 116 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    FUNCTION        reduce using rule 116 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    DESTRUCTOR      reduce using rule 116 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    ELSE            reduce using rule 116 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    THEN            reduce using rule 116 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)


state 419

    (76) case_statement -> CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON .

    END             reduce using rule 76 (case_statement -> CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON .)
    READLN          reduce using rule 76 (case_statement -> CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON .)
    WRITE           reduce using rule 76 (case_statement -> CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON .)
    WRITELN         reduce using rule 76 (case_statement -> CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON .)
    USES            reduce using rule 76 (case_statement -> CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON .)
    IF              reduce using rule 76 (case_statement -> CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON .)
    ID              reduce using rule 76 (case_statement -> CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON .)
    WHILE           reduce using rule 76 (case_statement -> CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON .)
    BEGIN           reduce using rule 76 (case_statement -> CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON .)
    FOR             reduce using rule 76 (case_statement -> CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON .)
    CASE            reduce using rule 76 (case_statement -> CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON .)
    WITH            reduce using rule 76 (case_statement -> CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON .)
    REPEAT          reduce using rule 76 (case_statement -> CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON .)
    SEMICOLON       reduce using rule 76 (case_statement -> CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON .)
    UNTIL           reduce using rule 76 (case_statement -> CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON .)
    RPAREN          reduce using rule 76 (case_statement -> CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON .)
    VAR             reduce using rule 76 (case_statement -> CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON .)
    CONSTRUCTOR     reduce using rule 76 (case_statement -> CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON .)
    PROCEDURE       reduce using rule 76 (case_statement -> CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON .)
    FUNCTION        reduce using rule 76 (case_statement -> CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON .)
    DESTRUCTOR      reduce using rule 76 (case_statement -> CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON .)
    ELSE            reduce using rule 76 (case_statement -> CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON .)
    THEN            reduce using rule 76 (case_statement -> CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON .)


state 420

    (66) case_element -> NUMBER COLON LPAREN field_list RPAREN .

    SEMICOLON       reduce using rule 66 (case_element -> NUMBER COLON LPAREN field_list RPAREN .)
    END             reduce using rule 66 (case_element -> NUMBER COLON LPAREN field_list RPAREN .)
    ELSE            reduce using rule 66 (case_element -> NUMBER COLON LPAREN field_list RPAREN .)


state 421

    (60) case_part -> CASE ID COLON type_specifier OF . case_list SEMICOLON
    (62) case_list -> . case_list SEMICOLON case_element
    (63) case_list -> . case_element
    (66) case_element -> . NUMBER COLON LPAREN field_list RPAREN
    (67) case_element -> . NUMBER COLON field_list

    NUMBER          shift and go to state 298

    case_list                      shift and go to state 428
    case_element                   shift and go to state 297

state 422

    (71) method -> CONSTRUCTOR ID LPAREN field_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 429


state 423

    (72) method -> PROCEDURE ID LPAREN field_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 430


state 424

    (73) method -> FUNCTION ID LPAREN field_list RPAREN . COLON type_specifier SEMICOLON

    COLON           shift and go to state 431


state 425

    (83) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .

    USES            reduce using rule 83 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    CONST           reduce using rule 83 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    TYPE            reduce using rule 83 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    VAR             reduce using rule 83 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 83 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    CONSTRUCTOR     reduce using rule 83 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    PROCEDURE       reduce using rule 83 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    DESTRUCTOR      reduce using rule 83 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    BEGIN           reduce using rule 83 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)


state 426

    (84) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .

    USES            reduce using rule 84 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    CONST           reduce using rule 84 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    TYPE            reduce using rule 84 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    VAR             reduce using rule 84 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    FUNCTION        reduce using rule 84 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    CONSTRUCTOR     reduce using rule 84 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    PROCEDURE       reduce using rule 84 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    DESTRUCTOR      reduce using rule 84 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    BEGIN           reduce using rule 84 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)


state 427

    (14) method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON . block
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (165) empty -> .

    BEGIN           reduce using rule 165 (empty -> .)
    USES            reduce using rule 165 (empty -> .)
    CONST           reduce using rule 165 (empty -> .)
    TYPE            reduce using rule 165 (empty -> .)
    VAR             reduce using rule 165 (empty -> .)
    FUNCTION        reduce using rule 165 (empty -> .)
    CONSTRUCTOR     reduce using rule 165 (empty -> .)
    PROCEDURE       reduce using rule 165 (empty -> .)
    DESTRUCTOR      reduce using rule 165 (empty -> .)

    block                          shift and go to state 432
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 428

    (60) case_part -> CASE ID COLON type_specifier OF case_list . SEMICOLON
    (62) case_list -> case_list . SEMICOLON case_element

    SEMICOLON       shift and go to state 433


state 429

    (71) method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .

    END             reduce using rule 71 (method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .)
    CONSTRUCTOR     reduce using rule 71 (method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .)
    PROCEDURE       reduce using rule 71 (method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 71 (method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .)
    DESTRUCTOR      reduce using rule 71 (method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .)


state 430

    (72) method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .

    END             reduce using rule 72 (method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    CONSTRUCTOR     reduce using rule 72 (method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    PROCEDURE       reduce using rule 72 (method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 72 (method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    DESTRUCTOR      reduce using rule 72 (method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)


state 431

    (73) method -> FUNCTION ID LPAREN field_list RPAREN COLON . type_specifier SEMICOLON
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (78) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 132
    FILE            shift and go to state 134
    SET             shift and go to state 135
    RECORD          shift and go to state 136
    OBJECT          shift and go to state 137
    LPAREN          shift and go to state 138
    BOOLEAN_LITERAL shift and go to state 139
    INTEGER         shift and go to state 140
    BYTE            shift and go to state 141
    CHAR            shift and go to state 142
    STRING          shift and go to state 143
    ID              shift and go to state 130
    LONGINT         shift and go to state 145
    NUMBER          shift and go to state 144

    type_specifier                 shift and go to state 434
    subrange                       shift and go to state 133

state 432

    (14) method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block .

    USES            reduce using rule 14 (method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block .)
    CONST           reduce using rule 14 (method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block .)
    TYPE            reduce using rule 14 (method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block .)
    VAR             reduce using rule 14 (method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block .)
    FUNCTION        reduce using rule 14 (method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block .)
    CONSTRUCTOR     reduce using rule 14 (method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block .)
    PROCEDURE       reduce using rule 14 (method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block .)
    DESTRUCTOR      reduce using rule 14 (method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block .)
    BEGIN           reduce using rule 14 (method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block .)


state 433

    (60) case_part -> CASE ID COLON type_specifier OF case_list SEMICOLON .
    (62) case_list -> case_list SEMICOLON . case_element
    (66) case_element -> . NUMBER COLON LPAREN field_list RPAREN
    (67) case_element -> . NUMBER COLON field_list

    END             reduce using rule 60 (case_part -> CASE ID COLON type_specifier OF case_list SEMICOLON .)
    NUMBER          shift and go to state 298

    case_element                   shift and go to state 380

state 434

    (73) method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier . SEMICOLON

    SEMICOLON       shift and go to state 435


state 435

    (73) method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .

    END             reduce using rule 73 (method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .)
    CONSTRUCTOR     reduce using rule 73 (method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 73 (method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 73 (method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .)
    DESTRUCTOR      reduce using rule 73 (method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for USES in state 5 resolved as shift
WARNING: shift/reduce conflict for CONST in state 5 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 5 resolved as shift
WARNING: shift/reduce conflict for VAR in state 5 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 5 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 5 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 5 resolved as shift
WARNING: shift/reduce conflict for DESTRUCTOR in state 5 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 14 resolved as shift
WARNING: shift/reduce conflict for READLN in state 28 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 28 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 28 resolved as shift
WARNING: shift/reduce conflict for USES in state 28 resolved as shift
WARNING: shift/reduce conflict for IF in state 28 resolved as shift
WARNING: shift/reduce conflict for ID in state 28 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 28 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 28 resolved as shift
WARNING: shift/reduce conflict for FOR in state 28 resolved as shift
WARNING: shift/reduce conflict for CASE in state 28 resolved as shift
WARNING: shift/reduce conflict for WITH in state 28 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 28 resolved as shift
WARNING: shift/reduce conflict for ID in state 40 resolved as shift
WARNING: shift/reduce conflict for END in state 47 resolved as shift
WARNING: shift/reduce conflict for READLN in state 47 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 47 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 47 resolved as shift
WARNING: shift/reduce conflict for USES in state 47 resolved as shift
WARNING: shift/reduce conflict for IF in state 47 resolved as shift
WARNING: shift/reduce conflict for ID in state 47 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 47 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 47 resolved as shift
WARNING: shift/reduce conflict for FOR in state 47 resolved as shift
WARNING: shift/reduce conflict for CASE in state 47 resolved as shift
WARNING: shift/reduce conflict for WITH in state 47 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 47 resolved as shift
WARNING: shift/reduce conflict for READLN in state 48 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 48 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 48 resolved as shift
WARNING: shift/reduce conflict for USES in state 48 resolved as shift
WARNING: shift/reduce conflict for IF in state 48 resolved as shift
WARNING: shift/reduce conflict for ID in state 48 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 48 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 48 resolved as shift
WARNING: shift/reduce conflict for FOR in state 48 resolved as shift
WARNING: shift/reduce conflict for CASE in state 48 resolved as shift
WARNING: shift/reduce conflict for WITH in state 48 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 48 resolved as shift
WARNING: shift/reduce conflict for COLON_EQUAL in state 66 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 66 resolved as shift
WARNING: shift/reduce conflict for READLN in state 72 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 72 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 72 resolved as shift
WARNING: shift/reduce conflict for USES in state 72 resolved as shift
WARNING: shift/reduce conflict for IF in state 72 resolved as shift
WARNING: shift/reduce conflict for ID in state 72 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 72 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 72 resolved as shift
WARNING: shift/reduce conflict for FOR in state 72 resolved as shift
WARNING: shift/reduce conflict for CASE in state 72 resolved as shift
WARNING: shift/reduce conflict for WITH in state 72 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 72 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 82 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 84 resolved as shift
WARNING: shift/reduce conflict for VAR in state 84 resolved as shift
WARNING: shift/reduce conflict for ID in state 84 resolved as shift
WARNING: shift/reduce conflict for READLN in state 84 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 84 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 84 resolved as shift
WARNING: shift/reduce conflict for USES in state 84 resolved as shift
WARNING: shift/reduce conflict for IF in state 84 resolved as shift
WARNING: shift/reduce conflict for CASE in state 84 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 84 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 84 resolved as shift
WARNING: shift/reduce conflict for FOR in state 84 resolved as shift
WARNING: shift/reduce conflict for WITH in state 84 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 84 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 87 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 90 resolved as shift
WARNING: shift/reduce conflict for END in state 92 resolved as shift
WARNING: shift/reduce conflict for READLN in state 92 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 92 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 92 resolved as shift
WARNING: shift/reduce conflict for USES in state 92 resolved as shift
WARNING: shift/reduce conflict for IF in state 92 resolved as shift
WARNING: shift/reduce conflict for ID in state 92 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 92 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 92 resolved as shift
WARNING: shift/reduce conflict for FOR in state 92 resolved as shift
WARNING: shift/reduce conflict for CASE in state 92 resolved as shift
WARNING: shift/reduce conflict for WITH in state 92 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 92 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 111 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 111 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 112 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 112 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 118 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 123 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 124 resolved as shift
WARNING: shift/reduce conflict for READLN in state 124 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 124 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 124 resolved as shift
WARNING: shift/reduce conflict for USES in state 124 resolved as shift
WARNING: shift/reduce conflict for IF in state 124 resolved as shift
WARNING: shift/reduce conflict for ID in state 124 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 124 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 124 resolved as shift
WARNING: shift/reduce conflict for FOR in state 124 resolved as shift
WARNING: shift/reduce conflict for CASE in state 124 resolved as shift
WARNING: shift/reduce conflict for WITH in state 124 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 124 resolved as shift
WARNING: shift/reduce conflict for VAR in state 136 resolved as shift
WARNING: shift/reduce conflict for ID in state 136 resolved as shift
WARNING: shift/reduce conflict for READLN in state 136 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 136 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 136 resolved as shift
WARNING: shift/reduce conflict for USES in state 136 resolved as shift
WARNING: shift/reduce conflict for IF in state 136 resolved as shift
WARNING: shift/reduce conflict for CASE in state 136 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 136 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 136 resolved as shift
WARNING: shift/reduce conflict for FOR in state 136 resolved as shift
WARNING: shift/reduce conflict for WITH in state 136 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 136 resolved as shift
WARNING: shift/reduce conflict for VAR in state 137 resolved as shift
WARNING: shift/reduce conflict for ID in state 137 resolved as shift
WARNING: shift/reduce conflict for READLN in state 137 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 137 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 137 resolved as shift
WARNING: shift/reduce conflict for USES in state 137 resolved as shift
WARNING: shift/reduce conflict for IF in state 137 resolved as shift
WARNING: shift/reduce conflict for CASE in state 137 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 137 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 137 resolved as shift
WARNING: shift/reduce conflict for FOR in state 137 resolved as shift
WARNING: shift/reduce conflict for WITH in state 137 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 137 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 153 resolved as shift
WARNING: shift/reduce conflict for COLON_EQUAL in state 153 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 153 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 154 resolved as shift
WARNING: shift/reduce conflict for VAR in state 154 resolved as shift
WARNING: shift/reduce conflict for ID in state 154 resolved as shift
WARNING: shift/reduce conflict for READLN in state 154 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 154 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 154 resolved as shift
WARNING: shift/reduce conflict for USES in state 154 resolved as shift
WARNING: shift/reduce conflict for IF in state 154 resolved as shift
WARNING: shift/reduce conflict for CASE in state 154 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 154 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 154 resolved as shift
WARNING: shift/reduce conflict for FOR in state 154 resolved as shift
WARNING: shift/reduce conflict for WITH in state 154 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 154 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 171 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 186 resolved as shift
WARNING: shift/reduce conflict for READLN in state 193 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 193 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 193 resolved as shift
WARNING: shift/reduce conflict for USES in state 193 resolved as shift
WARNING: shift/reduce conflict for IF in state 193 resolved as shift
WARNING: shift/reduce conflict for ID in state 193 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 193 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 193 resolved as shift
WARNING: shift/reduce conflict for FOR in state 193 resolved as shift
WARNING: shift/reduce conflict for CASE in state 193 resolved as shift
WARNING: shift/reduce conflict for WITH in state 193 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 193 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 209 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 209 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 209 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 209 resolved as shift
WARNING: shift/reduce conflict for MOD in state 209 resolved as shift
WARNING: shift/reduce conflict for AND in state 209 resolved as shift
WARNING: shift/reduce conflict for OR in state 209 resolved as shift
WARNING: shift/reduce conflict for READLN in state 223 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 223 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 223 resolved as shift
WARNING: shift/reduce conflict for USES in state 223 resolved as shift
WARNING: shift/reduce conflict for IF in state 223 resolved as shift
WARNING: shift/reduce conflict for ID in state 223 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 223 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 223 resolved as shift
WARNING: shift/reduce conflict for FOR in state 223 resolved as shift
WARNING: shift/reduce conflict for CASE in state 223 resolved as shift
WARNING: shift/reduce conflict for WITH in state 223 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 223 resolved as shift
WARNING: shift/reduce conflict for READLN in state 226 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 226 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 226 resolved as shift
WARNING: shift/reduce conflict for USES in state 226 resolved as shift
WARNING: shift/reduce conflict for IF in state 226 resolved as shift
WARNING: shift/reduce conflict for ID in state 226 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 226 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 226 resolved as shift
WARNING: shift/reduce conflict for FOR in state 226 resolved as shift
WARNING: shift/reduce conflict for CASE in state 226 resolved as shift
WARNING: shift/reduce conflict for WITH in state 226 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 226 resolved as shift
WARNING: shift/reduce conflict for CASE in state 236 resolved as shift
WARNING: shift/reduce conflict for VAR in state 236 resolved as shift
WARNING: shift/reduce conflict for ID in state 236 resolved as shift
WARNING: shift/reduce conflict for READLN in state 236 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 236 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 236 resolved as shift
WARNING: shift/reduce conflict for USES in state 236 resolved as shift
WARNING: shift/reduce conflict for IF in state 236 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 236 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 236 resolved as shift
WARNING: shift/reduce conflict for FOR in state 236 resolved as shift
WARNING: shift/reduce conflict for WITH in state 236 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 236 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 237 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 237 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 237 resolved as shift
WARNING: shift/reduce conflict for DESTRUCTOR in state 237 resolved as shift
WARNING: shift/reduce conflict for VAR in state 237 resolved as shift
WARNING: shift/reduce conflict for ID in state 237 resolved as shift
WARNING: shift/reduce conflict for READLN in state 237 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 237 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 237 resolved as shift
WARNING: shift/reduce conflict for USES in state 237 resolved as shift
WARNING: shift/reduce conflict for IF in state 237 resolved as shift
WARNING: shift/reduce conflict for CASE in state 237 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 237 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 237 resolved as shift
WARNING: shift/reduce conflict for FOR in state 237 resolved as shift
WARNING: shift/reduce conflict for WITH in state 237 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 237 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 279 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 281 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 281 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 281 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 281 resolved as shift
WARNING: shift/reduce conflict for MOD in state 281 resolved as shift
WARNING: shift/reduce conflict for AND in state 281 resolved as shift
WARNING: shift/reduce conflict for OR in state 281 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 282 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 282 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 282 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 282 resolved as shift
WARNING: shift/reduce conflict for MOD in state 282 resolved as shift
WARNING: shift/reduce conflict for AND in state 282 resolved as shift
WARNING: shift/reduce conflict for OR in state 282 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 283 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 283 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 283 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 283 resolved as shift
WARNING: shift/reduce conflict for MOD in state 283 resolved as shift
WARNING: shift/reduce conflict for AND in state 283 resolved as shift
WARNING: shift/reduce conflict for OR in state 283 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 284 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 284 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 284 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 284 resolved as shift
WARNING: shift/reduce conflict for MOD in state 284 resolved as shift
WARNING: shift/reduce conflict for AND in state 284 resolved as shift
WARNING: shift/reduce conflict for OR in state 284 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 285 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 285 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 285 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 285 resolved as shift
WARNING: shift/reduce conflict for MOD in state 285 resolved as shift
WARNING: shift/reduce conflict for AND in state 285 resolved as shift
WARNING: shift/reduce conflict for OR in state 285 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 286 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 286 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 286 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 286 resolved as shift
WARNING: shift/reduce conflict for MOD in state 286 resolved as shift
WARNING: shift/reduce conflict for AND in state 286 resolved as shift
WARNING: shift/reduce conflict for OR in state 286 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 287 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 287 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 287 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 287 resolved as shift
WARNING: shift/reduce conflict for MOD in state 287 resolved as shift
WARNING: shift/reduce conflict for AND in state 287 resolved as shift
WARNING: shift/reduce conflict for OR in state 287 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 326 resolved as shift
WARNING: shift/reduce conflict for READLN in state 340 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 340 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 340 resolved as shift
WARNING: shift/reduce conflict for USES in state 340 resolved as shift
WARNING: shift/reduce conflict for IF in state 340 resolved as shift
WARNING: shift/reduce conflict for ID in state 340 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 340 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 340 resolved as shift
WARNING: shift/reduce conflict for FOR in state 340 resolved as shift
WARNING: shift/reduce conflict for CASE in state 340 resolved as shift
WARNING: shift/reduce conflict for WITH in state 340 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 340 resolved as shift
WARNING: shift/reduce conflict for READLN in state 341 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 341 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 341 resolved as shift
WARNING: shift/reduce conflict for USES in state 341 resolved as shift
WARNING: shift/reduce conflict for IF in state 341 resolved as shift
WARNING: shift/reduce conflict for ID in state 341 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 341 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 341 resolved as shift
WARNING: shift/reduce conflict for FOR in state 341 resolved as shift
WARNING: shift/reduce conflict for CASE in state 341 resolved as shift
WARNING: shift/reduce conflict for WITH in state 341 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 341 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 345 resolved as shift
WARNING: shift/reduce conflict for READLN in state 346 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 346 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 346 resolved as shift
WARNING: shift/reduce conflict for USES in state 346 resolved as shift
WARNING: shift/reduce conflict for IF in state 346 resolved as shift
WARNING: shift/reduce conflict for ID in state 346 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 346 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 346 resolved as shift
WARNING: shift/reduce conflict for FOR in state 346 resolved as shift
WARNING: shift/reduce conflict for CASE in state 346 resolved as shift
WARNING: shift/reduce conflict for WITH in state 346 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 346 resolved as shift
WARNING: shift/reduce conflict for VAR in state 348 resolved as shift
WARNING: shift/reduce conflict for ID in state 348 resolved as shift
WARNING: shift/reduce conflict for READLN in state 348 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 348 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 348 resolved as shift
WARNING: shift/reduce conflict for USES in state 348 resolved as shift
WARNING: shift/reduce conflict for IF in state 348 resolved as shift
WARNING: shift/reduce conflict for CASE in state 348 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 348 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 348 resolved as shift
WARNING: shift/reduce conflict for FOR in state 348 resolved as shift
WARNING: shift/reduce conflict for WITH in state 348 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 348 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 353 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 367 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 375 resolved as shift
WARNING: shift/reduce conflict for END in state 379 resolved as shift
WARNING: shift/reduce conflict for READLN in state 379 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 379 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 379 resolved as shift
WARNING: shift/reduce conflict for USES in state 379 resolved as shift
WARNING: shift/reduce conflict for IF in state 379 resolved as shift
WARNING: shift/reduce conflict for ID in state 379 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 379 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 379 resolved as shift
WARNING: shift/reduce conflict for FOR in state 379 resolved as shift
WARNING: shift/reduce conflict for CASE in state 379 resolved as shift
WARNING: shift/reduce conflict for WITH in state 379 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 379 resolved as shift
WARNING: shift/reduce conflict for VAR in state 381 resolved as shift
WARNING: shift/reduce conflict for ID in state 381 resolved as shift
WARNING: shift/reduce conflict for READLN in state 381 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 381 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 381 resolved as shift
WARNING: shift/reduce conflict for USES in state 381 resolved as shift
WARNING: shift/reduce conflict for IF in state 381 resolved as shift
WARNING: shift/reduce conflict for CASE in state 381 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 381 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 381 resolved as shift
WARNING: shift/reduce conflict for FOR in state 381 resolved as shift
WARNING: shift/reduce conflict for WITH in state 381 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 381 resolved as shift
WARNING: shift/reduce conflict for VAR in state 382 resolved as shift
WARNING: shift/reduce conflict for ID in state 382 resolved as shift
WARNING: shift/reduce conflict for READLN in state 382 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 382 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 382 resolved as shift
WARNING: shift/reduce conflict for USES in state 382 resolved as shift
WARNING: shift/reduce conflict for IF in state 382 resolved as shift
WARNING: shift/reduce conflict for CASE in state 382 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 382 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 382 resolved as shift
WARNING: shift/reduce conflict for FOR in state 382 resolved as shift
WARNING: shift/reduce conflict for WITH in state 382 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 382 resolved as shift
WARNING: shift/reduce conflict for VAR in state 386 resolved as shift
WARNING: shift/reduce conflict for ID in state 386 resolved as shift
WARNING: shift/reduce conflict for READLN in state 386 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 386 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 386 resolved as shift
WARNING: shift/reduce conflict for USES in state 386 resolved as shift
WARNING: shift/reduce conflict for IF in state 386 resolved as shift
WARNING: shift/reduce conflict for CASE in state 386 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 386 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 386 resolved as shift
WARNING: shift/reduce conflict for FOR in state 386 resolved as shift
WARNING: shift/reduce conflict for WITH in state 386 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 386 resolved as shift
WARNING: shift/reduce conflict for VAR in state 387 resolved as shift
WARNING: shift/reduce conflict for ID in state 387 resolved as shift
WARNING: shift/reduce conflict for READLN in state 387 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 387 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 387 resolved as shift
WARNING: shift/reduce conflict for USES in state 387 resolved as shift
WARNING: shift/reduce conflict for IF in state 387 resolved as shift
WARNING: shift/reduce conflict for CASE in state 387 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 387 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 387 resolved as shift
WARNING: shift/reduce conflict for FOR in state 387 resolved as shift
WARNING: shift/reduce conflict for WITH in state 387 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 387 resolved as shift
WARNING: shift/reduce conflict for VAR in state 388 resolved as shift
WARNING: shift/reduce conflict for ID in state 388 resolved as shift
WARNING: shift/reduce conflict for READLN in state 388 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 388 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 388 resolved as shift
WARNING: shift/reduce conflict for USES in state 388 resolved as shift
WARNING: shift/reduce conflict for IF in state 388 resolved as shift
WARNING: shift/reduce conflict for CASE in state 388 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 388 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 388 resolved as shift
WARNING: shift/reduce conflict for FOR in state 388 resolved as shift
WARNING: shift/reduce conflict for WITH in state 388 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 388 resolved as shift
WARNING: shift/reduce conflict for READLN in state 399 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 399 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 399 resolved as shift
WARNING: shift/reduce conflict for USES in state 399 resolved as shift
WARNING: shift/reduce conflict for IF in state 399 resolved as shift
WARNING: shift/reduce conflict for ID in state 399 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 399 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 399 resolved as shift
WARNING: shift/reduce conflict for FOR in state 399 resolved as shift
WARNING: shift/reduce conflict for CASE in state 399 resolved as shift
WARNING: shift/reduce conflict for WITH in state 399 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 399 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 403 resolved as shift
WARNING: shift/reduce conflict for VAR in state 403 resolved as shift
WARNING: shift/reduce conflict for ID in state 403 resolved as shift
WARNING: shift/reduce conflict for READLN in state 403 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 403 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 403 resolved as shift
WARNING: shift/reduce conflict for USES in state 403 resolved as shift
WARNING: shift/reduce conflict for IF in state 403 resolved as shift
WARNING: shift/reduce conflict for CASE in state 403 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 403 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 403 resolved as shift
WARNING: shift/reduce conflict for FOR in state 403 resolved as shift
WARNING: shift/reduce conflict for WITH in state 403 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 403 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 406 resolved as shift
WARNING: shift/reduce conflict for VAR in state 406 resolved as shift
WARNING: shift/reduce conflict for ID in state 406 resolved as shift
WARNING: shift/reduce conflict for READLN in state 406 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 406 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 406 resolved as shift
WARNING: shift/reduce conflict for USES in state 406 resolved as shift
WARNING: shift/reduce conflict for IF in state 406 resolved as shift
WARNING: shift/reduce conflict for CASE in state 406 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 406 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 406 resolved as shift
WARNING: shift/reduce conflict for FOR in state 406 resolved as shift
WARNING: shift/reduce conflict for WITH in state 406 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 406 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 407 resolved as shift
WARNING: shift/reduce conflict for VAR in state 407 resolved as shift
WARNING: shift/reduce conflict for ID in state 407 resolved as shift
WARNING: shift/reduce conflict for READLN in state 407 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 407 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 407 resolved as shift
WARNING: shift/reduce conflict for USES in state 407 resolved as shift
WARNING: shift/reduce conflict for IF in state 407 resolved as shift
WARNING: shift/reduce conflict for CASE in state 407 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 407 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 407 resolved as shift
WARNING: shift/reduce conflict for FOR in state 407 resolved as shift
WARNING: shift/reduce conflict for WITH in state 407 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 407 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 408 resolved as shift
WARNING: shift/reduce conflict for VAR in state 408 resolved as shift
WARNING: shift/reduce conflict for ID in state 408 resolved as shift
WARNING: shift/reduce conflict for READLN in state 408 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 408 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 408 resolved as shift
WARNING: shift/reduce conflict for USES in state 408 resolved as shift
WARNING: shift/reduce conflict for IF in state 408 resolved as shift
WARNING: shift/reduce conflict for CASE in state 408 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 408 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 408 resolved as shift
WARNING: shift/reduce conflict for FOR in state 408 resolved as shift
WARNING: shift/reduce conflict for WITH in state 408 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 408 resolved as shift
WARNING: reduce/reduce conflict in state 51 resolved using rule (local_var_declarations -> empty)
WARNING: rejected rule (statement -> empty) in state 51
WARNING: reduce/reduce conflict in state 157 resolved using rule (field_list -> empty)
WARNING: rejected rule (statement -> empty) in state 157
WARNING: reduce/reduce conflict in state 161 resolved using rule (field -> if_statement)
WARNING: rejected rule (statement -> if_statement) in state 161
WARNING: reduce/reduce conflict in state 162 resolved using rule (field -> case_statement)
WARNING: rejected rule (statement -> case_statement) in state 162
WARNING: reduce/reduce conflict in state 163 resolved using rule (field -> assignment_statement)
WARNING: rejected rule (statement -> assignment_statement) in state 163
WARNING: reduce/reduce conflict in state 307 resolved using rule (case_part -> empty)
WARNING: rejected rule (statement -> empty) in state 307
WARNING: reduce/reduce conflict in state 310 resolved using rule (method_list -> empty)
WARNING: rejected rule (statement -> empty) in state 310
WARNING: reduce/reduce conflict in state 382 resolved using rule (case_element -> NUMBER COLON field_list)
WARNING: rejected rule (empty -> <empty>) in state 382
