Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOLEAN_LITERAL
    CASE
    FALSE
    FILE
    GOTO
    IN
    LABEL
    LBLOCK
    NIL
    PACKED
    RBLOCK
    READLINE
    RECORD
    REPEAT
    SET
    STRING
    TRUE
    UNTIL
    WITH

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON declaration_sections block DOT
Rule 2     declaration_sections -> uses_opt constant_declaration type_declaration var_declaration
Rule 3     declaration_sections -> uses_opt constant_declaration type_declaration
Rule 4     declaration_sections -> uses_opt constant_declaration var_declaration
Rule 5     declaration_sections -> uses_opt constant_declaration
Rule 6     declaration_sections -> uses_opt type_declaration var_declaration
Rule 7     declaration_sections -> uses_opt type_declaration
Rule 8     declaration_sections -> uses_opt var_declaration
Rule 9     declaration_sections -> uses_opt
Rule 10    declaration_sections -> constant_declaration type_declaration var_declaration
Rule 11    declaration_sections -> constant_declaration type_declaration
Rule 12    declaration_sections -> constant_declaration var_declaration
Rule 13    declaration_sections -> constant_declaration
Rule 14    declaration_sections -> type_declaration var_declaration
Rule 15    declaration_sections -> type_declaration
Rule 16    declaration_sections -> var_declaration
Rule 17    uses_opt -> USES ID SEMICOLON
Rule 18    uses_opt -> empty
Rule 19    var_declaration -> VAR declaration_list
Rule 20    declaration_list -> declaration
Rule 21    declaration_list -> declaration_list declaration
Rule 22    declaration -> id_list COLON type_specifier SEMICOLON
Rule 23    block -> declarations compound_statement
Rule 24    declarations -> VAR declaration_list procedure_declarations
Rule 25    declarations -> VAR declaration_list
Rule 26    declarations -> procedure_declarations
Rule 27    declarations -> empty
Rule 28    id_list -> ID
Rule 29    id_list -> id_list COMMA ID
Rule 30    type_declaration -> TYPE type_list
Rule 31    type_list -> type_definition
Rule 32    type_list -> type_list type_definition
Rule 33    type_definition -> ID EQUAL type_specifier SEMICOLON
Rule 34    type_specifier -> ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier
Rule 35    type_specifier -> INTEGER
Rule 36    type_specifier -> BYTE
Rule 37    type_specifier -> CHAR
Rule 38    type_specifier -> ID
Rule 39    type_specifier -> LONGINT
Rule 40    procedure_declarations -> procedure_declaration
Rule 41    procedure_declarations -> procedure_declarations procedure_declaration
Rule 42    procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
Rule 43    procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT
Rule 44    function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
Rule 45    declarations -> function_declaration
Rule 46    function_call -> ID LPAREN expression_list RPAREN
Rule 47    factor -> function_call
Rule 48    parameter_list -> parameter
Rule 49    parameter_list -> parameter_list SEMICOLON parameter
Rule 50    parameter -> id_list COLON type_specifier
Rule 51    parameter -> VAR id_list COLON type_specifier
Rule 52    compound_statement -> BEGIN statement_list END
Rule 53    statement_list -> statement statement_list_tail
Rule 54    statement_list_tail -> SEMICOLON statement statement_list_tail
Rule 55    statement_list_tail -> empty
Rule 56    statement -> if_statement
Rule 57    statement -> assignment_statement
Rule 58    statement -> while_statement
Rule 59    statement -> procedure_call
Rule 60    statement -> compound_statement
Rule 61    statement -> for_statement
Rule 62    statement -> empty
Rule 63    if_statement -> IF expression THEN statement ELSE statement
Rule 64    if_statement -> IF expression THEN statement
Rule 65    for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement
Rule 66    for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement
Rule 67    assignment_statement -> variable COLON_EQUAL expression
Rule 68    variable -> ID
Rule 69    variable -> ID LBRACKET expression RBRACKET
Rule 70    while_statement -> WHILE expression DO statement
Rule 71    procedure_call -> ID LPAREN expression_list RPAREN
Rule 72    expression_list -> expression expression_list_tail
Rule 73    expression_list_tail -> COMMA expression expression_list_tail
Rule 74    expression_list_tail -> empty
Rule 75    expression_list -> empty
Rule 76    expression -> simple_expression relop simple_expression
Rule 77    expression -> simple_expression
Rule 78    simple_expression -> term simple_expression_tail
Rule 79    simple_expression_tail -> addop term
Rule 80    simple_expression_tail -> empty
Rule 81    addop -> PLUS
Rule 82    addop -> MINUS
Rule 83    term -> factor term_tail
Rule 84    term_tail -> mulop factor
Rule 85    term_tail -> empty
Rule 86    mulop -> TIMES
Rule 87    mulop -> DIVIDE
Rule 88    mulop -> DIV
Rule 89    expression -> expression PLUS expression
Rule 90    expression -> expression MINUS expression
Rule 91    expression -> expression TIMES expression
Rule 92    expression -> expression DIVIDE expression
Rule 93    expression -> expression MOD expression
Rule 94    factor -> LPAREN expression RPAREN
Rule 95    factor -> variable
Rule 96    factor -> NUMBER
Rule 97    factor -> STRING_LITERAL
Rule 98    relop -> LESS
Rule 99    relop -> LESS_EQUAL
Rule 100   relop -> GREAT
Rule 101   relop -> GREAT_EQUAL
Rule 102   relop -> EQUAL
Rule 103   relop -> DIFFERENT
Rule 104   empty -> <empty>
Rule 105   statement -> READLN
Rule 106   statement -> READLN LPAREN ID RPAREN
Rule 107   statement -> READLN LBRACKET ID RBRACKET
Rule 108   statement -> WRITELN LPAREN expression_list RPAREN
Rule 109   statement -> WRITE LPAREN expression_list RPAREN
Rule 110   statement -> USES ID SEMICOLON
Rule 111   constant_declaration -> CONST constant_list
Rule 112   constant_list -> constant
Rule 113   constant_list -> constant_list constant
Rule 114   constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON
Rule 115   constant -> ID EQUAL NUMBER SEMICOLON
Rule 116   constant -> ID EQUAL STRING_LITERAL SEMICOLON
Rule 117   expression -> expression AND expression
Rule 118   expression -> expression OR expression
Rule 119   expression -> NOT expression

Terminals, with rules where they appear

AND                  : 117
ARRAY                : 34
BEGIN                : 52
BOOLEAN_LITERAL      : 
BYTE                 : 36
CASE                 : 
CHAR                 : 37
CHARACTER_LITERAL    : 114
COLON                : 22 44 50 51
COLON_EQUAL          : 65 66 67
COMMA                : 29 73
CONST                : 111
DIFFERENT            : 103
DIV                  : 88
DIVIDE               : 87 92
DO                   : 65 66 70
DOT                  : 1 43
DOTDOT               : 34
DOWNTO               : 66
ELSE                 : 63
END                  : 52
EQUAL                : 33 102 114 115 116
FALSE                : 
FILE                 : 
FOR                  : 65 66
FUNCTION             : 44
GOTO                 : 
GREAT                : 100
GREAT_EQUAL          : 101
ID                   : 1 17 28 29 33 38 42 43 44 46 65 66 68 69 71 106 107 110 114 115 116
IF                   : 63 64
IN                   : 
INTEGER              : 35
LABEL                : 
LBLOCK               : 
LBRACKET             : 34 69 107
LESS                 : 98
LESS_EQUAL           : 99
LONGINT              : 39
LPAREN               : 42 43 44 46 71 94 106 108 109
MINUS                : 82 90
MOD                  : 93
NIL                  : 
NOT                  : 119
NUMBER               : 96 115
OF                   : 34
OR                   : 118
PACKED               : 
PLUS                 : 81 89
PROCEDURE            : 42 43
PROGRAM              : 1
RBLOCK               : 
RBRACKET             : 34 69 107
READLINE             : 
READLN               : 105 106 107
RECORD               : 
REPEAT               : 
RPAREN               : 42 43 44 46 71 94 106 108 109
SEMICOLON            : 1 17 22 33 42 42 43 44 44 49 54 110 114 115 116
SET                  : 
STRING               : 
STRING_LITERAL       : 97 116
THEN                 : 63 64
TIMES                : 86 91
TO                   : 65
TRUE                 : 
TYPE                 : 30
UNTIL                : 
USES                 : 17 110
VAR                  : 19 24 25 51
WHILE                : 70
WITH                 : 
WRITE                : 109
WRITELN              : 108
error                : 

Nonterminals, with rules where they appear

addop                : 79
assignment_statement : 57
block                : 1 42 43 44
compound_statement   : 23 60
constant             : 112 113
constant_declaration : 2 3 4 5 10 11 12 13
constant_list        : 111 113
declaration          : 20 21
declaration_list     : 19 21 24 25
declaration_sections : 1
declarations         : 23
empty                : 18 27 55 62 74 75 80 85
expression           : 34 34 63 64 65 65 66 66 67 69 70 72 73 89 89 90 90 91 91 92 92 93 93 94 117 117 118 118 119
expression_list      : 46 71 108 109
expression_list_tail : 72 73
factor               : 83 84
for_statement        : 61
function_call        : 47
function_declaration : 45
id_list              : 22 29 50 51
if_statement         : 56
mulop                : 84
parameter            : 48 49
parameter_list       : 42 43 44 49
procedure_call       : 59
procedure_declaration : 40 41
procedure_declarations : 24 26 41
program              : 0
relop                : 76
simple_expression    : 76 76 77
simple_expression_tail : 78
statement            : 53 54 63 63 64 65 66 70
statement_list       : 52
statement_list_tail  : 53 54
term                 : 78 79
term_tail            : 83
type_declaration     : 2 3 6 7 10 11 14 15
type_definition      : 31 32
type_list            : 30 32
type_specifier       : 22 33 34 44 50 51
uses_opt             : 2 3 4 5 6 7 8 9
var_declaration      : 2 4 6 8 10 12 14 16
variable             : 67 95
while_statement      : 58

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON declaration_sections block DOT

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON declaration_sections block DOT

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON declaration_sections block DOT

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . declaration_sections block DOT
    (2) declaration_sections -> . uses_opt constant_declaration type_declaration var_declaration
    (3) declaration_sections -> . uses_opt constant_declaration type_declaration
    (4) declaration_sections -> . uses_opt constant_declaration var_declaration
    (5) declaration_sections -> . uses_opt constant_declaration
    (6) declaration_sections -> . uses_opt type_declaration var_declaration
    (7) declaration_sections -> . uses_opt type_declaration
    (8) declaration_sections -> . uses_opt var_declaration
    (9) declaration_sections -> . uses_opt
    (10) declaration_sections -> . constant_declaration type_declaration var_declaration
    (11) declaration_sections -> . constant_declaration type_declaration
    (12) declaration_sections -> . constant_declaration var_declaration
    (13) declaration_sections -> . constant_declaration
    (14) declaration_sections -> . type_declaration var_declaration
    (15) declaration_sections -> . type_declaration
    (16) declaration_sections -> . var_declaration
    (17) uses_opt -> . USES ID SEMICOLON
    (18) uses_opt -> . empty
    (111) constant_declaration -> . CONST constant_list
    (30) type_declaration -> . TYPE type_list
    (19) var_declaration -> . VAR declaration_list
    (104) empty -> .

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    USES            shift and go to state 10
    CONST           shift and go to state 12
    TYPE            shift and go to state 13
    VAR             shift and go to state 14
    FUNCTION        reduce using rule 104 (empty -> .)
    PROCEDURE       reduce using rule 104 (empty -> .)
    BEGIN           reduce using rule 104 (empty -> .)

  ! CONST           [ reduce using rule 104 (empty -> .) ]
  ! TYPE            [ reduce using rule 104 (empty -> .) ]
  ! VAR             [ reduce using rule 104 (empty -> .) ]

    declaration_sections           shift and go to state 5
    uses_opt                       shift and go to state 6
    constant_declaration           shift and go to state 7
    type_declaration               shift and go to state 8
    var_declaration                shift and go to state 9
    empty                          shift and go to state 11

state 5

    (1) program -> PROGRAM ID SEMICOLON declaration_sections . block DOT
    (23) block -> . declarations compound_statement
    (24) declarations -> . VAR declaration_list procedure_declarations
    (25) declarations -> . VAR declaration_list
    (26) declarations -> . procedure_declarations
    (27) declarations -> . empty
    (45) declarations -> . function_declaration
    (40) procedure_declarations -> . procedure_declaration
    (41) procedure_declarations -> . procedure_declarations procedure_declaration
    (104) empty -> .
    (44) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (42) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (43) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT

    VAR             shift and go to state 17
    BEGIN           reduce using rule 104 (empty -> .)
    FUNCTION        shift and go to state 22
    PROCEDURE       shift and go to state 23

    block                          shift and go to state 15
    declarations                   shift and go to state 16
    procedure_declarations         shift and go to state 18
    empty                          shift and go to state 19
    function_declaration           shift and go to state 20
    procedure_declaration          shift and go to state 21

state 6

    (2) declaration_sections -> uses_opt . constant_declaration type_declaration var_declaration
    (3) declaration_sections -> uses_opt . constant_declaration type_declaration
    (4) declaration_sections -> uses_opt . constant_declaration var_declaration
    (5) declaration_sections -> uses_opt . constant_declaration
    (6) declaration_sections -> uses_opt . type_declaration var_declaration
    (7) declaration_sections -> uses_opt . type_declaration
    (8) declaration_sections -> uses_opt . var_declaration
    (9) declaration_sections -> uses_opt .
    (111) constant_declaration -> . CONST constant_list
    (30) type_declaration -> . TYPE type_list
    (19) var_declaration -> . VAR declaration_list

  ! shift/reduce conflict for VAR resolved as shift
    FUNCTION        reduce using rule 9 (declaration_sections -> uses_opt .)
    PROCEDURE       reduce using rule 9 (declaration_sections -> uses_opt .)
    BEGIN           reduce using rule 9 (declaration_sections -> uses_opt .)
    CONST           shift and go to state 12
    TYPE            shift and go to state 13
    VAR             shift and go to state 14

  ! VAR             [ reduce using rule 9 (declaration_sections -> uses_opt .) ]

    constant_declaration           shift and go to state 24
    type_declaration               shift and go to state 25
    var_declaration                shift and go to state 26

state 7

    (10) declaration_sections -> constant_declaration . type_declaration var_declaration
    (11) declaration_sections -> constant_declaration . type_declaration
    (12) declaration_sections -> constant_declaration . var_declaration
    (13) declaration_sections -> constant_declaration .
    (30) type_declaration -> . TYPE type_list
    (19) var_declaration -> . VAR declaration_list

  ! shift/reduce conflict for VAR resolved as shift
    FUNCTION        reduce using rule 13 (declaration_sections -> constant_declaration .)
    PROCEDURE       reduce using rule 13 (declaration_sections -> constant_declaration .)
    BEGIN           reduce using rule 13 (declaration_sections -> constant_declaration .)
    TYPE            shift and go to state 13
    VAR             shift and go to state 14

  ! VAR             [ reduce using rule 13 (declaration_sections -> constant_declaration .) ]

    type_declaration               shift and go to state 27
    var_declaration                shift and go to state 28

state 8

    (14) declaration_sections -> type_declaration . var_declaration
    (15) declaration_sections -> type_declaration .
    (19) var_declaration -> . VAR declaration_list

  ! shift/reduce conflict for VAR resolved as shift
    FUNCTION        reduce using rule 15 (declaration_sections -> type_declaration .)
    PROCEDURE       reduce using rule 15 (declaration_sections -> type_declaration .)
    BEGIN           reduce using rule 15 (declaration_sections -> type_declaration .)
    VAR             shift and go to state 14

  ! VAR             [ reduce using rule 15 (declaration_sections -> type_declaration .) ]

    var_declaration                shift and go to state 29

state 9

    (16) declaration_sections -> var_declaration .

    VAR             reduce using rule 16 (declaration_sections -> var_declaration .)
    FUNCTION        reduce using rule 16 (declaration_sections -> var_declaration .)
    PROCEDURE       reduce using rule 16 (declaration_sections -> var_declaration .)
    BEGIN           reduce using rule 16 (declaration_sections -> var_declaration .)


state 10

    (17) uses_opt -> USES . ID SEMICOLON

    ID              shift and go to state 30


state 11

    (18) uses_opt -> empty .

    CONST           reduce using rule 18 (uses_opt -> empty .)
    TYPE            reduce using rule 18 (uses_opt -> empty .)
    VAR             reduce using rule 18 (uses_opt -> empty .)
    FUNCTION        reduce using rule 18 (uses_opt -> empty .)
    PROCEDURE       reduce using rule 18 (uses_opt -> empty .)
    BEGIN           reduce using rule 18 (uses_opt -> empty .)


state 12

    (111) constant_declaration -> CONST . constant_list
    (112) constant_list -> . constant
    (113) constant_list -> . constant_list constant
    (114) constant -> . ID EQUAL CHARACTER_LITERAL SEMICOLON
    (115) constant -> . ID EQUAL NUMBER SEMICOLON
    (116) constant -> . ID EQUAL STRING_LITERAL SEMICOLON

    ID              shift and go to state 33

    constant_list                  shift and go to state 31
    constant                       shift and go to state 32

state 13

    (30) type_declaration -> TYPE . type_list
    (31) type_list -> . type_definition
    (32) type_list -> . type_list type_definition
    (33) type_definition -> . ID EQUAL type_specifier SEMICOLON

    ID              shift and go to state 36

    type_list                      shift and go to state 34
    type_definition                shift and go to state 35

state 14

    (19) var_declaration -> VAR . declaration_list
    (20) declaration_list -> . declaration
    (21) declaration_list -> . declaration_list declaration
    (22) declaration -> . id_list COLON type_specifier SEMICOLON
    (28) id_list -> . ID
    (29) id_list -> . id_list COMMA ID

    ID              shift and go to state 40

    declaration_list               shift and go to state 37
    declaration                    shift and go to state 38
    id_list                        shift and go to state 39

state 15

    (1) program -> PROGRAM ID SEMICOLON declaration_sections block . DOT

    DOT             shift and go to state 41


state 16

    (23) block -> declarations . compound_statement
    (52) compound_statement -> . BEGIN statement_list END

    BEGIN           shift and go to state 43

    compound_statement             shift and go to state 42

state 17

    (24) declarations -> VAR . declaration_list procedure_declarations
    (25) declarations -> VAR . declaration_list
    (20) declaration_list -> . declaration
    (21) declaration_list -> . declaration_list declaration
    (22) declaration -> . id_list COLON type_specifier SEMICOLON
    (28) id_list -> . ID
    (29) id_list -> . id_list COMMA ID

    ID              shift and go to state 40

    declaration_list               shift and go to state 44
    declaration                    shift and go to state 38
    id_list                        shift and go to state 39

state 18

    (26) declarations -> procedure_declarations .
    (41) procedure_declarations -> procedure_declarations . procedure_declaration
    (42) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (43) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT

    BEGIN           reduce using rule 26 (declarations -> procedure_declarations .)
    PROCEDURE       shift and go to state 23

    procedure_declaration          shift and go to state 45

state 19

    (27) declarations -> empty .

    BEGIN           reduce using rule 27 (declarations -> empty .)


state 20

    (45) declarations -> function_declaration .

    BEGIN           reduce using rule 45 (declarations -> function_declaration .)


state 21

    (40) procedure_declarations -> procedure_declaration .

    PROCEDURE       reduce using rule 40 (procedure_declarations -> procedure_declaration .)
    BEGIN           reduce using rule 40 (procedure_declarations -> procedure_declaration .)


state 22

    (44) function_declaration -> FUNCTION . ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON

    ID              shift and go to state 46


state 23

    (42) procedure_declaration -> PROCEDURE . ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (43) procedure_declaration -> PROCEDURE . ID LPAREN parameter_list RPAREN SEMICOLON block DOT

    ID              shift and go to state 47


state 24

    (2) declaration_sections -> uses_opt constant_declaration . type_declaration var_declaration
    (3) declaration_sections -> uses_opt constant_declaration . type_declaration
    (4) declaration_sections -> uses_opt constant_declaration . var_declaration
    (5) declaration_sections -> uses_opt constant_declaration .
    (30) type_declaration -> . TYPE type_list
    (19) var_declaration -> . VAR declaration_list

  ! shift/reduce conflict for VAR resolved as shift
    FUNCTION        reduce using rule 5 (declaration_sections -> uses_opt constant_declaration .)
    PROCEDURE       reduce using rule 5 (declaration_sections -> uses_opt constant_declaration .)
    BEGIN           reduce using rule 5 (declaration_sections -> uses_opt constant_declaration .)
    TYPE            shift and go to state 13
    VAR             shift and go to state 14

  ! VAR             [ reduce using rule 5 (declaration_sections -> uses_opt constant_declaration .) ]

    type_declaration               shift and go to state 48
    var_declaration                shift and go to state 49

state 25

    (6) declaration_sections -> uses_opt type_declaration . var_declaration
    (7) declaration_sections -> uses_opt type_declaration .
    (19) var_declaration -> . VAR declaration_list

  ! shift/reduce conflict for VAR resolved as shift
    FUNCTION        reduce using rule 7 (declaration_sections -> uses_opt type_declaration .)
    PROCEDURE       reduce using rule 7 (declaration_sections -> uses_opt type_declaration .)
    BEGIN           reduce using rule 7 (declaration_sections -> uses_opt type_declaration .)
    VAR             shift and go to state 14

  ! VAR             [ reduce using rule 7 (declaration_sections -> uses_opt type_declaration .) ]

    var_declaration                shift and go to state 50

state 26

    (8) declaration_sections -> uses_opt var_declaration .

    VAR             reduce using rule 8 (declaration_sections -> uses_opt var_declaration .)
    FUNCTION        reduce using rule 8 (declaration_sections -> uses_opt var_declaration .)
    PROCEDURE       reduce using rule 8 (declaration_sections -> uses_opt var_declaration .)
    BEGIN           reduce using rule 8 (declaration_sections -> uses_opt var_declaration .)


state 27

    (10) declaration_sections -> constant_declaration type_declaration . var_declaration
    (11) declaration_sections -> constant_declaration type_declaration .
    (19) var_declaration -> . VAR declaration_list

  ! shift/reduce conflict for VAR resolved as shift
    FUNCTION        reduce using rule 11 (declaration_sections -> constant_declaration type_declaration .)
    PROCEDURE       reduce using rule 11 (declaration_sections -> constant_declaration type_declaration .)
    BEGIN           reduce using rule 11 (declaration_sections -> constant_declaration type_declaration .)
    VAR             shift and go to state 14

  ! VAR             [ reduce using rule 11 (declaration_sections -> constant_declaration type_declaration .) ]

    var_declaration                shift and go to state 51

state 28

    (12) declaration_sections -> constant_declaration var_declaration .

    VAR             reduce using rule 12 (declaration_sections -> constant_declaration var_declaration .)
    FUNCTION        reduce using rule 12 (declaration_sections -> constant_declaration var_declaration .)
    PROCEDURE       reduce using rule 12 (declaration_sections -> constant_declaration var_declaration .)
    BEGIN           reduce using rule 12 (declaration_sections -> constant_declaration var_declaration .)


state 29

    (14) declaration_sections -> type_declaration var_declaration .

    VAR             reduce using rule 14 (declaration_sections -> type_declaration var_declaration .)
    FUNCTION        reduce using rule 14 (declaration_sections -> type_declaration var_declaration .)
    PROCEDURE       reduce using rule 14 (declaration_sections -> type_declaration var_declaration .)
    BEGIN           reduce using rule 14 (declaration_sections -> type_declaration var_declaration .)


state 30

    (17) uses_opt -> USES ID . SEMICOLON

    SEMICOLON       shift and go to state 52


state 31

    (111) constant_declaration -> CONST constant_list .
    (113) constant_list -> constant_list . constant
    (114) constant -> . ID EQUAL CHARACTER_LITERAL SEMICOLON
    (115) constant -> . ID EQUAL NUMBER SEMICOLON
    (116) constant -> . ID EQUAL STRING_LITERAL SEMICOLON

    TYPE            reduce using rule 111 (constant_declaration -> CONST constant_list .)
    VAR             reduce using rule 111 (constant_declaration -> CONST constant_list .)
    FUNCTION        reduce using rule 111 (constant_declaration -> CONST constant_list .)
    PROCEDURE       reduce using rule 111 (constant_declaration -> CONST constant_list .)
    BEGIN           reduce using rule 111 (constant_declaration -> CONST constant_list .)
    ID              shift and go to state 33

    constant                       shift and go to state 53

state 32

    (112) constant_list -> constant .

    ID              reduce using rule 112 (constant_list -> constant .)
    TYPE            reduce using rule 112 (constant_list -> constant .)
    VAR             reduce using rule 112 (constant_list -> constant .)
    FUNCTION        reduce using rule 112 (constant_list -> constant .)
    PROCEDURE       reduce using rule 112 (constant_list -> constant .)
    BEGIN           reduce using rule 112 (constant_list -> constant .)


state 33

    (114) constant -> ID . EQUAL CHARACTER_LITERAL SEMICOLON
    (115) constant -> ID . EQUAL NUMBER SEMICOLON
    (116) constant -> ID . EQUAL STRING_LITERAL SEMICOLON

    EQUAL           shift and go to state 54


state 34

    (30) type_declaration -> TYPE type_list .
    (32) type_list -> type_list . type_definition
    (33) type_definition -> . ID EQUAL type_specifier SEMICOLON

    VAR             reduce using rule 30 (type_declaration -> TYPE type_list .)
    FUNCTION        reduce using rule 30 (type_declaration -> TYPE type_list .)
    PROCEDURE       reduce using rule 30 (type_declaration -> TYPE type_list .)
    BEGIN           reduce using rule 30 (type_declaration -> TYPE type_list .)
    ID              shift and go to state 36

    type_definition                shift and go to state 55

state 35

    (31) type_list -> type_definition .

    ID              reduce using rule 31 (type_list -> type_definition .)
    VAR             reduce using rule 31 (type_list -> type_definition .)
    FUNCTION        reduce using rule 31 (type_list -> type_definition .)
    PROCEDURE       reduce using rule 31 (type_list -> type_definition .)
    BEGIN           reduce using rule 31 (type_list -> type_definition .)


state 36

    (33) type_definition -> ID . EQUAL type_specifier SEMICOLON

    EQUAL           shift and go to state 56


state 37

    (19) var_declaration -> VAR declaration_list .
    (21) declaration_list -> declaration_list . declaration
    (22) declaration -> . id_list COLON type_specifier SEMICOLON
    (28) id_list -> . ID
    (29) id_list -> . id_list COMMA ID

    VAR             reduce using rule 19 (var_declaration -> VAR declaration_list .)
    FUNCTION        reduce using rule 19 (var_declaration -> VAR declaration_list .)
    PROCEDURE       reduce using rule 19 (var_declaration -> VAR declaration_list .)
    BEGIN           reduce using rule 19 (var_declaration -> VAR declaration_list .)
    ID              shift and go to state 40

    declaration                    shift and go to state 57
    id_list                        shift and go to state 39

state 38

    (20) declaration_list -> declaration .

    ID              reduce using rule 20 (declaration_list -> declaration .)
    VAR             reduce using rule 20 (declaration_list -> declaration .)
    FUNCTION        reduce using rule 20 (declaration_list -> declaration .)
    PROCEDURE       reduce using rule 20 (declaration_list -> declaration .)
    BEGIN           reduce using rule 20 (declaration_list -> declaration .)


state 39

    (22) declaration -> id_list . COLON type_specifier SEMICOLON
    (29) id_list -> id_list . COMMA ID

    COLON           shift and go to state 58
    COMMA           shift and go to state 59


state 40

    (28) id_list -> ID .

    COLON           reduce using rule 28 (id_list -> ID .)
    COMMA           reduce using rule 28 (id_list -> ID .)


state 41

    (1) program -> PROGRAM ID SEMICOLON declaration_sections block DOT .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON declaration_sections block DOT .)


state 42

    (23) block -> declarations compound_statement .

    DOT             reduce using rule 23 (block -> declarations compound_statement .)
    SEMICOLON       reduce using rule 23 (block -> declarations compound_statement .)


state 43

    (52) compound_statement -> BEGIN . statement_list END
    (53) statement_list -> . statement statement_list_tail
    (56) statement -> . if_statement
    (57) statement -> . assignment_statement
    (58) statement -> . while_statement
    (59) statement -> . procedure_call
    (60) statement -> . compound_statement
    (61) statement -> . for_statement
    (62) statement -> . empty
    (105) statement -> . READLN
    (106) statement -> . READLN LPAREN ID RPAREN
    (107) statement -> . READLN LBRACKET ID RBRACKET
    (108) statement -> . WRITELN LPAREN expression_list RPAREN
    (109) statement -> . WRITE LPAREN expression_list RPAREN
    (110) statement -> . USES ID SEMICOLON
    (63) if_statement -> . IF expression THEN statement ELSE statement
    (64) if_statement -> . IF expression THEN statement
    (67) assignment_statement -> . variable COLON_EQUAL expression
    (70) while_statement -> . WHILE expression DO statement
    (71) procedure_call -> . ID LPAREN expression_list RPAREN
    (52) compound_statement -> . BEGIN statement_list END
    (65) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (66) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (104) empty -> .
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    READLN          shift and go to state 69
    WRITELN         shift and go to state 71
    WRITE           shift and go to state 72
    USES            shift and go to state 73
    IF              shift and go to state 74
    WHILE           shift and go to state 76
    ID              shift and go to state 70
    BEGIN           shift and go to state 43
    FOR             shift and go to state 77
    SEMICOLON       reduce using rule 104 (empty -> .)
    END             reduce using rule 104 (empty -> .)

    statement_list                 shift and go to state 60
    statement                      shift and go to state 61
    if_statement                   shift and go to state 62
    assignment_statement           shift and go to state 63
    while_statement                shift and go to state 64
    procedure_call                 shift and go to state 65
    compound_statement             shift and go to state 66
    for_statement                  shift and go to state 67
    empty                          shift and go to state 68
    variable                       shift and go to state 75

state 44

    (24) declarations -> VAR declaration_list . procedure_declarations
    (25) declarations -> VAR declaration_list .
    (21) declaration_list -> declaration_list . declaration
    (40) procedure_declarations -> . procedure_declaration
    (41) procedure_declarations -> . procedure_declarations procedure_declaration
    (22) declaration -> . id_list COLON type_specifier SEMICOLON
    (42) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (43) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT
    (28) id_list -> . ID
    (29) id_list -> . id_list COMMA ID

    BEGIN           reduce using rule 25 (declarations -> VAR declaration_list .)
    PROCEDURE       shift and go to state 23
    ID              shift and go to state 40

    procedure_declarations         shift and go to state 78
    declaration                    shift and go to state 57
    procedure_declaration          shift and go to state 21
    id_list                        shift and go to state 39

state 45

    (41) procedure_declarations -> procedure_declarations procedure_declaration .

    PROCEDURE       reduce using rule 41 (procedure_declarations -> procedure_declarations procedure_declaration .)
    BEGIN           reduce using rule 41 (procedure_declarations -> procedure_declarations procedure_declaration .)


state 46

    (44) function_declaration -> FUNCTION ID . LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON

    LPAREN          shift and go to state 79


state 47

    (42) procedure_declaration -> PROCEDURE ID . LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (43) procedure_declaration -> PROCEDURE ID . LPAREN parameter_list RPAREN SEMICOLON block DOT

    LPAREN          shift and go to state 80


state 48

    (2) declaration_sections -> uses_opt constant_declaration type_declaration . var_declaration
    (3) declaration_sections -> uses_opt constant_declaration type_declaration .
    (19) var_declaration -> . VAR declaration_list

  ! shift/reduce conflict for VAR resolved as shift
    FUNCTION        reduce using rule 3 (declaration_sections -> uses_opt constant_declaration type_declaration .)
    PROCEDURE       reduce using rule 3 (declaration_sections -> uses_opt constant_declaration type_declaration .)
    BEGIN           reduce using rule 3 (declaration_sections -> uses_opt constant_declaration type_declaration .)
    VAR             shift and go to state 14

  ! VAR             [ reduce using rule 3 (declaration_sections -> uses_opt constant_declaration type_declaration .) ]

    var_declaration                shift and go to state 81

state 49

    (4) declaration_sections -> uses_opt constant_declaration var_declaration .

    VAR             reduce using rule 4 (declaration_sections -> uses_opt constant_declaration var_declaration .)
    FUNCTION        reduce using rule 4 (declaration_sections -> uses_opt constant_declaration var_declaration .)
    PROCEDURE       reduce using rule 4 (declaration_sections -> uses_opt constant_declaration var_declaration .)
    BEGIN           reduce using rule 4 (declaration_sections -> uses_opt constant_declaration var_declaration .)


state 50

    (6) declaration_sections -> uses_opt type_declaration var_declaration .

    VAR             reduce using rule 6 (declaration_sections -> uses_opt type_declaration var_declaration .)
    FUNCTION        reduce using rule 6 (declaration_sections -> uses_opt type_declaration var_declaration .)
    PROCEDURE       reduce using rule 6 (declaration_sections -> uses_opt type_declaration var_declaration .)
    BEGIN           reduce using rule 6 (declaration_sections -> uses_opt type_declaration var_declaration .)


state 51

    (10) declaration_sections -> constant_declaration type_declaration var_declaration .

    VAR             reduce using rule 10 (declaration_sections -> constant_declaration type_declaration var_declaration .)
    FUNCTION        reduce using rule 10 (declaration_sections -> constant_declaration type_declaration var_declaration .)
    PROCEDURE       reduce using rule 10 (declaration_sections -> constant_declaration type_declaration var_declaration .)
    BEGIN           reduce using rule 10 (declaration_sections -> constant_declaration type_declaration var_declaration .)


state 52

    (17) uses_opt -> USES ID SEMICOLON .

    CONST           reduce using rule 17 (uses_opt -> USES ID SEMICOLON .)
    TYPE            reduce using rule 17 (uses_opt -> USES ID SEMICOLON .)
    VAR             reduce using rule 17 (uses_opt -> USES ID SEMICOLON .)
    FUNCTION        reduce using rule 17 (uses_opt -> USES ID SEMICOLON .)
    PROCEDURE       reduce using rule 17 (uses_opt -> USES ID SEMICOLON .)
    BEGIN           reduce using rule 17 (uses_opt -> USES ID SEMICOLON .)


state 53

    (113) constant_list -> constant_list constant .

    ID              reduce using rule 113 (constant_list -> constant_list constant .)
    TYPE            reduce using rule 113 (constant_list -> constant_list constant .)
    VAR             reduce using rule 113 (constant_list -> constant_list constant .)
    FUNCTION        reduce using rule 113 (constant_list -> constant_list constant .)
    PROCEDURE       reduce using rule 113 (constant_list -> constant_list constant .)
    BEGIN           reduce using rule 113 (constant_list -> constant_list constant .)


state 54

    (114) constant -> ID EQUAL . CHARACTER_LITERAL SEMICOLON
    (115) constant -> ID EQUAL . NUMBER SEMICOLON
    (116) constant -> ID EQUAL . STRING_LITERAL SEMICOLON

    CHARACTER_LITERAL shift and go to state 82
    NUMBER          shift and go to state 83
    STRING_LITERAL  shift and go to state 84


state 55

    (32) type_list -> type_list type_definition .

    ID              reduce using rule 32 (type_list -> type_list type_definition .)
    VAR             reduce using rule 32 (type_list -> type_list type_definition .)
    FUNCTION        reduce using rule 32 (type_list -> type_list type_definition .)
    PROCEDURE       reduce using rule 32 (type_list -> type_list type_definition .)
    BEGIN           reduce using rule 32 (type_list -> type_list type_definition .)


state 56

    (33) type_definition -> ID EQUAL . type_specifier SEMICOLON
    (34) type_specifier -> . ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier
    (35) type_specifier -> . INTEGER
    (36) type_specifier -> . BYTE
    (37) type_specifier -> . CHAR
    (38) type_specifier -> . ID
    (39) type_specifier -> . LONGINT

    ARRAY           shift and go to state 87
    INTEGER         shift and go to state 88
    BYTE            shift and go to state 89
    CHAR            shift and go to state 90
    ID              shift and go to state 85
    LONGINT         shift and go to state 91

    type_specifier                 shift and go to state 86

state 57

    (21) declaration_list -> declaration_list declaration .

    ID              reduce using rule 21 (declaration_list -> declaration_list declaration .)
    VAR             reduce using rule 21 (declaration_list -> declaration_list declaration .)
    FUNCTION        reduce using rule 21 (declaration_list -> declaration_list declaration .)
    PROCEDURE       reduce using rule 21 (declaration_list -> declaration_list declaration .)
    BEGIN           reduce using rule 21 (declaration_list -> declaration_list declaration .)


state 58

    (22) declaration -> id_list COLON . type_specifier SEMICOLON
    (34) type_specifier -> . ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier
    (35) type_specifier -> . INTEGER
    (36) type_specifier -> . BYTE
    (37) type_specifier -> . CHAR
    (38) type_specifier -> . ID
    (39) type_specifier -> . LONGINT

    ARRAY           shift and go to state 87
    INTEGER         shift and go to state 88
    BYTE            shift and go to state 89
    CHAR            shift and go to state 90
    ID              shift and go to state 85
    LONGINT         shift and go to state 91

    type_specifier                 shift and go to state 92

state 59

    (29) id_list -> id_list COMMA . ID

    ID              shift and go to state 93


state 60

    (52) compound_statement -> BEGIN statement_list . END

    END             shift and go to state 94


state 61

    (53) statement_list -> statement . statement_list_tail
    (54) statement_list_tail -> . SEMICOLON statement statement_list_tail
    (55) statement_list_tail -> . empty
    (104) empty -> .

    SEMICOLON       shift and go to state 96
    END             reduce using rule 104 (empty -> .)

    statement_list_tail            shift and go to state 95
    empty                          shift and go to state 97

state 62

    (56) statement -> if_statement .

    SEMICOLON       reduce using rule 56 (statement -> if_statement .)
    END             reduce using rule 56 (statement -> if_statement .)
    ELSE            reduce using rule 56 (statement -> if_statement .)


state 63

    (57) statement -> assignment_statement .

    SEMICOLON       reduce using rule 57 (statement -> assignment_statement .)
    END             reduce using rule 57 (statement -> assignment_statement .)
    ELSE            reduce using rule 57 (statement -> assignment_statement .)


state 64

    (58) statement -> while_statement .

    SEMICOLON       reduce using rule 58 (statement -> while_statement .)
    END             reduce using rule 58 (statement -> while_statement .)
    ELSE            reduce using rule 58 (statement -> while_statement .)


state 65

    (59) statement -> procedure_call .

    SEMICOLON       reduce using rule 59 (statement -> procedure_call .)
    END             reduce using rule 59 (statement -> procedure_call .)
    ELSE            reduce using rule 59 (statement -> procedure_call .)


state 66

    (60) statement -> compound_statement .

    SEMICOLON       reduce using rule 60 (statement -> compound_statement .)
    END             reduce using rule 60 (statement -> compound_statement .)
    ELSE            reduce using rule 60 (statement -> compound_statement .)


state 67

    (61) statement -> for_statement .

    SEMICOLON       reduce using rule 61 (statement -> for_statement .)
    END             reduce using rule 61 (statement -> for_statement .)
    ELSE            reduce using rule 61 (statement -> for_statement .)


state 68

    (62) statement -> empty .

    SEMICOLON       reduce using rule 62 (statement -> empty .)
    END             reduce using rule 62 (statement -> empty .)
    ELSE            reduce using rule 62 (statement -> empty .)


state 69

    (105) statement -> READLN .
    (106) statement -> READLN . LPAREN ID RPAREN
    (107) statement -> READLN . LBRACKET ID RBRACKET

    SEMICOLON       reduce using rule 105 (statement -> READLN .)
    END             reduce using rule 105 (statement -> READLN .)
    ELSE            reduce using rule 105 (statement -> READLN .)
    LPAREN          shift and go to state 98
    LBRACKET        shift and go to state 99


state 70

    (71) procedure_call -> ID . LPAREN expression_list RPAREN
    (68) variable -> ID .
    (69) variable -> ID . LBRACKET expression RBRACKET

    LPAREN          shift and go to state 100
    COLON_EQUAL     reduce using rule 68 (variable -> ID .)
    LBRACKET        shift and go to state 101


state 71

    (108) statement -> WRITELN . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 102


state 72

    (109) statement -> WRITE . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 103


state 73

    (110) statement -> USES . ID SEMICOLON

    ID              shift and go to state 104


state 74

    (63) if_statement -> IF . expression THEN statement ELSE statement
    (64) if_statement -> IF . expression THEN statement
    (76) expression -> . simple_expression relop simple_expression
    (77) expression -> . simple_expression
    (89) expression -> . expression PLUS expression
    (90) expression -> . expression MINUS expression
    (91) expression -> . expression TIMES expression
    (92) expression -> . expression DIVIDE expression
    (93) expression -> . expression MOD expression
    (117) expression -> . expression AND expression
    (118) expression -> . expression OR expression
    (119) expression -> . NOT expression
    (78) simple_expression -> . term simple_expression_tail
    (83) term -> . factor term_tail
    (47) factor -> . function_call
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . variable
    (96) factor -> . NUMBER
    (97) factor -> . STRING_LITERAL
    (46) function_call -> . ID LPAREN expression_list RPAREN
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 107
    LPAREN          shift and go to state 111
    NUMBER          shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    ID              shift and go to state 115

    expression                     shift and go to state 105
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    function_call                  shift and go to state 110
    variable                       shift and go to state 112

state 75

    (67) assignment_statement -> variable . COLON_EQUAL expression

    COLON_EQUAL     shift and go to state 116


state 76

    (70) while_statement -> WHILE . expression DO statement
    (76) expression -> . simple_expression relop simple_expression
    (77) expression -> . simple_expression
    (89) expression -> . expression PLUS expression
    (90) expression -> . expression MINUS expression
    (91) expression -> . expression TIMES expression
    (92) expression -> . expression DIVIDE expression
    (93) expression -> . expression MOD expression
    (117) expression -> . expression AND expression
    (118) expression -> . expression OR expression
    (119) expression -> . NOT expression
    (78) simple_expression -> . term simple_expression_tail
    (83) term -> . factor term_tail
    (47) factor -> . function_call
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . variable
    (96) factor -> . NUMBER
    (97) factor -> . STRING_LITERAL
    (46) function_call -> . ID LPAREN expression_list RPAREN
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 107
    LPAREN          shift and go to state 111
    NUMBER          shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    ID              shift and go to state 115

    expression                     shift and go to state 117
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    function_call                  shift and go to state 110
    variable                       shift and go to state 112

state 77

    (65) for_statement -> FOR . ID COLON_EQUAL expression TO expression DO statement
    (66) for_statement -> FOR . ID COLON_EQUAL expression DOWNTO expression DO statement

    ID              shift and go to state 118


state 78

    (24) declarations -> VAR declaration_list procedure_declarations .
    (41) procedure_declarations -> procedure_declarations . procedure_declaration
    (42) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (43) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT

    BEGIN           reduce using rule 24 (declarations -> VAR declaration_list procedure_declarations .)
    PROCEDURE       shift and go to state 23

    procedure_declaration          shift and go to state 45

state 79

    (44) function_declaration -> FUNCTION ID LPAREN . parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (48) parameter_list -> . parameter
    (49) parameter_list -> . parameter_list SEMICOLON parameter
    (50) parameter -> . id_list COLON type_specifier
    (51) parameter -> . VAR id_list COLON type_specifier
    (28) id_list -> . ID
    (29) id_list -> . id_list COMMA ID

    VAR             shift and go to state 122
    ID              shift and go to state 40

    parameter_list                 shift and go to state 119
    parameter                      shift and go to state 120
    id_list                        shift and go to state 121

state 80

    (42) procedure_declaration -> PROCEDURE ID LPAREN . parameter_list RPAREN SEMICOLON block SEMICOLON
    (43) procedure_declaration -> PROCEDURE ID LPAREN . parameter_list RPAREN SEMICOLON block DOT
    (48) parameter_list -> . parameter
    (49) parameter_list -> . parameter_list SEMICOLON parameter
    (50) parameter -> . id_list COLON type_specifier
    (51) parameter -> . VAR id_list COLON type_specifier
    (28) id_list -> . ID
    (29) id_list -> . id_list COMMA ID

    VAR             shift and go to state 122
    ID              shift and go to state 40

    parameter_list                 shift and go to state 123
    parameter                      shift and go to state 120
    id_list                        shift and go to state 121

state 81

    (2) declaration_sections -> uses_opt constant_declaration type_declaration var_declaration .

    VAR             reduce using rule 2 (declaration_sections -> uses_opt constant_declaration type_declaration var_declaration .)
    FUNCTION        reduce using rule 2 (declaration_sections -> uses_opt constant_declaration type_declaration var_declaration .)
    PROCEDURE       reduce using rule 2 (declaration_sections -> uses_opt constant_declaration type_declaration var_declaration .)
    BEGIN           reduce using rule 2 (declaration_sections -> uses_opt constant_declaration type_declaration var_declaration .)


state 82

    (114) constant -> ID EQUAL CHARACTER_LITERAL . SEMICOLON

    SEMICOLON       shift and go to state 124


state 83

    (115) constant -> ID EQUAL NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 125


state 84

    (116) constant -> ID EQUAL STRING_LITERAL . SEMICOLON

    SEMICOLON       shift and go to state 126


state 85

    (38) type_specifier -> ID .

    SEMICOLON       reduce using rule 38 (type_specifier -> ID .)
    RPAREN          reduce using rule 38 (type_specifier -> ID .)


state 86

    (33) type_definition -> ID EQUAL type_specifier . SEMICOLON

    SEMICOLON       shift and go to state 127


state 87

    (34) type_specifier -> ARRAY . LBRACKET expression DOTDOT expression RBRACKET OF type_specifier

    LBRACKET        shift and go to state 128


state 88

    (35) type_specifier -> INTEGER .

    SEMICOLON       reduce using rule 35 (type_specifier -> INTEGER .)
    RPAREN          reduce using rule 35 (type_specifier -> INTEGER .)


state 89

    (36) type_specifier -> BYTE .

    SEMICOLON       reduce using rule 36 (type_specifier -> BYTE .)
    RPAREN          reduce using rule 36 (type_specifier -> BYTE .)


state 90

    (37) type_specifier -> CHAR .

    SEMICOLON       reduce using rule 37 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 37 (type_specifier -> CHAR .)


state 91

    (39) type_specifier -> LONGINT .

    SEMICOLON       reduce using rule 39 (type_specifier -> LONGINT .)
    RPAREN          reduce using rule 39 (type_specifier -> LONGINT .)


state 92

    (22) declaration -> id_list COLON type_specifier . SEMICOLON

    SEMICOLON       shift and go to state 129


state 93

    (29) id_list -> id_list COMMA ID .

    COLON           reduce using rule 29 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 29 (id_list -> id_list COMMA ID .)


state 94

    (52) compound_statement -> BEGIN statement_list END .

    DOT             reduce using rule 52 (compound_statement -> BEGIN statement_list END .)
    SEMICOLON       reduce using rule 52 (compound_statement -> BEGIN statement_list END .)
    END             reduce using rule 52 (compound_statement -> BEGIN statement_list END .)
    ELSE            reduce using rule 52 (compound_statement -> BEGIN statement_list END .)


state 95

    (53) statement_list -> statement statement_list_tail .

    END             reduce using rule 53 (statement_list -> statement statement_list_tail .)


state 96

    (54) statement_list_tail -> SEMICOLON . statement statement_list_tail
    (56) statement -> . if_statement
    (57) statement -> . assignment_statement
    (58) statement -> . while_statement
    (59) statement -> . procedure_call
    (60) statement -> . compound_statement
    (61) statement -> . for_statement
    (62) statement -> . empty
    (105) statement -> . READLN
    (106) statement -> . READLN LPAREN ID RPAREN
    (107) statement -> . READLN LBRACKET ID RBRACKET
    (108) statement -> . WRITELN LPAREN expression_list RPAREN
    (109) statement -> . WRITE LPAREN expression_list RPAREN
    (110) statement -> . USES ID SEMICOLON
    (63) if_statement -> . IF expression THEN statement ELSE statement
    (64) if_statement -> . IF expression THEN statement
    (67) assignment_statement -> . variable COLON_EQUAL expression
    (70) while_statement -> . WHILE expression DO statement
    (71) procedure_call -> . ID LPAREN expression_list RPAREN
    (52) compound_statement -> . BEGIN statement_list END
    (65) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (66) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (104) empty -> .
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    READLN          shift and go to state 69
    WRITELN         shift and go to state 71
    WRITE           shift and go to state 72
    USES            shift and go to state 73
    IF              shift and go to state 74
    WHILE           shift and go to state 76
    ID              shift and go to state 70
    BEGIN           shift and go to state 43
    FOR             shift and go to state 77
    SEMICOLON       reduce using rule 104 (empty -> .)
    END             reduce using rule 104 (empty -> .)

    statement                      shift and go to state 130
    if_statement                   shift and go to state 62
    assignment_statement           shift and go to state 63
    while_statement                shift and go to state 64
    procedure_call                 shift and go to state 65
    compound_statement             shift and go to state 66
    for_statement                  shift and go to state 67
    empty                          shift and go to state 68
    variable                       shift and go to state 75

state 97

    (55) statement_list_tail -> empty .

    END             reduce using rule 55 (statement_list_tail -> empty .)


state 98

    (106) statement -> READLN LPAREN . ID RPAREN

    ID              shift and go to state 131


state 99

    (107) statement -> READLN LBRACKET . ID RBRACKET

    ID              shift and go to state 132


state 100

    (71) procedure_call -> ID LPAREN . expression_list RPAREN
    (72) expression_list -> . expression expression_list_tail
    (75) expression_list -> . empty
    (76) expression -> . simple_expression relop simple_expression
    (77) expression -> . simple_expression
    (89) expression -> . expression PLUS expression
    (90) expression -> . expression MINUS expression
    (91) expression -> . expression TIMES expression
    (92) expression -> . expression DIVIDE expression
    (93) expression -> . expression MOD expression
    (117) expression -> . expression AND expression
    (118) expression -> . expression OR expression
    (119) expression -> . NOT expression
    (104) empty -> .
    (78) simple_expression -> . term simple_expression_tail
    (83) term -> . factor term_tail
    (47) factor -> . function_call
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . variable
    (96) factor -> . NUMBER
    (97) factor -> . STRING_LITERAL
    (46) function_call -> . ID LPAREN expression_list RPAREN
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 107
    RPAREN          reduce using rule 104 (empty -> .)
    LPAREN          shift and go to state 111
    NUMBER          shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    ID              shift and go to state 115

    expression_list                shift and go to state 133
    expression                     shift and go to state 134
    empty                          shift and go to state 135
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    function_call                  shift and go to state 110
    variable                       shift and go to state 112

state 101

    (69) variable -> ID LBRACKET . expression RBRACKET
    (76) expression -> . simple_expression relop simple_expression
    (77) expression -> . simple_expression
    (89) expression -> . expression PLUS expression
    (90) expression -> . expression MINUS expression
    (91) expression -> . expression TIMES expression
    (92) expression -> . expression DIVIDE expression
    (93) expression -> . expression MOD expression
    (117) expression -> . expression AND expression
    (118) expression -> . expression OR expression
    (119) expression -> . NOT expression
    (78) simple_expression -> . term simple_expression_tail
    (83) term -> . factor term_tail
    (47) factor -> . function_call
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . variable
    (96) factor -> . NUMBER
    (97) factor -> . STRING_LITERAL
    (46) function_call -> . ID LPAREN expression_list RPAREN
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 107
    LPAREN          shift and go to state 111
    NUMBER          shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    ID              shift and go to state 115

    expression                     shift and go to state 136
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    function_call                  shift and go to state 110
    variable                       shift and go to state 112

state 102

    (108) statement -> WRITELN LPAREN . expression_list RPAREN
    (72) expression_list -> . expression expression_list_tail
    (75) expression_list -> . empty
    (76) expression -> . simple_expression relop simple_expression
    (77) expression -> . simple_expression
    (89) expression -> . expression PLUS expression
    (90) expression -> . expression MINUS expression
    (91) expression -> . expression TIMES expression
    (92) expression -> . expression DIVIDE expression
    (93) expression -> . expression MOD expression
    (117) expression -> . expression AND expression
    (118) expression -> . expression OR expression
    (119) expression -> . NOT expression
    (104) empty -> .
    (78) simple_expression -> . term simple_expression_tail
    (83) term -> . factor term_tail
    (47) factor -> . function_call
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . variable
    (96) factor -> . NUMBER
    (97) factor -> . STRING_LITERAL
    (46) function_call -> . ID LPAREN expression_list RPAREN
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 107
    RPAREN          reduce using rule 104 (empty -> .)
    LPAREN          shift and go to state 111
    NUMBER          shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    ID              shift and go to state 115

    expression_list                shift and go to state 137
    expression                     shift and go to state 134
    empty                          shift and go to state 135
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    function_call                  shift and go to state 110
    variable                       shift and go to state 112

state 103

    (109) statement -> WRITE LPAREN . expression_list RPAREN
    (72) expression_list -> . expression expression_list_tail
    (75) expression_list -> . empty
    (76) expression -> . simple_expression relop simple_expression
    (77) expression -> . simple_expression
    (89) expression -> . expression PLUS expression
    (90) expression -> . expression MINUS expression
    (91) expression -> . expression TIMES expression
    (92) expression -> . expression DIVIDE expression
    (93) expression -> . expression MOD expression
    (117) expression -> . expression AND expression
    (118) expression -> . expression OR expression
    (119) expression -> . NOT expression
    (104) empty -> .
    (78) simple_expression -> . term simple_expression_tail
    (83) term -> . factor term_tail
    (47) factor -> . function_call
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . variable
    (96) factor -> . NUMBER
    (97) factor -> . STRING_LITERAL
    (46) function_call -> . ID LPAREN expression_list RPAREN
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 107
    RPAREN          reduce using rule 104 (empty -> .)
    LPAREN          shift and go to state 111
    NUMBER          shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    ID              shift and go to state 115

    expression_list                shift and go to state 138
    expression                     shift and go to state 134
    empty                          shift and go to state 135
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    function_call                  shift and go to state 110
    variable                       shift and go to state 112

state 104

    (110) statement -> USES ID . SEMICOLON

    SEMICOLON       shift and go to state 139


state 105

    (63) if_statement -> IF expression . THEN statement ELSE statement
    (64) if_statement -> IF expression . THEN statement
    (89) expression -> expression . PLUS expression
    (90) expression -> expression . MINUS expression
    (91) expression -> expression . TIMES expression
    (92) expression -> expression . DIVIDE expression
    (93) expression -> expression . MOD expression
    (117) expression -> expression . AND expression
    (118) expression -> expression . OR expression

    THEN            shift and go to state 140
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    AND             shift and go to state 146
    OR              shift and go to state 147


state 106

    (76) expression -> simple_expression . relop simple_expression
    (77) expression -> simple_expression .
    (98) relop -> . LESS
    (99) relop -> . LESS_EQUAL
    (100) relop -> . GREAT
    (101) relop -> . GREAT_EQUAL
    (102) relop -> . EQUAL
    (103) relop -> . DIFFERENT

    THEN            reduce using rule 77 (expression -> simple_expression .)
    PLUS            reduce using rule 77 (expression -> simple_expression .)
    MINUS           reduce using rule 77 (expression -> simple_expression .)
    TIMES           reduce using rule 77 (expression -> simple_expression .)
    DIVIDE          reduce using rule 77 (expression -> simple_expression .)
    MOD             reduce using rule 77 (expression -> simple_expression .)
    AND             reduce using rule 77 (expression -> simple_expression .)
    OR              reduce using rule 77 (expression -> simple_expression .)
    DO              reduce using rule 77 (expression -> simple_expression .)
    COMMA           reduce using rule 77 (expression -> simple_expression .)
    RPAREN          reduce using rule 77 (expression -> simple_expression .)
    RBRACKET        reduce using rule 77 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 77 (expression -> simple_expression .)
    END             reduce using rule 77 (expression -> simple_expression .)
    ELSE            reduce using rule 77 (expression -> simple_expression .)
    DOTDOT          reduce using rule 77 (expression -> simple_expression .)
    TO              reduce using rule 77 (expression -> simple_expression .)
    DOWNTO          reduce using rule 77 (expression -> simple_expression .)
    LESS            shift and go to state 149
    LESS_EQUAL      shift and go to state 150
    GREAT           shift and go to state 151
    GREAT_EQUAL     shift and go to state 152
    EQUAL           shift and go to state 153
    DIFFERENT       shift and go to state 154

    relop                          shift and go to state 148

state 107

    (119) expression -> NOT . expression
    (76) expression -> . simple_expression relop simple_expression
    (77) expression -> . simple_expression
    (89) expression -> . expression PLUS expression
    (90) expression -> . expression MINUS expression
    (91) expression -> . expression TIMES expression
    (92) expression -> . expression DIVIDE expression
    (93) expression -> . expression MOD expression
    (117) expression -> . expression AND expression
    (118) expression -> . expression OR expression
    (119) expression -> . NOT expression
    (78) simple_expression -> . term simple_expression_tail
    (83) term -> . factor term_tail
    (47) factor -> . function_call
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . variable
    (96) factor -> . NUMBER
    (97) factor -> . STRING_LITERAL
    (46) function_call -> . ID LPAREN expression_list RPAREN
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 107
    LPAREN          shift and go to state 111
    NUMBER          shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    ID              shift and go to state 115

    expression                     shift and go to state 155
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    function_call                  shift and go to state 110
    variable                       shift and go to state 112

state 108

    (78) simple_expression -> term . simple_expression_tail
    (79) simple_expression_tail -> . addop term
    (80) simple_expression_tail -> . empty
    (81) addop -> . PLUS
    (82) addop -> . MINUS
    (104) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 159
    MINUS           shift and go to state 160
    LESS            reduce using rule 104 (empty -> .)
    LESS_EQUAL      reduce using rule 104 (empty -> .)
    GREAT           reduce using rule 104 (empty -> .)
    GREAT_EQUAL     reduce using rule 104 (empty -> .)
    EQUAL           reduce using rule 104 (empty -> .)
    DIFFERENT       reduce using rule 104 (empty -> .)
    THEN            reduce using rule 104 (empty -> .)
    TIMES           reduce using rule 104 (empty -> .)
    DIVIDE          reduce using rule 104 (empty -> .)
    MOD             reduce using rule 104 (empty -> .)
    AND             reduce using rule 104 (empty -> .)
    OR              reduce using rule 104 (empty -> .)
    DO              reduce using rule 104 (empty -> .)
    COMMA           reduce using rule 104 (empty -> .)
    RPAREN          reduce using rule 104 (empty -> .)
    RBRACKET        reduce using rule 104 (empty -> .)
    SEMICOLON       reduce using rule 104 (empty -> .)
    END             reduce using rule 104 (empty -> .)
    ELSE            reduce using rule 104 (empty -> .)
    DOTDOT          reduce using rule 104 (empty -> .)
    TO              reduce using rule 104 (empty -> .)
    DOWNTO          reduce using rule 104 (empty -> .)

  ! PLUS            [ reduce using rule 104 (empty -> .) ]
  ! MINUS           [ reduce using rule 104 (empty -> .) ]

    simple_expression_tail         shift and go to state 156
    addop                          shift and go to state 157
    empty                          shift and go to state 158

state 109

    (83) term -> factor . term_tail
    (84) term_tail -> . mulop factor
    (85) term_tail -> . empty
    (86) mulop -> . TIMES
    (87) mulop -> . DIVIDE
    (88) mulop -> . DIV
    (104) empty -> .

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    TIMES           shift and go to state 164
    DIVIDE          shift and go to state 165
    DIV             shift and go to state 166
    PLUS            reduce using rule 104 (empty -> .)
    MINUS           reduce using rule 104 (empty -> .)
    LESS            reduce using rule 104 (empty -> .)
    LESS_EQUAL      reduce using rule 104 (empty -> .)
    GREAT           reduce using rule 104 (empty -> .)
    GREAT_EQUAL     reduce using rule 104 (empty -> .)
    EQUAL           reduce using rule 104 (empty -> .)
    DIFFERENT       reduce using rule 104 (empty -> .)
    THEN            reduce using rule 104 (empty -> .)
    MOD             reduce using rule 104 (empty -> .)
    AND             reduce using rule 104 (empty -> .)
    OR              reduce using rule 104 (empty -> .)
    DO              reduce using rule 104 (empty -> .)
    COMMA           reduce using rule 104 (empty -> .)
    RPAREN          reduce using rule 104 (empty -> .)
    RBRACKET        reduce using rule 104 (empty -> .)
    SEMICOLON       reduce using rule 104 (empty -> .)
    END             reduce using rule 104 (empty -> .)
    ELSE            reduce using rule 104 (empty -> .)
    DOTDOT          reduce using rule 104 (empty -> .)
    TO              reduce using rule 104 (empty -> .)
    DOWNTO          reduce using rule 104 (empty -> .)

  ! TIMES           [ reduce using rule 104 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 104 (empty -> .) ]

    term_tail                      shift and go to state 161
    mulop                          shift and go to state 162
    empty                          shift and go to state 163

state 110

    (47) factor -> function_call .

    TIMES           reduce using rule 47 (factor -> function_call .)
    DIVIDE          reduce using rule 47 (factor -> function_call .)
    DIV             reduce using rule 47 (factor -> function_call .)
    PLUS            reduce using rule 47 (factor -> function_call .)
    MINUS           reduce using rule 47 (factor -> function_call .)
    LESS            reduce using rule 47 (factor -> function_call .)
    LESS_EQUAL      reduce using rule 47 (factor -> function_call .)
    GREAT           reduce using rule 47 (factor -> function_call .)
    GREAT_EQUAL     reduce using rule 47 (factor -> function_call .)
    EQUAL           reduce using rule 47 (factor -> function_call .)
    DIFFERENT       reduce using rule 47 (factor -> function_call .)
    THEN            reduce using rule 47 (factor -> function_call .)
    MOD             reduce using rule 47 (factor -> function_call .)
    AND             reduce using rule 47 (factor -> function_call .)
    OR              reduce using rule 47 (factor -> function_call .)
    DO              reduce using rule 47 (factor -> function_call .)
    COMMA           reduce using rule 47 (factor -> function_call .)
    RPAREN          reduce using rule 47 (factor -> function_call .)
    RBRACKET        reduce using rule 47 (factor -> function_call .)
    SEMICOLON       reduce using rule 47 (factor -> function_call .)
    END             reduce using rule 47 (factor -> function_call .)
    ELSE            reduce using rule 47 (factor -> function_call .)
    DOTDOT          reduce using rule 47 (factor -> function_call .)
    TO              reduce using rule 47 (factor -> function_call .)
    DOWNTO          reduce using rule 47 (factor -> function_call .)


state 111

    (94) factor -> LPAREN . expression RPAREN
    (76) expression -> . simple_expression relop simple_expression
    (77) expression -> . simple_expression
    (89) expression -> . expression PLUS expression
    (90) expression -> . expression MINUS expression
    (91) expression -> . expression TIMES expression
    (92) expression -> . expression DIVIDE expression
    (93) expression -> . expression MOD expression
    (117) expression -> . expression AND expression
    (118) expression -> . expression OR expression
    (119) expression -> . NOT expression
    (78) simple_expression -> . term simple_expression_tail
    (83) term -> . factor term_tail
    (47) factor -> . function_call
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . variable
    (96) factor -> . NUMBER
    (97) factor -> . STRING_LITERAL
    (46) function_call -> . ID LPAREN expression_list RPAREN
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 107
    LPAREN          shift and go to state 111
    NUMBER          shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    ID              shift and go to state 115

    expression                     shift and go to state 167
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    function_call                  shift and go to state 110
    variable                       shift and go to state 112

state 112

    (95) factor -> variable .

    TIMES           reduce using rule 95 (factor -> variable .)
    DIVIDE          reduce using rule 95 (factor -> variable .)
    DIV             reduce using rule 95 (factor -> variable .)
    PLUS            reduce using rule 95 (factor -> variable .)
    MINUS           reduce using rule 95 (factor -> variable .)
    LESS            reduce using rule 95 (factor -> variable .)
    LESS_EQUAL      reduce using rule 95 (factor -> variable .)
    GREAT           reduce using rule 95 (factor -> variable .)
    GREAT_EQUAL     reduce using rule 95 (factor -> variable .)
    EQUAL           reduce using rule 95 (factor -> variable .)
    DIFFERENT       reduce using rule 95 (factor -> variable .)
    THEN            reduce using rule 95 (factor -> variable .)
    MOD             reduce using rule 95 (factor -> variable .)
    AND             reduce using rule 95 (factor -> variable .)
    OR              reduce using rule 95 (factor -> variable .)
    DO              reduce using rule 95 (factor -> variable .)
    COMMA           reduce using rule 95 (factor -> variable .)
    RPAREN          reduce using rule 95 (factor -> variable .)
    RBRACKET        reduce using rule 95 (factor -> variable .)
    SEMICOLON       reduce using rule 95 (factor -> variable .)
    END             reduce using rule 95 (factor -> variable .)
    ELSE            reduce using rule 95 (factor -> variable .)
    DOTDOT          reduce using rule 95 (factor -> variable .)
    TO              reduce using rule 95 (factor -> variable .)
    DOWNTO          reduce using rule 95 (factor -> variable .)


state 113

    (96) factor -> NUMBER .

    TIMES           reduce using rule 96 (factor -> NUMBER .)
    DIVIDE          reduce using rule 96 (factor -> NUMBER .)
    DIV             reduce using rule 96 (factor -> NUMBER .)
    PLUS            reduce using rule 96 (factor -> NUMBER .)
    MINUS           reduce using rule 96 (factor -> NUMBER .)
    LESS            reduce using rule 96 (factor -> NUMBER .)
    LESS_EQUAL      reduce using rule 96 (factor -> NUMBER .)
    GREAT           reduce using rule 96 (factor -> NUMBER .)
    GREAT_EQUAL     reduce using rule 96 (factor -> NUMBER .)
    EQUAL           reduce using rule 96 (factor -> NUMBER .)
    DIFFERENT       reduce using rule 96 (factor -> NUMBER .)
    THEN            reduce using rule 96 (factor -> NUMBER .)
    MOD             reduce using rule 96 (factor -> NUMBER .)
    AND             reduce using rule 96 (factor -> NUMBER .)
    OR              reduce using rule 96 (factor -> NUMBER .)
    DO              reduce using rule 96 (factor -> NUMBER .)
    COMMA           reduce using rule 96 (factor -> NUMBER .)
    RPAREN          reduce using rule 96 (factor -> NUMBER .)
    RBRACKET        reduce using rule 96 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 96 (factor -> NUMBER .)
    END             reduce using rule 96 (factor -> NUMBER .)
    ELSE            reduce using rule 96 (factor -> NUMBER .)
    DOTDOT          reduce using rule 96 (factor -> NUMBER .)
    TO              reduce using rule 96 (factor -> NUMBER .)
    DOWNTO          reduce using rule 96 (factor -> NUMBER .)


state 114

    (97) factor -> STRING_LITERAL .

    TIMES           reduce using rule 97 (factor -> STRING_LITERAL .)
    DIVIDE          reduce using rule 97 (factor -> STRING_LITERAL .)
    DIV             reduce using rule 97 (factor -> STRING_LITERAL .)
    PLUS            reduce using rule 97 (factor -> STRING_LITERAL .)
    MINUS           reduce using rule 97 (factor -> STRING_LITERAL .)
    LESS            reduce using rule 97 (factor -> STRING_LITERAL .)
    LESS_EQUAL      reduce using rule 97 (factor -> STRING_LITERAL .)
    GREAT           reduce using rule 97 (factor -> STRING_LITERAL .)
    GREAT_EQUAL     reduce using rule 97 (factor -> STRING_LITERAL .)
    EQUAL           reduce using rule 97 (factor -> STRING_LITERAL .)
    DIFFERENT       reduce using rule 97 (factor -> STRING_LITERAL .)
    THEN            reduce using rule 97 (factor -> STRING_LITERAL .)
    MOD             reduce using rule 97 (factor -> STRING_LITERAL .)
    AND             reduce using rule 97 (factor -> STRING_LITERAL .)
    OR              reduce using rule 97 (factor -> STRING_LITERAL .)
    DO              reduce using rule 97 (factor -> STRING_LITERAL .)
    COMMA           reduce using rule 97 (factor -> STRING_LITERAL .)
    RPAREN          reduce using rule 97 (factor -> STRING_LITERAL .)
    RBRACKET        reduce using rule 97 (factor -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 97 (factor -> STRING_LITERAL .)
    END             reduce using rule 97 (factor -> STRING_LITERAL .)
    ELSE            reduce using rule 97 (factor -> STRING_LITERAL .)
    DOTDOT          reduce using rule 97 (factor -> STRING_LITERAL .)
    TO              reduce using rule 97 (factor -> STRING_LITERAL .)
    DOWNTO          reduce using rule 97 (factor -> STRING_LITERAL .)


state 115

    (46) function_call -> ID . LPAREN expression_list RPAREN
    (68) variable -> ID .
    (69) variable -> ID . LBRACKET expression RBRACKET

    LPAREN          shift and go to state 168
    TIMES           reduce using rule 68 (variable -> ID .)
    DIVIDE          reduce using rule 68 (variable -> ID .)
    DIV             reduce using rule 68 (variable -> ID .)
    PLUS            reduce using rule 68 (variable -> ID .)
    MINUS           reduce using rule 68 (variable -> ID .)
    LESS            reduce using rule 68 (variable -> ID .)
    LESS_EQUAL      reduce using rule 68 (variable -> ID .)
    GREAT           reduce using rule 68 (variable -> ID .)
    GREAT_EQUAL     reduce using rule 68 (variable -> ID .)
    EQUAL           reduce using rule 68 (variable -> ID .)
    DIFFERENT       reduce using rule 68 (variable -> ID .)
    THEN            reduce using rule 68 (variable -> ID .)
    MOD             reduce using rule 68 (variable -> ID .)
    AND             reduce using rule 68 (variable -> ID .)
    OR              reduce using rule 68 (variable -> ID .)
    DO              reduce using rule 68 (variable -> ID .)
    COMMA           reduce using rule 68 (variable -> ID .)
    RPAREN          reduce using rule 68 (variable -> ID .)
    RBRACKET        reduce using rule 68 (variable -> ID .)
    SEMICOLON       reduce using rule 68 (variable -> ID .)
    END             reduce using rule 68 (variable -> ID .)
    ELSE            reduce using rule 68 (variable -> ID .)
    DOTDOT          reduce using rule 68 (variable -> ID .)
    TO              reduce using rule 68 (variable -> ID .)
    DOWNTO          reduce using rule 68 (variable -> ID .)
    LBRACKET        shift and go to state 101


state 116

    (67) assignment_statement -> variable COLON_EQUAL . expression
    (76) expression -> . simple_expression relop simple_expression
    (77) expression -> . simple_expression
    (89) expression -> . expression PLUS expression
    (90) expression -> . expression MINUS expression
    (91) expression -> . expression TIMES expression
    (92) expression -> . expression DIVIDE expression
    (93) expression -> . expression MOD expression
    (117) expression -> . expression AND expression
    (118) expression -> . expression OR expression
    (119) expression -> . NOT expression
    (78) simple_expression -> . term simple_expression_tail
    (83) term -> . factor term_tail
    (47) factor -> . function_call
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . variable
    (96) factor -> . NUMBER
    (97) factor -> . STRING_LITERAL
    (46) function_call -> . ID LPAREN expression_list RPAREN
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 107
    LPAREN          shift and go to state 111
    NUMBER          shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    ID              shift and go to state 115

    variable                       shift and go to state 112
    expression                     shift and go to state 169
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    function_call                  shift and go to state 110

state 117

    (70) while_statement -> WHILE expression . DO statement
    (89) expression -> expression . PLUS expression
    (90) expression -> expression . MINUS expression
    (91) expression -> expression . TIMES expression
    (92) expression -> expression . DIVIDE expression
    (93) expression -> expression . MOD expression
    (117) expression -> expression . AND expression
    (118) expression -> expression . OR expression

    DO              shift and go to state 170
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    AND             shift and go to state 146
    OR              shift and go to state 147


state 118

    (65) for_statement -> FOR ID . COLON_EQUAL expression TO expression DO statement
    (66) for_statement -> FOR ID . COLON_EQUAL expression DOWNTO expression DO statement

    COLON_EQUAL     shift and go to state 171


state 119

    (44) function_declaration -> FUNCTION ID LPAREN parameter_list . RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (49) parameter_list -> parameter_list . SEMICOLON parameter

    RPAREN          shift and go to state 172
    SEMICOLON       shift and go to state 173


state 120

    (48) parameter_list -> parameter .

    RPAREN          reduce using rule 48 (parameter_list -> parameter .)
    SEMICOLON       reduce using rule 48 (parameter_list -> parameter .)


state 121

    (50) parameter -> id_list . COLON type_specifier
    (29) id_list -> id_list . COMMA ID

    COLON           shift and go to state 174
    COMMA           shift and go to state 59


state 122

    (51) parameter -> VAR . id_list COLON type_specifier
    (28) id_list -> . ID
    (29) id_list -> . id_list COMMA ID

    ID              shift and go to state 40

    id_list                        shift and go to state 175

state 123

    (42) procedure_declaration -> PROCEDURE ID LPAREN parameter_list . RPAREN SEMICOLON block SEMICOLON
    (43) procedure_declaration -> PROCEDURE ID LPAREN parameter_list . RPAREN SEMICOLON block DOT
    (49) parameter_list -> parameter_list . SEMICOLON parameter

    RPAREN          shift and go to state 176
    SEMICOLON       shift and go to state 173


state 124

    (114) constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .

    ID              reduce using rule 114 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    TYPE            reduce using rule 114 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    VAR             reduce using rule 114 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    FUNCTION        reduce using rule 114 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    PROCEDURE       reduce using rule 114 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    BEGIN           reduce using rule 114 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)


state 125

    (115) constant -> ID EQUAL NUMBER SEMICOLON .

    ID              reduce using rule 115 (constant -> ID EQUAL NUMBER SEMICOLON .)
    TYPE            reduce using rule 115 (constant -> ID EQUAL NUMBER SEMICOLON .)
    VAR             reduce using rule 115 (constant -> ID EQUAL NUMBER SEMICOLON .)
    FUNCTION        reduce using rule 115 (constant -> ID EQUAL NUMBER SEMICOLON .)
    PROCEDURE       reduce using rule 115 (constant -> ID EQUAL NUMBER SEMICOLON .)
    BEGIN           reduce using rule 115 (constant -> ID EQUAL NUMBER SEMICOLON .)


state 126

    (116) constant -> ID EQUAL STRING_LITERAL SEMICOLON .

    ID              reduce using rule 116 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    TYPE            reduce using rule 116 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    VAR             reduce using rule 116 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    FUNCTION        reduce using rule 116 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    PROCEDURE       reduce using rule 116 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    BEGIN           reduce using rule 116 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)


state 127

    (33) type_definition -> ID EQUAL type_specifier SEMICOLON .

    ID              reduce using rule 33 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    VAR             reduce using rule 33 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 33 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 33 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    BEGIN           reduce using rule 33 (type_definition -> ID EQUAL type_specifier SEMICOLON .)


state 128

    (34) type_specifier -> ARRAY LBRACKET . expression DOTDOT expression RBRACKET OF type_specifier
    (76) expression -> . simple_expression relop simple_expression
    (77) expression -> . simple_expression
    (89) expression -> . expression PLUS expression
    (90) expression -> . expression MINUS expression
    (91) expression -> . expression TIMES expression
    (92) expression -> . expression DIVIDE expression
    (93) expression -> . expression MOD expression
    (117) expression -> . expression AND expression
    (118) expression -> . expression OR expression
    (119) expression -> . NOT expression
    (78) simple_expression -> . term simple_expression_tail
    (83) term -> . factor term_tail
    (47) factor -> . function_call
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . variable
    (96) factor -> . NUMBER
    (97) factor -> . STRING_LITERAL
    (46) function_call -> . ID LPAREN expression_list RPAREN
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 107
    LPAREN          shift and go to state 111
    NUMBER          shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    ID              shift and go to state 115

    expression                     shift and go to state 177
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    function_call                  shift and go to state 110
    variable                       shift and go to state 112

state 129

    (22) declaration -> id_list COLON type_specifier SEMICOLON .

    ID              reduce using rule 22 (declaration -> id_list COLON type_specifier SEMICOLON .)
    VAR             reduce using rule 22 (declaration -> id_list COLON type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 22 (declaration -> id_list COLON type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 22 (declaration -> id_list COLON type_specifier SEMICOLON .)
    BEGIN           reduce using rule 22 (declaration -> id_list COLON type_specifier SEMICOLON .)


state 130

    (54) statement_list_tail -> SEMICOLON statement . statement_list_tail
    (54) statement_list_tail -> . SEMICOLON statement statement_list_tail
    (55) statement_list_tail -> . empty
    (104) empty -> .

    SEMICOLON       shift and go to state 96
    END             reduce using rule 104 (empty -> .)

    statement_list_tail            shift and go to state 178
    empty                          shift and go to state 97

state 131

    (106) statement -> READLN LPAREN ID . RPAREN

    RPAREN          shift and go to state 179


state 132

    (107) statement -> READLN LBRACKET ID . RBRACKET

    RBRACKET        shift and go to state 180


state 133

    (71) procedure_call -> ID LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 181


state 134

    (72) expression_list -> expression . expression_list_tail
    (89) expression -> expression . PLUS expression
    (90) expression -> expression . MINUS expression
    (91) expression -> expression . TIMES expression
    (92) expression -> expression . DIVIDE expression
    (93) expression -> expression . MOD expression
    (117) expression -> expression . AND expression
    (118) expression -> expression . OR expression
    (73) expression_list_tail -> . COMMA expression expression_list_tail
    (74) expression_list_tail -> . empty
    (104) empty -> .

    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    AND             shift and go to state 146
    OR              shift and go to state 147
    COMMA           shift and go to state 183
    RPAREN          reduce using rule 104 (empty -> .)

    expression_list_tail           shift and go to state 182
    empty                          shift and go to state 184

state 135

    (75) expression_list -> empty .

    RPAREN          reduce using rule 75 (expression_list -> empty .)


state 136

    (69) variable -> ID LBRACKET expression . RBRACKET
    (89) expression -> expression . PLUS expression
    (90) expression -> expression . MINUS expression
    (91) expression -> expression . TIMES expression
    (92) expression -> expression . DIVIDE expression
    (93) expression -> expression . MOD expression
    (117) expression -> expression . AND expression
    (118) expression -> expression . OR expression

    RBRACKET        shift and go to state 185
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    AND             shift and go to state 146
    OR              shift and go to state 147


state 137

    (108) statement -> WRITELN LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 186


state 138

    (109) statement -> WRITE LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 187


state 139

    (110) statement -> USES ID SEMICOLON .

    SEMICOLON       reduce using rule 110 (statement -> USES ID SEMICOLON .)
    END             reduce using rule 110 (statement -> USES ID SEMICOLON .)
    ELSE            reduce using rule 110 (statement -> USES ID SEMICOLON .)


state 140

    (63) if_statement -> IF expression THEN . statement ELSE statement
    (64) if_statement -> IF expression THEN . statement
    (56) statement -> . if_statement
    (57) statement -> . assignment_statement
    (58) statement -> . while_statement
    (59) statement -> . procedure_call
    (60) statement -> . compound_statement
    (61) statement -> . for_statement
    (62) statement -> . empty
    (105) statement -> . READLN
    (106) statement -> . READLN LPAREN ID RPAREN
    (107) statement -> . READLN LBRACKET ID RBRACKET
    (108) statement -> . WRITELN LPAREN expression_list RPAREN
    (109) statement -> . WRITE LPAREN expression_list RPAREN
    (110) statement -> . USES ID SEMICOLON
    (63) if_statement -> . IF expression THEN statement ELSE statement
    (64) if_statement -> . IF expression THEN statement
    (67) assignment_statement -> . variable COLON_EQUAL expression
    (70) while_statement -> . WHILE expression DO statement
    (71) procedure_call -> . ID LPAREN expression_list RPAREN
    (52) compound_statement -> . BEGIN statement_list END
    (65) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (66) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (104) empty -> .
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    READLN          shift and go to state 69
    WRITELN         shift and go to state 71
    WRITE           shift and go to state 72
    USES            shift and go to state 73
    IF              shift and go to state 74
    WHILE           shift and go to state 76
    ID              shift and go to state 70
    BEGIN           shift and go to state 43
    FOR             shift and go to state 77
    ELSE            reduce using rule 104 (empty -> .)
    SEMICOLON       reduce using rule 104 (empty -> .)
    END             reduce using rule 104 (empty -> .)

    statement                      shift and go to state 188
    if_statement                   shift and go to state 62
    assignment_statement           shift and go to state 63
    while_statement                shift and go to state 64
    procedure_call                 shift and go to state 65
    compound_statement             shift and go to state 66
    for_statement                  shift and go to state 67
    empty                          shift and go to state 68
    variable                       shift and go to state 75

state 141

    (89) expression -> expression PLUS . expression
    (76) expression -> . simple_expression relop simple_expression
    (77) expression -> . simple_expression
    (89) expression -> . expression PLUS expression
    (90) expression -> . expression MINUS expression
    (91) expression -> . expression TIMES expression
    (92) expression -> . expression DIVIDE expression
    (93) expression -> . expression MOD expression
    (117) expression -> . expression AND expression
    (118) expression -> . expression OR expression
    (119) expression -> . NOT expression
    (78) simple_expression -> . term simple_expression_tail
    (83) term -> . factor term_tail
    (47) factor -> . function_call
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . variable
    (96) factor -> . NUMBER
    (97) factor -> . STRING_LITERAL
    (46) function_call -> . ID LPAREN expression_list RPAREN
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 107
    LPAREN          shift and go to state 111
    NUMBER          shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    ID              shift and go to state 115

    expression                     shift and go to state 189
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    function_call                  shift and go to state 110
    variable                       shift and go to state 112

state 142

    (90) expression -> expression MINUS . expression
    (76) expression -> . simple_expression relop simple_expression
    (77) expression -> . simple_expression
    (89) expression -> . expression PLUS expression
    (90) expression -> . expression MINUS expression
    (91) expression -> . expression TIMES expression
    (92) expression -> . expression DIVIDE expression
    (93) expression -> . expression MOD expression
    (117) expression -> . expression AND expression
    (118) expression -> . expression OR expression
    (119) expression -> . NOT expression
    (78) simple_expression -> . term simple_expression_tail
    (83) term -> . factor term_tail
    (47) factor -> . function_call
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . variable
    (96) factor -> . NUMBER
    (97) factor -> . STRING_LITERAL
    (46) function_call -> . ID LPAREN expression_list RPAREN
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 107
    LPAREN          shift and go to state 111
    NUMBER          shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    ID              shift and go to state 115

    expression                     shift and go to state 190
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    function_call                  shift and go to state 110
    variable                       shift and go to state 112

state 143

    (91) expression -> expression TIMES . expression
    (76) expression -> . simple_expression relop simple_expression
    (77) expression -> . simple_expression
    (89) expression -> . expression PLUS expression
    (90) expression -> . expression MINUS expression
    (91) expression -> . expression TIMES expression
    (92) expression -> . expression DIVIDE expression
    (93) expression -> . expression MOD expression
    (117) expression -> . expression AND expression
    (118) expression -> . expression OR expression
    (119) expression -> . NOT expression
    (78) simple_expression -> . term simple_expression_tail
    (83) term -> . factor term_tail
    (47) factor -> . function_call
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . variable
    (96) factor -> . NUMBER
    (97) factor -> . STRING_LITERAL
    (46) function_call -> . ID LPAREN expression_list RPAREN
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 107
    LPAREN          shift and go to state 111
    NUMBER          shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    ID              shift and go to state 115

    expression                     shift and go to state 191
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    function_call                  shift and go to state 110
    variable                       shift and go to state 112

state 144

    (92) expression -> expression DIVIDE . expression
    (76) expression -> . simple_expression relop simple_expression
    (77) expression -> . simple_expression
    (89) expression -> . expression PLUS expression
    (90) expression -> . expression MINUS expression
    (91) expression -> . expression TIMES expression
    (92) expression -> . expression DIVIDE expression
    (93) expression -> . expression MOD expression
    (117) expression -> . expression AND expression
    (118) expression -> . expression OR expression
    (119) expression -> . NOT expression
    (78) simple_expression -> . term simple_expression_tail
    (83) term -> . factor term_tail
    (47) factor -> . function_call
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . variable
    (96) factor -> . NUMBER
    (97) factor -> . STRING_LITERAL
    (46) function_call -> . ID LPAREN expression_list RPAREN
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 107
    LPAREN          shift and go to state 111
    NUMBER          shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    ID              shift and go to state 115

    expression                     shift and go to state 192
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    function_call                  shift and go to state 110
    variable                       shift and go to state 112

state 145

    (93) expression -> expression MOD . expression
    (76) expression -> . simple_expression relop simple_expression
    (77) expression -> . simple_expression
    (89) expression -> . expression PLUS expression
    (90) expression -> . expression MINUS expression
    (91) expression -> . expression TIMES expression
    (92) expression -> . expression DIVIDE expression
    (93) expression -> . expression MOD expression
    (117) expression -> . expression AND expression
    (118) expression -> . expression OR expression
    (119) expression -> . NOT expression
    (78) simple_expression -> . term simple_expression_tail
    (83) term -> . factor term_tail
    (47) factor -> . function_call
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . variable
    (96) factor -> . NUMBER
    (97) factor -> . STRING_LITERAL
    (46) function_call -> . ID LPAREN expression_list RPAREN
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 107
    LPAREN          shift and go to state 111
    NUMBER          shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    ID              shift and go to state 115

    expression                     shift and go to state 193
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    function_call                  shift and go to state 110
    variable                       shift and go to state 112

state 146

    (117) expression -> expression AND . expression
    (76) expression -> . simple_expression relop simple_expression
    (77) expression -> . simple_expression
    (89) expression -> . expression PLUS expression
    (90) expression -> . expression MINUS expression
    (91) expression -> . expression TIMES expression
    (92) expression -> . expression DIVIDE expression
    (93) expression -> . expression MOD expression
    (117) expression -> . expression AND expression
    (118) expression -> . expression OR expression
    (119) expression -> . NOT expression
    (78) simple_expression -> . term simple_expression_tail
    (83) term -> . factor term_tail
    (47) factor -> . function_call
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . variable
    (96) factor -> . NUMBER
    (97) factor -> . STRING_LITERAL
    (46) function_call -> . ID LPAREN expression_list RPAREN
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 107
    LPAREN          shift and go to state 111
    NUMBER          shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    ID              shift and go to state 115

    expression                     shift and go to state 194
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    function_call                  shift and go to state 110
    variable                       shift and go to state 112

state 147

    (118) expression -> expression OR . expression
    (76) expression -> . simple_expression relop simple_expression
    (77) expression -> . simple_expression
    (89) expression -> . expression PLUS expression
    (90) expression -> . expression MINUS expression
    (91) expression -> . expression TIMES expression
    (92) expression -> . expression DIVIDE expression
    (93) expression -> . expression MOD expression
    (117) expression -> . expression AND expression
    (118) expression -> . expression OR expression
    (119) expression -> . NOT expression
    (78) simple_expression -> . term simple_expression_tail
    (83) term -> . factor term_tail
    (47) factor -> . function_call
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . variable
    (96) factor -> . NUMBER
    (97) factor -> . STRING_LITERAL
    (46) function_call -> . ID LPAREN expression_list RPAREN
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 107
    LPAREN          shift and go to state 111
    NUMBER          shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    ID              shift and go to state 115

    expression                     shift and go to state 195
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    function_call                  shift and go to state 110
    variable                       shift and go to state 112

state 148

    (76) expression -> simple_expression relop . simple_expression
    (78) simple_expression -> . term simple_expression_tail
    (83) term -> . factor term_tail
    (47) factor -> . function_call
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . variable
    (96) factor -> . NUMBER
    (97) factor -> . STRING_LITERAL
    (46) function_call -> . ID LPAREN expression_list RPAREN
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 111
    NUMBER          shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    ID              shift and go to state 115

    simple_expression              shift and go to state 196
    term                           shift and go to state 108
    factor                         shift and go to state 109
    function_call                  shift and go to state 110
    variable                       shift and go to state 112

state 149

    (98) relop -> LESS .

    LPAREN          reduce using rule 98 (relop -> LESS .)
    NUMBER          reduce using rule 98 (relop -> LESS .)
    STRING_LITERAL  reduce using rule 98 (relop -> LESS .)
    ID              reduce using rule 98 (relop -> LESS .)


state 150

    (99) relop -> LESS_EQUAL .

    LPAREN          reduce using rule 99 (relop -> LESS_EQUAL .)
    NUMBER          reduce using rule 99 (relop -> LESS_EQUAL .)
    STRING_LITERAL  reduce using rule 99 (relop -> LESS_EQUAL .)
    ID              reduce using rule 99 (relop -> LESS_EQUAL .)


state 151

    (100) relop -> GREAT .

    LPAREN          reduce using rule 100 (relop -> GREAT .)
    NUMBER          reduce using rule 100 (relop -> GREAT .)
    STRING_LITERAL  reduce using rule 100 (relop -> GREAT .)
    ID              reduce using rule 100 (relop -> GREAT .)


state 152

    (101) relop -> GREAT_EQUAL .

    LPAREN          reduce using rule 101 (relop -> GREAT_EQUAL .)
    NUMBER          reduce using rule 101 (relop -> GREAT_EQUAL .)
    STRING_LITERAL  reduce using rule 101 (relop -> GREAT_EQUAL .)
    ID              reduce using rule 101 (relop -> GREAT_EQUAL .)


state 153

    (102) relop -> EQUAL .

    LPAREN          reduce using rule 102 (relop -> EQUAL .)
    NUMBER          reduce using rule 102 (relop -> EQUAL .)
    STRING_LITERAL  reduce using rule 102 (relop -> EQUAL .)
    ID              reduce using rule 102 (relop -> EQUAL .)


state 154

    (103) relop -> DIFFERENT .

    LPAREN          reduce using rule 103 (relop -> DIFFERENT .)
    NUMBER          reduce using rule 103 (relop -> DIFFERENT .)
    STRING_LITERAL  reduce using rule 103 (relop -> DIFFERENT .)
    ID              reduce using rule 103 (relop -> DIFFERENT .)


state 155

    (119) expression -> NOT expression .
    (89) expression -> expression . PLUS expression
    (90) expression -> expression . MINUS expression
    (91) expression -> expression . TIMES expression
    (92) expression -> expression . DIVIDE expression
    (93) expression -> expression . MOD expression
    (117) expression -> expression . AND expression
    (118) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 119 (expression -> NOT expression .)
    DO              reduce using rule 119 (expression -> NOT expression .)
    COMMA           reduce using rule 119 (expression -> NOT expression .)
    RPAREN          reduce using rule 119 (expression -> NOT expression .)
    RBRACKET        reduce using rule 119 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 119 (expression -> NOT expression .)
    END             reduce using rule 119 (expression -> NOT expression .)
    ELSE            reduce using rule 119 (expression -> NOT expression .)
    DOTDOT          reduce using rule 119 (expression -> NOT expression .)
    TO              reduce using rule 119 (expression -> NOT expression .)
    DOWNTO          reduce using rule 119 (expression -> NOT expression .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    AND             shift and go to state 146
    OR              shift and go to state 147

  ! PLUS            [ reduce using rule 119 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 119 (expression -> NOT expression .) ]
  ! TIMES           [ reduce using rule 119 (expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 119 (expression -> NOT expression .) ]
  ! MOD             [ reduce using rule 119 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 119 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 119 (expression -> NOT expression .) ]


state 156

    (78) simple_expression -> term simple_expression_tail .

    LESS            reduce using rule 78 (simple_expression -> term simple_expression_tail .)
    LESS_EQUAL      reduce using rule 78 (simple_expression -> term simple_expression_tail .)
    GREAT           reduce using rule 78 (simple_expression -> term simple_expression_tail .)
    GREAT_EQUAL     reduce using rule 78 (simple_expression -> term simple_expression_tail .)
    EQUAL           reduce using rule 78 (simple_expression -> term simple_expression_tail .)
    DIFFERENT       reduce using rule 78 (simple_expression -> term simple_expression_tail .)
    THEN            reduce using rule 78 (simple_expression -> term simple_expression_tail .)
    PLUS            reduce using rule 78 (simple_expression -> term simple_expression_tail .)
    MINUS           reduce using rule 78 (simple_expression -> term simple_expression_tail .)
    TIMES           reduce using rule 78 (simple_expression -> term simple_expression_tail .)
    DIVIDE          reduce using rule 78 (simple_expression -> term simple_expression_tail .)
    MOD             reduce using rule 78 (simple_expression -> term simple_expression_tail .)
    AND             reduce using rule 78 (simple_expression -> term simple_expression_tail .)
    OR              reduce using rule 78 (simple_expression -> term simple_expression_tail .)
    DO              reduce using rule 78 (simple_expression -> term simple_expression_tail .)
    COMMA           reduce using rule 78 (simple_expression -> term simple_expression_tail .)
    RPAREN          reduce using rule 78 (simple_expression -> term simple_expression_tail .)
    RBRACKET        reduce using rule 78 (simple_expression -> term simple_expression_tail .)
    SEMICOLON       reduce using rule 78 (simple_expression -> term simple_expression_tail .)
    END             reduce using rule 78 (simple_expression -> term simple_expression_tail .)
    ELSE            reduce using rule 78 (simple_expression -> term simple_expression_tail .)
    DOTDOT          reduce using rule 78 (simple_expression -> term simple_expression_tail .)
    TO              reduce using rule 78 (simple_expression -> term simple_expression_tail .)
    DOWNTO          reduce using rule 78 (simple_expression -> term simple_expression_tail .)


state 157

    (79) simple_expression_tail -> addop . term
    (83) term -> . factor term_tail
    (47) factor -> . function_call
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . variable
    (96) factor -> . NUMBER
    (97) factor -> . STRING_LITERAL
    (46) function_call -> . ID LPAREN expression_list RPAREN
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 111
    NUMBER          shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    ID              shift and go to state 115

    term                           shift and go to state 197
    factor                         shift and go to state 109
    function_call                  shift and go to state 110
    variable                       shift and go to state 112

state 158

    (80) simple_expression_tail -> empty .

    LESS            reduce using rule 80 (simple_expression_tail -> empty .)
    LESS_EQUAL      reduce using rule 80 (simple_expression_tail -> empty .)
    GREAT           reduce using rule 80 (simple_expression_tail -> empty .)
    GREAT_EQUAL     reduce using rule 80 (simple_expression_tail -> empty .)
    EQUAL           reduce using rule 80 (simple_expression_tail -> empty .)
    DIFFERENT       reduce using rule 80 (simple_expression_tail -> empty .)
    THEN            reduce using rule 80 (simple_expression_tail -> empty .)
    PLUS            reduce using rule 80 (simple_expression_tail -> empty .)
    MINUS           reduce using rule 80 (simple_expression_tail -> empty .)
    TIMES           reduce using rule 80 (simple_expression_tail -> empty .)
    DIVIDE          reduce using rule 80 (simple_expression_tail -> empty .)
    MOD             reduce using rule 80 (simple_expression_tail -> empty .)
    AND             reduce using rule 80 (simple_expression_tail -> empty .)
    OR              reduce using rule 80 (simple_expression_tail -> empty .)
    DO              reduce using rule 80 (simple_expression_tail -> empty .)
    COMMA           reduce using rule 80 (simple_expression_tail -> empty .)
    RPAREN          reduce using rule 80 (simple_expression_tail -> empty .)
    RBRACKET        reduce using rule 80 (simple_expression_tail -> empty .)
    SEMICOLON       reduce using rule 80 (simple_expression_tail -> empty .)
    END             reduce using rule 80 (simple_expression_tail -> empty .)
    ELSE            reduce using rule 80 (simple_expression_tail -> empty .)
    DOTDOT          reduce using rule 80 (simple_expression_tail -> empty .)
    TO              reduce using rule 80 (simple_expression_tail -> empty .)
    DOWNTO          reduce using rule 80 (simple_expression_tail -> empty .)


state 159

    (81) addop -> PLUS .

    LPAREN          reduce using rule 81 (addop -> PLUS .)
    NUMBER          reduce using rule 81 (addop -> PLUS .)
    STRING_LITERAL  reduce using rule 81 (addop -> PLUS .)
    ID              reduce using rule 81 (addop -> PLUS .)


state 160

    (82) addop -> MINUS .

    LPAREN          reduce using rule 82 (addop -> MINUS .)
    NUMBER          reduce using rule 82 (addop -> MINUS .)
    STRING_LITERAL  reduce using rule 82 (addop -> MINUS .)
    ID              reduce using rule 82 (addop -> MINUS .)


state 161

    (83) term -> factor term_tail .

    PLUS            reduce using rule 83 (term -> factor term_tail .)
    MINUS           reduce using rule 83 (term -> factor term_tail .)
    LESS            reduce using rule 83 (term -> factor term_tail .)
    LESS_EQUAL      reduce using rule 83 (term -> factor term_tail .)
    GREAT           reduce using rule 83 (term -> factor term_tail .)
    GREAT_EQUAL     reduce using rule 83 (term -> factor term_tail .)
    EQUAL           reduce using rule 83 (term -> factor term_tail .)
    DIFFERENT       reduce using rule 83 (term -> factor term_tail .)
    THEN            reduce using rule 83 (term -> factor term_tail .)
    TIMES           reduce using rule 83 (term -> factor term_tail .)
    DIVIDE          reduce using rule 83 (term -> factor term_tail .)
    MOD             reduce using rule 83 (term -> factor term_tail .)
    AND             reduce using rule 83 (term -> factor term_tail .)
    OR              reduce using rule 83 (term -> factor term_tail .)
    DO              reduce using rule 83 (term -> factor term_tail .)
    COMMA           reduce using rule 83 (term -> factor term_tail .)
    RPAREN          reduce using rule 83 (term -> factor term_tail .)
    RBRACKET        reduce using rule 83 (term -> factor term_tail .)
    SEMICOLON       reduce using rule 83 (term -> factor term_tail .)
    END             reduce using rule 83 (term -> factor term_tail .)
    ELSE            reduce using rule 83 (term -> factor term_tail .)
    DOTDOT          reduce using rule 83 (term -> factor term_tail .)
    TO              reduce using rule 83 (term -> factor term_tail .)
    DOWNTO          reduce using rule 83 (term -> factor term_tail .)


state 162

    (84) term_tail -> mulop . factor
    (47) factor -> . function_call
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . variable
    (96) factor -> . NUMBER
    (97) factor -> . STRING_LITERAL
    (46) function_call -> . ID LPAREN expression_list RPAREN
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 111
    NUMBER          shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    ID              shift and go to state 115

    factor                         shift and go to state 198
    function_call                  shift and go to state 110
    variable                       shift and go to state 112

state 163

    (85) term_tail -> empty .

    PLUS            reduce using rule 85 (term_tail -> empty .)
    MINUS           reduce using rule 85 (term_tail -> empty .)
    LESS            reduce using rule 85 (term_tail -> empty .)
    LESS_EQUAL      reduce using rule 85 (term_tail -> empty .)
    GREAT           reduce using rule 85 (term_tail -> empty .)
    GREAT_EQUAL     reduce using rule 85 (term_tail -> empty .)
    EQUAL           reduce using rule 85 (term_tail -> empty .)
    DIFFERENT       reduce using rule 85 (term_tail -> empty .)
    THEN            reduce using rule 85 (term_tail -> empty .)
    TIMES           reduce using rule 85 (term_tail -> empty .)
    DIVIDE          reduce using rule 85 (term_tail -> empty .)
    MOD             reduce using rule 85 (term_tail -> empty .)
    AND             reduce using rule 85 (term_tail -> empty .)
    OR              reduce using rule 85 (term_tail -> empty .)
    DO              reduce using rule 85 (term_tail -> empty .)
    COMMA           reduce using rule 85 (term_tail -> empty .)
    RPAREN          reduce using rule 85 (term_tail -> empty .)
    RBRACKET        reduce using rule 85 (term_tail -> empty .)
    SEMICOLON       reduce using rule 85 (term_tail -> empty .)
    END             reduce using rule 85 (term_tail -> empty .)
    ELSE            reduce using rule 85 (term_tail -> empty .)
    DOTDOT          reduce using rule 85 (term_tail -> empty .)
    TO              reduce using rule 85 (term_tail -> empty .)
    DOWNTO          reduce using rule 85 (term_tail -> empty .)


state 164

    (86) mulop -> TIMES .

    LPAREN          reduce using rule 86 (mulop -> TIMES .)
    NUMBER          reduce using rule 86 (mulop -> TIMES .)
    STRING_LITERAL  reduce using rule 86 (mulop -> TIMES .)
    ID              reduce using rule 86 (mulop -> TIMES .)


state 165

    (87) mulop -> DIVIDE .

    LPAREN          reduce using rule 87 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 87 (mulop -> DIVIDE .)
    STRING_LITERAL  reduce using rule 87 (mulop -> DIVIDE .)
    ID              reduce using rule 87 (mulop -> DIVIDE .)


state 166

    (88) mulop -> DIV .

    LPAREN          reduce using rule 88 (mulop -> DIV .)
    NUMBER          reduce using rule 88 (mulop -> DIV .)
    STRING_LITERAL  reduce using rule 88 (mulop -> DIV .)
    ID              reduce using rule 88 (mulop -> DIV .)


state 167

    (94) factor -> LPAREN expression . RPAREN
    (89) expression -> expression . PLUS expression
    (90) expression -> expression . MINUS expression
    (91) expression -> expression . TIMES expression
    (92) expression -> expression . DIVIDE expression
    (93) expression -> expression . MOD expression
    (117) expression -> expression . AND expression
    (118) expression -> expression . OR expression

    RPAREN          shift and go to state 199
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    AND             shift and go to state 146
    OR              shift and go to state 147


state 168

    (46) function_call -> ID LPAREN . expression_list RPAREN
    (72) expression_list -> . expression expression_list_tail
    (75) expression_list -> . empty
    (76) expression -> . simple_expression relop simple_expression
    (77) expression -> . simple_expression
    (89) expression -> . expression PLUS expression
    (90) expression -> . expression MINUS expression
    (91) expression -> . expression TIMES expression
    (92) expression -> . expression DIVIDE expression
    (93) expression -> . expression MOD expression
    (117) expression -> . expression AND expression
    (118) expression -> . expression OR expression
    (119) expression -> . NOT expression
    (104) empty -> .
    (78) simple_expression -> . term simple_expression_tail
    (83) term -> . factor term_tail
    (47) factor -> . function_call
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . variable
    (96) factor -> . NUMBER
    (97) factor -> . STRING_LITERAL
    (46) function_call -> . ID LPAREN expression_list RPAREN
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 107
    RPAREN          reduce using rule 104 (empty -> .)
    LPAREN          shift and go to state 111
    NUMBER          shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    ID              shift and go to state 115

    expression_list                shift and go to state 200
    expression                     shift and go to state 134
    empty                          shift and go to state 135
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    function_call                  shift and go to state 110
    variable                       shift and go to state 112

state 169

    (67) assignment_statement -> variable COLON_EQUAL expression .
    (89) expression -> expression . PLUS expression
    (90) expression -> expression . MINUS expression
    (91) expression -> expression . TIMES expression
    (92) expression -> expression . DIVIDE expression
    (93) expression -> expression . MOD expression
    (117) expression -> expression . AND expression
    (118) expression -> expression . OR expression

    SEMICOLON       reduce using rule 67 (assignment_statement -> variable COLON_EQUAL expression .)
    END             reduce using rule 67 (assignment_statement -> variable COLON_EQUAL expression .)
    ELSE            reduce using rule 67 (assignment_statement -> variable COLON_EQUAL expression .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    AND             shift and go to state 146
    OR              shift and go to state 147


state 170

    (70) while_statement -> WHILE expression DO . statement
    (56) statement -> . if_statement
    (57) statement -> . assignment_statement
    (58) statement -> . while_statement
    (59) statement -> . procedure_call
    (60) statement -> . compound_statement
    (61) statement -> . for_statement
    (62) statement -> . empty
    (105) statement -> . READLN
    (106) statement -> . READLN LPAREN ID RPAREN
    (107) statement -> . READLN LBRACKET ID RBRACKET
    (108) statement -> . WRITELN LPAREN expression_list RPAREN
    (109) statement -> . WRITE LPAREN expression_list RPAREN
    (110) statement -> . USES ID SEMICOLON
    (63) if_statement -> . IF expression THEN statement ELSE statement
    (64) if_statement -> . IF expression THEN statement
    (67) assignment_statement -> . variable COLON_EQUAL expression
    (70) while_statement -> . WHILE expression DO statement
    (71) procedure_call -> . ID LPAREN expression_list RPAREN
    (52) compound_statement -> . BEGIN statement_list END
    (65) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (66) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (104) empty -> .
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    READLN          shift and go to state 69
    WRITELN         shift and go to state 71
    WRITE           shift and go to state 72
    USES            shift and go to state 73
    IF              shift and go to state 74
    WHILE           shift and go to state 76
    ID              shift and go to state 70
    BEGIN           shift and go to state 43
    FOR             shift and go to state 77
    ELSE            reduce using rule 104 (empty -> .)
    SEMICOLON       reduce using rule 104 (empty -> .)
    END             reduce using rule 104 (empty -> .)

    statement                      shift and go to state 201
    if_statement                   shift and go to state 62
    assignment_statement           shift and go to state 63
    while_statement                shift and go to state 64
    procedure_call                 shift and go to state 65
    compound_statement             shift and go to state 66
    for_statement                  shift and go to state 67
    empty                          shift and go to state 68
    variable                       shift and go to state 75

state 171

    (65) for_statement -> FOR ID COLON_EQUAL . expression TO expression DO statement
    (66) for_statement -> FOR ID COLON_EQUAL . expression DOWNTO expression DO statement
    (76) expression -> . simple_expression relop simple_expression
    (77) expression -> . simple_expression
    (89) expression -> . expression PLUS expression
    (90) expression -> . expression MINUS expression
    (91) expression -> . expression TIMES expression
    (92) expression -> . expression DIVIDE expression
    (93) expression -> . expression MOD expression
    (117) expression -> . expression AND expression
    (118) expression -> . expression OR expression
    (119) expression -> . NOT expression
    (78) simple_expression -> . term simple_expression_tail
    (83) term -> . factor term_tail
    (47) factor -> . function_call
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . variable
    (96) factor -> . NUMBER
    (97) factor -> . STRING_LITERAL
    (46) function_call -> . ID LPAREN expression_list RPAREN
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 107
    LPAREN          shift and go to state 111
    NUMBER          shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    ID              shift and go to state 115

    expression                     shift and go to state 202
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    function_call                  shift and go to state 110
    variable                       shift and go to state 112

state 172

    (44) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN . COLON type_specifier SEMICOLON block SEMICOLON

    COLON           shift and go to state 203


state 173

    (49) parameter_list -> parameter_list SEMICOLON . parameter
    (50) parameter -> . id_list COLON type_specifier
    (51) parameter -> . VAR id_list COLON type_specifier
    (28) id_list -> . ID
    (29) id_list -> . id_list COMMA ID

    VAR             shift and go to state 122
    ID              shift and go to state 40

    parameter                      shift and go to state 204
    id_list                        shift and go to state 121

state 174

    (50) parameter -> id_list COLON . type_specifier
    (34) type_specifier -> . ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier
    (35) type_specifier -> . INTEGER
    (36) type_specifier -> . BYTE
    (37) type_specifier -> . CHAR
    (38) type_specifier -> . ID
    (39) type_specifier -> . LONGINT

    ARRAY           shift and go to state 87
    INTEGER         shift and go to state 88
    BYTE            shift and go to state 89
    CHAR            shift and go to state 90
    ID              shift and go to state 85
    LONGINT         shift and go to state 91

    type_specifier                 shift and go to state 205

state 175

    (51) parameter -> VAR id_list . COLON type_specifier
    (29) id_list -> id_list . COMMA ID

    COLON           shift and go to state 206
    COMMA           shift and go to state 59


state 176

    (42) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN . SEMICOLON block SEMICOLON
    (43) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN . SEMICOLON block DOT

    SEMICOLON       shift and go to state 207


state 177

    (34) type_specifier -> ARRAY LBRACKET expression . DOTDOT expression RBRACKET OF type_specifier
    (89) expression -> expression . PLUS expression
    (90) expression -> expression . MINUS expression
    (91) expression -> expression . TIMES expression
    (92) expression -> expression . DIVIDE expression
    (93) expression -> expression . MOD expression
    (117) expression -> expression . AND expression
    (118) expression -> expression . OR expression

    DOTDOT          shift and go to state 208
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    AND             shift and go to state 146
    OR              shift and go to state 147


state 178

    (54) statement_list_tail -> SEMICOLON statement statement_list_tail .

    END             reduce using rule 54 (statement_list_tail -> SEMICOLON statement statement_list_tail .)


state 179

    (106) statement -> READLN LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 106 (statement -> READLN LPAREN ID RPAREN .)
    END             reduce using rule 106 (statement -> READLN LPAREN ID RPAREN .)
    ELSE            reduce using rule 106 (statement -> READLN LPAREN ID RPAREN .)


state 180

    (107) statement -> READLN LBRACKET ID RBRACKET .

    SEMICOLON       reduce using rule 107 (statement -> READLN LBRACKET ID RBRACKET .)
    END             reduce using rule 107 (statement -> READLN LBRACKET ID RBRACKET .)
    ELSE            reduce using rule 107 (statement -> READLN LBRACKET ID RBRACKET .)


state 181

    (71) procedure_call -> ID LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 71 (procedure_call -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 71 (procedure_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 71 (procedure_call -> ID LPAREN expression_list RPAREN .)


state 182

    (72) expression_list -> expression expression_list_tail .

    RPAREN          reduce using rule 72 (expression_list -> expression expression_list_tail .)


state 183

    (73) expression_list_tail -> COMMA . expression expression_list_tail
    (76) expression -> . simple_expression relop simple_expression
    (77) expression -> . simple_expression
    (89) expression -> . expression PLUS expression
    (90) expression -> . expression MINUS expression
    (91) expression -> . expression TIMES expression
    (92) expression -> . expression DIVIDE expression
    (93) expression -> . expression MOD expression
    (117) expression -> . expression AND expression
    (118) expression -> . expression OR expression
    (119) expression -> . NOT expression
    (78) simple_expression -> . term simple_expression_tail
    (83) term -> . factor term_tail
    (47) factor -> . function_call
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . variable
    (96) factor -> . NUMBER
    (97) factor -> . STRING_LITERAL
    (46) function_call -> . ID LPAREN expression_list RPAREN
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 107
    LPAREN          shift and go to state 111
    NUMBER          shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    ID              shift and go to state 115

    expression                     shift and go to state 209
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    function_call                  shift and go to state 110
    variable                       shift and go to state 112

state 184

    (74) expression_list_tail -> empty .

    RPAREN          reduce using rule 74 (expression_list_tail -> empty .)


state 185

    (69) variable -> ID LBRACKET expression RBRACKET .

    COLON_EQUAL     reduce using rule 69 (variable -> ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 69 (variable -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 69 (variable -> ID LBRACKET expression RBRACKET .)
    DIV             reduce using rule 69 (variable -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 69 (variable -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 69 (variable -> ID LBRACKET expression RBRACKET .)
    LESS            reduce using rule 69 (variable -> ID LBRACKET expression RBRACKET .)
    LESS_EQUAL      reduce using rule 69 (variable -> ID LBRACKET expression RBRACKET .)
    GREAT           reduce using rule 69 (variable -> ID LBRACKET expression RBRACKET .)
    GREAT_EQUAL     reduce using rule 69 (variable -> ID LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 69 (variable -> ID LBRACKET expression RBRACKET .)
    DIFFERENT       reduce using rule 69 (variable -> ID LBRACKET expression RBRACKET .)
    THEN            reduce using rule 69 (variable -> ID LBRACKET expression RBRACKET .)
    MOD             reduce using rule 69 (variable -> ID LBRACKET expression RBRACKET .)
    AND             reduce using rule 69 (variable -> ID LBRACKET expression RBRACKET .)
    OR              reduce using rule 69 (variable -> ID LBRACKET expression RBRACKET .)
    DO              reduce using rule 69 (variable -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 69 (variable -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 69 (variable -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 69 (variable -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 69 (variable -> ID LBRACKET expression RBRACKET .)
    END             reduce using rule 69 (variable -> ID LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 69 (variable -> ID LBRACKET expression RBRACKET .)
    DOTDOT          reduce using rule 69 (variable -> ID LBRACKET expression RBRACKET .)
    TO              reduce using rule 69 (variable -> ID LBRACKET expression RBRACKET .)
    DOWNTO          reduce using rule 69 (variable -> ID LBRACKET expression RBRACKET .)


state 186

    (108) statement -> WRITELN LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 108 (statement -> WRITELN LPAREN expression_list RPAREN .)
    END             reduce using rule 108 (statement -> WRITELN LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 108 (statement -> WRITELN LPAREN expression_list RPAREN .)


state 187

    (109) statement -> WRITE LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 109 (statement -> WRITE LPAREN expression_list RPAREN .)
    END             reduce using rule 109 (statement -> WRITE LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 109 (statement -> WRITE LPAREN expression_list RPAREN .)


state 188

    (63) if_statement -> IF expression THEN statement . ELSE statement
    (64) if_statement -> IF expression THEN statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 210
    SEMICOLON       reduce using rule 64 (if_statement -> IF expression THEN statement .)
    END             reduce using rule 64 (if_statement -> IF expression THEN statement .)

  ! ELSE            [ reduce using rule 64 (if_statement -> IF expression THEN statement .) ]


state 189

    (89) expression -> expression PLUS expression .
    (89) expression -> expression . PLUS expression
    (90) expression -> expression . MINUS expression
    (91) expression -> expression . TIMES expression
    (92) expression -> expression . DIVIDE expression
    (93) expression -> expression . MOD expression
    (117) expression -> expression . AND expression
    (118) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 89 (expression -> expression PLUS expression .)
    DO              reduce using rule 89 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 89 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 89 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 89 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 89 (expression -> expression PLUS expression .)
    END             reduce using rule 89 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 89 (expression -> expression PLUS expression .)
    DOTDOT          reduce using rule 89 (expression -> expression PLUS expression .)
    TO              reduce using rule 89 (expression -> expression PLUS expression .)
    DOWNTO          reduce using rule 89 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    AND             shift and go to state 146
    OR              shift and go to state 147

  ! PLUS            [ reduce using rule 89 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 89 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 89 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 89 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 89 (expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 89 (expression -> expression PLUS expression .) ]
  ! OR              [ reduce using rule 89 (expression -> expression PLUS expression .) ]


state 190

    (90) expression -> expression MINUS expression .
    (89) expression -> expression . PLUS expression
    (90) expression -> expression . MINUS expression
    (91) expression -> expression . TIMES expression
    (92) expression -> expression . DIVIDE expression
    (93) expression -> expression . MOD expression
    (117) expression -> expression . AND expression
    (118) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 90 (expression -> expression MINUS expression .)
    DO              reduce using rule 90 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 90 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 90 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 90 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 90 (expression -> expression MINUS expression .)
    END             reduce using rule 90 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 90 (expression -> expression MINUS expression .)
    DOTDOT          reduce using rule 90 (expression -> expression MINUS expression .)
    TO              reduce using rule 90 (expression -> expression MINUS expression .)
    DOWNTO          reduce using rule 90 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    AND             shift and go to state 146
    OR              shift and go to state 147

  ! PLUS            [ reduce using rule 90 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 90 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 90 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 90 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 90 (expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 90 (expression -> expression MINUS expression .) ]
  ! OR              [ reduce using rule 90 (expression -> expression MINUS expression .) ]


state 191

    (91) expression -> expression TIMES expression .
    (89) expression -> expression . PLUS expression
    (90) expression -> expression . MINUS expression
    (91) expression -> expression . TIMES expression
    (92) expression -> expression . DIVIDE expression
    (93) expression -> expression . MOD expression
    (117) expression -> expression . AND expression
    (118) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 91 (expression -> expression TIMES expression .)
    DO              reduce using rule 91 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 91 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 91 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 91 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 91 (expression -> expression TIMES expression .)
    END             reduce using rule 91 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 91 (expression -> expression TIMES expression .)
    DOTDOT          reduce using rule 91 (expression -> expression TIMES expression .)
    TO              reduce using rule 91 (expression -> expression TIMES expression .)
    DOWNTO          reduce using rule 91 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    AND             shift and go to state 146
    OR              shift and go to state 147

  ! PLUS            [ reduce using rule 91 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 91 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 91 (expression -> expression TIMES expression .) ]
  ! DIVIDE          [ reduce using rule 91 (expression -> expression TIMES expression .) ]
  ! MOD             [ reduce using rule 91 (expression -> expression TIMES expression .) ]
  ! AND             [ reduce using rule 91 (expression -> expression TIMES expression .) ]
  ! OR              [ reduce using rule 91 (expression -> expression TIMES expression .) ]


state 192

    (92) expression -> expression DIVIDE expression .
    (89) expression -> expression . PLUS expression
    (90) expression -> expression . MINUS expression
    (91) expression -> expression . TIMES expression
    (92) expression -> expression . DIVIDE expression
    (93) expression -> expression . MOD expression
    (117) expression -> expression . AND expression
    (118) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 92 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 92 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 92 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 92 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 92 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 92 (expression -> expression DIVIDE expression .)
    END             reduce using rule 92 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 92 (expression -> expression DIVIDE expression .)
    DOTDOT          reduce using rule 92 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 92 (expression -> expression DIVIDE expression .)
    DOWNTO          reduce using rule 92 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    AND             shift and go to state 146
    OR              shift and go to state 147

  ! PLUS            [ reduce using rule 92 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 92 (expression -> expression DIVIDE expression .) ]
  ! TIMES           [ reduce using rule 92 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 92 (expression -> expression DIVIDE expression .) ]
  ! MOD             [ reduce using rule 92 (expression -> expression DIVIDE expression .) ]
  ! AND             [ reduce using rule 92 (expression -> expression DIVIDE expression .) ]
  ! OR              [ reduce using rule 92 (expression -> expression DIVIDE expression .) ]


state 193

    (93) expression -> expression MOD expression .
    (89) expression -> expression . PLUS expression
    (90) expression -> expression . MINUS expression
    (91) expression -> expression . TIMES expression
    (92) expression -> expression . DIVIDE expression
    (93) expression -> expression . MOD expression
    (117) expression -> expression . AND expression
    (118) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 93 (expression -> expression MOD expression .)
    DO              reduce using rule 93 (expression -> expression MOD expression .)
    COMMA           reduce using rule 93 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 93 (expression -> expression MOD expression .)
    RBRACKET        reduce using rule 93 (expression -> expression MOD expression .)
    SEMICOLON       reduce using rule 93 (expression -> expression MOD expression .)
    END             reduce using rule 93 (expression -> expression MOD expression .)
    ELSE            reduce using rule 93 (expression -> expression MOD expression .)
    DOTDOT          reduce using rule 93 (expression -> expression MOD expression .)
    TO              reduce using rule 93 (expression -> expression MOD expression .)
    DOWNTO          reduce using rule 93 (expression -> expression MOD expression .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    AND             shift and go to state 146
    OR              shift and go to state 147

  ! PLUS            [ reduce using rule 93 (expression -> expression MOD expression .) ]
  ! MINUS           [ reduce using rule 93 (expression -> expression MOD expression .) ]
  ! TIMES           [ reduce using rule 93 (expression -> expression MOD expression .) ]
  ! DIVIDE          [ reduce using rule 93 (expression -> expression MOD expression .) ]
  ! MOD             [ reduce using rule 93 (expression -> expression MOD expression .) ]
  ! AND             [ reduce using rule 93 (expression -> expression MOD expression .) ]
  ! OR              [ reduce using rule 93 (expression -> expression MOD expression .) ]


state 194

    (117) expression -> expression AND expression .
    (89) expression -> expression . PLUS expression
    (90) expression -> expression . MINUS expression
    (91) expression -> expression . TIMES expression
    (92) expression -> expression . DIVIDE expression
    (93) expression -> expression . MOD expression
    (117) expression -> expression . AND expression
    (118) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 117 (expression -> expression AND expression .)
    DO              reduce using rule 117 (expression -> expression AND expression .)
    COMMA           reduce using rule 117 (expression -> expression AND expression .)
    RPAREN          reduce using rule 117 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 117 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 117 (expression -> expression AND expression .)
    END             reduce using rule 117 (expression -> expression AND expression .)
    ELSE            reduce using rule 117 (expression -> expression AND expression .)
    DOTDOT          reduce using rule 117 (expression -> expression AND expression .)
    TO              reduce using rule 117 (expression -> expression AND expression .)
    DOWNTO          reduce using rule 117 (expression -> expression AND expression .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    AND             shift and go to state 146
    OR              shift and go to state 147

  ! PLUS            [ reduce using rule 117 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 117 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 117 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 117 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 117 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 117 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 117 (expression -> expression AND expression .) ]


state 195

    (118) expression -> expression OR expression .
    (89) expression -> expression . PLUS expression
    (90) expression -> expression . MINUS expression
    (91) expression -> expression . TIMES expression
    (92) expression -> expression . DIVIDE expression
    (93) expression -> expression . MOD expression
    (117) expression -> expression . AND expression
    (118) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 118 (expression -> expression OR expression .)
    DO              reduce using rule 118 (expression -> expression OR expression .)
    COMMA           reduce using rule 118 (expression -> expression OR expression .)
    RPAREN          reduce using rule 118 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 118 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 118 (expression -> expression OR expression .)
    END             reduce using rule 118 (expression -> expression OR expression .)
    ELSE            reduce using rule 118 (expression -> expression OR expression .)
    DOTDOT          reduce using rule 118 (expression -> expression OR expression .)
    TO              reduce using rule 118 (expression -> expression OR expression .)
    DOWNTO          reduce using rule 118 (expression -> expression OR expression .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    AND             shift and go to state 146
    OR              shift and go to state 147

  ! PLUS            [ reduce using rule 118 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 118 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 118 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 118 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 118 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 118 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 118 (expression -> expression OR expression .) ]


state 196

    (76) expression -> simple_expression relop simple_expression .

    THEN            reduce using rule 76 (expression -> simple_expression relop simple_expression .)
    PLUS            reduce using rule 76 (expression -> simple_expression relop simple_expression .)
    MINUS           reduce using rule 76 (expression -> simple_expression relop simple_expression .)
    TIMES           reduce using rule 76 (expression -> simple_expression relop simple_expression .)
    DIVIDE          reduce using rule 76 (expression -> simple_expression relop simple_expression .)
    MOD             reduce using rule 76 (expression -> simple_expression relop simple_expression .)
    AND             reduce using rule 76 (expression -> simple_expression relop simple_expression .)
    OR              reduce using rule 76 (expression -> simple_expression relop simple_expression .)
    DO              reduce using rule 76 (expression -> simple_expression relop simple_expression .)
    COMMA           reduce using rule 76 (expression -> simple_expression relop simple_expression .)
    RPAREN          reduce using rule 76 (expression -> simple_expression relop simple_expression .)
    RBRACKET        reduce using rule 76 (expression -> simple_expression relop simple_expression .)
    SEMICOLON       reduce using rule 76 (expression -> simple_expression relop simple_expression .)
    END             reduce using rule 76 (expression -> simple_expression relop simple_expression .)
    ELSE            reduce using rule 76 (expression -> simple_expression relop simple_expression .)
    DOTDOT          reduce using rule 76 (expression -> simple_expression relop simple_expression .)
    TO              reduce using rule 76 (expression -> simple_expression relop simple_expression .)
    DOWNTO          reduce using rule 76 (expression -> simple_expression relop simple_expression .)


state 197

    (79) simple_expression_tail -> addop term .

    LESS            reduce using rule 79 (simple_expression_tail -> addop term .)
    LESS_EQUAL      reduce using rule 79 (simple_expression_tail -> addop term .)
    GREAT           reduce using rule 79 (simple_expression_tail -> addop term .)
    GREAT_EQUAL     reduce using rule 79 (simple_expression_tail -> addop term .)
    EQUAL           reduce using rule 79 (simple_expression_tail -> addop term .)
    DIFFERENT       reduce using rule 79 (simple_expression_tail -> addop term .)
    THEN            reduce using rule 79 (simple_expression_tail -> addop term .)
    PLUS            reduce using rule 79 (simple_expression_tail -> addop term .)
    MINUS           reduce using rule 79 (simple_expression_tail -> addop term .)
    TIMES           reduce using rule 79 (simple_expression_tail -> addop term .)
    DIVIDE          reduce using rule 79 (simple_expression_tail -> addop term .)
    MOD             reduce using rule 79 (simple_expression_tail -> addop term .)
    AND             reduce using rule 79 (simple_expression_tail -> addop term .)
    OR              reduce using rule 79 (simple_expression_tail -> addop term .)
    DO              reduce using rule 79 (simple_expression_tail -> addop term .)
    COMMA           reduce using rule 79 (simple_expression_tail -> addop term .)
    RPAREN          reduce using rule 79 (simple_expression_tail -> addop term .)
    RBRACKET        reduce using rule 79 (simple_expression_tail -> addop term .)
    SEMICOLON       reduce using rule 79 (simple_expression_tail -> addop term .)
    END             reduce using rule 79 (simple_expression_tail -> addop term .)
    ELSE            reduce using rule 79 (simple_expression_tail -> addop term .)
    DOTDOT          reduce using rule 79 (simple_expression_tail -> addop term .)
    TO              reduce using rule 79 (simple_expression_tail -> addop term .)
    DOWNTO          reduce using rule 79 (simple_expression_tail -> addop term .)


state 198

    (84) term_tail -> mulop factor .

    PLUS            reduce using rule 84 (term_tail -> mulop factor .)
    MINUS           reduce using rule 84 (term_tail -> mulop factor .)
    LESS            reduce using rule 84 (term_tail -> mulop factor .)
    LESS_EQUAL      reduce using rule 84 (term_tail -> mulop factor .)
    GREAT           reduce using rule 84 (term_tail -> mulop factor .)
    GREAT_EQUAL     reduce using rule 84 (term_tail -> mulop factor .)
    EQUAL           reduce using rule 84 (term_tail -> mulop factor .)
    DIFFERENT       reduce using rule 84 (term_tail -> mulop factor .)
    THEN            reduce using rule 84 (term_tail -> mulop factor .)
    TIMES           reduce using rule 84 (term_tail -> mulop factor .)
    DIVIDE          reduce using rule 84 (term_tail -> mulop factor .)
    MOD             reduce using rule 84 (term_tail -> mulop factor .)
    AND             reduce using rule 84 (term_tail -> mulop factor .)
    OR              reduce using rule 84 (term_tail -> mulop factor .)
    DO              reduce using rule 84 (term_tail -> mulop factor .)
    COMMA           reduce using rule 84 (term_tail -> mulop factor .)
    RPAREN          reduce using rule 84 (term_tail -> mulop factor .)
    RBRACKET        reduce using rule 84 (term_tail -> mulop factor .)
    SEMICOLON       reduce using rule 84 (term_tail -> mulop factor .)
    END             reduce using rule 84 (term_tail -> mulop factor .)
    ELSE            reduce using rule 84 (term_tail -> mulop factor .)
    DOTDOT          reduce using rule 84 (term_tail -> mulop factor .)
    TO              reduce using rule 84 (term_tail -> mulop factor .)
    DOWNTO          reduce using rule 84 (term_tail -> mulop factor .)


state 199

    (94) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    DIV             reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    LESS_EQUAL      reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    GREAT           reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    GREAT_EQUAL     reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    DIFFERENT       reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    DOTDOT          reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 94 (factor -> LPAREN expression RPAREN .)


state 200

    (46) function_call -> ID LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 211


state 201

    (70) while_statement -> WHILE expression DO statement .

    SEMICOLON       reduce using rule 70 (while_statement -> WHILE expression DO statement .)
    END             reduce using rule 70 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 70 (while_statement -> WHILE expression DO statement .)


state 202

    (65) for_statement -> FOR ID COLON_EQUAL expression . TO expression DO statement
    (66) for_statement -> FOR ID COLON_EQUAL expression . DOWNTO expression DO statement
    (89) expression -> expression . PLUS expression
    (90) expression -> expression . MINUS expression
    (91) expression -> expression . TIMES expression
    (92) expression -> expression . DIVIDE expression
    (93) expression -> expression . MOD expression
    (117) expression -> expression . AND expression
    (118) expression -> expression . OR expression

    TO              shift and go to state 212
    DOWNTO          shift and go to state 213
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    AND             shift and go to state 146
    OR              shift and go to state 147


state 203

    (44) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON . type_specifier SEMICOLON block SEMICOLON
    (34) type_specifier -> . ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier
    (35) type_specifier -> . INTEGER
    (36) type_specifier -> . BYTE
    (37) type_specifier -> . CHAR
    (38) type_specifier -> . ID
    (39) type_specifier -> . LONGINT

    ARRAY           shift and go to state 87
    INTEGER         shift and go to state 88
    BYTE            shift and go to state 89
    CHAR            shift and go to state 90
    ID              shift and go to state 85
    LONGINT         shift and go to state 91

    type_specifier                 shift and go to state 214

state 204

    (49) parameter_list -> parameter_list SEMICOLON parameter .

    RPAREN          reduce using rule 49 (parameter_list -> parameter_list SEMICOLON parameter .)
    SEMICOLON       reduce using rule 49 (parameter_list -> parameter_list SEMICOLON parameter .)


state 205

    (50) parameter -> id_list COLON type_specifier .

    RPAREN          reduce using rule 50 (parameter -> id_list COLON type_specifier .)
    SEMICOLON       reduce using rule 50 (parameter -> id_list COLON type_specifier .)


state 206

    (51) parameter -> VAR id_list COLON . type_specifier
    (34) type_specifier -> . ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier
    (35) type_specifier -> . INTEGER
    (36) type_specifier -> . BYTE
    (37) type_specifier -> . CHAR
    (38) type_specifier -> . ID
    (39) type_specifier -> . LONGINT

    ARRAY           shift and go to state 87
    INTEGER         shift and go to state 88
    BYTE            shift and go to state 89
    CHAR            shift and go to state 90
    ID              shift and go to state 85
    LONGINT         shift and go to state 91

    type_specifier                 shift and go to state 215

state 207

    (42) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON . block SEMICOLON
    (43) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON . block DOT
    (23) block -> . declarations compound_statement
    (24) declarations -> . VAR declaration_list procedure_declarations
    (25) declarations -> . VAR declaration_list
    (26) declarations -> . procedure_declarations
    (27) declarations -> . empty
    (45) declarations -> . function_declaration
    (40) procedure_declarations -> . procedure_declaration
    (41) procedure_declarations -> . procedure_declarations procedure_declaration
    (104) empty -> .
    (44) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (42) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (43) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT

    VAR             shift and go to state 17
    BEGIN           reduce using rule 104 (empty -> .)
    FUNCTION        shift and go to state 22
    PROCEDURE       shift and go to state 23

    block                          shift and go to state 216
    declarations                   shift and go to state 16
    procedure_declarations         shift and go to state 18
    empty                          shift and go to state 19
    function_declaration           shift and go to state 20
    procedure_declaration          shift and go to state 21

state 208

    (34) type_specifier -> ARRAY LBRACKET expression DOTDOT . expression RBRACKET OF type_specifier
    (76) expression -> . simple_expression relop simple_expression
    (77) expression -> . simple_expression
    (89) expression -> . expression PLUS expression
    (90) expression -> . expression MINUS expression
    (91) expression -> . expression TIMES expression
    (92) expression -> . expression DIVIDE expression
    (93) expression -> . expression MOD expression
    (117) expression -> . expression AND expression
    (118) expression -> . expression OR expression
    (119) expression -> . NOT expression
    (78) simple_expression -> . term simple_expression_tail
    (83) term -> . factor term_tail
    (47) factor -> . function_call
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . variable
    (96) factor -> . NUMBER
    (97) factor -> . STRING_LITERAL
    (46) function_call -> . ID LPAREN expression_list RPAREN
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 107
    LPAREN          shift and go to state 111
    NUMBER          shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    ID              shift and go to state 115

    expression                     shift and go to state 217
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    function_call                  shift and go to state 110
    variable                       shift and go to state 112

state 209

    (73) expression_list_tail -> COMMA expression . expression_list_tail
    (89) expression -> expression . PLUS expression
    (90) expression -> expression . MINUS expression
    (91) expression -> expression . TIMES expression
    (92) expression -> expression . DIVIDE expression
    (93) expression -> expression . MOD expression
    (117) expression -> expression . AND expression
    (118) expression -> expression . OR expression
    (73) expression_list_tail -> . COMMA expression expression_list_tail
    (74) expression_list_tail -> . empty
    (104) empty -> .

    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    AND             shift and go to state 146
    OR              shift and go to state 147
    COMMA           shift and go to state 183
    RPAREN          reduce using rule 104 (empty -> .)

    expression_list_tail           shift and go to state 218
    empty                          shift and go to state 184

state 210

    (63) if_statement -> IF expression THEN statement ELSE . statement
    (56) statement -> . if_statement
    (57) statement -> . assignment_statement
    (58) statement -> . while_statement
    (59) statement -> . procedure_call
    (60) statement -> . compound_statement
    (61) statement -> . for_statement
    (62) statement -> . empty
    (105) statement -> . READLN
    (106) statement -> . READLN LPAREN ID RPAREN
    (107) statement -> . READLN LBRACKET ID RBRACKET
    (108) statement -> . WRITELN LPAREN expression_list RPAREN
    (109) statement -> . WRITE LPAREN expression_list RPAREN
    (110) statement -> . USES ID SEMICOLON
    (63) if_statement -> . IF expression THEN statement ELSE statement
    (64) if_statement -> . IF expression THEN statement
    (67) assignment_statement -> . variable COLON_EQUAL expression
    (70) while_statement -> . WHILE expression DO statement
    (71) procedure_call -> . ID LPAREN expression_list RPAREN
    (52) compound_statement -> . BEGIN statement_list END
    (65) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (66) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (104) empty -> .
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    READLN          shift and go to state 69
    WRITELN         shift and go to state 71
    WRITE           shift and go to state 72
    USES            shift and go to state 73
    IF              shift and go to state 74
    WHILE           shift and go to state 76
    ID              shift and go to state 70
    BEGIN           shift and go to state 43
    FOR             shift and go to state 77
    ELSE            reduce using rule 104 (empty -> .)
    SEMICOLON       reduce using rule 104 (empty -> .)
    END             reduce using rule 104 (empty -> .)

    statement                      shift and go to state 219
    if_statement                   shift and go to state 62
    assignment_statement           shift and go to state 63
    while_statement                shift and go to state 64
    procedure_call                 shift and go to state 65
    compound_statement             shift and go to state 66
    for_statement                  shift and go to state 67
    empty                          shift and go to state 68
    variable                       shift and go to state 75

state 211

    (46) function_call -> ID LPAREN expression_list RPAREN .

    TIMES           reduce using rule 46 (function_call -> ID LPAREN expression_list RPAREN .)
    DIVIDE          reduce using rule 46 (function_call -> ID LPAREN expression_list RPAREN .)
    DIV             reduce using rule 46 (function_call -> ID LPAREN expression_list RPAREN .)
    PLUS            reduce using rule 46 (function_call -> ID LPAREN expression_list RPAREN .)
    MINUS           reduce using rule 46 (function_call -> ID LPAREN expression_list RPAREN .)
    LESS            reduce using rule 46 (function_call -> ID LPAREN expression_list RPAREN .)
    LESS_EQUAL      reduce using rule 46 (function_call -> ID LPAREN expression_list RPAREN .)
    GREAT           reduce using rule 46 (function_call -> ID LPAREN expression_list RPAREN .)
    GREAT_EQUAL     reduce using rule 46 (function_call -> ID LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 46 (function_call -> ID LPAREN expression_list RPAREN .)
    DIFFERENT       reduce using rule 46 (function_call -> ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 46 (function_call -> ID LPAREN expression_list RPAREN .)
    MOD             reduce using rule 46 (function_call -> ID LPAREN expression_list RPAREN .)
    AND             reduce using rule 46 (function_call -> ID LPAREN expression_list RPAREN .)
    OR              reduce using rule 46 (function_call -> ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 46 (function_call -> ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 46 (function_call -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 46 (function_call -> ID LPAREN expression_list RPAREN .)
    RBRACKET        reduce using rule 46 (function_call -> ID LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 46 (function_call -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 46 (function_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 46 (function_call -> ID LPAREN expression_list RPAREN .)
    DOTDOT          reduce using rule 46 (function_call -> ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 46 (function_call -> ID LPAREN expression_list RPAREN .)
    DOWNTO          reduce using rule 46 (function_call -> ID LPAREN expression_list RPAREN .)


state 212

    (65) for_statement -> FOR ID COLON_EQUAL expression TO . expression DO statement
    (76) expression -> . simple_expression relop simple_expression
    (77) expression -> . simple_expression
    (89) expression -> . expression PLUS expression
    (90) expression -> . expression MINUS expression
    (91) expression -> . expression TIMES expression
    (92) expression -> . expression DIVIDE expression
    (93) expression -> . expression MOD expression
    (117) expression -> . expression AND expression
    (118) expression -> . expression OR expression
    (119) expression -> . NOT expression
    (78) simple_expression -> . term simple_expression_tail
    (83) term -> . factor term_tail
    (47) factor -> . function_call
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . variable
    (96) factor -> . NUMBER
    (97) factor -> . STRING_LITERAL
    (46) function_call -> . ID LPAREN expression_list RPAREN
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 107
    LPAREN          shift and go to state 111
    NUMBER          shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    ID              shift and go to state 115

    expression                     shift and go to state 220
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    function_call                  shift and go to state 110
    variable                       shift and go to state 112

state 213

    (66) for_statement -> FOR ID COLON_EQUAL expression DOWNTO . expression DO statement
    (76) expression -> . simple_expression relop simple_expression
    (77) expression -> . simple_expression
    (89) expression -> . expression PLUS expression
    (90) expression -> . expression MINUS expression
    (91) expression -> . expression TIMES expression
    (92) expression -> . expression DIVIDE expression
    (93) expression -> . expression MOD expression
    (117) expression -> . expression AND expression
    (118) expression -> . expression OR expression
    (119) expression -> . NOT expression
    (78) simple_expression -> . term simple_expression_tail
    (83) term -> . factor term_tail
    (47) factor -> . function_call
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . variable
    (96) factor -> . NUMBER
    (97) factor -> . STRING_LITERAL
    (46) function_call -> . ID LPAREN expression_list RPAREN
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 107
    LPAREN          shift and go to state 111
    NUMBER          shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    ID              shift and go to state 115

    expression                     shift and go to state 221
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    function_call                  shift and go to state 110
    variable                       shift and go to state 112

state 214

    (44) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier . SEMICOLON block SEMICOLON

    SEMICOLON       shift and go to state 222


state 215

    (51) parameter -> VAR id_list COLON type_specifier .

    RPAREN          reduce using rule 51 (parameter -> VAR id_list COLON type_specifier .)
    SEMICOLON       reduce using rule 51 (parameter -> VAR id_list COLON type_specifier .)


state 216

    (42) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block . SEMICOLON
    (43) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block . DOT

    SEMICOLON       shift and go to state 223
    DOT             shift and go to state 224


state 217

    (34) type_specifier -> ARRAY LBRACKET expression DOTDOT expression . RBRACKET OF type_specifier
    (89) expression -> expression . PLUS expression
    (90) expression -> expression . MINUS expression
    (91) expression -> expression . TIMES expression
    (92) expression -> expression . DIVIDE expression
    (93) expression -> expression . MOD expression
    (117) expression -> expression . AND expression
    (118) expression -> expression . OR expression

    RBRACKET        shift and go to state 225
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    AND             shift and go to state 146
    OR              shift and go to state 147


state 218

    (73) expression_list_tail -> COMMA expression expression_list_tail .

    RPAREN          reduce using rule 73 (expression_list_tail -> COMMA expression expression_list_tail .)


state 219

    (63) if_statement -> IF expression THEN statement ELSE statement .

    SEMICOLON       reduce using rule 63 (if_statement -> IF expression THEN statement ELSE statement .)
    END             reduce using rule 63 (if_statement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 63 (if_statement -> IF expression THEN statement ELSE statement .)


state 220

    (65) for_statement -> FOR ID COLON_EQUAL expression TO expression . DO statement
    (89) expression -> expression . PLUS expression
    (90) expression -> expression . MINUS expression
    (91) expression -> expression . TIMES expression
    (92) expression -> expression . DIVIDE expression
    (93) expression -> expression . MOD expression
    (117) expression -> expression . AND expression
    (118) expression -> expression . OR expression

    DO              shift and go to state 226
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    AND             shift and go to state 146
    OR              shift and go to state 147


state 221

    (66) for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression . DO statement
    (89) expression -> expression . PLUS expression
    (90) expression -> expression . MINUS expression
    (91) expression -> expression . TIMES expression
    (92) expression -> expression . DIVIDE expression
    (93) expression -> expression . MOD expression
    (117) expression -> expression . AND expression
    (118) expression -> expression . OR expression

    DO              shift and go to state 227
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    AND             shift and go to state 146
    OR              shift and go to state 147


state 222

    (44) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON . block SEMICOLON
    (23) block -> . declarations compound_statement
    (24) declarations -> . VAR declaration_list procedure_declarations
    (25) declarations -> . VAR declaration_list
    (26) declarations -> . procedure_declarations
    (27) declarations -> . empty
    (45) declarations -> . function_declaration
    (40) procedure_declarations -> . procedure_declaration
    (41) procedure_declarations -> . procedure_declarations procedure_declaration
    (104) empty -> .
    (44) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (42) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (43) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT

    VAR             shift and go to state 17
    BEGIN           reduce using rule 104 (empty -> .)
    FUNCTION        shift and go to state 22
    PROCEDURE       shift and go to state 23

    block                          shift and go to state 228
    declarations                   shift and go to state 16
    procedure_declarations         shift and go to state 18
    empty                          shift and go to state 19
    function_declaration           shift and go to state 20
    procedure_declaration          shift and go to state 21

state 223

    (42) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .

    PROCEDURE       reduce using rule 42 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    BEGIN           reduce using rule 42 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)


state 224

    (43) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT .

    PROCEDURE       reduce using rule 43 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT .)
    BEGIN           reduce using rule 43 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT .)


state 225

    (34) type_specifier -> ARRAY LBRACKET expression DOTDOT expression RBRACKET . OF type_specifier

    OF              shift and go to state 229


state 226

    (65) for_statement -> FOR ID COLON_EQUAL expression TO expression DO . statement
    (56) statement -> . if_statement
    (57) statement -> . assignment_statement
    (58) statement -> . while_statement
    (59) statement -> . procedure_call
    (60) statement -> . compound_statement
    (61) statement -> . for_statement
    (62) statement -> . empty
    (105) statement -> . READLN
    (106) statement -> . READLN LPAREN ID RPAREN
    (107) statement -> . READLN LBRACKET ID RBRACKET
    (108) statement -> . WRITELN LPAREN expression_list RPAREN
    (109) statement -> . WRITE LPAREN expression_list RPAREN
    (110) statement -> . USES ID SEMICOLON
    (63) if_statement -> . IF expression THEN statement ELSE statement
    (64) if_statement -> . IF expression THEN statement
    (67) assignment_statement -> . variable COLON_EQUAL expression
    (70) while_statement -> . WHILE expression DO statement
    (71) procedure_call -> . ID LPAREN expression_list RPAREN
    (52) compound_statement -> . BEGIN statement_list END
    (65) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (66) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (104) empty -> .
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    READLN          shift and go to state 69
    WRITELN         shift and go to state 71
    WRITE           shift and go to state 72
    USES            shift and go to state 73
    IF              shift and go to state 74
    WHILE           shift and go to state 76
    ID              shift and go to state 70
    BEGIN           shift and go to state 43
    FOR             shift and go to state 77
    ELSE            reduce using rule 104 (empty -> .)
    SEMICOLON       reduce using rule 104 (empty -> .)
    END             reduce using rule 104 (empty -> .)

    statement                      shift and go to state 230
    if_statement                   shift and go to state 62
    assignment_statement           shift and go to state 63
    while_statement                shift and go to state 64
    procedure_call                 shift and go to state 65
    compound_statement             shift and go to state 66
    for_statement                  shift and go to state 67
    empty                          shift and go to state 68
    variable                       shift and go to state 75

state 227

    (66) for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO . statement
    (56) statement -> . if_statement
    (57) statement -> . assignment_statement
    (58) statement -> . while_statement
    (59) statement -> . procedure_call
    (60) statement -> . compound_statement
    (61) statement -> . for_statement
    (62) statement -> . empty
    (105) statement -> . READLN
    (106) statement -> . READLN LPAREN ID RPAREN
    (107) statement -> . READLN LBRACKET ID RBRACKET
    (108) statement -> . WRITELN LPAREN expression_list RPAREN
    (109) statement -> . WRITE LPAREN expression_list RPAREN
    (110) statement -> . USES ID SEMICOLON
    (63) if_statement -> . IF expression THEN statement ELSE statement
    (64) if_statement -> . IF expression THEN statement
    (67) assignment_statement -> . variable COLON_EQUAL expression
    (70) while_statement -> . WHILE expression DO statement
    (71) procedure_call -> . ID LPAREN expression_list RPAREN
    (52) compound_statement -> . BEGIN statement_list END
    (65) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (66) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (104) empty -> .
    (68) variable -> . ID
    (69) variable -> . ID LBRACKET expression RBRACKET

    READLN          shift and go to state 69
    WRITELN         shift and go to state 71
    WRITE           shift and go to state 72
    USES            shift and go to state 73
    IF              shift and go to state 74
    WHILE           shift and go to state 76
    ID              shift and go to state 70
    BEGIN           shift and go to state 43
    FOR             shift and go to state 77
    ELSE            reduce using rule 104 (empty -> .)
    SEMICOLON       reduce using rule 104 (empty -> .)
    END             reduce using rule 104 (empty -> .)

    statement                      shift and go to state 231
    if_statement                   shift and go to state 62
    assignment_statement           shift and go to state 63
    while_statement                shift and go to state 64
    procedure_call                 shift and go to state 65
    compound_statement             shift and go to state 66
    for_statement                  shift and go to state 67
    empty                          shift and go to state 68
    variable                       shift and go to state 75

state 228

    (44) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 232


state 229

    (34) type_specifier -> ARRAY LBRACKET expression DOTDOT expression RBRACKET OF . type_specifier
    (34) type_specifier -> . ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier
    (35) type_specifier -> . INTEGER
    (36) type_specifier -> . BYTE
    (37) type_specifier -> . CHAR
    (38) type_specifier -> . ID
    (39) type_specifier -> . LONGINT

    ARRAY           shift and go to state 87
    INTEGER         shift and go to state 88
    BYTE            shift and go to state 89
    CHAR            shift and go to state 90
    ID              shift and go to state 85
    LONGINT         shift and go to state 91

    type_specifier                 shift and go to state 233

state 230

    (65) for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement .

    SEMICOLON       reduce using rule 65 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement .)
    END             reduce using rule 65 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement .)
    ELSE            reduce using rule 65 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement .)


state 231

    (66) for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement .

    SEMICOLON       reduce using rule 66 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement .)
    END             reduce using rule 66 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement .)
    ELSE            reduce using rule 66 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement .)


state 232

    (44) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .

    BEGIN           reduce using rule 44 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)


state 233

    (34) type_specifier -> ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier .

    SEMICOLON       reduce using rule 34 (type_specifier -> ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier .)
    RPAREN          reduce using rule 34 (type_specifier -> ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CONST in state 4 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 4 resolved as shift
WARNING: shift/reduce conflict for VAR in state 4 resolved as shift
WARNING: shift/reduce conflict for VAR in state 6 resolved as shift
WARNING: shift/reduce conflict for VAR in state 7 resolved as shift
WARNING: shift/reduce conflict for VAR in state 8 resolved as shift
WARNING: shift/reduce conflict for VAR in state 24 resolved as shift
WARNING: shift/reduce conflict for VAR in state 25 resolved as shift
WARNING: shift/reduce conflict for VAR in state 27 resolved as shift
WARNING: shift/reduce conflict for VAR in state 48 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 108 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 108 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 109 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 109 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 155 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 155 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 155 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 155 resolved as shift
WARNING: shift/reduce conflict for MOD in state 155 resolved as shift
WARNING: shift/reduce conflict for AND in state 155 resolved as shift
WARNING: shift/reduce conflict for OR in state 155 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 188 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 189 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 189 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 189 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 189 resolved as shift
WARNING: shift/reduce conflict for MOD in state 189 resolved as shift
WARNING: shift/reduce conflict for AND in state 189 resolved as shift
WARNING: shift/reduce conflict for OR in state 189 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 190 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 190 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 190 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 190 resolved as shift
WARNING: shift/reduce conflict for MOD in state 190 resolved as shift
WARNING: shift/reduce conflict for AND in state 190 resolved as shift
WARNING: shift/reduce conflict for OR in state 190 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 191 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 191 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 191 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 191 resolved as shift
WARNING: shift/reduce conflict for MOD in state 191 resolved as shift
WARNING: shift/reduce conflict for AND in state 191 resolved as shift
WARNING: shift/reduce conflict for OR in state 191 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 192 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 192 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 192 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 192 resolved as shift
WARNING: shift/reduce conflict for MOD in state 192 resolved as shift
WARNING: shift/reduce conflict for AND in state 192 resolved as shift
WARNING: shift/reduce conflict for OR in state 192 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 193 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 193 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 193 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 193 resolved as shift
WARNING: shift/reduce conflict for MOD in state 193 resolved as shift
WARNING: shift/reduce conflict for AND in state 193 resolved as shift
WARNING: shift/reduce conflict for OR in state 193 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 194 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 194 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 194 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 194 resolved as shift
WARNING: shift/reduce conflict for MOD in state 194 resolved as shift
WARNING: shift/reduce conflict for AND in state 194 resolved as shift
WARNING: shift/reduce conflict for OR in state 194 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 195 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 195 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 195 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 195 resolved as shift
WARNING: shift/reduce conflict for MOD in state 195 resolved as shift
WARNING: shift/reduce conflict for AND in state 195 resolved as shift
WARNING: shift/reduce conflict for OR in state 195 resolved as shift
