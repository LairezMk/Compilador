Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    FALSE
    GOTO
    IN
    LABEL
    LBLOCK
    NIL
    PACKED
    RBLOCK
    READLINE
    REPEAT
    SUBRANGE
    TRUE
    UNTIL
    WITH

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON declaration_sections block DOT
Rule 2     declaration_sections -> declaration_sections declaration_section
Rule 3     declaration_sections -> empty
Rule 4     declaration_section -> uses_opt
Rule 5     declaration_section -> constant_declaration
Rule 6     declaration_section -> type_declaration
Rule 7     declaration_section -> var_declaration
Rule 8     declaration_section -> procedure_declaration
Rule 9     declaration_section -> function_declaration
Rule 10    uses_opt -> USES id_list SEMICOLON
Rule 11    id_list -> ID
Rule 12    id_list -> id_list COMMA ID
Rule 13    var_declaration -> VAR declaration_list
Rule 14    declaration_list -> declaration
Rule 15    declaration_list -> declaration_list declaration
Rule 16    declaration -> id_list COLON type_specifier SEMICOLON
Rule 17    block -> declaration_sections compound_statement
Rule 18    type_declaration -> TYPE type_list
Rule 19    type_list -> type_definition
Rule 20    type_list -> type_list type_definition
Rule 21    type_definition -> ID EQUAL type_specifier SEMICOLON
Rule 22    type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier
Rule 23    type_specifier -> subrange
Rule 24    type_specifier -> FILE OF type_specifier
Rule 25    type_specifier -> SET OF type_specifier
Rule 26    type_specifier -> RECORD field_list case_part END
Rule 27    type_specifier -> OBJECT field_list method_list END
Rule 28    type_specifier -> LPAREN id_list RPAREN
Rule 29    type_specifier -> BOOLEAN_LITERAL
Rule 30    type_specifier -> INTEGER
Rule 31    type_specifier -> BYTE
Rule 32    type_specifier -> CHAR
Rule 33    type_specifier -> STRING LBRACKET NUMBER RBRACKET
Rule 34    type_specifier -> ID
Rule 35    type_expression -> type_expression COMMA subrange
Rule 36    type_expression -> subrange
Rule 37    subrange -> NUMBER DOTDOT NUMBER
Rule 38    field_list -> field_list field
Rule 39    field_list -> field
Rule 40    field -> id_list COLON type_specifier SEMICOLON
Rule 41    field -> id_list COLON type_specifier
Rule 42    case_part -> CASE ID COLON type_specifier OF case_list SEMICOLON
Rule 43    case_part -> empty
Rule 44    case_list -> case_list SEMICOLON case_element
Rule 45    case_list -> case_element
Rule 46    case_element -> NUMBER COLON LPAREN field_list RPAREN
Rule 47    method_list -> method_list method
Rule 48    method_list -> method
Rule 49    method_list -> empty
Rule 50    method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON
Rule 51    method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON
Rule 52    method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON
Rule 53    method -> DESTRUCTOR ID SEMICOLON
Rule 54    type_specifier -> LONGINT
Rule 55    procedure_declarations -> procedure_declaration
Rule 56    procedure_declarations -> procedure_declarations procedure_declaration
Rule 57    procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
Rule 58    procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT
Rule 59    function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
Rule 60    function_call -> ID LPAREN expression_list RPAREN
Rule 61    factor -> function_call
Rule 62    parameter_list -> parameter
Rule 63    parameter_list -> parameter_list SEMICOLON parameter
Rule 64    parameter -> id_list COLON type_specifier
Rule 65    parameter -> VAR id_list COLON type_specifier
Rule 66    compound_statement -> BEGIN statement_list END
Rule 67    statement_list -> statement statement_list_tail
Rule 68    statement_list_tail -> SEMICOLON statement statement_list_tail
Rule 69    statement_list_tail -> empty
Rule 70    statement -> if_statement
Rule 71    statement -> assignment_statement
Rule 72    statement -> while_statement
Rule 73    statement -> procedure_call
Rule 74    statement -> compound_statement
Rule 75    statement -> for_statement
Rule 76    statement -> empty
Rule 77    if_statement -> IF expression THEN statement ELSE statement
Rule 78    if_statement -> IF expression THEN statement
Rule 79    for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement
Rule 80    for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement
Rule 81    assignment_statement -> variable COLON_EQUAL expression
Rule 82    variable -> ID
Rule 83    variable -> ID LBRACKET expression RBRACKET
Rule 84    while_statement -> WHILE expression DO statement
Rule 85    procedure_call -> ID LPAREN expression_list RPAREN
Rule 86    expression_list -> expression expression_list_tail
Rule 87    expression_list_tail -> COMMA expression expression_list_tail
Rule 88    expression_list_tail -> empty
Rule 89    expression_list -> empty
Rule 90    expression -> simple_expression relop simple_expression
Rule 91    expression -> simple_expression
Rule 92    simple_expression -> term simple_expression_tail
Rule 93    simple_expression_tail -> addop term
Rule 94    simple_expression_tail -> empty
Rule 95    addop -> PLUS
Rule 96    addop -> MINUS
Rule 97    term -> factor term_tail
Rule 98    term_tail -> mulop factor
Rule 99    term_tail -> empty
Rule 100   mulop -> TIMES
Rule 101   mulop -> DIVIDE
Rule 102   mulop -> DIV
Rule 103   expression -> expression PLUS expression
Rule 104   expression -> expression MINUS expression
Rule 105   expression -> expression TIMES expression
Rule 106   expression -> expression DIVIDE expression
Rule 107   expression -> expression MOD expression
Rule 108   factor -> LPAREN expression RPAREN
Rule 109   factor -> variable
Rule 110   factor -> NUMBER
Rule 111   factor -> STRING_LITERAL
Rule 112   relop -> LESS
Rule 113   relop -> LESS_EQUAL
Rule 114   relop -> GREAT
Rule 115   relop -> GREAT_EQUAL
Rule 116   relop -> EQUAL
Rule 117   relop -> DIFFERENT
Rule 118   empty -> <empty>
Rule 119   statement -> READLN
Rule 120   statement -> READLN LPAREN variable RPAREN
Rule 121   statement -> READLN LBRACKET variable RBRACKET
Rule 122   statement -> WRITELN LPAREN expression_list RPAREN
Rule 123   statement -> WRITE LPAREN expression_list RPAREN
Rule 124   statement -> USES ID SEMICOLON
Rule 125   constant_declaration -> CONST constant_list
Rule 126   constant_list -> constant
Rule 127   constant_list -> constant_list constant
Rule 128   constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON
Rule 129   constant -> ID EQUAL NUMBER SEMICOLON
Rule 130   constant -> ID EQUAL STRING_LITERAL SEMICOLON
Rule 131   constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON
Rule 132   expression -> expression AND expression
Rule 133   expression -> expression OR expression
Rule 134   expression -> NOT expression

Terminals, with rules where they appear

AND                  : 132
ARRAY                : 22
BEGIN                : 66
BOOLEAN_LITERAL      : 29 131
BYTE                 : 31
CASE                 : 42
CHAR                 : 32
CHARACTER_LITERAL    : 128
COLON                : 16 40 41 42 46 52 59 64 65
COLON_EQUAL          : 79 80 81
COMMA                : 12 35 87
CONST                : 125
CONSTRUCTOR          : 50
DESTRUCTOR           : 53
DIFFERENT            : 117
DIV                  : 102
DIVIDE               : 101 106
DO                   : 79 80 84
DOT                  : 1 58
DOTDOT               : 37
DOWNTO               : 80
ELSE                 : 77
END                  : 26 27 66
EQUAL                : 21 116 128 129 130 131
FALSE                : 
FILE                 : 24
FOR                  : 79 80
FUNCTION             : 52 59
GOTO                 : 
GREAT                : 114
GREAT_EQUAL          : 115
ID                   : 1 11 12 21 34 42 50 51 52 53 57 58 59 60 79 80 82 83 85 124 128 129 130 131
IF                   : 77 78
IN                   : 
INTEGER              : 30
LABEL                : 
LBLOCK               : 
LBRACKET             : 22 33 83 121
LESS                 : 112
LESS_EQUAL           : 113
LONGINT              : 54
LPAREN               : 28 46 50 51 52 57 58 59 60 85 108 120 122 123
MINUS                : 96 104
MOD                  : 107
NIL                  : 
NOT                  : 134
NUMBER               : 33 37 37 46 110 129
OBJECT               : 27
OF                   : 22 24 25 42
OR                   : 133
PACKED               : 
PLUS                 : 95 103
PROCEDURE            : 51 57 58
PROGRAM              : 1
RBLOCK               : 
RBRACKET             : 22 33 83 121
READLINE             : 
READLN               : 119 120 121
RECORD               : 26
REPEAT               : 
RPAREN               : 28 46 50 51 52 57 58 59 60 85 108 120 122 123
SEMICOLON            : 1 10 16 21 40 42 44 50 51 52 53 57 57 58 59 59 63 68 124 128 129 130 131
SET                  : 25
STRING               : 33
STRING_LITERAL       : 111 130
SUBRANGE             : 
THEN                 : 77 78
TIMES                : 100 105
TO                   : 79
TRUE                 : 
TYPE                 : 18
UNTIL                : 
USES                 : 10 124
VAR                  : 13 65
WHILE                : 84
WITH                 : 
WRITE                : 123
WRITELN              : 122
error                : 

Nonterminals, with rules where they appear

addop                : 93
assignment_statement : 71
block                : 1 57 58 59
case_element         : 44 45
case_list            : 42 44
case_part            : 26
compound_statement   : 17 74
constant             : 126 127
constant_declaration : 5
constant_list        : 125 127
declaration          : 14 15
declaration_list     : 13 15
declaration_section  : 2
declaration_sections : 1 2 17
empty                : 3 43 49 69 76 88 89 94 99
expression           : 77 78 79 79 80 80 81 83 84 86 87 103 103 104 104 105 105 106 106 107 107 108 132 132 133 133 134
expression_list      : 60 85 122 123
expression_list_tail : 86 87
factor               : 97 98
field                : 38 39
field_list           : 26 27 38 46 50 51 52
for_statement        : 75
function_call        : 61
function_declaration : 9
id_list              : 10 12 16 28 40 41 64 65
if_statement         : 70
method               : 47 48
method_list          : 27 47
mulop                : 98
parameter            : 62 63
parameter_list       : 57 58 59 63
procedure_call       : 73
procedure_declaration : 8 55 56
procedure_declarations : 56
program              : 0
relop                : 90
simple_expression    : 90 90 91
simple_expression_tail : 92
statement            : 67 68 77 77 78 79 80 84
statement_list       : 66
statement_list_tail  : 67 68
subrange             : 23 35 36
term                 : 92 93
term_tail            : 97
type_declaration     : 6
type_definition      : 19 20
type_expression      : 22 35
type_list            : 18 20
type_specifier       : 16 21 22 24 25 40 41 42 52 59 64 65
uses_opt             : 4
var_declaration      : 7
variable             : 81 109 120 121
while_statement      : 72

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON declaration_sections block DOT

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON declaration_sections block DOT

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON declaration_sections block DOT

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . declaration_sections block DOT
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (118) empty -> .

    USES            reduce using rule 118 (empty -> .)
    CONST           reduce using rule 118 (empty -> .)
    TYPE            reduce using rule 118 (empty -> .)
    VAR             reduce using rule 118 (empty -> .)
    PROCEDURE       reduce using rule 118 (empty -> .)
    FUNCTION        reduce using rule 118 (empty -> .)
    BEGIN           reduce using rule 118 (empty -> .)

    declaration_sections           shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) program -> PROGRAM ID SEMICOLON declaration_sections . block DOT
    (2) declaration_sections -> declaration_sections . declaration_section
    (17) block -> . declaration_sections compound_statement
    (4) declaration_section -> . uses_opt
    (5) declaration_section -> . constant_declaration
    (6) declaration_section -> . type_declaration
    (7) declaration_section -> . var_declaration
    (8) declaration_section -> . procedure_declaration
    (9) declaration_section -> . function_declaration
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (10) uses_opt -> . USES id_list SEMICOLON
    (125) constant_declaration -> . CONST constant_list
    (18) type_declaration -> . TYPE type_list
    (13) var_declaration -> . VAR declaration_list
    (57) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (58) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT
    (59) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (118) empty -> .

  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for PROCEDURE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
    USES            shift and go to state 16
    CONST           shift and go to state 17
    TYPE            shift and go to state 18
    VAR             shift and go to state 19
    PROCEDURE       shift and go to state 20
    FUNCTION        shift and go to state 21
    BEGIN           reduce using rule 118 (empty -> .)

  ! USES            [ reduce using rule 118 (empty -> .) ]
  ! CONST           [ reduce using rule 118 (empty -> .) ]
  ! TYPE            [ reduce using rule 118 (empty -> .) ]
  ! VAR             [ reduce using rule 118 (empty -> .) ]
  ! PROCEDURE       [ reduce using rule 118 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 118 (empty -> .) ]

    declaration_sections           shift and go to state 7
    block                          shift and go to state 8
    declaration_section            shift and go to state 9
    uses_opt                       shift and go to state 10
    constant_declaration           shift and go to state 11
    type_declaration               shift and go to state 12
    var_declaration                shift and go to state 13
    procedure_declaration          shift and go to state 14
    function_declaration           shift and go to state 15
    empty                          shift and go to state 6

state 6

    (3) declaration_sections -> empty .

    USES            reduce using rule 3 (declaration_sections -> empty .)
    CONST           reduce using rule 3 (declaration_sections -> empty .)
    TYPE            reduce using rule 3 (declaration_sections -> empty .)
    VAR             reduce using rule 3 (declaration_sections -> empty .)
    PROCEDURE       reduce using rule 3 (declaration_sections -> empty .)
    FUNCTION        reduce using rule 3 (declaration_sections -> empty .)
    BEGIN           reduce using rule 3 (declaration_sections -> empty .)


state 7

    (17) block -> declaration_sections . compound_statement
    (2) declaration_sections -> declaration_sections . declaration_section
    (66) compound_statement -> . BEGIN statement_list END
    (4) declaration_section -> . uses_opt
    (5) declaration_section -> . constant_declaration
    (6) declaration_section -> . type_declaration
    (7) declaration_section -> . var_declaration
    (8) declaration_section -> . procedure_declaration
    (9) declaration_section -> . function_declaration
    (10) uses_opt -> . USES id_list SEMICOLON
    (125) constant_declaration -> . CONST constant_list
    (18) type_declaration -> . TYPE type_list
    (13) var_declaration -> . VAR declaration_list
    (57) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (58) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT
    (59) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON

    BEGIN           shift and go to state 23
    USES            shift and go to state 16
    CONST           shift and go to state 17
    TYPE            shift and go to state 18
    VAR             shift and go to state 19
    PROCEDURE       shift and go to state 20
    FUNCTION        shift and go to state 21

    compound_statement             shift and go to state 22
    declaration_section            shift and go to state 9
    uses_opt                       shift and go to state 10
    constant_declaration           shift and go to state 11
    type_declaration               shift and go to state 12
    var_declaration                shift and go to state 13
    procedure_declaration          shift and go to state 14
    function_declaration           shift and go to state 15

state 8

    (1) program -> PROGRAM ID SEMICOLON declaration_sections block . DOT

    DOT             shift and go to state 24


state 9

    (2) declaration_sections -> declaration_sections declaration_section .

    USES            reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    CONST           reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    TYPE            reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    VAR             reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    PROCEDURE       reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    FUNCTION        reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    BEGIN           reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)


state 10

    (4) declaration_section -> uses_opt .

    USES            reduce using rule 4 (declaration_section -> uses_opt .)
    CONST           reduce using rule 4 (declaration_section -> uses_opt .)
    TYPE            reduce using rule 4 (declaration_section -> uses_opt .)
    VAR             reduce using rule 4 (declaration_section -> uses_opt .)
    PROCEDURE       reduce using rule 4 (declaration_section -> uses_opt .)
    FUNCTION        reduce using rule 4 (declaration_section -> uses_opt .)
    BEGIN           reduce using rule 4 (declaration_section -> uses_opt .)


state 11

    (5) declaration_section -> constant_declaration .

    USES            reduce using rule 5 (declaration_section -> constant_declaration .)
    CONST           reduce using rule 5 (declaration_section -> constant_declaration .)
    TYPE            reduce using rule 5 (declaration_section -> constant_declaration .)
    VAR             reduce using rule 5 (declaration_section -> constant_declaration .)
    PROCEDURE       reduce using rule 5 (declaration_section -> constant_declaration .)
    FUNCTION        reduce using rule 5 (declaration_section -> constant_declaration .)
    BEGIN           reduce using rule 5 (declaration_section -> constant_declaration .)


state 12

    (6) declaration_section -> type_declaration .

    USES            reduce using rule 6 (declaration_section -> type_declaration .)
    CONST           reduce using rule 6 (declaration_section -> type_declaration .)
    TYPE            reduce using rule 6 (declaration_section -> type_declaration .)
    VAR             reduce using rule 6 (declaration_section -> type_declaration .)
    PROCEDURE       reduce using rule 6 (declaration_section -> type_declaration .)
    FUNCTION        reduce using rule 6 (declaration_section -> type_declaration .)
    BEGIN           reduce using rule 6 (declaration_section -> type_declaration .)


state 13

    (7) declaration_section -> var_declaration .

    USES            reduce using rule 7 (declaration_section -> var_declaration .)
    CONST           reduce using rule 7 (declaration_section -> var_declaration .)
    TYPE            reduce using rule 7 (declaration_section -> var_declaration .)
    VAR             reduce using rule 7 (declaration_section -> var_declaration .)
    PROCEDURE       reduce using rule 7 (declaration_section -> var_declaration .)
    FUNCTION        reduce using rule 7 (declaration_section -> var_declaration .)
    BEGIN           reduce using rule 7 (declaration_section -> var_declaration .)


state 14

    (8) declaration_section -> procedure_declaration .

    USES            reduce using rule 8 (declaration_section -> procedure_declaration .)
    CONST           reduce using rule 8 (declaration_section -> procedure_declaration .)
    TYPE            reduce using rule 8 (declaration_section -> procedure_declaration .)
    VAR             reduce using rule 8 (declaration_section -> procedure_declaration .)
    PROCEDURE       reduce using rule 8 (declaration_section -> procedure_declaration .)
    FUNCTION        reduce using rule 8 (declaration_section -> procedure_declaration .)
    BEGIN           reduce using rule 8 (declaration_section -> procedure_declaration .)


state 15

    (9) declaration_section -> function_declaration .

    USES            reduce using rule 9 (declaration_section -> function_declaration .)
    CONST           reduce using rule 9 (declaration_section -> function_declaration .)
    TYPE            reduce using rule 9 (declaration_section -> function_declaration .)
    VAR             reduce using rule 9 (declaration_section -> function_declaration .)
    PROCEDURE       reduce using rule 9 (declaration_section -> function_declaration .)
    FUNCTION        reduce using rule 9 (declaration_section -> function_declaration .)
    BEGIN           reduce using rule 9 (declaration_section -> function_declaration .)


state 16

    (10) uses_opt -> USES . id_list SEMICOLON
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    ID              shift and go to state 26

    id_list                        shift and go to state 25

state 17

    (125) constant_declaration -> CONST . constant_list
    (126) constant_list -> . constant
    (127) constant_list -> . constant_list constant
    (128) constant -> . ID EQUAL CHARACTER_LITERAL SEMICOLON
    (129) constant -> . ID EQUAL NUMBER SEMICOLON
    (130) constant -> . ID EQUAL STRING_LITERAL SEMICOLON
    (131) constant -> . ID EQUAL BOOLEAN_LITERAL SEMICOLON

    ID              shift and go to state 29

    constant_list                  shift and go to state 27
    constant                       shift and go to state 28

state 18

    (18) type_declaration -> TYPE . type_list
    (19) type_list -> . type_definition
    (20) type_list -> . type_list type_definition
    (21) type_definition -> . ID EQUAL type_specifier SEMICOLON

    ID              shift and go to state 32

    type_list                      shift and go to state 30
    type_definition                shift and go to state 31

state 19

    (13) var_declaration -> VAR . declaration_list
    (14) declaration_list -> . declaration
    (15) declaration_list -> . declaration_list declaration
    (16) declaration -> . id_list COLON type_specifier SEMICOLON
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    ID              shift and go to state 26

    declaration_list               shift and go to state 33
    declaration                    shift and go to state 34
    id_list                        shift and go to state 35

state 20

    (57) procedure_declaration -> PROCEDURE . ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (58) procedure_declaration -> PROCEDURE . ID LPAREN parameter_list RPAREN SEMICOLON block DOT

    ID              shift and go to state 36


state 21

    (59) function_declaration -> FUNCTION . ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON

    ID              shift and go to state 37


state 22

    (17) block -> declaration_sections compound_statement .

    DOT             reduce using rule 17 (block -> declaration_sections compound_statement .)
    SEMICOLON       reduce using rule 17 (block -> declaration_sections compound_statement .)


state 23

    (66) compound_statement -> BEGIN . statement_list END
    (67) statement_list -> . statement statement_list_tail
    (70) statement -> . if_statement
    (71) statement -> . assignment_statement
    (72) statement -> . while_statement
    (73) statement -> . procedure_call
    (74) statement -> . compound_statement
    (75) statement -> . for_statement
    (76) statement -> . empty
    (119) statement -> . READLN
    (120) statement -> . READLN LPAREN variable RPAREN
    (121) statement -> . READLN LBRACKET variable RBRACKET
    (122) statement -> . WRITELN LPAREN expression_list RPAREN
    (123) statement -> . WRITE LPAREN expression_list RPAREN
    (124) statement -> . USES ID SEMICOLON
    (77) if_statement -> . IF expression THEN statement ELSE statement
    (78) if_statement -> . IF expression THEN statement
    (81) assignment_statement -> . variable COLON_EQUAL expression
    (84) while_statement -> . WHILE expression DO statement
    (85) procedure_call -> . ID LPAREN expression_list RPAREN
    (66) compound_statement -> . BEGIN statement_list END
    (79) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (80) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (118) empty -> .
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    READLN          shift and go to state 47
    WRITELN         shift and go to state 49
    WRITE           shift and go to state 50
    USES            shift and go to state 51
    IF              shift and go to state 53
    WHILE           shift and go to state 54
    ID              shift and go to state 52
    BEGIN           shift and go to state 23
    FOR             shift and go to state 55
    SEMICOLON       reduce using rule 118 (empty -> .)
    END             reduce using rule 118 (empty -> .)

    statement_list                 shift and go to state 38
    statement                      shift and go to state 39
    if_statement                   shift and go to state 40
    assignment_statement           shift and go to state 41
    while_statement                shift and go to state 42
    procedure_call                 shift and go to state 43
    compound_statement             shift and go to state 44
    for_statement                  shift and go to state 45
    empty                          shift and go to state 46
    variable                       shift and go to state 48

state 24

    (1) program -> PROGRAM ID SEMICOLON declaration_sections block DOT .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON declaration_sections block DOT .)


state 25

    (10) uses_opt -> USES id_list . SEMICOLON
    (12) id_list -> id_list . COMMA ID

    SEMICOLON       shift and go to state 56
    COMMA           shift and go to state 57


state 26

    (11) id_list -> ID .

    SEMICOLON       reduce using rule 11 (id_list -> ID .)
    COMMA           reduce using rule 11 (id_list -> ID .)
    COLON           reduce using rule 11 (id_list -> ID .)
    RPAREN          reduce using rule 11 (id_list -> ID .)


state 27

    (125) constant_declaration -> CONST constant_list .
    (127) constant_list -> constant_list . constant
    (128) constant -> . ID EQUAL CHARACTER_LITERAL SEMICOLON
    (129) constant -> . ID EQUAL NUMBER SEMICOLON
    (130) constant -> . ID EQUAL STRING_LITERAL SEMICOLON
    (131) constant -> . ID EQUAL BOOLEAN_LITERAL SEMICOLON

    USES            reduce using rule 125 (constant_declaration -> CONST constant_list .)
    CONST           reduce using rule 125 (constant_declaration -> CONST constant_list .)
    TYPE            reduce using rule 125 (constant_declaration -> CONST constant_list .)
    VAR             reduce using rule 125 (constant_declaration -> CONST constant_list .)
    PROCEDURE       reduce using rule 125 (constant_declaration -> CONST constant_list .)
    FUNCTION        reduce using rule 125 (constant_declaration -> CONST constant_list .)
    BEGIN           reduce using rule 125 (constant_declaration -> CONST constant_list .)
    ID              shift and go to state 29

    constant                       shift and go to state 58

state 28

    (126) constant_list -> constant .

    ID              reduce using rule 126 (constant_list -> constant .)
    USES            reduce using rule 126 (constant_list -> constant .)
    CONST           reduce using rule 126 (constant_list -> constant .)
    TYPE            reduce using rule 126 (constant_list -> constant .)
    VAR             reduce using rule 126 (constant_list -> constant .)
    PROCEDURE       reduce using rule 126 (constant_list -> constant .)
    FUNCTION        reduce using rule 126 (constant_list -> constant .)
    BEGIN           reduce using rule 126 (constant_list -> constant .)


state 29

    (128) constant -> ID . EQUAL CHARACTER_LITERAL SEMICOLON
    (129) constant -> ID . EQUAL NUMBER SEMICOLON
    (130) constant -> ID . EQUAL STRING_LITERAL SEMICOLON
    (131) constant -> ID . EQUAL BOOLEAN_LITERAL SEMICOLON

    EQUAL           shift and go to state 59


state 30

    (18) type_declaration -> TYPE type_list .
    (20) type_list -> type_list . type_definition
    (21) type_definition -> . ID EQUAL type_specifier SEMICOLON

    USES            reduce using rule 18 (type_declaration -> TYPE type_list .)
    CONST           reduce using rule 18 (type_declaration -> TYPE type_list .)
    TYPE            reduce using rule 18 (type_declaration -> TYPE type_list .)
    VAR             reduce using rule 18 (type_declaration -> TYPE type_list .)
    PROCEDURE       reduce using rule 18 (type_declaration -> TYPE type_list .)
    FUNCTION        reduce using rule 18 (type_declaration -> TYPE type_list .)
    BEGIN           reduce using rule 18 (type_declaration -> TYPE type_list .)
    ID              shift and go to state 32

    type_definition                shift and go to state 60

state 31

    (19) type_list -> type_definition .

    ID              reduce using rule 19 (type_list -> type_definition .)
    USES            reduce using rule 19 (type_list -> type_definition .)
    CONST           reduce using rule 19 (type_list -> type_definition .)
    TYPE            reduce using rule 19 (type_list -> type_definition .)
    VAR             reduce using rule 19 (type_list -> type_definition .)
    PROCEDURE       reduce using rule 19 (type_list -> type_definition .)
    FUNCTION        reduce using rule 19 (type_list -> type_definition .)
    BEGIN           reduce using rule 19 (type_list -> type_definition .)


state 32

    (21) type_definition -> ID . EQUAL type_specifier SEMICOLON

    EQUAL           shift and go to state 61


state 33

    (13) var_declaration -> VAR declaration_list .
    (15) declaration_list -> declaration_list . declaration
    (16) declaration -> . id_list COLON type_specifier SEMICOLON
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    USES            reduce using rule 13 (var_declaration -> VAR declaration_list .)
    CONST           reduce using rule 13 (var_declaration -> VAR declaration_list .)
    TYPE            reduce using rule 13 (var_declaration -> VAR declaration_list .)
    VAR             reduce using rule 13 (var_declaration -> VAR declaration_list .)
    PROCEDURE       reduce using rule 13 (var_declaration -> VAR declaration_list .)
    FUNCTION        reduce using rule 13 (var_declaration -> VAR declaration_list .)
    BEGIN           reduce using rule 13 (var_declaration -> VAR declaration_list .)
    ID              shift and go to state 26

    declaration                    shift and go to state 62
    id_list                        shift and go to state 35

state 34

    (14) declaration_list -> declaration .

    ID              reduce using rule 14 (declaration_list -> declaration .)
    USES            reduce using rule 14 (declaration_list -> declaration .)
    CONST           reduce using rule 14 (declaration_list -> declaration .)
    TYPE            reduce using rule 14 (declaration_list -> declaration .)
    VAR             reduce using rule 14 (declaration_list -> declaration .)
    PROCEDURE       reduce using rule 14 (declaration_list -> declaration .)
    FUNCTION        reduce using rule 14 (declaration_list -> declaration .)
    BEGIN           reduce using rule 14 (declaration_list -> declaration .)


state 35

    (16) declaration -> id_list . COLON type_specifier SEMICOLON
    (12) id_list -> id_list . COMMA ID

    COLON           shift and go to state 63
    COMMA           shift and go to state 57


state 36

    (57) procedure_declaration -> PROCEDURE ID . LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (58) procedure_declaration -> PROCEDURE ID . LPAREN parameter_list RPAREN SEMICOLON block DOT

    LPAREN          shift and go to state 64


state 37

    (59) function_declaration -> FUNCTION ID . LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON

    LPAREN          shift and go to state 65


state 38

    (66) compound_statement -> BEGIN statement_list . END

    END             shift and go to state 66


state 39

    (67) statement_list -> statement . statement_list_tail
    (68) statement_list_tail -> . SEMICOLON statement statement_list_tail
    (69) statement_list_tail -> . empty
    (118) empty -> .

    SEMICOLON       shift and go to state 68
    END             reduce using rule 118 (empty -> .)

    statement_list_tail            shift and go to state 67
    empty                          shift and go to state 69

state 40

    (70) statement -> if_statement .

    SEMICOLON       reduce using rule 70 (statement -> if_statement .)
    END             reduce using rule 70 (statement -> if_statement .)
    ELSE            reduce using rule 70 (statement -> if_statement .)


state 41

    (71) statement -> assignment_statement .

    SEMICOLON       reduce using rule 71 (statement -> assignment_statement .)
    END             reduce using rule 71 (statement -> assignment_statement .)
    ELSE            reduce using rule 71 (statement -> assignment_statement .)


state 42

    (72) statement -> while_statement .

    SEMICOLON       reduce using rule 72 (statement -> while_statement .)
    END             reduce using rule 72 (statement -> while_statement .)
    ELSE            reduce using rule 72 (statement -> while_statement .)


state 43

    (73) statement -> procedure_call .

    SEMICOLON       reduce using rule 73 (statement -> procedure_call .)
    END             reduce using rule 73 (statement -> procedure_call .)
    ELSE            reduce using rule 73 (statement -> procedure_call .)


state 44

    (74) statement -> compound_statement .

    SEMICOLON       reduce using rule 74 (statement -> compound_statement .)
    END             reduce using rule 74 (statement -> compound_statement .)
    ELSE            reduce using rule 74 (statement -> compound_statement .)


state 45

    (75) statement -> for_statement .

    SEMICOLON       reduce using rule 75 (statement -> for_statement .)
    END             reduce using rule 75 (statement -> for_statement .)
    ELSE            reduce using rule 75 (statement -> for_statement .)


state 46

    (76) statement -> empty .

    SEMICOLON       reduce using rule 76 (statement -> empty .)
    END             reduce using rule 76 (statement -> empty .)
    ELSE            reduce using rule 76 (statement -> empty .)


state 47

    (119) statement -> READLN .
    (120) statement -> READLN . LPAREN variable RPAREN
    (121) statement -> READLN . LBRACKET variable RBRACKET

    SEMICOLON       reduce using rule 119 (statement -> READLN .)
    END             reduce using rule 119 (statement -> READLN .)
    ELSE            reduce using rule 119 (statement -> READLN .)
    LPAREN          shift and go to state 70
    LBRACKET        shift and go to state 71


state 48

    (81) assignment_statement -> variable . COLON_EQUAL expression

    COLON_EQUAL     shift and go to state 72


state 49

    (122) statement -> WRITELN . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 73


state 50

    (123) statement -> WRITE . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 74


state 51

    (124) statement -> USES . ID SEMICOLON

    ID              shift and go to state 75


state 52

    (85) procedure_call -> ID . LPAREN expression_list RPAREN
    (82) variable -> ID .
    (83) variable -> ID . LBRACKET expression RBRACKET

    LPAREN          shift and go to state 76
    COLON_EQUAL     reduce using rule 82 (variable -> ID .)
    LBRACKET        shift and go to state 77


state 53

    (77) if_statement -> IF . expression THEN statement ELSE statement
    (78) if_statement -> IF . expression THEN statement
    (90) expression -> . simple_expression relop simple_expression
    (91) expression -> . simple_expression
    (103) expression -> . expression PLUS expression
    (104) expression -> . expression MINUS expression
    (105) expression -> . expression TIMES expression
    (106) expression -> . expression DIVIDE expression
    (107) expression -> . expression MOD expression
    (132) expression -> . expression AND expression
    (133) expression -> . expression OR expression
    (134) expression -> . NOT expression
    (92) simple_expression -> . term simple_expression_tail
    (97) term -> . factor term_tail
    (61) factor -> . function_call
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . variable
    (110) factor -> . NUMBER
    (111) factor -> . STRING_LITERAL
    (60) function_call -> . ID LPAREN expression_list RPAREN
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 80
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    STRING_LITERAL  shift and go to state 87
    ID              shift and go to state 88

    expression                     shift and go to state 78
    simple_expression              shift and go to state 79
    term                           shift and go to state 81
    factor                         shift and go to state 82
    function_call                  shift and go to state 83
    variable                       shift and go to state 85

state 54

    (84) while_statement -> WHILE . expression DO statement
    (90) expression -> . simple_expression relop simple_expression
    (91) expression -> . simple_expression
    (103) expression -> . expression PLUS expression
    (104) expression -> . expression MINUS expression
    (105) expression -> . expression TIMES expression
    (106) expression -> . expression DIVIDE expression
    (107) expression -> . expression MOD expression
    (132) expression -> . expression AND expression
    (133) expression -> . expression OR expression
    (134) expression -> . NOT expression
    (92) simple_expression -> . term simple_expression_tail
    (97) term -> . factor term_tail
    (61) factor -> . function_call
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . variable
    (110) factor -> . NUMBER
    (111) factor -> . STRING_LITERAL
    (60) function_call -> . ID LPAREN expression_list RPAREN
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 80
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    STRING_LITERAL  shift and go to state 87
    ID              shift and go to state 88

    expression                     shift and go to state 89
    simple_expression              shift and go to state 79
    term                           shift and go to state 81
    factor                         shift and go to state 82
    function_call                  shift and go to state 83
    variable                       shift and go to state 85

state 55

    (79) for_statement -> FOR . ID COLON_EQUAL expression TO expression DO statement
    (80) for_statement -> FOR . ID COLON_EQUAL expression DOWNTO expression DO statement

    ID              shift and go to state 90


state 56

    (10) uses_opt -> USES id_list SEMICOLON .

    USES            reduce using rule 10 (uses_opt -> USES id_list SEMICOLON .)
    CONST           reduce using rule 10 (uses_opt -> USES id_list SEMICOLON .)
    TYPE            reduce using rule 10 (uses_opt -> USES id_list SEMICOLON .)
    VAR             reduce using rule 10 (uses_opt -> USES id_list SEMICOLON .)
    PROCEDURE       reduce using rule 10 (uses_opt -> USES id_list SEMICOLON .)
    FUNCTION        reduce using rule 10 (uses_opt -> USES id_list SEMICOLON .)
    BEGIN           reduce using rule 10 (uses_opt -> USES id_list SEMICOLON .)


state 57

    (12) id_list -> id_list COMMA . ID

    ID              shift and go to state 91


state 58

    (127) constant_list -> constant_list constant .

    ID              reduce using rule 127 (constant_list -> constant_list constant .)
    USES            reduce using rule 127 (constant_list -> constant_list constant .)
    CONST           reduce using rule 127 (constant_list -> constant_list constant .)
    TYPE            reduce using rule 127 (constant_list -> constant_list constant .)
    VAR             reduce using rule 127 (constant_list -> constant_list constant .)
    PROCEDURE       reduce using rule 127 (constant_list -> constant_list constant .)
    FUNCTION        reduce using rule 127 (constant_list -> constant_list constant .)
    BEGIN           reduce using rule 127 (constant_list -> constant_list constant .)


state 59

    (128) constant -> ID EQUAL . CHARACTER_LITERAL SEMICOLON
    (129) constant -> ID EQUAL . NUMBER SEMICOLON
    (130) constant -> ID EQUAL . STRING_LITERAL SEMICOLON
    (131) constant -> ID EQUAL . BOOLEAN_LITERAL SEMICOLON

    CHARACTER_LITERAL shift and go to state 92
    NUMBER          shift and go to state 93
    STRING_LITERAL  shift and go to state 94
    BOOLEAN_LITERAL shift and go to state 95


state 60

    (20) type_list -> type_list type_definition .

    ID              reduce using rule 20 (type_list -> type_list type_definition .)
    USES            reduce using rule 20 (type_list -> type_list type_definition .)
    CONST           reduce using rule 20 (type_list -> type_list type_definition .)
    TYPE            reduce using rule 20 (type_list -> type_list type_definition .)
    VAR             reduce using rule 20 (type_list -> type_list type_definition .)
    PROCEDURE       reduce using rule 20 (type_list -> type_list type_definition .)
    FUNCTION        reduce using rule 20 (type_list -> type_list type_definition .)
    BEGIN           reduce using rule 20 (type_list -> type_list type_definition .)


state 61

    (21) type_definition -> ID EQUAL . type_specifier SEMICOLON
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (34) type_specifier -> . ID
    (54) type_specifier -> . LONGINT
    (37) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 98
    FILE            shift and go to state 100
    SET             shift and go to state 101
    RECORD          shift and go to state 102
    OBJECT          shift and go to state 103
    LPAREN          shift and go to state 104
    BOOLEAN_LITERAL shift and go to state 105
    INTEGER         shift and go to state 106
    BYTE            shift and go to state 107
    CHAR            shift and go to state 108
    STRING          shift and go to state 109
    ID              shift and go to state 96
    LONGINT         shift and go to state 111
    NUMBER          shift and go to state 110

    type_specifier                 shift and go to state 97
    subrange                       shift and go to state 99

state 62

    (15) declaration_list -> declaration_list declaration .

    ID              reduce using rule 15 (declaration_list -> declaration_list declaration .)
    USES            reduce using rule 15 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 15 (declaration_list -> declaration_list declaration .)
    TYPE            reduce using rule 15 (declaration_list -> declaration_list declaration .)
    VAR             reduce using rule 15 (declaration_list -> declaration_list declaration .)
    PROCEDURE       reduce using rule 15 (declaration_list -> declaration_list declaration .)
    FUNCTION        reduce using rule 15 (declaration_list -> declaration_list declaration .)
    BEGIN           reduce using rule 15 (declaration_list -> declaration_list declaration .)


state 63

    (16) declaration -> id_list COLON . type_specifier SEMICOLON
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (34) type_specifier -> . ID
    (54) type_specifier -> . LONGINT
    (37) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 98
    FILE            shift and go to state 100
    SET             shift and go to state 101
    RECORD          shift and go to state 102
    OBJECT          shift and go to state 103
    LPAREN          shift and go to state 104
    BOOLEAN_LITERAL shift and go to state 105
    INTEGER         shift and go to state 106
    BYTE            shift and go to state 107
    CHAR            shift and go to state 108
    STRING          shift and go to state 109
    ID              shift and go to state 96
    LONGINT         shift and go to state 111
    NUMBER          shift and go to state 110

    type_specifier                 shift and go to state 112
    subrange                       shift and go to state 99

state 64

    (57) procedure_declaration -> PROCEDURE ID LPAREN . parameter_list RPAREN SEMICOLON block SEMICOLON
    (58) procedure_declaration -> PROCEDURE ID LPAREN . parameter_list RPAREN SEMICOLON block DOT
    (62) parameter_list -> . parameter
    (63) parameter_list -> . parameter_list SEMICOLON parameter
    (64) parameter -> . id_list COLON type_specifier
    (65) parameter -> . VAR id_list COLON type_specifier
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    VAR             shift and go to state 116
    ID              shift and go to state 26

    parameter_list                 shift and go to state 113
    parameter                      shift and go to state 114
    id_list                        shift and go to state 115

state 65

    (59) function_declaration -> FUNCTION ID LPAREN . parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (62) parameter_list -> . parameter
    (63) parameter_list -> . parameter_list SEMICOLON parameter
    (64) parameter -> . id_list COLON type_specifier
    (65) parameter -> . VAR id_list COLON type_specifier
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    VAR             shift and go to state 116
    ID              shift and go to state 26

    parameter_list                 shift and go to state 117
    parameter                      shift and go to state 114
    id_list                        shift and go to state 115

state 66

    (66) compound_statement -> BEGIN statement_list END .

    DOT             reduce using rule 66 (compound_statement -> BEGIN statement_list END .)
    SEMICOLON       reduce using rule 66 (compound_statement -> BEGIN statement_list END .)
    END             reduce using rule 66 (compound_statement -> BEGIN statement_list END .)
    ELSE            reduce using rule 66 (compound_statement -> BEGIN statement_list END .)


state 67

    (67) statement_list -> statement statement_list_tail .

    END             reduce using rule 67 (statement_list -> statement statement_list_tail .)


state 68

    (68) statement_list_tail -> SEMICOLON . statement statement_list_tail
    (70) statement -> . if_statement
    (71) statement -> . assignment_statement
    (72) statement -> . while_statement
    (73) statement -> . procedure_call
    (74) statement -> . compound_statement
    (75) statement -> . for_statement
    (76) statement -> . empty
    (119) statement -> . READLN
    (120) statement -> . READLN LPAREN variable RPAREN
    (121) statement -> . READLN LBRACKET variable RBRACKET
    (122) statement -> . WRITELN LPAREN expression_list RPAREN
    (123) statement -> . WRITE LPAREN expression_list RPAREN
    (124) statement -> . USES ID SEMICOLON
    (77) if_statement -> . IF expression THEN statement ELSE statement
    (78) if_statement -> . IF expression THEN statement
    (81) assignment_statement -> . variable COLON_EQUAL expression
    (84) while_statement -> . WHILE expression DO statement
    (85) procedure_call -> . ID LPAREN expression_list RPAREN
    (66) compound_statement -> . BEGIN statement_list END
    (79) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (80) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (118) empty -> .
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    READLN          shift and go to state 47
    WRITELN         shift and go to state 49
    WRITE           shift and go to state 50
    USES            shift and go to state 51
    IF              shift and go to state 53
    WHILE           shift and go to state 54
    ID              shift and go to state 52
    BEGIN           shift and go to state 23
    FOR             shift and go to state 55
    SEMICOLON       reduce using rule 118 (empty -> .)
    END             reduce using rule 118 (empty -> .)

    statement                      shift and go to state 118
    if_statement                   shift and go to state 40
    assignment_statement           shift and go to state 41
    while_statement                shift and go to state 42
    procedure_call                 shift and go to state 43
    compound_statement             shift and go to state 44
    for_statement                  shift and go to state 45
    empty                          shift and go to state 46
    variable                       shift and go to state 48

state 69

    (69) statement_list_tail -> empty .

    END             reduce using rule 69 (statement_list_tail -> empty .)


state 70

    (120) statement -> READLN LPAREN . variable RPAREN
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 120

    variable                       shift and go to state 119

state 71

    (121) statement -> READLN LBRACKET . variable RBRACKET
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 120

    variable                       shift and go to state 121

state 72

    (81) assignment_statement -> variable COLON_EQUAL . expression
    (90) expression -> . simple_expression relop simple_expression
    (91) expression -> . simple_expression
    (103) expression -> . expression PLUS expression
    (104) expression -> . expression MINUS expression
    (105) expression -> . expression TIMES expression
    (106) expression -> . expression DIVIDE expression
    (107) expression -> . expression MOD expression
    (132) expression -> . expression AND expression
    (133) expression -> . expression OR expression
    (134) expression -> . NOT expression
    (92) simple_expression -> . term simple_expression_tail
    (97) term -> . factor term_tail
    (61) factor -> . function_call
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . variable
    (110) factor -> . NUMBER
    (111) factor -> . STRING_LITERAL
    (60) function_call -> . ID LPAREN expression_list RPAREN
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 80
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    STRING_LITERAL  shift and go to state 87
    ID              shift and go to state 88

    variable                       shift and go to state 85
    expression                     shift and go to state 122
    simple_expression              shift and go to state 79
    term                           shift and go to state 81
    factor                         shift and go to state 82
    function_call                  shift and go to state 83

state 73

    (122) statement -> WRITELN LPAREN . expression_list RPAREN
    (86) expression_list -> . expression expression_list_tail
    (89) expression_list -> . empty
    (90) expression -> . simple_expression relop simple_expression
    (91) expression -> . simple_expression
    (103) expression -> . expression PLUS expression
    (104) expression -> . expression MINUS expression
    (105) expression -> . expression TIMES expression
    (106) expression -> . expression DIVIDE expression
    (107) expression -> . expression MOD expression
    (132) expression -> . expression AND expression
    (133) expression -> . expression OR expression
    (134) expression -> . NOT expression
    (118) empty -> .
    (92) simple_expression -> . term simple_expression_tail
    (97) term -> . factor term_tail
    (61) factor -> . function_call
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . variable
    (110) factor -> . NUMBER
    (111) factor -> . STRING_LITERAL
    (60) function_call -> . ID LPAREN expression_list RPAREN
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 80
    RPAREN          reduce using rule 118 (empty -> .)
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    STRING_LITERAL  shift and go to state 87
    ID              shift and go to state 88

    expression_list                shift and go to state 123
    expression                     shift and go to state 124
    empty                          shift and go to state 125
    simple_expression              shift and go to state 79
    term                           shift and go to state 81
    factor                         shift and go to state 82
    function_call                  shift and go to state 83
    variable                       shift and go to state 85

state 74

    (123) statement -> WRITE LPAREN . expression_list RPAREN
    (86) expression_list -> . expression expression_list_tail
    (89) expression_list -> . empty
    (90) expression -> . simple_expression relop simple_expression
    (91) expression -> . simple_expression
    (103) expression -> . expression PLUS expression
    (104) expression -> . expression MINUS expression
    (105) expression -> . expression TIMES expression
    (106) expression -> . expression DIVIDE expression
    (107) expression -> . expression MOD expression
    (132) expression -> . expression AND expression
    (133) expression -> . expression OR expression
    (134) expression -> . NOT expression
    (118) empty -> .
    (92) simple_expression -> . term simple_expression_tail
    (97) term -> . factor term_tail
    (61) factor -> . function_call
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . variable
    (110) factor -> . NUMBER
    (111) factor -> . STRING_LITERAL
    (60) function_call -> . ID LPAREN expression_list RPAREN
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 80
    RPAREN          reduce using rule 118 (empty -> .)
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    STRING_LITERAL  shift and go to state 87
    ID              shift and go to state 88

    expression_list                shift and go to state 126
    expression                     shift and go to state 124
    empty                          shift and go to state 125
    simple_expression              shift and go to state 79
    term                           shift and go to state 81
    factor                         shift and go to state 82
    function_call                  shift and go to state 83
    variable                       shift and go to state 85

state 75

    (124) statement -> USES ID . SEMICOLON

    SEMICOLON       shift and go to state 127


state 76

    (85) procedure_call -> ID LPAREN . expression_list RPAREN
    (86) expression_list -> . expression expression_list_tail
    (89) expression_list -> . empty
    (90) expression -> . simple_expression relop simple_expression
    (91) expression -> . simple_expression
    (103) expression -> . expression PLUS expression
    (104) expression -> . expression MINUS expression
    (105) expression -> . expression TIMES expression
    (106) expression -> . expression DIVIDE expression
    (107) expression -> . expression MOD expression
    (132) expression -> . expression AND expression
    (133) expression -> . expression OR expression
    (134) expression -> . NOT expression
    (118) empty -> .
    (92) simple_expression -> . term simple_expression_tail
    (97) term -> . factor term_tail
    (61) factor -> . function_call
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . variable
    (110) factor -> . NUMBER
    (111) factor -> . STRING_LITERAL
    (60) function_call -> . ID LPAREN expression_list RPAREN
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 80
    RPAREN          reduce using rule 118 (empty -> .)
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    STRING_LITERAL  shift and go to state 87
    ID              shift and go to state 88

    expression_list                shift and go to state 128
    expression                     shift and go to state 124
    empty                          shift and go to state 125
    simple_expression              shift and go to state 79
    term                           shift and go to state 81
    factor                         shift and go to state 82
    function_call                  shift and go to state 83
    variable                       shift and go to state 85

state 77

    (83) variable -> ID LBRACKET . expression RBRACKET
    (90) expression -> . simple_expression relop simple_expression
    (91) expression -> . simple_expression
    (103) expression -> . expression PLUS expression
    (104) expression -> . expression MINUS expression
    (105) expression -> . expression TIMES expression
    (106) expression -> . expression DIVIDE expression
    (107) expression -> . expression MOD expression
    (132) expression -> . expression AND expression
    (133) expression -> . expression OR expression
    (134) expression -> . NOT expression
    (92) simple_expression -> . term simple_expression_tail
    (97) term -> . factor term_tail
    (61) factor -> . function_call
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . variable
    (110) factor -> . NUMBER
    (111) factor -> . STRING_LITERAL
    (60) function_call -> . ID LPAREN expression_list RPAREN
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 80
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    STRING_LITERAL  shift and go to state 87
    ID              shift and go to state 88

    expression                     shift and go to state 129
    simple_expression              shift and go to state 79
    term                           shift and go to state 81
    factor                         shift and go to state 82
    function_call                  shift and go to state 83
    variable                       shift and go to state 85

state 78

    (77) if_statement -> IF expression . THEN statement ELSE statement
    (78) if_statement -> IF expression . THEN statement
    (103) expression -> expression . PLUS expression
    (104) expression -> expression . MINUS expression
    (105) expression -> expression . TIMES expression
    (106) expression -> expression . DIVIDE expression
    (107) expression -> expression . MOD expression
    (132) expression -> expression . AND expression
    (133) expression -> expression . OR expression

    THEN            shift and go to state 130
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135
    AND             shift and go to state 136
    OR              shift and go to state 137


state 79

    (90) expression -> simple_expression . relop simple_expression
    (91) expression -> simple_expression .
    (112) relop -> . LESS
    (113) relop -> . LESS_EQUAL
    (114) relop -> . GREAT
    (115) relop -> . GREAT_EQUAL
    (116) relop -> . EQUAL
    (117) relop -> . DIFFERENT

    THEN            reduce using rule 91 (expression -> simple_expression .)
    PLUS            reduce using rule 91 (expression -> simple_expression .)
    MINUS           reduce using rule 91 (expression -> simple_expression .)
    TIMES           reduce using rule 91 (expression -> simple_expression .)
    DIVIDE          reduce using rule 91 (expression -> simple_expression .)
    MOD             reduce using rule 91 (expression -> simple_expression .)
    AND             reduce using rule 91 (expression -> simple_expression .)
    OR              reduce using rule 91 (expression -> simple_expression .)
    DO              reduce using rule 91 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 91 (expression -> simple_expression .)
    END             reduce using rule 91 (expression -> simple_expression .)
    ELSE            reduce using rule 91 (expression -> simple_expression .)
    COMMA           reduce using rule 91 (expression -> simple_expression .)
    RPAREN          reduce using rule 91 (expression -> simple_expression .)
    RBRACKET        reduce using rule 91 (expression -> simple_expression .)
    TO              reduce using rule 91 (expression -> simple_expression .)
    DOWNTO          reduce using rule 91 (expression -> simple_expression .)
    LESS            shift and go to state 139
    LESS_EQUAL      shift and go to state 140
    GREAT           shift and go to state 141
    GREAT_EQUAL     shift and go to state 142
    EQUAL           shift and go to state 143
    DIFFERENT       shift and go to state 144

    relop                          shift and go to state 138

state 80

    (134) expression -> NOT . expression
    (90) expression -> . simple_expression relop simple_expression
    (91) expression -> . simple_expression
    (103) expression -> . expression PLUS expression
    (104) expression -> . expression MINUS expression
    (105) expression -> . expression TIMES expression
    (106) expression -> . expression DIVIDE expression
    (107) expression -> . expression MOD expression
    (132) expression -> . expression AND expression
    (133) expression -> . expression OR expression
    (134) expression -> . NOT expression
    (92) simple_expression -> . term simple_expression_tail
    (97) term -> . factor term_tail
    (61) factor -> . function_call
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . variable
    (110) factor -> . NUMBER
    (111) factor -> . STRING_LITERAL
    (60) function_call -> . ID LPAREN expression_list RPAREN
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 80
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    STRING_LITERAL  shift and go to state 87
    ID              shift and go to state 88

    expression                     shift and go to state 145
    simple_expression              shift and go to state 79
    term                           shift and go to state 81
    factor                         shift and go to state 82
    function_call                  shift and go to state 83
    variable                       shift and go to state 85

state 81

    (92) simple_expression -> term . simple_expression_tail
    (93) simple_expression_tail -> . addop term
    (94) simple_expression_tail -> . empty
    (95) addop -> . PLUS
    (96) addop -> . MINUS
    (118) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    LESS            reduce using rule 118 (empty -> .)
    LESS_EQUAL      reduce using rule 118 (empty -> .)
    GREAT           reduce using rule 118 (empty -> .)
    GREAT_EQUAL     reduce using rule 118 (empty -> .)
    EQUAL           reduce using rule 118 (empty -> .)
    DIFFERENT       reduce using rule 118 (empty -> .)
    THEN            reduce using rule 118 (empty -> .)
    TIMES           reduce using rule 118 (empty -> .)
    DIVIDE          reduce using rule 118 (empty -> .)
    MOD             reduce using rule 118 (empty -> .)
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    DO              reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    END             reduce using rule 118 (empty -> .)
    ELSE            reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    RPAREN          reduce using rule 118 (empty -> .)
    RBRACKET        reduce using rule 118 (empty -> .)
    TO              reduce using rule 118 (empty -> .)
    DOWNTO          reduce using rule 118 (empty -> .)

  ! PLUS            [ reduce using rule 118 (empty -> .) ]
  ! MINUS           [ reduce using rule 118 (empty -> .) ]

    simple_expression_tail         shift and go to state 146
    addop                          shift and go to state 147
    empty                          shift and go to state 148

state 82

    (97) term -> factor . term_tail
    (98) term_tail -> . mulop factor
    (99) term_tail -> . empty
    (100) mulop -> . TIMES
    (101) mulop -> . DIVIDE
    (102) mulop -> . DIV
    (118) empty -> .

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    TIMES           shift and go to state 154
    DIVIDE          shift and go to state 155
    DIV             shift and go to state 156
    PLUS            reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    LESS            reduce using rule 118 (empty -> .)
    LESS_EQUAL      reduce using rule 118 (empty -> .)
    GREAT           reduce using rule 118 (empty -> .)
    GREAT_EQUAL     reduce using rule 118 (empty -> .)
    EQUAL           reduce using rule 118 (empty -> .)
    DIFFERENT       reduce using rule 118 (empty -> .)
    THEN            reduce using rule 118 (empty -> .)
    MOD             reduce using rule 118 (empty -> .)
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    DO              reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    END             reduce using rule 118 (empty -> .)
    ELSE            reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    RPAREN          reduce using rule 118 (empty -> .)
    RBRACKET        reduce using rule 118 (empty -> .)
    TO              reduce using rule 118 (empty -> .)
    DOWNTO          reduce using rule 118 (empty -> .)

  ! TIMES           [ reduce using rule 118 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 118 (empty -> .) ]

    term_tail                      shift and go to state 151
    mulop                          shift and go to state 152
    empty                          shift and go to state 153

state 83

    (61) factor -> function_call .

    TIMES           reduce using rule 61 (factor -> function_call .)
    DIVIDE          reduce using rule 61 (factor -> function_call .)
    DIV             reduce using rule 61 (factor -> function_call .)
    PLUS            reduce using rule 61 (factor -> function_call .)
    MINUS           reduce using rule 61 (factor -> function_call .)
    LESS            reduce using rule 61 (factor -> function_call .)
    LESS_EQUAL      reduce using rule 61 (factor -> function_call .)
    GREAT           reduce using rule 61 (factor -> function_call .)
    GREAT_EQUAL     reduce using rule 61 (factor -> function_call .)
    EQUAL           reduce using rule 61 (factor -> function_call .)
    DIFFERENT       reduce using rule 61 (factor -> function_call .)
    THEN            reduce using rule 61 (factor -> function_call .)
    MOD             reduce using rule 61 (factor -> function_call .)
    AND             reduce using rule 61 (factor -> function_call .)
    OR              reduce using rule 61 (factor -> function_call .)
    DO              reduce using rule 61 (factor -> function_call .)
    SEMICOLON       reduce using rule 61 (factor -> function_call .)
    END             reduce using rule 61 (factor -> function_call .)
    ELSE            reduce using rule 61 (factor -> function_call .)
    COMMA           reduce using rule 61 (factor -> function_call .)
    RPAREN          reduce using rule 61 (factor -> function_call .)
    RBRACKET        reduce using rule 61 (factor -> function_call .)
    TO              reduce using rule 61 (factor -> function_call .)
    DOWNTO          reduce using rule 61 (factor -> function_call .)


state 84

    (108) factor -> LPAREN . expression RPAREN
    (90) expression -> . simple_expression relop simple_expression
    (91) expression -> . simple_expression
    (103) expression -> . expression PLUS expression
    (104) expression -> . expression MINUS expression
    (105) expression -> . expression TIMES expression
    (106) expression -> . expression DIVIDE expression
    (107) expression -> . expression MOD expression
    (132) expression -> . expression AND expression
    (133) expression -> . expression OR expression
    (134) expression -> . NOT expression
    (92) simple_expression -> . term simple_expression_tail
    (97) term -> . factor term_tail
    (61) factor -> . function_call
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . variable
    (110) factor -> . NUMBER
    (111) factor -> . STRING_LITERAL
    (60) function_call -> . ID LPAREN expression_list RPAREN
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 80
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    STRING_LITERAL  shift and go to state 87
    ID              shift and go to state 88

    expression                     shift and go to state 157
    simple_expression              shift and go to state 79
    term                           shift and go to state 81
    factor                         shift and go to state 82
    function_call                  shift and go to state 83
    variable                       shift and go to state 85

state 85

    (109) factor -> variable .

    TIMES           reduce using rule 109 (factor -> variable .)
    DIVIDE          reduce using rule 109 (factor -> variable .)
    DIV             reduce using rule 109 (factor -> variable .)
    PLUS            reduce using rule 109 (factor -> variable .)
    MINUS           reduce using rule 109 (factor -> variable .)
    LESS            reduce using rule 109 (factor -> variable .)
    LESS_EQUAL      reduce using rule 109 (factor -> variable .)
    GREAT           reduce using rule 109 (factor -> variable .)
    GREAT_EQUAL     reduce using rule 109 (factor -> variable .)
    EQUAL           reduce using rule 109 (factor -> variable .)
    DIFFERENT       reduce using rule 109 (factor -> variable .)
    THEN            reduce using rule 109 (factor -> variable .)
    MOD             reduce using rule 109 (factor -> variable .)
    AND             reduce using rule 109 (factor -> variable .)
    OR              reduce using rule 109 (factor -> variable .)
    DO              reduce using rule 109 (factor -> variable .)
    SEMICOLON       reduce using rule 109 (factor -> variable .)
    END             reduce using rule 109 (factor -> variable .)
    ELSE            reduce using rule 109 (factor -> variable .)
    COMMA           reduce using rule 109 (factor -> variable .)
    RPAREN          reduce using rule 109 (factor -> variable .)
    RBRACKET        reduce using rule 109 (factor -> variable .)
    TO              reduce using rule 109 (factor -> variable .)
    DOWNTO          reduce using rule 109 (factor -> variable .)


state 86

    (110) factor -> NUMBER .

    TIMES           reduce using rule 110 (factor -> NUMBER .)
    DIVIDE          reduce using rule 110 (factor -> NUMBER .)
    DIV             reduce using rule 110 (factor -> NUMBER .)
    PLUS            reduce using rule 110 (factor -> NUMBER .)
    MINUS           reduce using rule 110 (factor -> NUMBER .)
    LESS            reduce using rule 110 (factor -> NUMBER .)
    LESS_EQUAL      reduce using rule 110 (factor -> NUMBER .)
    GREAT           reduce using rule 110 (factor -> NUMBER .)
    GREAT_EQUAL     reduce using rule 110 (factor -> NUMBER .)
    EQUAL           reduce using rule 110 (factor -> NUMBER .)
    DIFFERENT       reduce using rule 110 (factor -> NUMBER .)
    THEN            reduce using rule 110 (factor -> NUMBER .)
    MOD             reduce using rule 110 (factor -> NUMBER .)
    AND             reduce using rule 110 (factor -> NUMBER .)
    OR              reduce using rule 110 (factor -> NUMBER .)
    DO              reduce using rule 110 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 110 (factor -> NUMBER .)
    END             reduce using rule 110 (factor -> NUMBER .)
    ELSE            reduce using rule 110 (factor -> NUMBER .)
    COMMA           reduce using rule 110 (factor -> NUMBER .)
    RPAREN          reduce using rule 110 (factor -> NUMBER .)
    RBRACKET        reduce using rule 110 (factor -> NUMBER .)
    TO              reduce using rule 110 (factor -> NUMBER .)
    DOWNTO          reduce using rule 110 (factor -> NUMBER .)


state 87

    (111) factor -> STRING_LITERAL .

    TIMES           reduce using rule 111 (factor -> STRING_LITERAL .)
    DIVIDE          reduce using rule 111 (factor -> STRING_LITERAL .)
    DIV             reduce using rule 111 (factor -> STRING_LITERAL .)
    PLUS            reduce using rule 111 (factor -> STRING_LITERAL .)
    MINUS           reduce using rule 111 (factor -> STRING_LITERAL .)
    LESS            reduce using rule 111 (factor -> STRING_LITERAL .)
    LESS_EQUAL      reduce using rule 111 (factor -> STRING_LITERAL .)
    GREAT           reduce using rule 111 (factor -> STRING_LITERAL .)
    GREAT_EQUAL     reduce using rule 111 (factor -> STRING_LITERAL .)
    EQUAL           reduce using rule 111 (factor -> STRING_LITERAL .)
    DIFFERENT       reduce using rule 111 (factor -> STRING_LITERAL .)
    THEN            reduce using rule 111 (factor -> STRING_LITERAL .)
    MOD             reduce using rule 111 (factor -> STRING_LITERAL .)
    AND             reduce using rule 111 (factor -> STRING_LITERAL .)
    OR              reduce using rule 111 (factor -> STRING_LITERAL .)
    DO              reduce using rule 111 (factor -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 111 (factor -> STRING_LITERAL .)
    END             reduce using rule 111 (factor -> STRING_LITERAL .)
    ELSE            reduce using rule 111 (factor -> STRING_LITERAL .)
    COMMA           reduce using rule 111 (factor -> STRING_LITERAL .)
    RPAREN          reduce using rule 111 (factor -> STRING_LITERAL .)
    RBRACKET        reduce using rule 111 (factor -> STRING_LITERAL .)
    TO              reduce using rule 111 (factor -> STRING_LITERAL .)
    DOWNTO          reduce using rule 111 (factor -> STRING_LITERAL .)


state 88

    (60) function_call -> ID . LPAREN expression_list RPAREN
    (82) variable -> ID .
    (83) variable -> ID . LBRACKET expression RBRACKET

    LPAREN          shift and go to state 158
    TIMES           reduce using rule 82 (variable -> ID .)
    DIVIDE          reduce using rule 82 (variable -> ID .)
    DIV             reduce using rule 82 (variable -> ID .)
    PLUS            reduce using rule 82 (variable -> ID .)
    MINUS           reduce using rule 82 (variable -> ID .)
    LESS            reduce using rule 82 (variable -> ID .)
    LESS_EQUAL      reduce using rule 82 (variable -> ID .)
    GREAT           reduce using rule 82 (variable -> ID .)
    GREAT_EQUAL     reduce using rule 82 (variable -> ID .)
    EQUAL           reduce using rule 82 (variable -> ID .)
    DIFFERENT       reduce using rule 82 (variable -> ID .)
    THEN            reduce using rule 82 (variable -> ID .)
    MOD             reduce using rule 82 (variable -> ID .)
    AND             reduce using rule 82 (variable -> ID .)
    OR              reduce using rule 82 (variable -> ID .)
    DO              reduce using rule 82 (variable -> ID .)
    SEMICOLON       reduce using rule 82 (variable -> ID .)
    END             reduce using rule 82 (variable -> ID .)
    ELSE            reduce using rule 82 (variable -> ID .)
    COMMA           reduce using rule 82 (variable -> ID .)
    RPAREN          reduce using rule 82 (variable -> ID .)
    RBRACKET        reduce using rule 82 (variable -> ID .)
    TO              reduce using rule 82 (variable -> ID .)
    DOWNTO          reduce using rule 82 (variable -> ID .)
    LBRACKET        shift and go to state 77


state 89

    (84) while_statement -> WHILE expression . DO statement
    (103) expression -> expression . PLUS expression
    (104) expression -> expression . MINUS expression
    (105) expression -> expression . TIMES expression
    (106) expression -> expression . DIVIDE expression
    (107) expression -> expression . MOD expression
    (132) expression -> expression . AND expression
    (133) expression -> expression . OR expression

    DO              shift and go to state 159
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135
    AND             shift and go to state 136
    OR              shift and go to state 137


state 90

    (79) for_statement -> FOR ID . COLON_EQUAL expression TO expression DO statement
    (80) for_statement -> FOR ID . COLON_EQUAL expression DOWNTO expression DO statement

    COLON_EQUAL     shift and go to state 160


state 91

    (12) id_list -> id_list COMMA ID .

    SEMICOLON       reduce using rule 12 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 12 (id_list -> id_list COMMA ID .)
    COLON           reduce using rule 12 (id_list -> id_list COMMA ID .)
    RPAREN          reduce using rule 12 (id_list -> id_list COMMA ID .)


state 92

    (128) constant -> ID EQUAL CHARACTER_LITERAL . SEMICOLON

    SEMICOLON       shift and go to state 161


state 93

    (129) constant -> ID EQUAL NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 162


state 94

    (130) constant -> ID EQUAL STRING_LITERAL . SEMICOLON

    SEMICOLON       shift and go to state 163


state 95

    (131) constant -> ID EQUAL BOOLEAN_LITERAL . SEMICOLON

    SEMICOLON       shift and go to state 164


state 96

    (34) type_specifier -> ID .

    SEMICOLON       reduce using rule 34 (type_specifier -> ID .)
    RPAREN          reduce using rule 34 (type_specifier -> ID .)
    CASE            reduce using rule 34 (type_specifier -> ID .)
    ID              reduce using rule 34 (type_specifier -> ID .)
    END             reduce using rule 34 (type_specifier -> ID .)
    CONSTRUCTOR     reduce using rule 34 (type_specifier -> ID .)
    PROCEDURE       reduce using rule 34 (type_specifier -> ID .)
    FUNCTION        reduce using rule 34 (type_specifier -> ID .)
    DESTRUCTOR      reduce using rule 34 (type_specifier -> ID .)
    OF              reduce using rule 34 (type_specifier -> ID .)


state 97

    (21) type_definition -> ID EQUAL type_specifier . SEMICOLON

    SEMICOLON       shift and go to state 165


state 98

    (22) type_specifier -> ARRAY . LBRACKET type_expression RBRACKET OF type_specifier

    LBRACKET        shift and go to state 166


state 99

    (23) type_specifier -> subrange .

    SEMICOLON       reduce using rule 23 (type_specifier -> subrange .)
    RPAREN          reduce using rule 23 (type_specifier -> subrange .)
    CASE            reduce using rule 23 (type_specifier -> subrange .)
    ID              reduce using rule 23 (type_specifier -> subrange .)
    END             reduce using rule 23 (type_specifier -> subrange .)
    CONSTRUCTOR     reduce using rule 23 (type_specifier -> subrange .)
    PROCEDURE       reduce using rule 23 (type_specifier -> subrange .)
    FUNCTION        reduce using rule 23 (type_specifier -> subrange .)
    DESTRUCTOR      reduce using rule 23 (type_specifier -> subrange .)
    OF              reduce using rule 23 (type_specifier -> subrange .)


state 100

    (24) type_specifier -> FILE . OF type_specifier

    OF              shift and go to state 167


state 101

    (25) type_specifier -> SET . OF type_specifier

    OF              shift and go to state 168


state 102

    (26) type_specifier -> RECORD . field_list case_part END
    (38) field_list -> . field_list field
    (39) field_list -> . field
    (40) field -> . id_list COLON type_specifier SEMICOLON
    (41) field -> . id_list COLON type_specifier
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    ID              shift and go to state 26

    field_list                     shift and go to state 169
    field                          shift and go to state 170
    id_list                        shift and go to state 171

state 103

    (27) type_specifier -> OBJECT . field_list method_list END
    (38) field_list -> . field_list field
    (39) field_list -> . field
    (40) field -> . id_list COLON type_specifier SEMICOLON
    (41) field -> . id_list COLON type_specifier
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    ID              shift and go to state 26

    field_list                     shift and go to state 172
    field                          shift and go to state 170
    id_list                        shift and go to state 171

state 104

    (28) type_specifier -> LPAREN . id_list RPAREN
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    ID              shift and go to state 26

    id_list                        shift and go to state 173

state 105

    (29) type_specifier -> BOOLEAN_LITERAL .

    SEMICOLON       reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)
    RPAREN          reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)
    CASE            reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)
    ID              reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)
    END             reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)
    CONSTRUCTOR     reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)
    PROCEDURE       reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)
    FUNCTION        reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)
    DESTRUCTOR      reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)
    OF              reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)


state 106

    (30) type_specifier -> INTEGER .

    SEMICOLON       reduce using rule 30 (type_specifier -> INTEGER .)
    RPAREN          reduce using rule 30 (type_specifier -> INTEGER .)
    CASE            reduce using rule 30 (type_specifier -> INTEGER .)
    ID              reduce using rule 30 (type_specifier -> INTEGER .)
    END             reduce using rule 30 (type_specifier -> INTEGER .)
    CONSTRUCTOR     reduce using rule 30 (type_specifier -> INTEGER .)
    PROCEDURE       reduce using rule 30 (type_specifier -> INTEGER .)
    FUNCTION        reduce using rule 30 (type_specifier -> INTEGER .)
    DESTRUCTOR      reduce using rule 30 (type_specifier -> INTEGER .)
    OF              reduce using rule 30 (type_specifier -> INTEGER .)


state 107

    (31) type_specifier -> BYTE .

    SEMICOLON       reduce using rule 31 (type_specifier -> BYTE .)
    RPAREN          reduce using rule 31 (type_specifier -> BYTE .)
    CASE            reduce using rule 31 (type_specifier -> BYTE .)
    ID              reduce using rule 31 (type_specifier -> BYTE .)
    END             reduce using rule 31 (type_specifier -> BYTE .)
    CONSTRUCTOR     reduce using rule 31 (type_specifier -> BYTE .)
    PROCEDURE       reduce using rule 31 (type_specifier -> BYTE .)
    FUNCTION        reduce using rule 31 (type_specifier -> BYTE .)
    DESTRUCTOR      reduce using rule 31 (type_specifier -> BYTE .)
    OF              reduce using rule 31 (type_specifier -> BYTE .)


state 108

    (32) type_specifier -> CHAR .

    SEMICOLON       reduce using rule 32 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 32 (type_specifier -> CHAR .)
    CASE            reduce using rule 32 (type_specifier -> CHAR .)
    ID              reduce using rule 32 (type_specifier -> CHAR .)
    END             reduce using rule 32 (type_specifier -> CHAR .)
    CONSTRUCTOR     reduce using rule 32 (type_specifier -> CHAR .)
    PROCEDURE       reduce using rule 32 (type_specifier -> CHAR .)
    FUNCTION        reduce using rule 32 (type_specifier -> CHAR .)
    DESTRUCTOR      reduce using rule 32 (type_specifier -> CHAR .)
    OF              reduce using rule 32 (type_specifier -> CHAR .)


state 109

    (33) type_specifier -> STRING . LBRACKET NUMBER RBRACKET

    LBRACKET        shift and go to state 174


state 110

    (37) subrange -> NUMBER . DOTDOT NUMBER

    DOTDOT          shift and go to state 175


state 111

    (54) type_specifier -> LONGINT .

    SEMICOLON       reduce using rule 54 (type_specifier -> LONGINT .)
    RPAREN          reduce using rule 54 (type_specifier -> LONGINT .)
    CASE            reduce using rule 54 (type_specifier -> LONGINT .)
    ID              reduce using rule 54 (type_specifier -> LONGINT .)
    END             reduce using rule 54 (type_specifier -> LONGINT .)
    CONSTRUCTOR     reduce using rule 54 (type_specifier -> LONGINT .)
    PROCEDURE       reduce using rule 54 (type_specifier -> LONGINT .)
    FUNCTION        reduce using rule 54 (type_specifier -> LONGINT .)
    DESTRUCTOR      reduce using rule 54 (type_specifier -> LONGINT .)
    OF              reduce using rule 54 (type_specifier -> LONGINT .)


state 112

    (16) declaration -> id_list COLON type_specifier . SEMICOLON

    SEMICOLON       shift and go to state 176


state 113

    (57) procedure_declaration -> PROCEDURE ID LPAREN parameter_list . RPAREN SEMICOLON block SEMICOLON
    (58) procedure_declaration -> PROCEDURE ID LPAREN parameter_list . RPAREN SEMICOLON block DOT
    (63) parameter_list -> parameter_list . SEMICOLON parameter

    RPAREN          shift and go to state 177
    SEMICOLON       shift and go to state 178


state 114

    (62) parameter_list -> parameter .

    RPAREN          reduce using rule 62 (parameter_list -> parameter .)
    SEMICOLON       reduce using rule 62 (parameter_list -> parameter .)


state 115

    (64) parameter -> id_list . COLON type_specifier
    (12) id_list -> id_list . COMMA ID

    COLON           shift and go to state 179
    COMMA           shift and go to state 57


state 116

    (65) parameter -> VAR . id_list COLON type_specifier
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    ID              shift and go to state 26

    id_list                        shift and go to state 180

state 117

    (59) function_declaration -> FUNCTION ID LPAREN parameter_list . RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (63) parameter_list -> parameter_list . SEMICOLON parameter

    RPAREN          shift and go to state 181
    SEMICOLON       shift and go to state 178


state 118

    (68) statement_list_tail -> SEMICOLON statement . statement_list_tail
    (68) statement_list_tail -> . SEMICOLON statement statement_list_tail
    (69) statement_list_tail -> . empty
    (118) empty -> .

    SEMICOLON       shift and go to state 68
    END             reduce using rule 118 (empty -> .)

    statement_list_tail            shift and go to state 182
    empty                          shift and go to state 69

state 119

    (120) statement -> READLN LPAREN variable . RPAREN

    RPAREN          shift and go to state 183


state 120

    (82) variable -> ID .
    (83) variable -> ID . LBRACKET expression RBRACKET

    RPAREN          reduce using rule 82 (variable -> ID .)
    RBRACKET        reduce using rule 82 (variable -> ID .)
    LBRACKET        shift and go to state 77


state 121

    (121) statement -> READLN LBRACKET variable . RBRACKET

    RBRACKET        shift and go to state 184


state 122

    (81) assignment_statement -> variable COLON_EQUAL expression .
    (103) expression -> expression . PLUS expression
    (104) expression -> expression . MINUS expression
    (105) expression -> expression . TIMES expression
    (106) expression -> expression . DIVIDE expression
    (107) expression -> expression . MOD expression
    (132) expression -> expression . AND expression
    (133) expression -> expression . OR expression

    SEMICOLON       reduce using rule 81 (assignment_statement -> variable COLON_EQUAL expression .)
    END             reduce using rule 81 (assignment_statement -> variable COLON_EQUAL expression .)
    ELSE            reduce using rule 81 (assignment_statement -> variable COLON_EQUAL expression .)
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135
    AND             shift and go to state 136
    OR              shift and go to state 137


state 123

    (122) statement -> WRITELN LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 185


state 124

    (86) expression_list -> expression . expression_list_tail
    (103) expression -> expression . PLUS expression
    (104) expression -> expression . MINUS expression
    (105) expression -> expression . TIMES expression
    (106) expression -> expression . DIVIDE expression
    (107) expression -> expression . MOD expression
    (132) expression -> expression . AND expression
    (133) expression -> expression . OR expression
    (87) expression_list_tail -> . COMMA expression expression_list_tail
    (88) expression_list_tail -> . empty
    (118) empty -> .

    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135
    AND             shift and go to state 136
    OR              shift and go to state 137
    COMMA           shift and go to state 187
    RPAREN          reduce using rule 118 (empty -> .)

    expression_list_tail           shift and go to state 186
    empty                          shift and go to state 188

state 125

    (89) expression_list -> empty .

    RPAREN          reduce using rule 89 (expression_list -> empty .)


state 126

    (123) statement -> WRITE LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 189


state 127

    (124) statement -> USES ID SEMICOLON .

    SEMICOLON       reduce using rule 124 (statement -> USES ID SEMICOLON .)
    END             reduce using rule 124 (statement -> USES ID SEMICOLON .)
    ELSE            reduce using rule 124 (statement -> USES ID SEMICOLON .)


state 128

    (85) procedure_call -> ID LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 190


state 129

    (83) variable -> ID LBRACKET expression . RBRACKET
    (103) expression -> expression . PLUS expression
    (104) expression -> expression . MINUS expression
    (105) expression -> expression . TIMES expression
    (106) expression -> expression . DIVIDE expression
    (107) expression -> expression . MOD expression
    (132) expression -> expression . AND expression
    (133) expression -> expression . OR expression

    RBRACKET        shift and go to state 191
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135
    AND             shift and go to state 136
    OR              shift and go to state 137


state 130

    (77) if_statement -> IF expression THEN . statement ELSE statement
    (78) if_statement -> IF expression THEN . statement
    (70) statement -> . if_statement
    (71) statement -> . assignment_statement
    (72) statement -> . while_statement
    (73) statement -> . procedure_call
    (74) statement -> . compound_statement
    (75) statement -> . for_statement
    (76) statement -> . empty
    (119) statement -> . READLN
    (120) statement -> . READLN LPAREN variable RPAREN
    (121) statement -> . READLN LBRACKET variable RBRACKET
    (122) statement -> . WRITELN LPAREN expression_list RPAREN
    (123) statement -> . WRITE LPAREN expression_list RPAREN
    (124) statement -> . USES ID SEMICOLON
    (77) if_statement -> . IF expression THEN statement ELSE statement
    (78) if_statement -> . IF expression THEN statement
    (81) assignment_statement -> . variable COLON_EQUAL expression
    (84) while_statement -> . WHILE expression DO statement
    (85) procedure_call -> . ID LPAREN expression_list RPAREN
    (66) compound_statement -> . BEGIN statement_list END
    (79) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (80) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (118) empty -> .
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    READLN          shift and go to state 47
    WRITELN         shift and go to state 49
    WRITE           shift and go to state 50
    USES            shift and go to state 51
    IF              shift and go to state 53
    WHILE           shift and go to state 54
    ID              shift and go to state 52
    BEGIN           shift and go to state 23
    FOR             shift and go to state 55
    ELSE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    END             reduce using rule 118 (empty -> .)

    statement                      shift and go to state 192
    if_statement                   shift and go to state 40
    assignment_statement           shift and go to state 41
    while_statement                shift and go to state 42
    procedure_call                 shift and go to state 43
    compound_statement             shift and go to state 44
    for_statement                  shift and go to state 45
    empty                          shift and go to state 46
    variable                       shift and go to state 48

state 131

    (103) expression -> expression PLUS . expression
    (90) expression -> . simple_expression relop simple_expression
    (91) expression -> . simple_expression
    (103) expression -> . expression PLUS expression
    (104) expression -> . expression MINUS expression
    (105) expression -> . expression TIMES expression
    (106) expression -> . expression DIVIDE expression
    (107) expression -> . expression MOD expression
    (132) expression -> . expression AND expression
    (133) expression -> . expression OR expression
    (134) expression -> . NOT expression
    (92) simple_expression -> . term simple_expression_tail
    (97) term -> . factor term_tail
    (61) factor -> . function_call
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . variable
    (110) factor -> . NUMBER
    (111) factor -> . STRING_LITERAL
    (60) function_call -> . ID LPAREN expression_list RPAREN
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 80
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    STRING_LITERAL  shift and go to state 87
    ID              shift and go to state 88

    expression                     shift and go to state 193
    simple_expression              shift and go to state 79
    term                           shift and go to state 81
    factor                         shift and go to state 82
    function_call                  shift and go to state 83
    variable                       shift and go to state 85

state 132

    (104) expression -> expression MINUS . expression
    (90) expression -> . simple_expression relop simple_expression
    (91) expression -> . simple_expression
    (103) expression -> . expression PLUS expression
    (104) expression -> . expression MINUS expression
    (105) expression -> . expression TIMES expression
    (106) expression -> . expression DIVIDE expression
    (107) expression -> . expression MOD expression
    (132) expression -> . expression AND expression
    (133) expression -> . expression OR expression
    (134) expression -> . NOT expression
    (92) simple_expression -> . term simple_expression_tail
    (97) term -> . factor term_tail
    (61) factor -> . function_call
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . variable
    (110) factor -> . NUMBER
    (111) factor -> . STRING_LITERAL
    (60) function_call -> . ID LPAREN expression_list RPAREN
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 80
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    STRING_LITERAL  shift and go to state 87
    ID              shift and go to state 88

    expression                     shift and go to state 194
    simple_expression              shift and go to state 79
    term                           shift and go to state 81
    factor                         shift and go to state 82
    function_call                  shift and go to state 83
    variable                       shift and go to state 85

state 133

    (105) expression -> expression TIMES . expression
    (90) expression -> . simple_expression relop simple_expression
    (91) expression -> . simple_expression
    (103) expression -> . expression PLUS expression
    (104) expression -> . expression MINUS expression
    (105) expression -> . expression TIMES expression
    (106) expression -> . expression DIVIDE expression
    (107) expression -> . expression MOD expression
    (132) expression -> . expression AND expression
    (133) expression -> . expression OR expression
    (134) expression -> . NOT expression
    (92) simple_expression -> . term simple_expression_tail
    (97) term -> . factor term_tail
    (61) factor -> . function_call
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . variable
    (110) factor -> . NUMBER
    (111) factor -> . STRING_LITERAL
    (60) function_call -> . ID LPAREN expression_list RPAREN
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 80
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    STRING_LITERAL  shift and go to state 87
    ID              shift and go to state 88

    expression                     shift and go to state 195
    simple_expression              shift and go to state 79
    term                           shift and go to state 81
    factor                         shift and go to state 82
    function_call                  shift and go to state 83
    variable                       shift and go to state 85

state 134

    (106) expression -> expression DIVIDE . expression
    (90) expression -> . simple_expression relop simple_expression
    (91) expression -> . simple_expression
    (103) expression -> . expression PLUS expression
    (104) expression -> . expression MINUS expression
    (105) expression -> . expression TIMES expression
    (106) expression -> . expression DIVIDE expression
    (107) expression -> . expression MOD expression
    (132) expression -> . expression AND expression
    (133) expression -> . expression OR expression
    (134) expression -> . NOT expression
    (92) simple_expression -> . term simple_expression_tail
    (97) term -> . factor term_tail
    (61) factor -> . function_call
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . variable
    (110) factor -> . NUMBER
    (111) factor -> . STRING_LITERAL
    (60) function_call -> . ID LPAREN expression_list RPAREN
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 80
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    STRING_LITERAL  shift and go to state 87
    ID              shift and go to state 88

    expression                     shift and go to state 196
    simple_expression              shift and go to state 79
    term                           shift and go to state 81
    factor                         shift and go to state 82
    function_call                  shift and go to state 83
    variable                       shift and go to state 85

state 135

    (107) expression -> expression MOD . expression
    (90) expression -> . simple_expression relop simple_expression
    (91) expression -> . simple_expression
    (103) expression -> . expression PLUS expression
    (104) expression -> . expression MINUS expression
    (105) expression -> . expression TIMES expression
    (106) expression -> . expression DIVIDE expression
    (107) expression -> . expression MOD expression
    (132) expression -> . expression AND expression
    (133) expression -> . expression OR expression
    (134) expression -> . NOT expression
    (92) simple_expression -> . term simple_expression_tail
    (97) term -> . factor term_tail
    (61) factor -> . function_call
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . variable
    (110) factor -> . NUMBER
    (111) factor -> . STRING_LITERAL
    (60) function_call -> . ID LPAREN expression_list RPAREN
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 80
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    STRING_LITERAL  shift and go to state 87
    ID              shift and go to state 88

    expression                     shift and go to state 197
    simple_expression              shift and go to state 79
    term                           shift and go to state 81
    factor                         shift and go to state 82
    function_call                  shift and go to state 83
    variable                       shift and go to state 85

state 136

    (132) expression -> expression AND . expression
    (90) expression -> . simple_expression relop simple_expression
    (91) expression -> . simple_expression
    (103) expression -> . expression PLUS expression
    (104) expression -> . expression MINUS expression
    (105) expression -> . expression TIMES expression
    (106) expression -> . expression DIVIDE expression
    (107) expression -> . expression MOD expression
    (132) expression -> . expression AND expression
    (133) expression -> . expression OR expression
    (134) expression -> . NOT expression
    (92) simple_expression -> . term simple_expression_tail
    (97) term -> . factor term_tail
    (61) factor -> . function_call
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . variable
    (110) factor -> . NUMBER
    (111) factor -> . STRING_LITERAL
    (60) function_call -> . ID LPAREN expression_list RPAREN
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 80
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    STRING_LITERAL  shift and go to state 87
    ID              shift and go to state 88

    expression                     shift and go to state 198
    simple_expression              shift and go to state 79
    term                           shift and go to state 81
    factor                         shift and go to state 82
    function_call                  shift and go to state 83
    variable                       shift and go to state 85

state 137

    (133) expression -> expression OR . expression
    (90) expression -> . simple_expression relop simple_expression
    (91) expression -> . simple_expression
    (103) expression -> . expression PLUS expression
    (104) expression -> . expression MINUS expression
    (105) expression -> . expression TIMES expression
    (106) expression -> . expression DIVIDE expression
    (107) expression -> . expression MOD expression
    (132) expression -> . expression AND expression
    (133) expression -> . expression OR expression
    (134) expression -> . NOT expression
    (92) simple_expression -> . term simple_expression_tail
    (97) term -> . factor term_tail
    (61) factor -> . function_call
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . variable
    (110) factor -> . NUMBER
    (111) factor -> . STRING_LITERAL
    (60) function_call -> . ID LPAREN expression_list RPAREN
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 80
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    STRING_LITERAL  shift and go to state 87
    ID              shift and go to state 88

    expression                     shift and go to state 199
    simple_expression              shift and go to state 79
    term                           shift and go to state 81
    factor                         shift and go to state 82
    function_call                  shift and go to state 83
    variable                       shift and go to state 85

state 138

    (90) expression -> simple_expression relop . simple_expression
    (92) simple_expression -> . term simple_expression_tail
    (97) term -> . factor term_tail
    (61) factor -> . function_call
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . variable
    (110) factor -> . NUMBER
    (111) factor -> . STRING_LITERAL
    (60) function_call -> . ID LPAREN expression_list RPAREN
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    STRING_LITERAL  shift and go to state 87
    ID              shift and go to state 88

    simple_expression              shift and go to state 200
    term                           shift and go to state 81
    factor                         shift and go to state 82
    function_call                  shift and go to state 83
    variable                       shift and go to state 85

state 139

    (112) relop -> LESS .

    LPAREN          reduce using rule 112 (relop -> LESS .)
    NUMBER          reduce using rule 112 (relop -> LESS .)
    STRING_LITERAL  reduce using rule 112 (relop -> LESS .)
    ID              reduce using rule 112 (relop -> LESS .)


state 140

    (113) relop -> LESS_EQUAL .

    LPAREN          reduce using rule 113 (relop -> LESS_EQUAL .)
    NUMBER          reduce using rule 113 (relop -> LESS_EQUAL .)
    STRING_LITERAL  reduce using rule 113 (relop -> LESS_EQUAL .)
    ID              reduce using rule 113 (relop -> LESS_EQUAL .)


state 141

    (114) relop -> GREAT .

    LPAREN          reduce using rule 114 (relop -> GREAT .)
    NUMBER          reduce using rule 114 (relop -> GREAT .)
    STRING_LITERAL  reduce using rule 114 (relop -> GREAT .)
    ID              reduce using rule 114 (relop -> GREAT .)


state 142

    (115) relop -> GREAT_EQUAL .

    LPAREN          reduce using rule 115 (relop -> GREAT_EQUAL .)
    NUMBER          reduce using rule 115 (relop -> GREAT_EQUAL .)
    STRING_LITERAL  reduce using rule 115 (relop -> GREAT_EQUAL .)
    ID              reduce using rule 115 (relop -> GREAT_EQUAL .)


state 143

    (116) relop -> EQUAL .

    LPAREN          reduce using rule 116 (relop -> EQUAL .)
    NUMBER          reduce using rule 116 (relop -> EQUAL .)
    STRING_LITERAL  reduce using rule 116 (relop -> EQUAL .)
    ID              reduce using rule 116 (relop -> EQUAL .)


state 144

    (117) relop -> DIFFERENT .

    LPAREN          reduce using rule 117 (relop -> DIFFERENT .)
    NUMBER          reduce using rule 117 (relop -> DIFFERENT .)
    STRING_LITERAL  reduce using rule 117 (relop -> DIFFERENT .)
    ID              reduce using rule 117 (relop -> DIFFERENT .)


state 145

    (134) expression -> NOT expression .
    (103) expression -> expression . PLUS expression
    (104) expression -> expression . MINUS expression
    (105) expression -> expression . TIMES expression
    (106) expression -> expression . DIVIDE expression
    (107) expression -> expression . MOD expression
    (132) expression -> expression . AND expression
    (133) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 134 (expression -> NOT expression .)
    DO              reduce using rule 134 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 134 (expression -> NOT expression .)
    END             reduce using rule 134 (expression -> NOT expression .)
    ELSE            reduce using rule 134 (expression -> NOT expression .)
    COMMA           reduce using rule 134 (expression -> NOT expression .)
    RPAREN          reduce using rule 134 (expression -> NOT expression .)
    RBRACKET        reduce using rule 134 (expression -> NOT expression .)
    TO              reduce using rule 134 (expression -> NOT expression .)
    DOWNTO          reduce using rule 134 (expression -> NOT expression .)
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135
    AND             shift and go to state 136
    OR              shift and go to state 137

  ! PLUS            [ reduce using rule 134 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 134 (expression -> NOT expression .) ]
  ! TIMES           [ reduce using rule 134 (expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 134 (expression -> NOT expression .) ]
  ! MOD             [ reduce using rule 134 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 134 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 134 (expression -> NOT expression .) ]


state 146

    (92) simple_expression -> term simple_expression_tail .

    LESS            reduce using rule 92 (simple_expression -> term simple_expression_tail .)
    LESS_EQUAL      reduce using rule 92 (simple_expression -> term simple_expression_tail .)
    GREAT           reduce using rule 92 (simple_expression -> term simple_expression_tail .)
    GREAT_EQUAL     reduce using rule 92 (simple_expression -> term simple_expression_tail .)
    EQUAL           reduce using rule 92 (simple_expression -> term simple_expression_tail .)
    DIFFERENT       reduce using rule 92 (simple_expression -> term simple_expression_tail .)
    THEN            reduce using rule 92 (simple_expression -> term simple_expression_tail .)
    PLUS            reduce using rule 92 (simple_expression -> term simple_expression_tail .)
    MINUS           reduce using rule 92 (simple_expression -> term simple_expression_tail .)
    TIMES           reduce using rule 92 (simple_expression -> term simple_expression_tail .)
    DIVIDE          reduce using rule 92 (simple_expression -> term simple_expression_tail .)
    MOD             reduce using rule 92 (simple_expression -> term simple_expression_tail .)
    AND             reduce using rule 92 (simple_expression -> term simple_expression_tail .)
    OR              reduce using rule 92 (simple_expression -> term simple_expression_tail .)
    DO              reduce using rule 92 (simple_expression -> term simple_expression_tail .)
    SEMICOLON       reduce using rule 92 (simple_expression -> term simple_expression_tail .)
    END             reduce using rule 92 (simple_expression -> term simple_expression_tail .)
    ELSE            reduce using rule 92 (simple_expression -> term simple_expression_tail .)
    COMMA           reduce using rule 92 (simple_expression -> term simple_expression_tail .)
    RPAREN          reduce using rule 92 (simple_expression -> term simple_expression_tail .)
    RBRACKET        reduce using rule 92 (simple_expression -> term simple_expression_tail .)
    TO              reduce using rule 92 (simple_expression -> term simple_expression_tail .)
    DOWNTO          reduce using rule 92 (simple_expression -> term simple_expression_tail .)


state 147

    (93) simple_expression_tail -> addop . term
    (97) term -> . factor term_tail
    (61) factor -> . function_call
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . variable
    (110) factor -> . NUMBER
    (111) factor -> . STRING_LITERAL
    (60) function_call -> . ID LPAREN expression_list RPAREN
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    STRING_LITERAL  shift and go to state 87
    ID              shift and go to state 88

    term                           shift and go to state 201
    factor                         shift and go to state 82
    function_call                  shift and go to state 83
    variable                       shift and go to state 85

state 148

    (94) simple_expression_tail -> empty .

    LESS            reduce using rule 94 (simple_expression_tail -> empty .)
    LESS_EQUAL      reduce using rule 94 (simple_expression_tail -> empty .)
    GREAT           reduce using rule 94 (simple_expression_tail -> empty .)
    GREAT_EQUAL     reduce using rule 94 (simple_expression_tail -> empty .)
    EQUAL           reduce using rule 94 (simple_expression_tail -> empty .)
    DIFFERENT       reduce using rule 94 (simple_expression_tail -> empty .)
    THEN            reduce using rule 94 (simple_expression_tail -> empty .)
    PLUS            reduce using rule 94 (simple_expression_tail -> empty .)
    MINUS           reduce using rule 94 (simple_expression_tail -> empty .)
    TIMES           reduce using rule 94 (simple_expression_tail -> empty .)
    DIVIDE          reduce using rule 94 (simple_expression_tail -> empty .)
    MOD             reduce using rule 94 (simple_expression_tail -> empty .)
    AND             reduce using rule 94 (simple_expression_tail -> empty .)
    OR              reduce using rule 94 (simple_expression_tail -> empty .)
    DO              reduce using rule 94 (simple_expression_tail -> empty .)
    SEMICOLON       reduce using rule 94 (simple_expression_tail -> empty .)
    END             reduce using rule 94 (simple_expression_tail -> empty .)
    ELSE            reduce using rule 94 (simple_expression_tail -> empty .)
    COMMA           reduce using rule 94 (simple_expression_tail -> empty .)
    RPAREN          reduce using rule 94 (simple_expression_tail -> empty .)
    RBRACKET        reduce using rule 94 (simple_expression_tail -> empty .)
    TO              reduce using rule 94 (simple_expression_tail -> empty .)
    DOWNTO          reduce using rule 94 (simple_expression_tail -> empty .)


state 149

    (95) addop -> PLUS .

    LPAREN          reduce using rule 95 (addop -> PLUS .)
    NUMBER          reduce using rule 95 (addop -> PLUS .)
    STRING_LITERAL  reduce using rule 95 (addop -> PLUS .)
    ID              reduce using rule 95 (addop -> PLUS .)


state 150

    (96) addop -> MINUS .

    LPAREN          reduce using rule 96 (addop -> MINUS .)
    NUMBER          reduce using rule 96 (addop -> MINUS .)
    STRING_LITERAL  reduce using rule 96 (addop -> MINUS .)
    ID              reduce using rule 96 (addop -> MINUS .)


state 151

    (97) term -> factor term_tail .

    PLUS            reduce using rule 97 (term -> factor term_tail .)
    MINUS           reduce using rule 97 (term -> factor term_tail .)
    LESS            reduce using rule 97 (term -> factor term_tail .)
    LESS_EQUAL      reduce using rule 97 (term -> factor term_tail .)
    GREAT           reduce using rule 97 (term -> factor term_tail .)
    GREAT_EQUAL     reduce using rule 97 (term -> factor term_tail .)
    EQUAL           reduce using rule 97 (term -> factor term_tail .)
    DIFFERENT       reduce using rule 97 (term -> factor term_tail .)
    THEN            reduce using rule 97 (term -> factor term_tail .)
    TIMES           reduce using rule 97 (term -> factor term_tail .)
    DIVIDE          reduce using rule 97 (term -> factor term_tail .)
    MOD             reduce using rule 97 (term -> factor term_tail .)
    AND             reduce using rule 97 (term -> factor term_tail .)
    OR              reduce using rule 97 (term -> factor term_tail .)
    DO              reduce using rule 97 (term -> factor term_tail .)
    SEMICOLON       reduce using rule 97 (term -> factor term_tail .)
    END             reduce using rule 97 (term -> factor term_tail .)
    ELSE            reduce using rule 97 (term -> factor term_tail .)
    COMMA           reduce using rule 97 (term -> factor term_tail .)
    RPAREN          reduce using rule 97 (term -> factor term_tail .)
    RBRACKET        reduce using rule 97 (term -> factor term_tail .)
    TO              reduce using rule 97 (term -> factor term_tail .)
    DOWNTO          reduce using rule 97 (term -> factor term_tail .)


state 152

    (98) term_tail -> mulop . factor
    (61) factor -> . function_call
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . variable
    (110) factor -> . NUMBER
    (111) factor -> . STRING_LITERAL
    (60) function_call -> . ID LPAREN expression_list RPAREN
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    STRING_LITERAL  shift and go to state 87
    ID              shift and go to state 88

    factor                         shift and go to state 202
    function_call                  shift and go to state 83
    variable                       shift and go to state 85

state 153

    (99) term_tail -> empty .

    PLUS            reduce using rule 99 (term_tail -> empty .)
    MINUS           reduce using rule 99 (term_tail -> empty .)
    LESS            reduce using rule 99 (term_tail -> empty .)
    LESS_EQUAL      reduce using rule 99 (term_tail -> empty .)
    GREAT           reduce using rule 99 (term_tail -> empty .)
    GREAT_EQUAL     reduce using rule 99 (term_tail -> empty .)
    EQUAL           reduce using rule 99 (term_tail -> empty .)
    DIFFERENT       reduce using rule 99 (term_tail -> empty .)
    THEN            reduce using rule 99 (term_tail -> empty .)
    TIMES           reduce using rule 99 (term_tail -> empty .)
    DIVIDE          reduce using rule 99 (term_tail -> empty .)
    MOD             reduce using rule 99 (term_tail -> empty .)
    AND             reduce using rule 99 (term_tail -> empty .)
    OR              reduce using rule 99 (term_tail -> empty .)
    DO              reduce using rule 99 (term_tail -> empty .)
    SEMICOLON       reduce using rule 99 (term_tail -> empty .)
    END             reduce using rule 99 (term_tail -> empty .)
    ELSE            reduce using rule 99 (term_tail -> empty .)
    COMMA           reduce using rule 99 (term_tail -> empty .)
    RPAREN          reduce using rule 99 (term_tail -> empty .)
    RBRACKET        reduce using rule 99 (term_tail -> empty .)
    TO              reduce using rule 99 (term_tail -> empty .)
    DOWNTO          reduce using rule 99 (term_tail -> empty .)


state 154

    (100) mulop -> TIMES .

    LPAREN          reduce using rule 100 (mulop -> TIMES .)
    NUMBER          reduce using rule 100 (mulop -> TIMES .)
    STRING_LITERAL  reduce using rule 100 (mulop -> TIMES .)
    ID              reduce using rule 100 (mulop -> TIMES .)


state 155

    (101) mulop -> DIVIDE .

    LPAREN          reduce using rule 101 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 101 (mulop -> DIVIDE .)
    STRING_LITERAL  reduce using rule 101 (mulop -> DIVIDE .)
    ID              reduce using rule 101 (mulop -> DIVIDE .)


state 156

    (102) mulop -> DIV .

    LPAREN          reduce using rule 102 (mulop -> DIV .)
    NUMBER          reduce using rule 102 (mulop -> DIV .)
    STRING_LITERAL  reduce using rule 102 (mulop -> DIV .)
    ID              reduce using rule 102 (mulop -> DIV .)


state 157

    (108) factor -> LPAREN expression . RPAREN
    (103) expression -> expression . PLUS expression
    (104) expression -> expression . MINUS expression
    (105) expression -> expression . TIMES expression
    (106) expression -> expression . DIVIDE expression
    (107) expression -> expression . MOD expression
    (132) expression -> expression . AND expression
    (133) expression -> expression . OR expression

    RPAREN          shift and go to state 203
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135
    AND             shift and go to state 136
    OR              shift and go to state 137


state 158

    (60) function_call -> ID LPAREN . expression_list RPAREN
    (86) expression_list -> . expression expression_list_tail
    (89) expression_list -> . empty
    (90) expression -> . simple_expression relop simple_expression
    (91) expression -> . simple_expression
    (103) expression -> . expression PLUS expression
    (104) expression -> . expression MINUS expression
    (105) expression -> . expression TIMES expression
    (106) expression -> . expression DIVIDE expression
    (107) expression -> . expression MOD expression
    (132) expression -> . expression AND expression
    (133) expression -> . expression OR expression
    (134) expression -> . NOT expression
    (118) empty -> .
    (92) simple_expression -> . term simple_expression_tail
    (97) term -> . factor term_tail
    (61) factor -> . function_call
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . variable
    (110) factor -> . NUMBER
    (111) factor -> . STRING_LITERAL
    (60) function_call -> . ID LPAREN expression_list RPAREN
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 80
    RPAREN          reduce using rule 118 (empty -> .)
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    STRING_LITERAL  shift and go to state 87
    ID              shift and go to state 88

    expression_list                shift and go to state 204
    expression                     shift and go to state 124
    empty                          shift and go to state 125
    simple_expression              shift and go to state 79
    term                           shift and go to state 81
    factor                         shift and go to state 82
    function_call                  shift and go to state 83
    variable                       shift and go to state 85

state 159

    (84) while_statement -> WHILE expression DO . statement
    (70) statement -> . if_statement
    (71) statement -> . assignment_statement
    (72) statement -> . while_statement
    (73) statement -> . procedure_call
    (74) statement -> . compound_statement
    (75) statement -> . for_statement
    (76) statement -> . empty
    (119) statement -> . READLN
    (120) statement -> . READLN LPAREN variable RPAREN
    (121) statement -> . READLN LBRACKET variable RBRACKET
    (122) statement -> . WRITELN LPAREN expression_list RPAREN
    (123) statement -> . WRITE LPAREN expression_list RPAREN
    (124) statement -> . USES ID SEMICOLON
    (77) if_statement -> . IF expression THEN statement ELSE statement
    (78) if_statement -> . IF expression THEN statement
    (81) assignment_statement -> . variable COLON_EQUAL expression
    (84) while_statement -> . WHILE expression DO statement
    (85) procedure_call -> . ID LPAREN expression_list RPAREN
    (66) compound_statement -> . BEGIN statement_list END
    (79) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (80) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (118) empty -> .
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    READLN          shift and go to state 47
    WRITELN         shift and go to state 49
    WRITE           shift and go to state 50
    USES            shift and go to state 51
    IF              shift and go to state 53
    WHILE           shift and go to state 54
    ID              shift and go to state 52
    BEGIN           shift and go to state 23
    FOR             shift and go to state 55
    ELSE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    END             reduce using rule 118 (empty -> .)

    statement                      shift and go to state 205
    if_statement                   shift and go to state 40
    assignment_statement           shift and go to state 41
    while_statement                shift and go to state 42
    procedure_call                 shift and go to state 43
    compound_statement             shift and go to state 44
    for_statement                  shift and go to state 45
    empty                          shift and go to state 46
    variable                       shift and go to state 48

state 160

    (79) for_statement -> FOR ID COLON_EQUAL . expression TO expression DO statement
    (80) for_statement -> FOR ID COLON_EQUAL . expression DOWNTO expression DO statement
    (90) expression -> . simple_expression relop simple_expression
    (91) expression -> . simple_expression
    (103) expression -> . expression PLUS expression
    (104) expression -> . expression MINUS expression
    (105) expression -> . expression TIMES expression
    (106) expression -> . expression DIVIDE expression
    (107) expression -> . expression MOD expression
    (132) expression -> . expression AND expression
    (133) expression -> . expression OR expression
    (134) expression -> . NOT expression
    (92) simple_expression -> . term simple_expression_tail
    (97) term -> . factor term_tail
    (61) factor -> . function_call
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . variable
    (110) factor -> . NUMBER
    (111) factor -> . STRING_LITERAL
    (60) function_call -> . ID LPAREN expression_list RPAREN
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 80
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    STRING_LITERAL  shift and go to state 87
    ID              shift and go to state 88

    expression                     shift and go to state 206
    simple_expression              shift and go to state 79
    term                           shift and go to state 81
    factor                         shift and go to state 82
    function_call                  shift and go to state 83
    variable                       shift and go to state 85

state 161

    (128) constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .

    ID              reduce using rule 128 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    USES            reduce using rule 128 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    CONST           reduce using rule 128 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    TYPE            reduce using rule 128 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    VAR             reduce using rule 128 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    PROCEDURE       reduce using rule 128 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    FUNCTION        reduce using rule 128 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    BEGIN           reduce using rule 128 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)


state 162

    (129) constant -> ID EQUAL NUMBER SEMICOLON .

    ID              reduce using rule 129 (constant -> ID EQUAL NUMBER SEMICOLON .)
    USES            reduce using rule 129 (constant -> ID EQUAL NUMBER SEMICOLON .)
    CONST           reduce using rule 129 (constant -> ID EQUAL NUMBER SEMICOLON .)
    TYPE            reduce using rule 129 (constant -> ID EQUAL NUMBER SEMICOLON .)
    VAR             reduce using rule 129 (constant -> ID EQUAL NUMBER SEMICOLON .)
    PROCEDURE       reduce using rule 129 (constant -> ID EQUAL NUMBER SEMICOLON .)
    FUNCTION        reduce using rule 129 (constant -> ID EQUAL NUMBER SEMICOLON .)
    BEGIN           reduce using rule 129 (constant -> ID EQUAL NUMBER SEMICOLON .)


state 163

    (130) constant -> ID EQUAL STRING_LITERAL SEMICOLON .

    ID              reduce using rule 130 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    USES            reduce using rule 130 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    CONST           reduce using rule 130 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    TYPE            reduce using rule 130 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    VAR             reduce using rule 130 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    PROCEDURE       reduce using rule 130 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    FUNCTION        reduce using rule 130 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    BEGIN           reduce using rule 130 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)


state 164

    (131) constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .

    ID              reduce using rule 131 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    USES            reduce using rule 131 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    CONST           reduce using rule 131 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    TYPE            reduce using rule 131 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    VAR             reduce using rule 131 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    PROCEDURE       reduce using rule 131 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    FUNCTION        reduce using rule 131 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    BEGIN           reduce using rule 131 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)


state 165

    (21) type_definition -> ID EQUAL type_specifier SEMICOLON .

    ID              reduce using rule 21 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    USES            reduce using rule 21 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    CONST           reduce using rule 21 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    TYPE            reduce using rule 21 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    VAR             reduce using rule 21 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 21 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 21 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    BEGIN           reduce using rule 21 (type_definition -> ID EQUAL type_specifier SEMICOLON .)


state 166

    (22) type_specifier -> ARRAY LBRACKET . type_expression RBRACKET OF type_specifier
    (35) type_expression -> . type_expression COMMA subrange
    (36) type_expression -> . subrange
    (37) subrange -> . NUMBER DOTDOT NUMBER

    NUMBER          shift and go to state 110

    type_expression                shift and go to state 207
    subrange                       shift and go to state 208

state 167

    (24) type_specifier -> FILE OF . type_specifier
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (34) type_specifier -> . ID
    (54) type_specifier -> . LONGINT
    (37) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 98
    FILE            shift and go to state 100
    SET             shift and go to state 101
    RECORD          shift and go to state 102
    OBJECT          shift and go to state 103
    LPAREN          shift and go to state 104
    BOOLEAN_LITERAL shift and go to state 105
    INTEGER         shift and go to state 106
    BYTE            shift and go to state 107
    CHAR            shift and go to state 108
    STRING          shift and go to state 109
    ID              shift and go to state 96
    LONGINT         shift and go to state 111
    NUMBER          shift and go to state 110

    type_specifier                 shift and go to state 209
    subrange                       shift and go to state 99

state 168

    (25) type_specifier -> SET OF . type_specifier
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (34) type_specifier -> . ID
    (54) type_specifier -> . LONGINT
    (37) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 98
    FILE            shift and go to state 100
    SET             shift and go to state 101
    RECORD          shift and go to state 102
    OBJECT          shift and go to state 103
    LPAREN          shift and go to state 104
    BOOLEAN_LITERAL shift and go to state 105
    INTEGER         shift and go to state 106
    BYTE            shift and go to state 107
    CHAR            shift and go to state 108
    STRING          shift and go to state 109
    ID              shift and go to state 96
    LONGINT         shift and go to state 111
    NUMBER          shift and go to state 110

    type_specifier                 shift and go to state 210
    subrange                       shift and go to state 99

state 169

    (26) type_specifier -> RECORD field_list . case_part END
    (38) field_list -> field_list . field
    (42) case_part -> . CASE ID COLON type_specifier OF case_list SEMICOLON
    (43) case_part -> . empty
    (40) field -> . id_list COLON type_specifier SEMICOLON
    (41) field -> . id_list COLON type_specifier
    (118) empty -> .
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    CASE            shift and go to state 213
    END             reduce using rule 118 (empty -> .)
    ID              shift and go to state 26

    case_part                      shift and go to state 211
    field                          shift and go to state 212
    empty                          shift and go to state 214
    id_list                        shift and go to state 171

state 170

    (39) field_list -> field .

    CASE            reduce using rule 39 (field_list -> field .)
    ID              reduce using rule 39 (field_list -> field .)
    END             reduce using rule 39 (field_list -> field .)
    CONSTRUCTOR     reduce using rule 39 (field_list -> field .)
    PROCEDURE       reduce using rule 39 (field_list -> field .)
    FUNCTION        reduce using rule 39 (field_list -> field .)
    DESTRUCTOR      reduce using rule 39 (field_list -> field .)
    RPAREN          reduce using rule 39 (field_list -> field .)


state 171

    (40) field -> id_list . COLON type_specifier SEMICOLON
    (41) field -> id_list . COLON type_specifier
    (12) id_list -> id_list . COMMA ID

    COLON           shift and go to state 215
    COMMA           shift and go to state 57


state 172

    (27) type_specifier -> OBJECT field_list . method_list END
    (38) field_list -> field_list . field
    (47) method_list -> . method_list method
    (48) method_list -> . method
    (49) method_list -> . empty
    (40) field -> . id_list COLON type_specifier SEMICOLON
    (41) field -> . id_list COLON type_specifier
    (50) method -> . CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON
    (51) method -> . PROCEDURE ID LPAREN field_list RPAREN SEMICOLON
    (52) method -> . FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON
    (53) method -> . DESTRUCTOR ID SEMICOLON
    (118) empty -> .
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for PROCEDURE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DESTRUCTOR resolved as shift
    CONSTRUCTOR     shift and go to state 219
    PROCEDURE       shift and go to state 220
    FUNCTION        shift and go to state 221
    DESTRUCTOR      shift and go to state 222
    END             reduce using rule 118 (empty -> .)
    ID              shift and go to state 26

  ! CONSTRUCTOR     [ reduce using rule 118 (empty -> .) ]
  ! PROCEDURE       [ reduce using rule 118 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 118 (empty -> .) ]
  ! DESTRUCTOR      [ reduce using rule 118 (empty -> .) ]

    method_list                    shift and go to state 216
    field                          shift and go to state 212
    method                         shift and go to state 217
    empty                          shift and go to state 218
    id_list                        shift and go to state 171

state 173

    (28) type_specifier -> LPAREN id_list . RPAREN
    (12) id_list -> id_list . COMMA ID

    RPAREN          shift and go to state 223
    COMMA           shift and go to state 57


state 174

    (33) type_specifier -> STRING LBRACKET . NUMBER RBRACKET

    NUMBER          shift and go to state 224


state 175

    (37) subrange -> NUMBER DOTDOT . NUMBER

    NUMBER          shift and go to state 225


state 176

    (16) declaration -> id_list COLON type_specifier SEMICOLON .

    ID              reduce using rule 16 (declaration -> id_list COLON type_specifier SEMICOLON .)
    USES            reduce using rule 16 (declaration -> id_list COLON type_specifier SEMICOLON .)
    CONST           reduce using rule 16 (declaration -> id_list COLON type_specifier SEMICOLON .)
    TYPE            reduce using rule 16 (declaration -> id_list COLON type_specifier SEMICOLON .)
    VAR             reduce using rule 16 (declaration -> id_list COLON type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 16 (declaration -> id_list COLON type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 16 (declaration -> id_list COLON type_specifier SEMICOLON .)
    BEGIN           reduce using rule 16 (declaration -> id_list COLON type_specifier SEMICOLON .)


state 177

    (57) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN . SEMICOLON block SEMICOLON
    (58) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN . SEMICOLON block DOT

    SEMICOLON       shift and go to state 226


state 178

    (63) parameter_list -> parameter_list SEMICOLON . parameter
    (64) parameter -> . id_list COLON type_specifier
    (65) parameter -> . VAR id_list COLON type_specifier
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    VAR             shift and go to state 116
    ID              shift and go to state 26

    parameter                      shift and go to state 227
    id_list                        shift and go to state 115

state 179

    (64) parameter -> id_list COLON . type_specifier
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (34) type_specifier -> . ID
    (54) type_specifier -> . LONGINT
    (37) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 98
    FILE            shift and go to state 100
    SET             shift and go to state 101
    RECORD          shift and go to state 102
    OBJECT          shift and go to state 103
    LPAREN          shift and go to state 104
    BOOLEAN_LITERAL shift and go to state 105
    INTEGER         shift and go to state 106
    BYTE            shift and go to state 107
    CHAR            shift and go to state 108
    STRING          shift and go to state 109
    ID              shift and go to state 96
    LONGINT         shift and go to state 111
    NUMBER          shift and go to state 110

    type_specifier                 shift and go to state 228
    subrange                       shift and go to state 99

state 180

    (65) parameter -> VAR id_list . COLON type_specifier
    (12) id_list -> id_list . COMMA ID

    COLON           shift and go to state 229
    COMMA           shift and go to state 57


state 181

    (59) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN . COLON type_specifier SEMICOLON block SEMICOLON

    COLON           shift and go to state 230


state 182

    (68) statement_list_tail -> SEMICOLON statement statement_list_tail .

    END             reduce using rule 68 (statement_list_tail -> SEMICOLON statement statement_list_tail .)


state 183

    (120) statement -> READLN LPAREN variable RPAREN .

    SEMICOLON       reduce using rule 120 (statement -> READLN LPAREN variable RPAREN .)
    END             reduce using rule 120 (statement -> READLN LPAREN variable RPAREN .)
    ELSE            reduce using rule 120 (statement -> READLN LPAREN variable RPAREN .)


state 184

    (121) statement -> READLN LBRACKET variable RBRACKET .

    SEMICOLON       reduce using rule 121 (statement -> READLN LBRACKET variable RBRACKET .)
    END             reduce using rule 121 (statement -> READLN LBRACKET variable RBRACKET .)
    ELSE            reduce using rule 121 (statement -> READLN LBRACKET variable RBRACKET .)


state 185

    (122) statement -> WRITELN LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 122 (statement -> WRITELN LPAREN expression_list RPAREN .)
    END             reduce using rule 122 (statement -> WRITELN LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 122 (statement -> WRITELN LPAREN expression_list RPAREN .)


state 186

    (86) expression_list -> expression expression_list_tail .

    RPAREN          reduce using rule 86 (expression_list -> expression expression_list_tail .)


state 187

    (87) expression_list_tail -> COMMA . expression expression_list_tail
    (90) expression -> . simple_expression relop simple_expression
    (91) expression -> . simple_expression
    (103) expression -> . expression PLUS expression
    (104) expression -> . expression MINUS expression
    (105) expression -> . expression TIMES expression
    (106) expression -> . expression DIVIDE expression
    (107) expression -> . expression MOD expression
    (132) expression -> . expression AND expression
    (133) expression -> . expression OR expression
    (134) expression -> . NOT expression
    (92) simple_expression -> . term simple_expression_tail
    (97) term -> . factor term_tail
    (61) factor -> . function_call
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . variable
    (110) factor -> . NUMBER
    (111) factor -> . STRING_LITERAL
    (60) function_call -> . ID LPAREN expression_list RPAREN
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 80
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    STRING_LITERAL  shift and go to state 87
    ID              shift and go to state 88

    expression                     shift and go to state 231
    simple_expression              shift and go to state 79
    term                           shift and go to state 81
    factor                         shift and go to state 82
    function_call                  shift and go to state 83
    variable                       shift and go to state 85

state 188

    (88) expression_list_tail -> empty .

    RPAREN          reduce using rule 88 (expression_list_tail -> empty .)


state 189

    (123) statement -> WRITE LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 123 (statement -> WRITE LPAREN expression_list RPAREN .)
    END             reduce using rule 123 (statement -> WRITE LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 123 (statement -> WRITE LPAREN expression_list RPAREN .)


state 190

    (85) procedure_call -> ID LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 85 (procedure_call -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 85 (procedure_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 85 (procedure_call -> ID LPAREN expression_list RPAREN .)


state 191

    (83) variable -> ID LBRACKET expression RBRACKET .

    COLON_EQUAL     reduce using rule 83 (variable -> ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 83 (variable -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 83 (variable -> ID LBRACKET expression RBRACKET .)
    DIV             reduce using rule 83 (variable -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 83 (variable -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 83 (variable -> ID LBRACKET expression RBRACKET .)
    LESS            reduce using rule 83 (variable -> ID LBRACKET expression RBRACKET .)
    LESS_EQUAL      reduce using rule 83 (variable -> ID LBRACKET expression RBRACKET .)
    GREAT           reduce using rule 83 (variable -> ID LBRACKET expression RBRACKET .)
    GREAT_EQUAL     reduce using rule 83 (variable -> ID LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 83 (variable -> ID LBRACKET expression RBRACKET .)
    DIFFERENT       reduce using rule 83 (variable -> ID LBRACKET expression RBRACKET .)
    THEN            reduce using rule 83 (variable -> ID LBRACKET expression RBRACKET .)
    MOD             reduce using rule 83 (variable -> ID LBRACKET expression RBRACKET .)
    AND             reduce using rule 83 (variable -> ID LBRACKET expression RBRACKET .)
    OR              reduce using rule 83 (variable -> ID LBRACKET expression RBRACKET .)
    DO              reduce using rule 83 (variable -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 83 (variable -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 83 (variable -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 83 (variable -> ID LBRACKET expression RBRACKET .)
    END             reduce using rule 83 (variable -> ID LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 83 (variable -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 83 (variable -> ID LBRACKET expression RBRACKET .)
    TO              reduce using rule 83 (variable -> ID LBRACKET expression RBRACKET .)
    DOWNTO          reduce using rule 83 (variable -> ID LBRACKET expression RBRACKET .)


state 192

    (77) if_statement -> IF expression THEN statement . ELSE statement
    (78) if_statement -> IF expression THEN statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 232
    SEMICOLON       reduce using rule 78 (if_statement -> IF expression THEN statement .)
    END             reduce using rule 78 (if_statement -> IF expression THEN statement .)

  ! ELSE            [ reduce using rule 78 (if_statement -> IF expression THEN statement .) ]


state 193

    (103) expression -> expression PLUS expression .
    (103) expression -> expression . PLUS expression
    (104) expression -> expression . MINUS expression
    (105) expression -> expression . TIMES expression
    (106) expression -> expression . DIVIDE expression
    (107) expression -> expression . MOD expression
    (132) expression -> expression . AND expression
    (133) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 103 (expression -> expression PLUS expression .)
    DO              reduce using rule 103 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 103 (expression -> expression PLUS expression .)
    END             reduce using rule 103 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 103 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 103 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 103 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 103 (expression -> expression PLUS expression .)
    TO              reduce using rule 103 (expression -> expression PLUS expression .)
    DOWNTO          reduce using rule 103 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135
    AND             shift and go to state 136
    OR              shift and go to state 137

  ! PLUS            [ reduce using rule 103 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 103 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 103 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 103 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 103 (expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 103 (expression -> expression PLUS expression .) ]
  ! OR              [ reduce using rule 103 (expression -> expression PLUS expression .) ]


state 194

    (104) expression -> expression MINUS expression .
    (103) expression -> expression . PLUS expression
    (104) expression -> expression . MINUS expression
    (105) expression -> expression . TIMES expression
    (106) expression -> expression . DIVIDE expression
    (107) expression -> expression . MOD expression
    (132) expression -> expression . AND expression
    (133) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 104 (expression -> expression MINUS expression .)
    DO              reduce using rule 104 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 104 (expression -> expression MINUS expression .)
    END             reduce using rule 104 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 104 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 104 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 104 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 104 (expression -> expression MINUS expression .)
    TO              reduce using rule 104 (expression -> expression MINUS expression .)
    DOWNTO          reduce using rule 104 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135
    AND             shift and go to state 136
    OR              shift and go to state 137

  ! PLUS            [ reduce using rule 104 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 104 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 104 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 104 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 104 (expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 104 (expression -> expression MINUS expression .) ]
  ! OR              [ reduce using rule 104 (expression -> expression MINUS expression .) ]


state 195

    (105) expression -> expression TIMES expression .
    (103) expression -> expression . PLUS expression
    (104) expression -> expression . MINUS expression
    (105) expression -> expression . TIMES expression
    (106) expression -> expression . DIVIDE expression
    (107) expression -> expression . MOD expression
    (132) expression -> expression . AND expression
    (133) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 105 (expression -> expression TIMES expression .)
    DO              reduce using rule 105 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 105 (expression -> expression TIMES expression .)
    END             reduce using rule 105 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 105 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 105 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 105 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 105 (expression -> expression TIMES expression .)
    TO              reduce using rule 105 (expression -> expression TIMES expression .)
    DOWNTO          reduce using rule 105 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135
    AND             shift and go to state 136
    OR              shift and go to state 137

  ! PLUS            [ reduce using rule 105 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 105 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 105 (expression -> expression TIMES expression .) ]
  ! DIVIDE          [ reduce using rule 105 (expression -> expression TIMES expression .) ]
  ! MOD             [ reduce using rule 105 (expression -> expression TIMES expression .) ]
  ! AND             [ reduce using rule 105 (expression -> expression TIMES expression .) ]
  ! OR              [ reduce using rule 105 (expression -> expression TIMES expression .) ]


state 196

    (106) expression -> expression DIVIDE expression .
    (103) expression -> expression . PLUS expression
    (104) expression -> expression . MINUS expression
    (105) expression -> expression . TIMES expression
    (106) expression -> expression . DIVIDE expression
    (107) expression -> expression . MOD expression
    (132) expression -> expression . AND expression
    (133) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 106 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 106 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 106 (expression -> expression DIVIDE expression .)
    END             reduce using rule 106 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 106 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 106 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 106 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 106 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 106 (expression -> expression DIVIDE expression .)
    DOWNTO          reduce using rule 106 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135
    AND             shift and go to state 136
    OR              shift and go to state 137

  ! PLUS            [ reduce using rule 106 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 106 (expression -> expression DIVIDE expression .) ]
  ! TIMES           [ reduce using rule 106 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 106 (expression -> expression DIVIDE expression .) ]
  ! MOD             [ reduce using rule 106 (expression -> expression DIVIDE expression .) ]
  ! AND             [ reduce using rule 106 (expression -> expression DIVIDE expression .) ]
  ! OR              [ reduce using rule 106 (expression -> expression DIVIDE expression .) ]


state 197

    (107) expression -> expression MOD expression .
    (103) expression -> expression . PLUS expression
    (104) expression -> expression . MINUS expression
    (105) expression -> expression . TIMES expression
    (106) expression -> expression . DIVIDE expression
    (107) expression -> expression . MOD expression
    (132) expression -> expression . AND expression
    (133) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 107 (expression -> expression MOD expression .)
    DO              reduce using rule 107 (expression -> expression MOD expression .)
    SEMICOLON       reduce using rule 107 (expression -> expression MOD expression .)
    END             reduce using rule 107 (expression -> expression MOD expression .)
    ELSE            reduce using rule 107 (expression -> expression MOD expression .)
    COMMA           reduce using rule 107 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 107 (expression -> expression MOD expression .)
    RBRACKET        reduce using rule 107 (expression -> expression MOD expression .)
    TO              reduce using rule 107 (expression -> expression MOD expression .)
    DOWNTO          reduce using rule 107 (expression -> expression MOD expression .)
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135
    AND             shift and go to state 136
    OR              shift and go to state 137

  ! PLUS            [ reduce using rule 107 (expression -> expression MOD expression .) ]
  ! MINUS           [ reduce using rule 107 (expression -> expression MOD expression .) ]
  ! TIMES           [ reduce using rule 107 (expression -> expression MOD expression .) ]
  ! DIVIDE          [ reduce using rule 107 (expression -> expression MOD expression .) ]
  ! MOD             [ reduce using rule 107 (expression -> expression MOD expression .) ]
  ! AND             [ reduce using rule 107 (expression -> expression MOD expression .) ]
  ! OR              [ reduce using rule 107 (expression -> expression MOD expression .) ]


state 198

    (132) expression -> expression AND expression .
    (103) expression -> expression . PLUS expression
    (104) expression -> expression . MINUS expression
    (105) expression -> expression . TIMES expression
    (106) expression -> expression . DIVIDE expression
    (107) expression -> expression . MOD expression
    (132) expression -> expression . AND expression
    (133) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 132 (expression -> expression AND expression .)
    DO              reduce using rule 132 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 132 (expression -> expression AND expression .)
    END             reduce using rule 132 (expression -> expression AND expression .)
    ELSE            reduce using rule 132 (expression -> expression AND expression .)
    COMMA           reduce using rule 132 (expression -> expression AND expression .)
    RPAREN          reduce using rule 132 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 132 (expression -> expression AND expression .)
    TO              reduce using rule 132 (expression -> expression AND expression .)
    DOWNTO          reduce using rule 132 (expression -> expression AND expression .)
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135
    AND             shift and go to state 136
    OR              shift and go to state 137

  ! PLUS            [ reduce using rule 132 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 132 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 132 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 132 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 132 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 132 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 132 (expression -> expression AND expression .) ]


state 199

    (133) expression -> expression OR expression .
    (103) expression -> expression . PLUS expression
    (104) expression -> expression . MINUS expression
    (105) expression -> expression . TIMES expression
    (106) expression -> expression . DIVIDE expression
    (107) expression -> expression . MOD expression
    (132) expression -> expression . AND expression
    (133) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 133 (expression -> expression OR expression .)
    DO              reduce using rule 133 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 133 (expression -> expression OR expression .)
    END             reduce using rule 133 (expression -> expression OR expression .)
    ELSE            reduce using rule 133 (expression -> expression OR expression .)
    COMMA           reduce using rule 133 (expression -> expression OR expression .)
    RPAREN          reduce using rule 133 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 133 (expression -> expression OR expression .)
    TO              reduce using rule 133 (expression -> expression OR expression .)
    DOWNTO          reduce using rule 133 (expression -> expression OR expression .)
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135
    AND             shift and go to state 136
    OR              shift and go to state 137

  ! PLUS            [ reduce using rule 133 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 133 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 133 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 133 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 133 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 133 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 133 (expression -> expression OR expression .) ]


state 200

    (90) expression -> simple_expression relop simple_expression .

    THEN            reduce using rule 90 (expression -> simple_expression relop simple_expression .)
    PLUS            reduce using rule 90 (expression -> simple_expression relop simple_expression .)
    MINUS           reduce using rule 90 (expression -> simple_expression relop simple_expression .)
    TIMES           reduce using rule 90 (expression -> simple_expression relop simple_expression .)
    DIVIDE          reduce using rule 90 (expression -> simple_expression relop simple_expression .)
    MOD             reduce using rule 90 (expression -> simple_expression relop simple_expression .)
    AND             reduce using rule 90 (expression -> simple_expression relop simple_expression .)
    OR              reduce using rule 90 (expression -> simple_expression relop simple_expression .)
    DO              reduce using rule 90 (expression -> simple_expression relop simple_expression .)
    SEMICOLON       reduce using rule 90 (expression -> simple_expression relop simple_expression .)
    END             reduce using rule 90 (expression -> simple_expression relop simple_expression .)
    ELSE            reduce using rule 90 (expression -> simple_expression relop simple_expression .)
    COMMA           reduce using rule 90 (expression -> simple_expression relop simple_expression .)
    RPAREN          reduce using rule 90 (expression -> simple_expression relop simple_expression .)
    RBRACKET        reduce using rule 90 (expression -> simple_expression relop simple_expression .)
    TO              reduce using rule 90 (expression -> simple_expression relop simple_expression .)
    DOWNTO          reduce using rule 90 (expression -> simple_expression relop simple_expression .)


state 201

    (93) simple_expression_tail -> addop term .

    LESS            reduce using rule 93 (simple_expression_tail -> addop term .)
    LESS_EQUAL      reduce using rule 93 (simple_expression_tail -> addop term .)
    GREAT           reduce using rule 93 (simple_expression_tail -> addop term .)
    GREAT_EQUAL     reduce using rule 93 (simple_expression_tail -> addop term .)
    EQUAL           reduce using rule 93 (simple_expression_tail -> addop term .)
    DIFFERENT       reduce using rule 93 (simple_expression_tail -> addop term .)
    THEN            reduce using rule 93 (simple_expression_tail -> addop term .)
    PLUS            reduce using rule 93 (simple_expression_tail -> addop term .)
    MINUS           reduce using rule 93 (simple_expression_tail -> addop term .)
    TIMES           reduce using rule 93 (simple_expression_tail -> addop term .)
    DIVIDE          reduce using rule 93 (simple_expression_tail -> addop term .)
    MOD             reduce using rule 93 (simple_expression_tail -> addop term .)
    AND             reduce using rule 93 (simple_expression_tail -> addop term .)
    OR              reduce using rule 93 (simple_expression_tail -> addop term .)
    DO              reduce using rule 93 (simple_expression_tail -> addop term .)
    SEMICOLON       reduce using rule 93 (simple_expression_tail -> addop term .)
    END             reduce using rule 93 (simple_expression_tail -> addop term .)
    ELSE            reduce using rule 93 (simple_expression_tail -> addop term .)
    COMMA           reduce using rule 93 (simple_expression_tail -> addop term .)
    RPAREN          reduce using rule 93 (simple_expression_tail -> addop term .)
    RBRACKET        reduce using rule 93 (simple_expression_tail -> addop term .)
    TO              reduce using rule 93 (simple_expression_tail -> addop term .)
    DOWNTO          reduce using rule 93 (simple_expression_tail -> addop term .)


state 202

    (98) term_tail -> mulop factor .

    PLUS            reduce using rule 98 (term_tail -> mulop factor .)
    MINUS           reduce using rule 98 (term_tail -> mulop factor .)
    LESS            reduce using rule 98 (term_tail -> mulop factor .)
    LESS_EQUAL      reduce using rule 98 (term_tail -> mulop factor .)
    GREAT           reduce using rule 98 (term_tail -> mulop factor .)
    GREAT_EQUAL     reduce using rule 98 (term_tail -> mulop factor .)
    EQUAL           reduce using rule 98 (term_tail -> mulop factor .)
    DIFFERENT       reduce using rule 98 (term_tail -> mulop factor .)
    THEN            reduce using rule 98 (term_tail -> mulop factor .)
    TIMES           reduce using rule 98 (term_tail -> mulop factor .)
    DIVIDE          reduce using rule 98 (term_tail -> mulop factor .)
    MOD             reduce using rule 98 (term_tail -> mulop factor .)
    AND             reduce using rule 98 (term_tail -> mulop factor .)
    OR              reduce using rule 98 (term_tail -> mulop factor .)
    DO              reduce using rule 98 (term_tail -> mulop factor .)
    SEMICOLON       reduce using rule 98 (term_tail -> mulop factor .)
    END             reduce using rule 98 (term_tail -> mulop factor .)
    ELSE            reduce using rule 98 (term_tail -> mulop factor .)
    COMMA           reduce using rule 98 (term_tail -> mulop factor .)
    RPAREN          reduce using rule 98 (term_tail -> mulop factor .)
    RBRACKET        reduce using rule 98 (term_tail -> mulop factor .)
    TO              reduce using rule 98 (term_tail -> mulop factor .)
    DOWNTO          reduce using rule 98 (term_tail -> mulop factor .)


state 203

    (108) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    DIV             reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    LESS_EQUAL      reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    GREAT           reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    GREAT_EQUAL     reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    DIFFERENT       reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 108 (factor -> LPAREN expression RPAREN .)


state 204

    (60) function_call -> ID LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 233


state 205

    (84) while_statement -> WHILE expression DO statement .

    SEMICOLON       reduce using rule 84 (while_statement -> WHILE expression DO statement .)
    END             reduce using rule 84 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 84 (while_statement -> WHILE expression DO statement .)


state 206

    (79) for_statement -> FOR ID COLON_EQUAL expression . TO expression DO statement
    (80) for_statement -> FOR ID COLON_EQUAL expression . DOWNTO expression DO statement
    (103) expression -> expression . PLUS expression
    (104) expression -> expression . MINUS expression
    (105) expression -> expression . TIMES expression
    (106) expression -> expression . DIVIDE expression
    (107) expression -> expression . MOD expression
    (132) expression -> expression . AND expression
    (133) expression -> expression . OR expression

    TO              shift and go to state 234
    DOWNTO          shift and go to state 235
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135
    AND             shift and go to state 136
    OR              shift and go to state 137


state 207

    (22) type_specifier -> ARRAY LBRACKET type_expression . RBRACKET OF type_specifier
    (35) type_expression -> type_expression . COMMA subrange

    RBRACKET        shift and go to state 236
    COMMA           shift and go to state 237


state 208

    (36) type_expression -> subrange .

    RBRACKET        reduce using rule 36 (type_expression -> subrange .)
    COMMA           reduce using rule 36 (type_expression -> subrange .)


state 209

    (24) type_specifier -> FILE OF type_specifier .

    SEMICOLON       reduce using rule 24 (type_specifier -> FILE OF type_specifier .)
    RPAREN          reduce using rule 24 (type_specifier -> FILE OF type_specifier .)
    CASE            reduce using rule 24 (type_specifier -> FILE OF type_specifier .)
    ID              reduce using rule 24 (type_specifier -> FILE OF type_specifier .)
    END             reduce using rule 24 (type_specifier -> FILE OF type_specifier .)
    CONSTRUCTOR     reduce using rule 24 (type_specifier -> FILE OF type_specifier .)
    PROCEDURE       reduce using rule 24 (type_specifier -> FILE OF type_specifier .)
    FUNCTION        reduce using rule 24 (type_specifier -> FILE OF type_specifier .)
    DESTRUCTOR      reduce using rule 24 (type_specifier -> FILE OF type_specifier .)
    OF              reduce using rule 24 (type_specifier -> FILE OF type_specifier .)


state 210

    (25) type_specifier -> SET OF type_specifier .

    SEMICOLON       reduce using rule 25 (type_specifier -> SET OF type_specifier .)
    RPAREN          reduce using rule 25 (type_specifier -> SET OF type_specifier .)
    CASE            reduce using rule 25 (type_specifier -> SET OF type_specifier .)
    ID              reduce using rule 25 (type_specifier -> SET OF type_specifier .)
    END             reduce using rule 25 (type_specifier -> SET OF type_specifier .)
    CONSTRUCTOR     reduce using rule 25 (type_specifier -> SET OF type_specifier .)
    PROCEDURE       reduce using rule 25 (type_specifier -> SET OF type_specifier .)
    FUNCTION        reduce using rule 25 (type_specifier -> SET OF type_specifier .)
    DESTRUCTOR      reduce using rule 25 (type_specifier -> SET OF type_specifier .)
    OF              reduce using rule 25 (type_specifier -> SET OF type_specifier .)


state 211

    (26) type_specifier -> RECORD field_list case_part . END

    END             shift and go to state 238


state 212

    (38) field_list -> field_list field .

    CASE            reduce using rule 38 (field_list -> field_list field .)
    ID              reduce using rule 38 (field_list -> field_list field .)
    END             reduce using rule 38 (field_list -> field_list field .)
    CONSTRUCTOR     reduce using rule 38 (field_list -> field_list field .)
    PROCEDURE       reduce using rule 38 (field_list -> field_list field .)
    FUNCTION        reduce using rule 38 (field_list -> field_list field .)
    DESTRUCTOR      reduce using rule 38 (field_list -> field_list field .)
    RPAREN          reduce using rule 38 (field_list -> field_list field .)


state 213

    (42) case_part -> CASE . ID COLON type_specifier OF case_list SEMICOLON

    ID              shift and go to state 239


state 214

    (43) case_part -> empty .

    END             reduce using rule 43 (case_part -> empty .)


state 215

    (40) field -> id_list COLON . type_specifier SEMICOLON
    (41) field -> id_list COLON . type_specifier
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (34) type_specifier -> . ID
    (54) type_specifier -> . LONGINT
    (37) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 98
    FILE            shift and go to state 100
    SET             shift and go to state 101
    RECORD          shift and go to state 102
    OBJECT          shift and go to state 103
    LPAREN          shift and go to state 104
    BOOLEAN_LITERAL shift and go to state 105
    INTEGER         shift and go to state 106
    BYTE            shift and go to state 107
    CHAR            shift and go to state 108
    STRING          shift and go to state 109
    ID              shift and go to state 96
    LONGINT         shift and go to state 111
    NUMBER          shift and go to state 110

    type_specifier                 shift and go to state 240
    subrange                       shift and go to state 99

state 216

    (27) type_specifier -> OBJECT field_list method_list . END
    (47) method_list -> method_list . method
    (50) method -> . CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON
    (51) method -> . PROCEDURE ID LPAREN field_list RPAREN SEMICOLON
    (52) method -> . FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON
    (53) method -> . DESTRUCTOR ID SEMICOLON

    END             shift and go to state 241
    CONSTRUCTOR     shift and go to state 219
    PROCEDURE       shift and go to state 220
    FUNCTION        shift and go to state 221
    DESTRUCTOR      shift and go to state 222

    method                         shift and go to state 242

state 217

    (48) method_list -> method .

    END             reduce using rule 48 (method_list -> method .)
    CONSTRUCTOR     reduce using rule 48 (method_list -> method .)
    PROCEDURE       reduce using rule 48 (method_list -> method .)
    FUNCTION        reduce using rule 48 (method_list -> method .)
    DESTRUCTOR      reduce using rule 48 (method_list -> method .)


state 218

    (49) method_list -> empty .

    END             reduce using rule 49 (method_list -> empty .)
    CONSTRUCTOR     reduce using rule 49 (method_list -> empty .)
    PROCEDURE       reduce using rule 49 (method_list -> empty .)
    FUNCTION        reduce using rule 49 (method_list -> empty .)
    DESTRUCTOR      reduce using rule 49 (method_list -> empty .)


state 219

    (50) method -> CONSTRUCTOR . ID LPAREN field_list RPAREN SEMICOLON

    ID              shift and go to state 243


state 220

    (51) method -> PROCEDURE . ID LPAREN field_list RPAREN SEMICOLON

    ID              shift and go to state 244


state 221

    (52) method -> FUNCTION . ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON

    ID              shift and go to state 245


state 222

    (53) method -> DESTRUCTOR . ID SEMICOLON

    ID              shift and go to state 246


state 223

    (28) type_specifier -> LPAREN id_list RPAREN .

    SEMICOLON       reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)
    RPAREN          reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)
    CASE            reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)
    ID              reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)
    END             reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)
    CONSTRUCTOR     reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)
    PROCEDURE       reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)
    FUNCTION        reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)
    DESTRUCTOR      reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)
    OF              reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)


state 224

    (33) type_specifier -> STRING LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 247


state 225

    (37) subrange -> NUMBER DOTDOT NUMBER .

    SEMICOLON       reduce using rule 37 (subrange -> NUMBER DOTDOT NUMBER .)
    RBRACKET        reduce using rule 37 (subrange -> NUMBER DOTDOT NUMBER .)
    COMMA           reduce using rule 37 (subrange -> NUMBER DOTDOT NUMBER .)
    RPAREN          reduce using rule 37 (subrange -> NUMBER DOTDOT NUMBER .)
    CASE            reduce using rule 37 (subrange -> NUMBER DOTDOT NUMBER .)
    ID              reduce using rule 37 (subrange -> NUMBER DOTDOT NUMBER .)
    END             reduce using rule 37 (subrange -> NUMBER DOTDOT NUMBER .)
    CONSTRUCTOR     reduce using rule 37 (subrange -> NUMBER DOTDOT NUMBER .)
    PROCEDURE       reduce using rule 37 (subrange -> NUMBER DOTDOT NUMBER .)
    FUNCTION        reduce using rule 37 (subrange -> NUMBER DOTDOT NUMBER .)
    DESTRUCTOR      reduce using rule 37 (subrange -> NUMBER DOTDOT NUMBER .)
    OF              reduce using rule 37 (subrange -> NUMBER DOTDOT NUMBER .)


state 226

    (57) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON . block SEMICOLON
    (58) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON . block DOT
    (17) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (118) empty -> .

    BEGIN           reduce using rule 118 (empty -> .)
    USES            reduce using rule 118 (empty -> .)
    CONST           reduce using rule 118 (empty -> .)
    TYPE            reduce using rule 118 (empty -> .)
    VAR             reduce using rule 118 (empty -> .)
    PROCEDURE       reduce using rule 118 (empty -> .)
    FUNCTION        reduce using rule 118 (empty -> .)

    block                          shift and go to state 248
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 227

    (63) parameter_list -> parameter_list SEMICOLON parameter .

    RPAREN          reduce using rule 63 (parameter_list -> parameter_list SEMICOLON parameter .)
    SEMICOLON       reduce using rule 63 (parameter_list -> parameter_list SEMICOLON parameter .)


state 228

    (64) parameter -> id_list COLON type_specifier .

    RPAREN          reduce using rule 64 (parameter -> id_list COLON type_specifier .)
    SEMICOLON       reduce using rule 64 (parameter -> id_list COLON type_specifier .)


state 229

    (65) parameter -> VAR id_list COLON . type_specifier
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (34) type_specifier -> . ID
    (54) type_specifier -> . LONGINT
    (37) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 98
    FILE            shift and go to state 100
    SET             shift and go to state 101
    RECORD          shift and go to state 102
    OBJECT          shift and go to state 103
    LPAREN          shift and go to state 104
    BOOLEAN_LITERAL shift and go to state 105
    INTEGER         shift and go to state 106
    BYTE            shift and go to state 107
    CHAR            shift and go to state 108
    STRING          shift and go to state 109
    ID              shift and go to state 96
    LONGINT         shift and go to state 111
    NUMBER          shift and go to state 110

    type_specifier                 shift and go to state 249
    subrange                       shift and go to state 99

state 230

    (59) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON . type_specifier SEMICOLON block SEMICOLON
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (34) type_specifier -> . ID
    (54) type_specifier -> . LONGINT
    (37) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 98
    FILE            shift and go to state 100
    SET             shift and go to state 101
    RECORD          shift and go to state 102
    OBJECT          shift and go to state 103
    LPAREN          shift and go to state 104
    BOOLEAN_LITERAL shift and go to state 105
    INTEGER         shift and go to state 106
    BYTE            shift and go to state 107
    CHAR            shift and go to state 108
    STRING          shift and go to state 109
    ID              shift and go to state 96
    LONGINT         shift and go to state 111
    NUMBER          shift and go to state 110

    type_specifier                 shift and go to state 250
    subrange                       shift and go to state 99

state 231

    (87) expression_list_tail -> COMMA expression . expression_list_tail
    (103) expression -> expression . PLUS expression
    (104) expression -> expression . MINUS expression
    (105) expression -> expression . TIMES expression
    (106) expression -> expression . DIVIDE expression
    (107) expression -> expression . MOD expression
    (132) expression -> expression . AND expression
    (133) expression -> expression . OR expression
    (87) expression_list_tail -> . COMMA expression expression_list_tail
    (88) expression_list_tail -> . empty
    (118) empty -> .

    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135
    AND             shift and go to state 136
    OR              shift and go to state 137
    COMMA           shift and go to state 187
    RPAREN          reduce using rule 118 (empty -> .)

    expression_list_tail           shift and go to state 251
    empty                          shift and go to state 188

state 232

    (77) if_statement -> IF expression THEN statement ELSE . statement
    (70) statement -> . if_statement
    (71) statement -> . assignment_statement
    (72) statement -> . while_statement
    (73) statement -> . procedure_call
    (74) statement -> . compound_statement
    (75) statement -> . for_statement
    (76) statement -> . empty
    (119) statement -> . READLN
    (120) statement -> . READLN LPAREN variable RPAREN
    (121) statement -> . READLN LBRACKET variable RBRACKET
    (122) statement -> . WRITELN LPAREN expression_list RPAREN
    (123) statement -> . WRITE LPAREN expression_list RPAREN
    (124) statement -> . USES ID SEMICOLON
    (77) if_statement -> . IF expression THEN statement ELSE statement
    (78) if_statement -> . IF expression THEN statement
    (81) assignment_statement -> . variable COLON_EQUAL expression
    (84) while_statement -> . WHILE expression DO statement
    (85) procedure_call -> . ID LPAREN expression_list RPAREN
    (66) compound_statement -> . BEGIN statement_list END
    (79) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (80) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (118) empty -> .
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    READLN          shift and go to state 47
    WRITELN         shift and go to state 49
    WRITE           shift and go to state 50
    USES            shift and go to state 51
    IF              shift and go to state 53
    WHILE           shift and go to state 54
    ID              shift and go to state 52
    BEGIN           shift and go to state 23
    FOR             shift and go to state 55
    ELSE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    END             reduce using rule 118 (empty -> .)

    statement                      shift and go to state 252
    if_statement                   shift and go to state 40
    assignment_statement           shift and go to state 41
    while_statement                shift and go to state 42
    procedure_call                 shift and go to state 43
    compound_statement             shift and go to state 44
    for_statement                  shift and go to state 45
    empty                          shift and go to state 46
    variable                       shift and go to state 48

state 233

    (60) function_call -> ID LPAREN expression_list RPAREN .

    TIMES           reduce using rule 60 (function_call -> ID LPAREN expression_list RPAREN .)
    DIVIDE          reduce using rule 60 (function_call -> ID LPAREN expression_list RPAREN .)
    DIV             reduce using rule 60 (function_call -> ID LPAREN expression_list RPAREN .)
    PLUS            reduce using rule 60 (function_call -> ID LPAREN expression_list RPAREN .)
    MINUS           reduce using rule 60 (function_call -> ID LPAREN expression_list RPAREN .)
    LESS            reduce using rule 60 (function_call -> ID LPAREN expression_list RPAREN .)
    LESS_EQUAL      reduce using rule 60 (function_call -> ID LPAREN expression_list RPAREN .)
    GREAT           reduce using rule 60 (function_call -> ID LPAREN expression_list RPAREN .)
    GREAT_EQUAL     reduce using rule 60 (function_call -> ID LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 60 (function_call -> ID LPAREN expression_list RPAREN .)
    DIFFERENT       reduce using rule 60 (function_call -> ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 60 (function_call -> ID LPAREN expression_list RPAREN .)
    MOD             reduce using rule 60 (function_call -> ID LPAREN expression_list RPAREN .)
    AND             reduce using rule 60 (function_call -> ID LPAREN expression_list RPAREN .)
    OR              reduce using rule 60 (function_call -> ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 60 (function_call -> ID LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 60 (function_call -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 60 (function_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 60 (function_call -> ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 60 (function_call -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 60 (function_call -> ID LPAREN expression_list RPAREN .)
    RBRACKET        reduce using rule 60 (function_call -> ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 60 (function_call -> ID LPAREN expression_list RPAREN .)
    DOWNTO          reduce using rule 60 (function_call -> ID LPAREN expression_list RPAREN .)


state 234

    (79) for_statement -> FOR ID COLON_EQUAL expression TO . expression DO statement
    (90) expression -> . simple_expression relop simple_expression
    (91) expression -> . simple_expression
    (103) expression -> . expression PLUS expression
    (104) expression -> . expression MINUS expression
    (105) expression -> . expression TIMES expression
    (106) expression -> . expression DIVIDE expression
    (107) expression -> . expression MOD expression
    (132) expression -> . expression AND expression
    (133) expression -> . expression OR expression
    (134) expression -> . NOT expression
    (92) simple_expression -> . term simple_expression_tail
    (97) term -> . factor term_tail
    (61) factor -> . function_call
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . variable
    (110) factor -> . NUMBER
    (111) factor -> . STRING_LITERAL
    (60) function_call -> . ID LPAREN expression_list RPAREN
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 80
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    STRING_LITERAL  shift and go to state 87
    ID              shift and go to state 88

    expression                     shift and go to state 253
    simple_expression              shift and go to state 79
    term                           shift and go to state 81
    factor                         shift and go to state 82
    function_call                  shift and go to state 83
    variable                       shift and go to state 85

state 235

    (80) for_statement -> FOR ID COLON_EQUAL expression DOWNTO . expression DO statement
    (90) expression -> . simple_expression relop simple_expression
    (91) expression -> . simple_expression
    (103) expression -> . expression PLUS expression
    (104) expression -> . expression MINUS expression
    (105) expression -> . expression TIMES expression
    (106) expression -> . expression DIVIDE expression
    (107) expression -> . expression MOD expression
    (132) expression -> . expression AND expression
    (133) expression -> . expression OR expression
    (134) expression -> . NOT expression
    (92) simple_expression -> . term simple_expression_tail
    (97) term -> . factor term_tail
    (61) factor -> . function_call
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . variable
    (110) factor -> . NUMBER
    (111) factor -> . STRING_LITERAL
    (60) function_call -> . ID LPAREN expression_list RPAREN
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 80
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    STRING_LITERAL  shift and go to state 87
    ID              shift and go to state 88

    expression                     shift and go to state 254
    simple_expression              shift and go to state 79
    term                           shift and go to state 81
    factor                         shift and go to state 82
    function_call                  shift and go to state 83
    variable                       shift and go to state 85

state 236

    (22) type_specifier -> ARRAY LBRACKET type_expression RBRACKET . OF type_specifier

    OF              shift and go to state 255


state 237

    (35) type_expression -> type_expression COMMA . subrange
    (37) subrange -> . NUMBER DOTDOT NUMBER

    NUMBER          shift and go to state 110

    subrange                       shift and go to state 256

state 238

    (26) type_specifier -> RECORD field_list case_part END .

    SEMICOLON       reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)
    RPAREN          reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)
    CASE            reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)
    ID              reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)
    END             reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)
    CONSTRUCTOR     reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)
    PROCEDURE       reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)
    FUNCTION        reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)
    DESTRUCTOR      reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)
    OF              reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)


state 239

    (42) case_part -> CASE ID . COLON type_specifier OF case_list SEMICOLON

    COLON           shift and go to state 257


state 240

    (40) field -> id_list COLON type_specifier . SEMICOLON
    (41) field -> id_list COLON type_specifier .

    SEMICOLON       shift and go to state 258
    CASE            reduce using rule 41 (field -> id_list COLON type_specifier .)
    ID              reduce using rule 41 (field -> id_list COLON type_specifier .)
    END             reduce using rule 41 (field -> id_list COLON type_specifier .)
    CONSTRUCTOR     reduce using rule 41 (field -> id_list COLON type_specifier .)
    PROCEDURE       reduce using rule 41 (field -> id_list COLON type_specifier .)
    FUNCTION        reduce using rule 41 (field -> id_list COLON type_specifier .)
    DESTRUCTOR      reduce using rule 41 (field -> id_list COLON type_specifier .)
    RPAREN          reduce using rule 41 (field -> id_list COLON type_specifier .)


state 241

    (27) type_specifier -> OBJECT field_list method_list END .

    SEMICOLON       reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)
    RPAREN          reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)
    CASE            reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)
    ID              reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)
    END             reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)
    CONSTRUCTOR     reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)
    PROCEDURE       reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)
    FUNCTION        reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)
    DESTRUCTOR      reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)
    OF              reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)


state 242

    (47) method_list -> method_list method .

    END             reduce using rule 47 (method_list -> method_list method .)
    CONSTRUCTOR     reduce using rule 47 (method_list -> method_list method .)
    PROCEDURE       reduce using rule 47 (method_list -> method_list method .)
    FUNCTION        reduce using rule 47 (method_list -> method_list method .)
    DESTRUCTOR      reduce using rule 47 (method_list -> method_list method .)


state 243

    (50) method -> CONSTRUCTOR ID . LPAREN field_list RPAREN SEMICOLON

    LPAREN          shift and go to state 259


state 244

    (51) method -> PROCEDURE ID . LPAREN field_list RPAREN SEMICOLON

    LPAREN          shift and go to state 260


state 245

    (52) method -> FUNCTION ID . LPAREN field_list RPAREN COLON type_specifier SEMICOLON

    LPAREN          shift and go to state 261


state 246

    (53) method -> DESTRUCTOR ID . SEMICOLON

    SEMICOLON       shift and go to state 262


state 247

    (33) type_specifier -> STRING LBRACKET NUMBER RBRACKET .

    SEMICOLON       reduce using rule 33 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    RPAREN          reduce using rule 33 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    CASE            reduce using rule 33 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    ID              reduce using rule 33 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    END             reduce using rule 33 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    CONSTRUCTOR     reduce using rule 33 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    PROCEDURE       reduce using rule 33 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    FUNCTION        reduce using rule 33 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    DESTRUCTOR      reduce using rule 33 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    OF              reduce using rule 33 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)


state 248

    (57) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block . SEMICOLON
    (58) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block . DOT

    SEMICOLON       shift and go to state 263
    DOT             shift and go to state 264


state 249

    (65) parameter -> VAR id_list COLON type_specifier .

    RPAREN          reduce using rule 65 (parameter -> VAR id_list COLON type_specifier .)
    SEMICOLON       reduce using rule 65 (parameter -> VAR id_list COLON type_specifier .)


state 250

    (59) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier . SEMICOLON block SEMICOLON

    SEMICOLON       shift and go to state 265


state 251

    (87) expression_list_tail -> COMMA expression expression_list_tail .

    RPAREN          reduce using rule 87 (expression_list_tail -> COMMA expression expression_list_tail .)


state 252

    (77) if_statement -> IF expression THEN statement ELSE statement .

    SEMICOLON       reduce using rule 77 (if_statement -> IF expression THEN statement ELSE statement .)
    END             reduce using rule 77 (if_statement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 77 (if_statement -> IF expression THEN statement ELSE statement .)


state 253

    (79) for_statement -> FOR ID COLON_EQUAL expression TO expression . DO statement
    (103) expression -> expression . PLUS expression
    (104) expression -> expression . MINUS expression
    (105) expression -> expression . TIMES expression
    (106) expression -> expression . DIVIDE expression
    (107) expression -> expression . MOD expression
    (132) expression -> expression . AND expression
    (133) expression -> expression . OR expression

    DO              shift and go to state 266
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135
    AND             shift and go to state 136
    OR              shift and go to state 137


state 254

    (80) for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression . DO statement
    (103) expression -> expression . PLUS expression
    (104) expression -> expression . MINUS expression
    (105) expression -> expression . TIMES expression
    (106) expression -> expression . DIVIDE expression
    (107) expression -> expression . MOD expression
    (132) expression -> expression . AND expression
    (133) expression -> expression . OR expression

    DO              shift and go to state 267
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134
    MOD             shift and go to state 135
    AND             shift and go to state 136
    OR              shift and go to state 137


state 255

    (22) type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF . type_specifier
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (34) type_specifier -> . ID
    (54) type_specifier -> . LONGINT
    (37) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 98
    FILE            shift and go to state 100
    SET             shift and go to state 101
    RECORD          shift and go to state 102
    OBJECT          shift and go to state 103
    LPAREN          shift and go to state 104
    BOOLEAN_LITERAL shift and go to state 105
    INTEGER         shift and go to state 106
    BYTE            shift and go to state 107
    CHAR            shift and go to state 108
    STRING          shift and go to state 109
    ID              shift and go to state 96
    LONGINT         shift and go to state 111
    NUMBER          shift and go to state 110

    type_specifier                 shift and go to state 268
    subrange                       shift and go to state 99

state 256

    (35) type_expression -> type_expression COMMA subrange .

    RBRACKET        reduce using rule 35 (type_expression -> type_expression COMMA subrange .)
    COMMA           reduce using rule 35 (type_expression -> type_expression COMMA subrange .)


state 257

    (42) case_part -> CASE ID COLON . type_specifier OF case_list SEMICOLON
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (34) type_specifier -> . ID
    (54) type_specifier -> . LONGINT
    (37) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 98
    FILE            shift and go to state 100
    SET             shift and go to state 101
    RECORD          shift and go to state 102
    OBJECT          shift and go to state 103
    LPAREN          shift and go to state 104
    BOOLEAN_LITERAL shift and go to state 105
    INTEGER         shift and go to state 106
    BYTE            shift and go to state 107
    CHAR            shift and go to state 108
    STRING          shift and go to state 109
    ID              shift and go to state 96
    LONGINT         shift and go to state 111
    NUMBER          shift and go to state 110

    type_specifier                 shift and go to state 269
    subrange                       shift and go to state 99

state 258

    (40) field -> id_list COLON type_specifier SEMICOLON .

    CASE            reduce using rule 40 (field -> id_list COLON type_specifier SEMICOLON .)
    ID              reduce using rule 40 (field -> id_list COLON type_specifier SEMICOLON .)
    END             reduce using rule 40 (field -> id_list COLON type_specifier SEMICOLON .)
    CONSTRUCTOR     reduce using rule 40 (field -> id_list COLON type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 40 (field -> id_list COLON type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 40 (field -> id_list COLON type_specifier SEMICOLON .)
    DESTRUCTOR      reduce using rule 40 (field -> id_list COLON type_specifier SEMICOLON .)
    RPAREN          reduce using rule 40 (field -> id_list COLON type_specifier SEMICOLON .)


state 259

    (50) method -> CONSTRUCTOR ID LPAREN . field_list RPAREN SEMICOLON
    (38) field_list -> . field_list field
    (39) field_list -> . field
    (40) field -> . id_list COLON type_specifier SEMICOLON
    (41) field -> . id_list COLON type_specifier
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    ID              shift and go to state 26

    field_list                     shift and go to state 270
    field                          shift and go to state 170
    id_list                        shift and go to state 171

state 260

    (51) method -> PROCEDURE ID LPAREN . field_list RPAREN SEMICOLON
    (38) field_list -> . field_list field
    (39) field_list -> . field
    (40) field -> . id_list COLON type_specifier SEMICOLON
    (41) field -> . id_list COLON type_specifier
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    ID              shift and go to state 26

    field_list                     shift and go to state 271
    field                          shift and go to state 170
    id_list                        shift and go to state 171

state 261

    (52) method -> FUNCTION ID LPAREN . field_list RPAREN COLON type_specifier SEMICOLON
    (38) field_list -> . field_list field
    (39) field_list -> . field
    (40) field -> . id_list COLON type_specifier SEMICOLON
    (41) field -> . id_list COLON type_specifier
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    ID              shift and go to state 26

    field_list                     shift and go to state 272
    field                          shift and go to state 170
    id_list                        shift and go to state 171

state 262

    (53) method -> DESTRUCTOR ID SEMICOLON .

    END             reduce using rule 53 (method -> DESTRUCTOR ID SEMICOLON .)
    CONSTRUCTOR     reduce using rule 53 (method -> DESTRUCTOR ID SEMICOLON .)
    PROCEDURE       reduce using rule 53 (method -> DESTRUCTOR ID SEMICOLON .)
    FUNCTION        reduce using rule 53 (method -> DESTRUCTOR ID SEMICOLON .)
    DESTRUCTOR      reduce using rule 53 (method -> DESTRUCTOR ID SEMICOLON .)


state 263

    (57) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .

    USES            reduce using rule 57 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    CONST           reduce using rule 57 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    TYPE            reduce using rule 57 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    VAR             reduce using rule 57 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    PROCEDURE       reduce using rule 57 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 57 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    BEGIN           reduce using rule 57 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)


state 264

    (58) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT .

    USES            reduce using rule 58 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT .)
    CONST           reduce using rule 58 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT .)
    TYPE            reduce using rule 58 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT .)
    VAR             reduce using rule 58 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT .)
    PROCEDURE       reduce using rule 58 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT .)
    FUNCTION        reduce using rule 58 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT .)
    BEGIN           reduce using rule 58 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT .)


state 265

    (59) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON . block SEMICOLON
    (17) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (118) empty -> .

    BEGIN           reduce using rule 118 (empty -> .)
    USES            reduce using rule 118 (empty -> .)
    CONST           reduce using rule 118 (empty -> .)
    TYPE            reduce using rule 118 (empty -> .)
    VAR             reduce using rule 118 (empty -> .)
    PROCEDURE       reduce using rule 118 (empty -> .)
    FUNCTION        reduce using rule 118 (empty -> .)

    block                          shift and go to state 273
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 266

    (79) for_statement -> FOR ID COLON_EQUAL expression TO expression DO . statement
    (70) statement -> . if_statement
    (71) statement -> . assignment_statement
    (72) statement -> . while_statement
    (73) statement -> . procedure_call
    (74) statement -> . compound_statement
    (75) statement -> . for_statement
    (76) statement -> . empty
    (119) statement -> . READLN
    (120) statement -> . READLN LPAREN variable RPAREN
    (121) statement -> . READLN LBRACKET variable RBRACKET
    (122) statement -> . WRITELN LPAREN expression_list RPAREN
    (123) statement -> . WRITE LPAREN expression_list RPAREN
    (124) statement -> . USES ID SEMICOLON
    (77) if_statement -> . IF expression THEN statement ELSE statement
    (78) if_statement -> . IF expression THEN statement
    (81) assignment_statement -> . variable COLON_EQUAL expression
    (84) while_statement -> . WHILE expression DO statement
    (85) procedure_call -> . ID LPAREN expression_list RPAREN
    (66) compound_statement -> . BEGIN statement_list END
    (79) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (80) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (118) empty -> .
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    READLN          shift and go to state 47
    WRITELN         shift and go to state 49
    WRITE           shift and go to state 50
    USES            shift and go to state 51
    IF              shift and go to state 53
    WHILE           shift and go to state 54
    ID              shift and go to state 52
    BEGIN           shift and go to state 23
    FOR             shift and go to state 55
    ELSE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    END             reduce using rule 118 (empty -> .)

    statement                      shift and go to state 274
    if_statement                   shift and go to state 40
    assignment_statement           shift and go to state 41
    while_statement                shift and go to state 42
    procedure_call                 shift and go to state 43
    compound_statement             shift and go to state 44
    for_statement                  shift and go to state 45
    empty                          shift and go to state 46
    variable                       shift and go to state 48

state 267

    (80) for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO . statement
    (70) statement -> . if_statement
    (71) statement -> . assignment_statement
    (72) statement -> . while_statement
    (73) statement -> . procedure_call
    (74) statement -> . compound_statement
    (75) statement -> . for_statement
    (76) statement -> . empty
    (119) statement -> . READLN
    (120) statement -> . READLN LPAREN variable RPAREN
    (121) statement -> . READLN LBRACKET variable RBRACKET
    (122) statement -> . WRITELN LPAREN expression_list RPAREN
    (123) statement -> . WRITE LPAREN expression_list RPAREN
    (124) statement -> . USES ID SEMICOLON
    (77) if_statement -> . IF expression THEN statement ELSE statement
    (78) if_statement -> . IF expression THEN statement
    (81) assignment_statement -> . variable COLON_EQUAL expression
    (84) while_statement -> . WHILE expression DO statement
    (85) procedure_call -> . ID LPAREN expression_list RPAREN
    (66) compound_statement -> . BEGIN statement_list END
    (79) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (80) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (118) empty -> .
    (82) variable -> . ID
    (83) variable -> . ID LBRACKET expression RBRACKET

    READLN          shift and go to state 47
    WRITELN         shift and go to state 49
    WRITE           shift and go to state 50
    USES            shift and go to state 51
    IF              shift and go to state 53
    WHILE           shift and go to state 54
    ID              shift and go to state 52
    BEGIN           shift and go to state 23
    FOR             shift and go to state 55
    ELSE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    END             reduce using rule 118 (empty -> .)

    statement                      shift and go to state 275
    if_statement                   shift and go to state 40
    assignment_statement           shift and go to state 41
    while_statement                shift and go to state 42
    procedure_call                 shift and go to state 43
    compound_statement             shift and go to state 44
    for_statement                  shift and go to state 45
    empty                          shift and go to state 46
    variable                       shift and go to state 48

state 268

    (22) type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .

    SEMICOLON       reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    RPAREN          reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    CASE            reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    ID              reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    END             reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    CONSTRUCTOR     reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    PROCEDURE       reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    FUNCTION        reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    DESTRUCTOR      reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    OF              reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)


state 269

    (42) case_part -> CASE ID COLON type_specifier . OF case_list SEMICOLON

    OF              shift and go to state 276


state 270

    (50) method -> CONSTRUCTOR ID LPAREN field_list . RPAREN SEMICOLON
    (38) field_list -> field_list . field
    (40) field -> . id_list COLON type_specifier SEMICOLON
    (41) field -> . id_list COLON type_specifier
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 277
    ID              shift and go to state 26

    field                          shift and go to state 212
    id_list                        shift and go to state 171

state 271

    (51) method -> PROCEDURE ID LPAREN field_list . RPAREN SEMICOLON
    (38) field_list -> field_list . field
    (40) field -> . id_list COLON type_specifier SEMICOLON
    (41) field -> . id_list COLON type_specifier
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 278
    ID              shift and go to state 26

    field                          shift and go to state 212
    id_list                        shift and go to state 171

state 272

    (52) method -> FUNCTION ID LPAREN field_list . RPAREN COLON type_specifier SEMICOLON
    (38) field_list -> field_list . field
    (40) field -> . id_list COLON type_specifier SEMICOLON
    (41) field -> . id_list COLON type_specifier
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 279
    ID              shift and go to state 26

    field                          shift and go to state 212
    id_list                        shift and go to state 171

state 273

    (59) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 280


state 274

    (79) for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement .

    SEMICOLON       reduce using rule 79 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement .)
    END             reduce using rule 79 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement .)
    ELSE            reduce using rule 79 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement .)


state 275

    (80) for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement .

    SEMICOLON       reduce using rule 80 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement .)
    END             reduce using rule 80 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement .)
    ELSE            reduce using rule 80 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement .)


state 276

    (42) case_part -> CASE ID COLON type_specifier OF . case_list SEMICOLON
    (44) case_list -> . case_list SEMICOLON case_element
    (45) case_list -> . case_element
    (46) case_element -> . NUMBER COLON LPAREN field_list RPAREN

    NUMBER          shift and go to state 283

    case_list                      shift and go to state 281
    case_element                   shift and go to state 282

state 277

    (50) method -> CONSTRUCTOR ID LPAREN field_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 284


state 278

    (51) method -> PROCEDURE ID LPAREN field_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 285


state 279

    (52) method -> FUNCTION ID LPAREN field_list RPAREN . COLON type_specifier SEMICOLON

    COLON           shift and go to state 286


state 280

    (59) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .

    USES            reduce using rule 59 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    CONST           reduce using rule 59 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    TYPE            reduce using rule 59 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    VAR             reduce using rule 59 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    PROCEDURE       reduce using rule 59 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 59 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    BEGIN           reduce using rule 59 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)


state 281

    (42) case_part -> CASE ID COLON type_specifier OF case_list . SEMICOLON
    (44) case_list -> case_list . SEMICOLON case_element

    SEMICOLON       shift and go to state 287


state 282

    (45) case_list -> case_element .

    SEMICOLON       reduce using rule 45 (case_list -> case_element .)


state 283

    (46) case_element -> NUMBER . COLON LPAREN field_list RPAREN

    COLON           shift and go to state 288


state 284

    (50) method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .

    END             reduce using rule 50 (method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .)
    CONSTRUCTOR     reduce using rule 50 (method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .)
    PROCEDURE       reduce using rule 50 (method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 50 (method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .)
    DESTRUCTOR      reduce using rule 50 (method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .)


state 285

    (51) method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .

    END             reduce using rule 51 (method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    CONSTRUCTOR     reduce using rule 51 (method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    PROCEDURE       reduce using rule 51 (method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 51 (method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    DESTRUCTOR      reduce using rule 51 (method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)


state 286

    (52) method -> FUNCTION ID LPAREN field_list RPAREN COLON . type_specifier SEMICOLON
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (34) type_specifier -> . ID
    (54) type_specifier -> . LONGINT
    (37) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 98
    FILE            shift and go to state 100
    SET             shift and go to state 101
    RECORD          shift and go to state 102
    OBJECT          shift and go to state 103
    LPAREN          shift and go to state 104
    BOOLEAN_LITERAL shift and go to state 105
    INTEGER         shift and go to state 106
    BYTE            shift and go to state 107
    CHAR            shift and go to state 108
    STRING          shift and go to state 109
    ID              shift and go to state 96
    LONGINT         shift and go to state 111
    NUMBER          shift and go to state 110

    type_specifier                 shift and go to state 289
    subrange                       shift and go to state 99

state 287

    (42) case_part -> CASE ID COLON type_specifier OF case_list SEMICOLON .
    (44) case_list -> case_list SEMICOLON . case_element
    (46) case_element -> . NUMBER COLON LPAREN field_list RPAREN

    END             reduce using rule 42 (case_part -> CASE ID COLON type_specifier OF case_list SEMICOLON .)
    NUMBER          shift and go to state 283

    case_element                   shift and go to state 290

state 288

    (46) case_element -> NUMBER COLON . LPAREN field_list RPAREN

    LPAREN          shift and go to state 291


state 289

    (52) method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier . SEMICOLON

    SEMICOLON       shift and go to state 292


state 290

    (44) case_list -> case_list SEMICOLON case_element .

    SEMICOLON       reduce using rule 44 (case_list -> case_list SEMICOLON case_element .)


state 291

    (46) case_element -> NUMBER COLON LPAREN . field_list RPAREN
    (38) field_list -> . field_list field
    (39) field_list -> . field
    (40) field -> . id_list COLON type_specifier SEMICOLON
    (41) field -> . id_list COLON type_specifier
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    ID              shift and go to state 26

    field_list                     shift and go to state 293
    field                          shift and go to state 170
    id_list                        shift and go to state 171

state 292

    (52) method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .

    END             reduce using rule 52 (method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .)
    CONSTRUCTOR     reduce using rule 52 (method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 52 (method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 52 (method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .)
    DESTRUCTOR      reduce using rule 52 (method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .)


state 293

    (46) case_element -> NUMBER COLON LPAREN field_list . RPAREN
    (38) field_list -> field_list . field
    (40) field -> . id_list COLON type_specifier SEMICOLON
    (41) field -> . id_list COLON type_specifier
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 294
    ID              shift and go to state 26

    field                          shift and go to state 212
    id_list                        shift and go to state 171

state 294

    (46) case_element -> NUMBER COLON LPAREN field_list RPAREN .

    SEMICOLON       reduce using rule 46 (case_element -> NUMBER COLON LPAREN field_list RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for USES in state 5 resolved as shift
WARNING: shift/reduce conflict for CONST in state 5 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 5 resolved as shift
WARNING: shift/reduce conflict for VAR in state 5 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 5 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 5 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 81 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 81 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 82 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 82 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 145 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 145 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 145 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 145 resolved as shift
WARNING: shift/reduce conflict for MOD in state 145 resolved as shift
WARNING: shift/reduce conflict for AND in state 145 resolved as shift
WARNING: shift/reduce conflict for OR in state 145 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 172 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 172 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 172 resolved as shift
WARNING: shift/reduce conflict for DESTRUCTOR in state 172 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 192 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 193 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 193 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 193 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 193 resolved as shift
WARNING: shift/reduce conflict for MOD in state 193 resolved as shift
WARNING: shift/reduce conflict for AND in state 193 resolved as shift
WARNING: shift/reduce conflict for OR in state 193 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 194 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 194 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 194 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 194 resolved as shift
WARNING: shift/reduce conflict for MOD in state 194 resolved as shift
WARNING: shift/reduce conflict for AND in state 194 resolved as shift
WARNING: shift/reduce conflict for OR in state 194 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 195 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 195 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 195 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 195 resolved as shift
WARNING: shift/reduce conflict for MOD in state 195 resolved as shift
WARNING: shift/reduce conflict for AND in state 195 resolved as shift
WARNING: shift/reduce conflict for OR in state 195 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 196 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 196 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 196 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 196 resolved as shift
WARNING: shift/reduce conflict for MOD in state 196 resolved as shift
WARNING: shift/reduce conflict for AND in state 196 resolved as shift
WARNING: shift/reduce conflict for OR in state 196 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 197 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 197 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 197 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 197 resolved as shift
WARNING: shift/reduce conflict for MOD in state 197 resolved as shift
WARNING: shift/reduce conflict for AND in state 197 resolved as shift
WARNING: shift/reduce conflict for OR in state 197 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 198 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 198 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 198 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 198 resolved as shift
WARNING: shift/reduce conflict for MOD in state 198 resolved as shift
WARNING: shift/reduce conflict for AND in state 198 resolved as shift
WARNING: shift/reduce conflict for OR in state 198 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 199 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 199 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 199 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 199 resolved as shift
WARNING: shift/reduce conflict for MOD in state 199 resolved as shift
WARNING: shift/reduce conflict for AND in state 199 resolved as shift
WARNING: shift/reduce conflict for OR in state 199 resolved as shift
