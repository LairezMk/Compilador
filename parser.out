Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BOOLEAN_LITERAL
    BYTE
    CASE
    CHAR
    CHARACTER_LITERAL
    CONST
    DOWNTO
    FALSE
    FILE
    FUNCTION
    GOTO
    IN
    LABEL
    LBLOCK
    NIL
    NOT
    OR
    PACKED
    RBLOCK
    READLINE
    RECORD
    REPEAT
    SET
    STRING
    TRUE
    TYPE
    UNTIL
    WITH

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON uses_opt block DOT
Rule 2     uses_opt -> USES ID SEMICOLON
Rule 3     uses_opt -> empty
Rule 4     block -> declarations compound_statement
Rule 5     declarations -> VAR declaration_list procedure_declarations
Rule 6     declarations -> VAR declaration_list
Rule 7     declarations -> procedure_declarations
Rule 8     declarations -> empty
Rule 9     declaration_list -> declaration
Rule 10    declaration_list -> declaration_list declaration
Rule 11    declaration -> id_list COLON type_specifier SEMICOLON
Rule 12    id_list -> ID
Rule 13    id_list -> id_list COMMA ID
Rule 14    type_specifier -> INTEGER
Rule 15    type_specifier -> LONGINT
Rule 16    type_specifier -> ARRAY LBRACKET NUMBER DOTDOT NUMBER RBRACKET OF INTEGER
Rule 17    procedure_declarations -> procedure_declaration
Rule 18    procedure_declarations -> procedure_declarations procedure_declaration
Rule 19    procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
Rule 20    parameter_list -> id_list COLON type_specifier
Rule 21    compound_statement -> BEGIN statement_list END
Rule 22    statement_list -> statement statement_list_tail
Rule 23    statement_list_tail -> SEMICOLON statement statement_list_tail
Rule 24    statement_list_tail -> empty
Rule 25    statement -> assignment_statement
Rule 26    statement -> if_statement
Rule 27    statement -> FOR ID COLON_EQUAL expression TO expression DO statement
Rule 28    statement -> while_statement
Rule 29    statement -> procedure_call
Rule 30    statement -> compound_statement
Rule 31    statement -> empty
Rule 32    assignment_statement -> variable COLON_EQUAL expression
Rule 33    variable -> ID
Rule 34    variable -> ID LBRACKET expression RBRACKET
Rule 35    if_statement -> IF expression THEN statement ELSE statement
Rule 36    while_statement -> WHILE expression DO statement
Rule 37    procedure_call -> ID LPAREN expression_list RPAREN
Rule 38    expression_list -> expression expression_list_tail
Rule 39    expression_list_tail -> COMMA expression expression_list_tail
Rule 40    expression_list_tail -> empty
Rule 41    expression_list -> empty
Rule 42    expression -> simple_expression relop simple_expression
Rule 43    expression -> simple_expression
Rule 44    simple_expression -> term simple_expression_tail
Rule 45    simple_expression_tail -> addop term
Rule 46    simple_expression_tail -> empty
Rule 47    addop -> PLUS
Rule 48    addop -> MINUS
Rule 49    term -> factor term_tail
Rule 50    term_tail -> mulop factor
Rule 51    term_tail -> empty
Rule 52    mulop -> TIMES
Rule 53    mulop -> DIVIDE
Rule 54    mulop -> DIV
Rule 55    expression -> expression PLUS expression
Rule 56    expression -> expression MINUS expression
Rule 57    expression -> expression TIMES expression
Rule 58    expression -> expression DIVIDE expression
Rule 59    expression -> expression MOD expression
Rule 60    factor -> LPAREN expression RPAREN
Rule 61    factor -> variable
Rule 62    factor -> NUMBER
Rule 63    factor -> STRING_LITERAL
Rule 64    relop -> LESS
Rule 65    relop -> LESS_EQUAL
Rule 66    relop -> GREAT
Rule 67    relop -> GREAT_EQUAL
Rule 68    relop -> EQUAL
Rule 69    relop -> DIFFERENT
Rule 70    empty -> <empty>
Rule 71    statement -> READLN
Rule 72    statement -> READLN LPAREN ID RPAREN
Rule 73    statement -> WRITELN LPAREN expression_list RPAREN
Rule 74    statement -> WRITE LPAREN expression_list RPAREN
Rule 75    statement -> USES ID SEMICOLON

Terminals, with rules where they appear

AND                  : 
ARRAY                : 16
BEGIN                : 21
BOOLEAN_LITERAL      : 
BYTE                 : 
CASE                 : 
CHAR                 : 
CHARACTER_LITERAL    : 
COLON                : 11 20
COLON_EQUAL          : 27 32
COMMA                : 13 39
CONST                : 
DIFFERENT            : 69
DIV                  : 54
DIVIDE               : 53 58
DO                   : 27 36
DOT                  : 1
DOTDOT               : 16
DOWNTO               : 
ELSE                 : 35
END                  : 21
EQUAL                : 68
FALSE                : 
FILE                 : 
FOR                  : 27
FUNCTION             : 
GOTO                 : 
GREAT                : 66
GREAT_EQUAL          : 67
ID                   : 1 2 12 13 19 27 33 34 37 72 75
IF                   : 35
IN                   : 
INTEGER              : 14 16
LABEL                : 
LBLOCK               : 
LBRACKET             : 16 34
LESS                 : 64
LESS_EQUAL           : 65
LONGINT              : 15
LPAREN               : 19 37 60 72 73 74
MINUS                : 48 56
MOD                  : 59
NIL                  : 
NOT                  : 
NUMBER               : 16 16 62
OF                   : 16
OR                   : 
PACKED               : 
PLUS                 : 47 55
PROCEDURE            : 19
PROGRAM              : 1
RBLOCK               : 
RBRACKET             : 16 34
READLINE             : 
READLN               : 71 72
RECORD               : 
REPEAT               : 
RPAREN               : 19 37 60 72 73 74
SEMICOLON            : 1 2 11 19 19 23 75
SET                  : 
STRING               : 
STRING_LITERAL       : 63
THEN                 : 35
TIMES                : 52 57
TO                   : 27
TRUE                 : 
TYPE                 : 
UNTIL                : 
USES                 : 2 75
VAR                  : 5 6
WHILE                : 36
WITH                 : 
WRITE                : 74
WRITELN              : 73
error                : 

Nonterminals, with rules where they appear

addop                : 45
assignment_statement : 25
block                : 1 19
compound_statement   : 4 30
declaration          : 9 10
declaration_list     : 5 6 10
declarations         : 4
empty                : 3 8 24 31 40 41 46 51
expression           : 27 27 32 34 35 36 38 39 55 55 56 56 57 57 58 58 59 59 60
expression_list      : 37 73 74
expression_list_tail : 38 39
factor               : 49 50
id_list              : 11 13 20
if_statement         : 26
mulop                : 50
parameter_list       : 19
procedure_call       : 29
procedure_declaration : 17 18
procedure_declarations : 5 7 18
program              : 0
relop                : 42
simple_expression    : 42 42 43
simple_expression_tail : 44
statement            : 22 23 27 35 35 36
statement_list       : 21
statement_list_tail  : 22 23
term                 : 44 45
term_tail            : 49
type_specifier       : 11 20
uses_opt             : 1
variable             : 32 61
while_statement      : 28

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON uses_opt block DOT

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON uses_opt block DOT

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON uses_opt block DOT

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . uses_opt block DOT
    (2) uses_opt -> . USES ID SEMICOLON
    (3) uses_opt -> . empty
    (70) empty -> .

    USES            shift and go to state 6
    VAR             reduce using rule 70 (empty -> .)
    PROCEDURE       reduce using rule 70 (empty -> .)
    BEGIN           reduce using rule 70 (empty -> .)

    uses_opt                       shift and go to state 5
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMICOLON uses_opt . block DOT
    (4) block -> . declarations compound_statement
    (5) declarations -> . VAR declaration_list procedure_declarations
    (6) declarations -> . VAR declaration_list
    (7) declarations -> . procedure_declarations
    (8) declarations -> . empty
    (17) procedure_declarations -> . procedure_declaration
    (18) procedure_declarations -> . procedure_declarations procedure_declaration
    (70) empty -> .
    (19) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON

    VAR             shift and go to state 10
    BEGIN           reduce using rule 70 (empty -> .)
    PROCEDURE       shift and go to state 14

    block                          shift and go to state 8
    declarations                   shift and go to state 9
    procedure_declarations         shift and go to state 11
    empty                          shift and go to state 12
    procedure_declaration          shift and go to state 13

state 6

    (2) uses_opt -> USES . ID SEMICOLON

    ID              shift and go to state 15


state 7

    (3) uses_opt -> empty .

    VAR             reduce using rule 3 (uses_opt -> empty .)
    PROCEDURE       reduce using rule 3 (uses_opt -> empty .)
    BEGIN           reduce using rule 3 (uses_opt -> empty .)


state 8

    (1) program -> PROGRAM ID SEMICOLON uses_opt block . DOT

    DOT             shift and go to state 16


state 9

    (4) block -> declarations . compound_statement
    (21) compound_statement -> . BEGIN statement_list END

    BEGIN           shift and go to state 18

    compound_statement             shift and go to state 17

state 10

    (5) declarations -> VAR . declaration_list procedure_declarations
    (6) declarations -> VAR . declaration_list
    (9) declaration_list -> . declaration
    (10) declaration_list -> . declaration_list declaration
    (11) declaration -> . id_list COLON type_specifier SEMICOLON
    (12) id_list -> . ID
    (13) id_list -> . id_list COMMA ID

    ID              shift and go to state 22

    declaration_list               shift and go to state 19
    declaration                    shift and go to state 20
    id_list                        shift and go to state 21

state 11

    (7) declarations -> procedure_declarations .
    (18) procedure_declarations -> procedure_declarations . procedure_declaration
    (19) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON

    BEGIN           reduce using rule 7 (declarations -> procedure_declarations .)
    PROCEDURE       shift and go to state 14

    procedure_declaration          shift and go to state 23

state 12

    (8) declarations -> empty .

    BEGIN           reduce using rule 8 (declarations -> empty .)


state 13

    (17) procedure_declarations -> procedure_declaration .

    PROCEDURE       reduce using rule 17 (procedure_declarations -> procedure_declaration .)
    BEGIN           reduce using rule 17 (procedure_declarations -> procedure_declaration .)


state 14

    (19) procedure_declaration -> PROCEDURE . ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON

    ID              shift and go to state 24


state 15

    (2) uses_opt -> USES ID . SEMICOLON

    SEMICOLON       shift and go to state 25


state 16

    (1) program -> PROGRAM ID SEMICOLON uses_opt block DOT .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON uses_opt block DOT .)


state 17

    (4) block -> declarations compound_statement .

    DOT             reduce using rule 4 (block -> declarations compound_statement .)
    SEMICOLON       reduce using rule 4 (block -> declarations compound_statement .)


state 18

    (21) compound_statement -> BEGIN . statement_list END
    (22) statement_list -> . statement statement_list_tail
    (25) statement -> . assignment_statement
    (26) statement -> . if_statement
    (27) statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (28) statement -> . while_statement
    (29) statement -> . procedure_call
    (30) statement -> . compound_statement
    (31) statement -> . empty
    (71) statement -> . READLN
    (72) statement -> . READLN LPAREN ID RPAREN
    (73) statement -> . WRITELN LPAREN expression_list RPAREN
    (74) statement -> . WRITE LPAREN expression_list RPAREN
    (75) statement -> . USES ID SEMICOLON
    (32) assignment_statement -> . variable COLON_EQUAL expression
    (35) if_statement -> . IF expression THEN statement ELSE statement
    (36) while_statement -> . WHILE expression DO statement
    (37) procedure_call -> . ID LPAREN expression_list RPAREN
    (21) compound_statement -> . BEGIN statement_list END
    (70) empty -> .
    (33) variable -> . ID
    (34) variable -> . ID LBRACKET expression RBRACKET

    FOR             shift and go to state 30
    READLN          shift and go to state 36
    WRITELN         shift and go to state 37
    WRITE           shift and go to state 38
    USES            shift and go to state 39
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    ID              shift and go to state 31
    BEGIN           shift and go to state 18
    SEMICOLON       reduce using rule 70 (empty -> .)
    END             reduce using rule 70 (empty -> .)

    statement_list                 shift and go to state 26
    statement                      shift and go to state 27
    assignment_statement           shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 32
    procedure_call                 shift and go to state 33
    compound_statement             shift and go to state 34
    empty                          shift and go to state 35
    variable                       shift and go to state 40

state 19

    (5) declarations -> VAR declaration_list . procedure_declarations
    (6) declarations -> VAR declaration_list .
    (10) declaration_list -> declaration_list . declaration
    (17) procedure_declarations -> . procedure_declaration
    (18) procedure_declarations -> . procedure_declarations procedure_declaration
    (11) declaration -> . id_list COLON type_specifier SEMICOLON
    (19) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (12) id_list -> . ID
    (13) id_list -> . id_list COMMA ID

    BEGIN           reduce using rule 6 (declarations -> VAR declaration_list .)
    PROCEDURE       shift and go to state 14
    ID              shift and go to state 22

    procedure_declarations         shift and go to state 43
    declaration                    shift and go to state 44
    procedure_declaration          shift and go to state 13
    id_list                        shift and go to state 21

state 20

    (9) declaration_list -> declaration .

    PROCEDURE       reduce using rule 9 (declaration_list -> declaration .)
    ID              reduce using rule 9 (declaration_list -> declaration .)
    BEGIN           reduce using rule 9 (declaration_list -> declaration .)


state 21

    (11) declaration -> id_list . COLON type_specifier SEMICOLON
    (13) id_list -> id_list . COMMA ID

    COLON           shift and go to state 45
    COMMA           shift and go to state 46


state 22

    (12) id_list -> ID .

    COLON           reduce using rule 12 (id_list -> ID .)
    COMMA           reduce using rule 12 (id_list -> ID .)


state 23

    (18) procedure_declarations -> procedure_declarations procedure_declaration .

    PROCEDURE       reduce using rule 18 (procedure_declarations -> procedure_declarations procedure_declaration .)
    BEGIN           reduce using rule 18 (procedure_declarations -> procedure_declarations procedure_declaration .)


state 24

    (19) procedure_declaration -> PROCEDURE ID . LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON

    LPAREN          shift and go to state 47


state 25

    (2) uses_opt -> USES ID SEMICOLON .

    VAR             reduce using rule 2 (uses_opt -> USES ID SEMICOLON .)
    PROCEDURE       reduce using rule 2 (uses_opt -> USES ID SEMICOLON .)
    BEGIN           reduce using rule 2 (uses_opt -> USES ID SEMICOLON .)


state 26

    (21) compound_statement -> BEGIN statement_list . END

    END             shift and go to state 48


state 27

    (22) statement_list -> statement . statement_list_tail
    (23) statement_list_tail -> . SEMICOLON statement statement_list_tail
    (24) statement_list_tail -> . empty
    (70) empty -> .

    SEMICOLON       shift and go to state 50
    END             reduce using rule 70 (empty -> .)

    statement_list_tail            shift and go to state 49
    empty                          shift and go to state 51

state 28

    (25) statement -> assignment_statement .

    SEMICOLON       reduce using rule 25 (statement -> assignment_statement .)
    END             reduce using rule 25 (statement -> assignment_statement .)
    ELSE            reduce using rule 25 (statement -> assignment_statement .)


state 29

    (26) statement -> if_statement .

    SEMICOLON       reduce using rule 26 (statement -> if_statement .)
    END             reduce using rule 26 (statement -> if_statement .)
    ELSE            reduce using rule 26 (statement -> if_statement .)


state 30

    (27) statement -> FOR . ID COLON_EQUAL expression TO expression DO statement

    ID              shift and go to state 52


state 31

    (37) procedure_call -> ID . LPAREN expression_list RPAREN
    (33) variable -> ID .
    (34) variable -> ID . LBRACKET expression RBRACKET

    LPAREN          shift and go to state 53
    COLON_EQUAL     reduce using rule 33 (variable -> ID .)
    LBRACKET        shift and go to state 54


state 32

    (28) statement -> while_statement .

    SEMICOLON       reduce using rule 28 (statement -> while_statement .)
    END             reduce using rule 28 (statement -> while_statement .)
    ELSE            reduce using rule 28 (statement -> while_statement .)


state 33

    (29) statement -> procedure_call .

    SEMICOLON       reduce using rule 29 (statement -> procedure_call .)
    END             reduce using rule 29 (statement -> procedure_call .)
    ELSE            reduce using rule 29 (statement -> procedure_call .)


state 34

    (30) statement -> compound_statement .

    SEMICOLON       reduce using rule 30 (statement -> compound_statement .)
    END             reduce using rule 30 (statement -> compound_statement .)
    ELSE            reduce using rule 30 (statement -> compound_statement .)


state 35

    (31) statement -> empty .

    SEMICOLON       reduce using rule 31 (statement -> empty .)
    END             reduce using rule 31 (statement -> empty .)
    ELSE            reduce using rule 31 (statement -> empty .)


state 36

    (71) statement -> READLN .
    (72) statement -> READLN . LPAREN ID RPAREN

    SEMICOLON       reduce using rule 71 (statement -> READLN .)
    END             reduce using rule 71 (statement -> READLN .)
    ELSE            reduce using rule 71 (statement -> READLN .)
    LPAREN          shift and go to state 55


state 37

    (73) statement -> WRITELN . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 56


state 38

    (74) statement -> WRITE . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 57


state 39

    (75) statement -> USES . ID SEMICOLON

    ID              shift and go to state 58


state 40

    (32) assignment_statement -> variable . COLON_EQUAL expression

    COLON_EQUAL     shift and go to state 59


state 41

    (35) if_statement -> IF . expression THEN statement ELSE statement
    (42) expression -> . simple_expression relop simple_expression
    (43) expression -> . simple_expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (44) simple_expression -> . term simple_expression_tail
    (49) term -> . factor term_tail
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . variable
    (62) factor -> . NUMBER
    (63) factor -> . STRING_LITERAL
    (33) variable -> . ID
    (34) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 66
    STRING_LITERAL  shift and go to state 67
    ID              shift and go to state 68

    expression                     shift and go to state 60
    simple_expression              shift and go to state 61
    term                           shift and go to state 62
    factor                         shift and go to state 63
    variable                       shift and go to state 65

state 42

    (36) while_statement -> WHILE . expression DO statement
    (42) expression -> . simple_expression relop simple_expression
    (43) expression -> . simple_expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (44) simple_expression -> . term simple_expression_tail
    (49) term -> . factor term_tail
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . variable
    (62) factor -> . NUMBER
    (63) factor -> . STRING_LITERAL
    (33) variable -> . ID
    (34) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 66
    STRING_LITERAL  shift and go to state 67
    ID              shift and go to state 68

    expression                     shift and go to state 69
    simple_expression              shift and go to state 61
    term                           shift and go to state 62
    factor                         shift and go to state 63
    variable                       shift and go to state 65

state 43

    (5) declarations -> VAR declaration_list procedure_declarations .
    (18) procedure_declarations -> procedure_declarations . procedure_declaration
    (19) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON

    BEGIN           reduce using rule 5 (declarations -> VAR declaration_list procedure_declarations .)
    PROCEDURE       shift and go to state 14

    procedure_declaration          shift and go to state 23

state 44

    (10) declaration_list -> declaration_list declaration .

    PROCEDURE       reduce using rule 10 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 10 (declaration_list -> declaration_list declaration .)
    BEGIN           reduce using rule 10 (declaration_list -> declaration_list declaration .)


state 45

    (11) declaration -> id_list COLON . type_specifier SEMICOLON
    (14) type_specifier -> . INTEGER
    (15) type_specifier -> . LONGINT
    (16) type_specifier -> . ARRAY LBRACKET NUMBER DOTDOT NUMBER RBRACKET OF INTEGER

    INTEGER         shift and go to state 71
    LONGINT         shift and go to state 72
    ARRAY           shift and go to state 73

    type_specifier                 shift and go to state 70

state 46

    (13) id_list -> id_list COMMA . ID

    ID              shift and go to state 74


state 47

    (19) procedure_declaration -> PROCEDURE ID LPAREN . parameter_list RPAREN SEMICOLON block SEMICOLON
    (20) parameter_list -> . id_list COLON type_specifier
    (12) id_list -> . ID
    (13) id_list -> . id_list COMMA ID

    ID              shift and go to state 22

    parameter_list                 shift and go to state 75
    id_list                        shift and go to state 76

state 48

    (21) compound_statement -> BEGIN statement_list END .

    DOT             reduce using rule 21 (compound_statement -> BEGIN statement_list END .)
    SEMICOLON       reduce using rule 21 (compound_statement -> BEGIN statement_list END .)
    END             reduce using rule 21 (compound_statement -> BEGIN statement_list END .)
    ELSE            reduce using rule 21 (compound_statement -> BEGIN statement_list END .)


state 49

    (22) statement_list -> statement statement_list_tail .

    END             reduce using rule 22 (statement_list -> statement statement_list_tail .)


state 50

    (23) statement_list_tail -> SEMICOLON . statement statement_list_tail
    (25) statement -> . assignment_statement
    (26) statement -> . if_statement
    (27) statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (28) statement -> . while_statement
    (29) statement -> . procedure_call
    (30) statement -> . compound_statement
    (31) statement -> . empty
    (71) statement -> . READLN
    (72) statement -> . READLN LPAREN ID RPAREN
    (73) statement -> . WRITELN LPAREN expression_list RPAREN
    (74) statement -> . WRITE LPAREN expression_list RPAREN
    (75) statement -> . USES ID SEMICOLON
    (32) assignment_statement -> . variable COLON_EQUAL expression
    (35) if_statement -> . IF expression THEN statement ELSE statement
    (36) while_statement -> . WHILE expression DO statement
    (37) procedure_call -> . ID LPAREN expression_list RPAREN
    (21) compound_statement -> . BEGIN statement_list END
    (70) empty -> .
    (33) variable -> . ID
    (34) variable -> . ID LBRACKET expression RBRACKET

    FOR             shift and go to state 30
    READLN          shift and go to state 36
    WRITELN         shift and go to state 37
    WRITE           shift and go to state 38
    USES            shift and go to state 39
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    ID              shift and go to state 31
    BEGIN           shift and go to state 18
    SEMICOLON       reduce using rule 70 (empty -> .)
    END             reduce using rule 70 (empty -> .)

    statement                      shift and go to state 77
    assignment_statement           shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 32
    procedure_call                 shift and go to state 33
    compound_statement             shift and go to state 34
    empty                          shift and go to state 35
    variable                       shift and go to state 40

state 51

    (24) statement_list_tail -> empty .

    END             reduce using rule 24 (statement_list_tail -> empty .)


state 52

    (27) statement -> FOR ID . COLON_EQUAL expression TO expression DO statement

    COLON_EQUAL     shift and go to state 78


state 53

    (37) procedure_call -> ID LPAREN . expression_list RPAREN
    (38) expression_list -> . expression expression_list_tail
    (41) expression_list -> . empty
    (42) expression -> . simple_expression relop simple_expression
    (43) expression -> . simple_expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (70) empty -> .
    (44) simple_expression -> . term simple_expression_tail
    (49) term -> . factor term_tail
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . variable
    (62) factor -> . NUMBER
    (63) factor -> . STRING_LITERAL
    (33) variable -> . ID
    (34) variable -> . ID LBRACKET expression RBRACKET

    RPAREN          reduce using rule 70 (empty -> .)
    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 66
    STRING_LITERAL  shift and go to state 67
    ID              shift and go to state 68

    expression_list                shift and go to state 79
    expression                     shift and go to state 80
    empty                          shift and go to state 81
    simple_expression              shift and go to state 61
    term                           shift and go to state 62
    factor                         shift and go to state 63
    variable                       shift and go to state 65

state 54

    (34) variable -> ID LBRACKET . expression RBRACKET
    (42) expression -> . simple_expression relop simple_expression
    (43) expression -> . simple_expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (44) simple_expression -> . term simple_expression_tail
    (49) term -> . factor term_tail
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . variable
    (62) factor -> . NUMBER
    (63) factor -> . STRING_LITERAL
    (33) variable -> . ID
    (34) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 66
    STRING_LITERAL  shift and go to state 67
    ID              shift and go to state 68

    expression                     shift and go to state 82
    simple_expression              shift and go to state 61
    term                           shift and go to state 62
    factor                         shift and go to state 63
    variable                       shift and go to state 65

state 55

    (72) statement -> READLN LPAREN . ID RPAREN

    ID              shift and go to state 83


state 56

    (73) statement -> WRITELN LPAREN . expression_list RPAREN
    (38) expression_list -> . expression expression_list_tail
    (41) expression_list -> . empty
    (42) expression -> . simple_expression relop simple_expression
    (43) expression -> . simple_expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (70) empty -> .
    (44) simple_expression -> . term simple_expression_tail
    (49) term -> . factor term_tail
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . variable
    (62) factor -> . NUMBER
    (63) factor -> . STRING_LITERAL
    (33) variable -> . ID
    (34) variable -> . ID LBRACKET expression RBRACKET

    RPAREN          reduce using rule 70 (empty -> .)
    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 66
    STRING_LITERAL  shift and go to state 67
    ID              shift and go to state 68

    expression_list                shift and go to state 84
    expression                     shift and go to state 80
    empty                          shift and go to state 81
    simple_expression              shift and go to state 61
    term                           shift and go to state 62
    factor                         shift and go to state 63
    variable                       shift and go to state 65

state 57

    (74) statement -> WRITE LPAREN . expression_list RPAREN
    (38) expression_list -> . expression expression_list_tail
    (41) expression_list -> . empty
    (42) expression -> . simple_expression relop simple_expression
    (43) expression -> . simple_expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (70) empty -> .
    (44) simple_expression -> . term simple_expression_tail
    (49) term -> . factor term_tail
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . variable
    (62) factor -> . NUMBER
    (63) factor -> . STRING_LITERAL
    (33) variable -> . ID
    (34) variable -> . ID LBRACKET expression RBRACKET

    RPAREN          reduce using rule 70 (empty -> .)
    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 66
    STRING_LITERAL  shift and go to state 67
    ID              shift and go to state 68

    expression_list                shift and go to state 85
    expression                     shift and go to state 80
    empty                          shift and go to state 81
    simple_expression              shift and go to state 61
    term                           shift and go to state 62
    factor                         shift and go to state 63
    variable                       shift and go to state 65

state 58

    (75) statement -> USES ID . SEMICOLON

    SEMICOLON       shift and go to state 86


state 59

    (32) assignment_statement -> variable COLON_EQUAL . expression
    (42) expression -> . simple_expression relop simple_expression
    (43) expression -> . simple_expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (44) simple_expression -> . term simple_expression_tail
    (49) term -> . factor term_tail
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . variable
    (62) factor -> . NUMBER
    (63) factor -> . STRING_LITERAL
    (33) variable -> . ID
    (34) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 66
    STRING_LITERAL  shift and go to state 67
    ID              shift and go to state 68

    variable                       shift and go to state 65
    expression                     shift and go to state 87
    simple_expression              shift and go to state 61
    term                           shift and go to state 62
    factor                         shift and go to state 63

state 60

    (35) if_statement -> IF expression . THEN statement ELSE statement
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression

    THEN            shift and go to state 88
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    MOD             shift and go to state 93


state 61

    (42) expression -> simple_expression . relop simple_expression
    (43) expression -> simple_expression .
    (64) relop -> . LESS
    (65) relop -> . LESS_EQUAL
    (66) relop -> . GREAT
    (67) relop -> . GREAT_EQUAL
    (68) relop -> . EQUAL
    (69) relop -> . DIFFERENT

    THEN            reduce using rule 43 (expression -> simple_expression .)
    PLUS            reduce using rule 43 (expression -> simple_expression .)
    MINUS           reduce using rule 43 (expression -> simple_expression .)
    TIMES           reduce using rule 43 (expression -> simple_expression .)
    DIVIDE          reduce using rule 43 (expression -> simple_expression .)
    MOD             reduce using rule 43 (expression -> simple_expression .)
    DO              reduce using rule 43 (expression -> simple_expression .)
    COMMA           reduce using rule 43 (expression -> simple_expression .)
    RPAREN          reduce using rule 43 (expression -> simple_expression .)
    RBRACKET        reduce using rule 43 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 43 (expression -> simple_expression .)
    END             reduce using rule 43 (expression -> simple_expression .)
    ELSE            reduce using rule 43 (expression -> simple_expression .)
    TO              reduce using rule 43 (expression -> simple_expression .)
    LESS            shift and go to state 95
    LESS_EQUAL      shift and go to state 96
    GREAT           shift and go to state 97
    GREAT_EQUAL     shift and go to state 98
    EQUAL           shift and go to state 99
    DIFFERENT       shift and go to state 100

    relop                          shift and go to state 94

state 62

    (44) simple_expression -> term . simple_expression_tail
    (45) simple_expression_tail -> . addop term
    (46) simple_expression_tail -> . empty
    (47) addop -> . PLUS
    (48) addop -> . MINUS
    (70) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    LESS            reduce using rule 70 (empty -> .)
    LESS_EQUAL      reduce using rule 70 (empty -> .)
    GREAT           reduce using rule 70 (empty -> .)
    GREAT_EQUAL     reduce using rule 70 (empty -> .)
    EQUAL           reduce using rule 70 (empty -> .)
    DIFFERENT       reduce using rule 70 (empty -> .)
    THEN            reduce using rule 70 (empty -> .)
    TIMES           reduce using rule 70 (empty -> .)
    DIVIDE          reduce using rule 70 (empty -> .)
    MOD             reduce using rule 70 (empty -> .)
    DO              reduce using rule 70 (empty -> .)
    COMMA           reduce using rule 70 (empty -> .)
    RPAREN          reduce using rule 70 (empty -> .)
    RBRACKET        reduce using rule 70 (empty -> .)
    SEMICOLON       reduce using rule 70 (empty -> .)
    END             reduce using rule 70 (empty -> .)
    ELSE            reduce using rule 70 (empty -> .)
    TO              reduce using rule 70 (empty -> .)

  ! PLUS            [ reduce using rule 70 (empty -> .) ]
  ! MINUS           [ reduce using rule 70 (empty -> .) ]

    simple_expression_tail         shift and go to state 101
    addop                          shift and go to state 102
    empty                          shift and go to state 103

state 63

    (49) term -> factor . term_tail
    (50) term_tail -> . mulop factor
    (51) term_tail -> . empty
    (52) mulop -> . TIMES
    (53) mulop -> . DIVIDE
    (54) mulop -> . DIV
    (70) empty -> .

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 110
    DIV             shift and go to state 111
    PLUS            reduce using rule 70 (empty -> .)
    MINUS           reduce using rule 70 (empty -> .)
    LESS            reduce using rule 70 (empty -> .)
    LESS_EQUAL      reduce using rule 70 (empty -> .)
    GREAT           reduce using rule 70 (empty -> .)
    GREAT_EQUAL     reduce using rule 70 (empty -> .)
    EQUAL           reduce using rule 70 (empty -> .)
    DIFFERENT       reduce using rule 70 (empty -> .)
    THEN            reduce using rule 70 (empty -> .)
    MOD             reduce using rule 70 (empty -> .)
    DO              reduce using rule 70 (empty -> .)
    COMMA           reduce using rule 70 (empty -> .)
    RPAREN          reduce using rule 70 (empty -> .)
    RBRACKET        reduce using rule 70 (empty -> .)
    SEMICOLON       reduce using rule 70 (empty -> .)
    END             reduce using rule 70 (empty -> .)
    ELSE            reduce using rule 70 (empty -> .)
    TO              reduce using rule 70 (empty -> .)

  ! TIMES           [ reduce using rule 70 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 70 (empty -> .) ]

    term_tail                      shift and go to state 106
    mulop                          shift and go to state 107
    empty                          shift and go to state 108

state 64

    (60) factor -> LPAREN . expression RPAREN
    (42) expression -> . simple_expression relop simple_expression
    (43) expression -> . simple_expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (44) simple_expression -> . term simple_expression_tail
    (49) term -> . factor term_tail
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . variable
    (62) factor -> . NUMBER
    (63) factor -> . STRING_LITERAL
    (33) variable -> . ID
    (34) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 66
    STRING_LITERAL  shift and go to state 67
    ID              shift and go to state 68

    expression                     shift and go to state 112
    simple_expression              shift and go to state 61
    term                           shift and go to state 62
    factor                         shift and go to state 63
    variable                       shift and go to state 65

state 65

    (61) factor -> variable .

    TIMES           reduce using rule 61 (factor -> variable .)
    DIVIDE          reduce using rule 61 (factor -> variable .)
    DIV             reduce using rule 61 (factor -> variable .)
    PLUS            reduce using rule 61 (factor -> variable .)
    MINUS           reduce using rule 61 (factor -> variable .)
    LESS            reduce using rule 61 (factor -> variable .)
    LESS_EQUAL      reduce using rule 61 (factor -> variable .)
    GREAT           reduce using rule 61 (factor -> variable .)
    GREAT_EQUAL     reduce using rule 61 (factor -> variable .)
    EQUAL           reduce using rule 61 (factor -> variable .)
    DIFFERENT       reduce using rule 61 (factor -> variable .)
    THEN            reduce using rule 61 (factor -> variable .)
    MOD             reduce using rule 61 (factor -> variable .)
    DO              reduce using rule 61 (factor -> variable .)
    COMMA           reduce using rule 61 (factor -> variable .)
    RPAREN          reduce using rule 61 (factor -> variable .)
    RBRACKET        reduce using rule 61 (factor -> variable .)
    SEMICOLON       reduce using rule 61 (factor -> variable .)
    END             reduce using rule 61 (factor -> variable .)
    ELSE            reduce using rule 61 (factor -> variable .)
    TO              reduce using rule 61 (factor -> variable .)


state 66

    (62) factor -> NUMBER .

    TIMES           reduce using rule 62 (factor -> NUMBER .)
    DIVIDE          reduce using rule 62 (factor -> NUMBER .)
    DIV             reduce using rule 62 (factor -> NUMBER .)
    PLUS            reduce using rule 62 (factor -> NUMBER .)
    MINUS           reduce using rule 62 (factor -> NUMBER .)
    LESS            reduce using rule 62 (factor -> NUMBER .)
    LESS_EQUAL      reduce using rule 62 (factor -> NUMBER .)
    GREAT           reduce using rule 62 (factor -> NUMBER .)
    GREAT_EQUAL     reduce using rule 62 (factor -> NUMBER .)
    EQUAL           reduce using rule 62 (factor -> NUMBER .)
    DIFFERENT       reduce using rule 62 (factor -> NUMBER .)
    THEN            reduce using rule 62 (factor -> NUMBER .)
    MOD             reduce using rule 62 (factor -> NUMBER .)
    DO              reduce using rule 62 (factor -> NUMBER .)
    COMMA           reduce using rule 62 (factor -> NUMBER .)
    RPAREN          reduce using rule 62 (factor -> NUMBER .)
    RBRACKET        reduce using rule 62 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 62 (factor -> NUMBER .)
    END             reduce using rule 62 (factor -> NUMBER .)
    ELSE            reduce using rule 62 (factor -> NUMBER .)
    TO              reduce using rule 62 (factor -> NUMBER .)


state 67

    (63) factor -> STRING_LITERAL .

    TIMES           reduce using rule 63 (factor -> STRING_LITERAL .)
    DIVIDE          reduce using rule 63 (factor -> STRING_LITERAL .)
    DIV             reduce using rule 63 (factor -> STRING_LITERAL .)
    PLUS            reduce using rule 63 (factor -> STRING_LITERAL .)
    MINUS           reduce using rule 63 (factor -> STRING_LITERAL .)
    LESS            reduce using rule 63 (factor -> STRING_LITERAL .)
    LESS_EQUAL      reduce using rule 63 (factor -> STRING_LITERAL .)
    GREAT           reduce using rule 63 (factor -> STRING_LITERAL .)
    GREAT_EQUAL     reduce using rule 63 (factor -> STRING_LITERAL .)
    EQUAL           reduce using rule 63 (factor -> STRING_LITERAL .)
    DIFFERENT       reduce using rule 63 (factor -> STRING_LITERAL .)
    THEN            reduce using rule 63 (factor -> STRING_LITERAL .)
    MOD             reduce using rule 63 (factor -> STRING_LITERAL .)
    DO              reduce using rule 63 (factor -> STRING_LITERAL .)
    COMMA           reduce using rule 63 (factor -> STRING_LITERAL .)
    RPAREN          reduce using rule 63 (factor -> STRING_LITERAL .)
    RBRACKET        reduce using rule 63 (factor -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 63 (factor -> STRING_LITERAL .)
    END             reduce using rule 63 (factor -> STRING_LITERAL .)
    ELSE            reduce using rule 63 (factor -> STRING_LITERAL .)
    TO              reduce using rule 63 (factor -> STRING_LITERAL .)


state 68

    (33) variable -> ID .
    (34) variable -> ID . LBRACKET expression RBRACKET

    TIMES           reduce using rule 33 (variable -> ID .)
    DIVIDE          reduce using rule 33 (variable -> ID .)
    DIV             reduce using rule 33 (variable -> ID .)
    PLUS            reduce using rule 33 (variable -> ID .)
    MINUS           reduce using rule 33 (variable -> ID .)
    LESS            reduce using rule 33 (variable -> ID .)
    LESS_EQUAL      reduce using rule 33 (variable -> ID .)
    GREAT           reduce using rule 33 (variable -> ID .)
    GREAT_EQUAL     reduce using rule 33 (variable -> ID .)
    EQUAL           reduce using rule 33 (variable -> ID .)
    DIFFERENT       reduce using rule 33 (variable -> ID .)
    THEN            reduce using rule 33 (variable -> ID .)
    MOD             reduce using rule 33 (variable -> ID .)
    DO              reduce using rule 33 (variable -> ID .)
    COMMA           reduce using rule 33 (variable -> ID .)
    RPAREN          reduce using rule 33 (variable -> ID .)
    RBRACKET        reduce using rule 33 (variable -> ID .)
    SEMICOLON       reduce using rule 33 (variable -> ID .)
    END             reduce using rule 33 (variable -> ID .)
    ELSE            reduce using rule 33 (variable -> ID .)
    TO              reduce using rule 33 (variable -> ID .)
    LBRACKET        shift and go to state 54


state 69

    (36) while_statement -> WHILE expression . DO statement
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression

    DO              shift and go to state 113
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    MOD             shift and go to state 93


state 70

    (11) declaration -> id_list COLON type_specifier . SEMICOLON

    SEMICOLON       shift and go to state 114


state 71

    (14) type_specifier -> INTEGER .

    SEMICOLON       reduce using rule 14 (type_specifier -> INTEGER .)
    RPAREN          reduce using rule 14 (type_specifier -> INTEGER .)


state 72

    (15) type_specifier -> LONGINT .

    SEMICOLON       reduce using rule 15 (type_specifier -> LONGINT .)
    RPAREN          reduce using rule 15 (type_specifier -> LONGINT .)


state 73

    (16) type_specifier -> ARRAY . LBRACKET NUMBER DOTDOT NUMBER RBRACKET OF INTEGER

    LBRACKET        shift and go to state 115


state 74

    (13) id_list -> id_list COMMA ID .

    COLON           reduce using rule 13 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 13 (id_list -> id_list COMMA ID .)


state 75

    (19) procedure_declaration -> PROCEDURE ID LPAREN parameter_list . RPAREN SEMICOLON block SEMICOLON

    RPAREN          shift and go to state 116


state 76

    (20) parameter_list -> id_list . COLON type_specifier
    (13) id_list -> id_list . COMMA ID

    COLON           shift and go to state 117
    COMMA           shift and go to state 46


state 77

    (23) statement_list_tail -> SEMICOLON statement . statement_list_tail
    (23) statement_list_tail -> . SEMICOLON statement statement_list_tail
    (24) statement_list_tail -> . empty
    (70) empty -> .

    SEMICOLON       shift and go to state 50
    END             reduce using rule 70 (empty -> .)

    statement_list_tail            shift and go to state 118
    empty                          shift and go to state 51

state 78

    (27) statement -> FOR ID COLON_EQUAL . expression TO expression DO statement
    (42) expression -> . simple_expression relop simple_expression
    (43) expression -> . simple_expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (44) simple_expression -> . term simple_expression_tail
    (49) term -> . factor term_tail
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . variable
    (62) factor -> . NUMBER
    (63) factor -> . STRING_LITERAL
    (33) variable -> . ID
    (34) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 66
    STRING_LITERAL  shift and go to state 67
    ID              shift and go to state 68

    expression                     shift and go to state 119
    simple_expression              shift and go to state 61
    term                           shift and go to state 62
    factor                         shift and go to state 63
    variable                       shift and go to state 65

state 79

    (37) procedure_call -> ID LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 120


state 80

    (38) expression_list -> expression . expression_list_tail
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression
    (39) expression_list_tail -> . COMMA expression expression_list_tail
    (40) expression_list_tail -> . empty
    (70) empty -> .

    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    MOD             shift and go to state 93
    COMMA           shift and go to state 122
    RPAREN          reduce using rule 70 (empty -> .)

    expression_list_tail           shift and go to state 121
    empty                          shift and go to state 123

state 81

    (41) expression_list -> empty .

    RPAREN          reduce using rule 41 (expression_list -> empty .)


state 82

    (34) variable -> ID LBRACKET expression . RBRACKET
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression

    RBRACKET        shift and go to state 124
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    MOD             shift and go to state 93


state 83

    (72) statement -> READLN LPAREN ID . RPAREN

    RPAREN          shift and go to state 125


state 84

    (73) statement -> WRITELN LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 126


state 85

    (74) statement -> WRITE LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 127


state 86

    (75) statement -> USES ID SEMICOLON .

    SEMICOLON       reduce using rule 75 (statement -> USES ID SEMICOLON .)
    END             reduce using rule 75 (statement -> USES ID SEMICOLON .)
    ELSE            reduce using rule 75 (statement -> USES ID SEMICOLON .)


state 87

    (32) assignment_statement -> variable COLON_EQUAL expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression

    SEMICOLON       reduce using rule 32 (assignment_statement -> variable COLON_EQUAL expression .)
    END             reduce using rule 32 (assignment_statement -> variable COLON_EQUAL expression .)
    ELSE            reduce using rule 32 (assignment_statement -> variable COLON_EQUAL expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    MOD             shift and go to state 93


state 88

    (35) if_statement -> IF expression THEN . statement ELSE statement
    (25) statement -> . assignment_statement
    (26) statement -> . if_statement
    (27) statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (28) statement -> . while_statement
    (29) statement -> . procedure_call
    (30) statement -> . compound_statement
    (31) statement -> . empty
    (71) statement -> . READLN
    (72) statement -> . READLN LPAREN ID RPAREN
    (73) statement -> . WRITELN LPAREN expression_list RPAREN
    (74) statement -> . WRITE LPAREN expression_list RPAREN
    (75) statement -> . USES ID SEMICOLON
    (32) assignment_statement -> . variable COLON_EQUAL expression
    (35) if_statement -> . IF expression THEN statement ELSE statement
    (36) while_statement -> . WHILE expression DO statement
    (37) procedure_call -> . ID LPAREN expression_list RPAREN
    (21) compound_statement -> . BEGIN statement_list END
    (70) empty -> .
    (33) variable -> . ID
    (34) variable -> . ID LBRACKET expression RBRACKET

    FOR             shift and go to state 30
    READLN          shift and go to state 36
    WRITELN         shift and go to state 37
    WRITE           shift and go to state 38
    USES            shift and go to state 39
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    ID              shift and go to state 31
    BEGIN           shift and go to state 18
    ELSE            reduce using rule 70 (empty -> .)

    statement                      shift and go to state 128
    assignment_statement           shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 32
    procedure_call                 shift and go to state 33
    compound_statement             shift and go to state 34
    empty                          shift and go to state 35
    variable                       shift and go to state 40

state 89

    (55) expression -> expression PLUS . expression
    (42) expression -> . simple_expression relop simple_expression
    (43) expression -> . simple_expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (44) simple_expression -> . term simple_expression_tail
    (49) term -> . factor term_tail
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . variable
    (62) factor -> . NUMBER
    (63) factor -> . STRING_LITERAL
    (33) variable -> . ID
    (34) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 66
    STRING_LITERAL  shift and go to state 67
    ID              shift and go to state 68

    expression                     shift and go to state 129
    simple_expression              shift and go to state 61
    term                           shift and go to state 62
    factor                         shift and go to state 63
    variable                       shift and go to state 65

state 90

    (56) expression -> expression MINUS . expression
    (42) expression -> . simple_expression relop simple_expression
    (43) expression -> . simple_expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (44) simple_expression -> . term simple_expression_tail
    (49) term -> . factor term_tail
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . variable
    (62) factor -> . NUMBER
    (63) factor -> . STRING_LITERAL
    (33) variable -> . ID
    (34) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 66
    STRING_LITERAL  shift and go to state 67
    ID              shift and go to state 68

    expression                     shift and go to state 130
    simple_expression              shift and go to state 61
    term                           shift and go to state 62
    factor                         shift and go to state 63
    variable                       shift and go to state 65

state 91

    (57) expression -> expression TIMES . expression
    (42) expression -> . simple_expression relop simple_expression
    (43) expression -> . simple_expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (44) simple_expression -> . term simple_expression_tail
    (49) term -> . factor term_tail
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . variable
    (62) factor -> . NUMBER
    (63) factor -> . STRING_LITERAL
    (33) variable -> . ID
    (34) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 66
    STRING_LITERAL  shift and go to state 67
    ID              shift and go to state 68

    expression                     shift and go to state 131
    simple_expression              shift and go to state 61
    term                           shift and go to state 62
    factor                         shift and go to state 63
    variable                       shift and go to state 65

state 92

    (58) expression -> expression DIVIDE . expression
    (42) expression -> . simple_expression relop simple_expression
    (43) expression -> . simple_expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (44) simple_expression -> . term simple_expression_tail
    (49) term -> . factor term_tail
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . variable
    (62) factor -> . NUMBER
    (63) factor -> . STRING_LITERAL
    (33) variable -> . ID
    (34) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 66
    STRING_LITERAL  shift and go to state 67
    ID              shift and go to state 68

    expression                     shift and go to state 132
    simple_expression              shift and go to state 61
    term                           shift and go to state 62
    factor                         shift and go to state 63
    variable                       shift and go to state 65

state 93

    (59) expression -> expression MOD . expression
    (42) expression -> . simple_expression relop simple_expression
    (43) expression -> . simple_expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (44) simple_expression -> . term simple_expression_tail
    (49) term -> . factor term_tail
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . variable
    (62) factor -> . NUMBER
    (63) factor -> . STRING_LITERAL
    (33) variable -> . ID
    (34) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 66
    STRING_LITERAL  shift and go to state 67
    ID              shift and go to state 68

    expression                     shift and go to state 133
    simple_expression              shift and go to state 61
    term                           shift and go to state 62
    factor                         shift and go to state 63
    variable                       shift and go to state 65

state 94

    (42) expression -> simple_expression relop . simple_expression
    (44) simple_expression -> . term simple_expression_tail
    (49) term -> . factor term_tail
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . variable
    (62) factor -> . NUMBER
    (63) factor -> . STRING_LITERAL
    (33) variable -> . ID
    (34) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 66
    STRING_LITERAL  shift and go to state 67
    ID              shift and go to state 68

    simple_expression              shift and go to state 134
    term                           shift and go to state 62
    factor                         shift and go to state 63
    variable                       shift and go to state 65

state 95

    (64) relop -> LESS .

    LPAREN          reduce using rule 64 (relop -> LESS .)
    NUMBER          reduce using rule 64 (relop -> LESS .)
    STRING_LITERAL  reduce using rule 64 (relop -> LESS .)
    ID              reduce using rule 64 (relop -> LESS .)


state 96

    (65) relop -> LESS_EQUAL .

    LPAREN          reduce using rule 65 (relop -> LESS_EQUAL .)
    NUMBER          reduce using rule 65 (relop -> LESS_EQUAL .)
    STRING_LITERAL  reduce using rule 65 (relop -> LESS_EQUAL .)
    ID              reduce using rule 65 (relop -> LESS_EQUAL .)


state 97

    (66) relop -> GREAT .

    LPAREN          reduce using rule 66 (relop -> GREAT .)
    NUMBER          reduce using rule 66 (relop -> GREAT .)
    STRING_LITERAL  reduce using rule 66 (relop -> GREAT .)
    ID              reduce using rule 66 (relop -> GREAT .)


state 98

    (67) relop -> GREAT_EQUAL .

    LPAREN          reduce using rule 67 (relop -> GREAT_EQUAL .)
    NUMBER          reduce using rule 67 (relop -> GREAT_EQUAL .)
    STRING_LITERAL  reduce using rule 67 (relop -> GREAT_EQUAL .)
    ID              reduce using rule 67 (relop -> GREAT_EQUAL .)


state 99

    (68) relop -> EQUAL .

    LPAREN          reduce using rule 68 (relop -> EQUAL .)
    NUMBER          reduce using rule 68 (relop -> EQUAL .)
    STRING_LITERAL  reduce using rule 68 (relop -> EQUAL .)
    ID              reduce using rule 68 (relop -> EQUAL .)


state 100

    (69) relop -> DIFFERENT .

    LPAREN          reduce using rule 69 (relop -> DIFFERENT .)
    NUMBER          reduce using rule 69 (relop -> DIFFERENT .)
    STRING_LITERAL  reduce using rule 69 (relop -> DIFFERENT .)
    ID              reduce using rule 69 (relop -> DIFFERENT .)


state 101

    (44) simple_expression -> term simple_expression_tail .

    LESS            reduce using rule 44 (simple_expression -> term simple_expression_tail .)
    LESS_EQUAL      reduce using rule 44 (simple_expression -> term simple_expression_tail .)
    GREAT           reduce using rule 44 (simple_expression -> term simple_expression_tail .)
    GREAT_EQUAL     reduce using rule 44 (simple_expression -> term simple_expression_tail .)
    EQUAL           reduce using rule 44 (simple_expression -> term simple_expression_tail .)
    DIFFERENT       reduce using rule 44 (simple_expression -> term simple_expression_tail .)
    THEN            reduce using rule 44 (simple_expression -> term simple_expression_tail .)
    PLUS            reduce using rule 44 (simple_expression -> term simple_expression_tail .)
    MINUS           reduce using rule 44 (simple_expression -> term simple_expression_tail .)
    TIMES           reduce using rule 44 (simple_expression -> term simple_expression_tail .)
    DIVIDE          reduce using rule 44 (simple_expression -> term simple_expression_tail .)
    MOD             reduce using rule 44 (simple_expression -> term simple_expression_tail .)
    DO              reduce using rule 44 (simple_expression -> term simple_expression_tail .)
    COMMA           reduce using rule 44 (simple_expression -> term simple_expression_tail .)
    RPAREN          reduce using rule 44 (simple_expression -> term simple_expression_tail .)
    RBRACKET        reduce using rule 44 (simple_expression -> term simple_expression_tail .)
    SEMICOLON       reduce using rule 44 (simple_expression -> term simple_expression_tail .)
    END             reduce using rule 44 (simple_expression -> term simple_expression_tail .)
    ELSE            reduce using rule 44 (simple_expression -> term simple_expression_tail .)
    TO              reduce using rule 44 (simple_expression -> term simple_expression_tail .)


state 102

    (45) simple_expression_tail -> addop . term
    (49) term -> . factor term_tail
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . variable
    (62) factor -> . NUMBER
    (63) factor -> . STRING_LITERAL
    (33) variable -> . ID
    (34) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 66
    STRING_LITERAL  shift and go to state 67
    ID              shift and go to state 68

    term                           shift and go to state 135
    factor                         shift and go to state 63
    variable                       shift and go to state 65

state 103

    (46) simple_expression_tail -> empty .

    LESS            reduce using rule 46 (simple_expression_tail -> empty .)
    LESS_EQUAL      reduce using rule 46 (simple_expression_tail -> empty .)
    GREAT           reduce using rule 46 (simple_expression_tail -> empty .)
    GREAT_EQUAL     reduce using rule 46 (simple_expression_tail -> empty .)
    EQUAL           reduce using rule 46 (simple_expression_tail -> empty .)
    DIFFERENT       reduce using rule 46 (simple_expression_tail -> empty .)
    THEN            reduce using rule 46 (simple_expression_tail -> empty .)
    PLUS            reduce using rule 46 (simple_expression_tail -> empty .)
    MINUS           reduce using rule 46 (simple_expression_tail -> empty .)
    TIMES           reduce using rule 46 (simple_expression_tail -> empty .)
    DIVIDE          reduce using rule 46 (simple_expression_tail -> empty .)
    MOD             reduce using rule 46 (simple_expression_tail -> empty .)
    DO              reduce using rule 46 (simple_expression_tail -> empty .)
    COMMA           reduce using rule 46 (simple_expression_tail -> empty .)
    RPAREN          reduce using rule 46 (simple_expression_tail -> empty .)
    RBRACKET        reduce using rule 46 (simple_expression_tail -> empty .)
    SEMICOLON       reduce using rule 46 (simple_expression_tail -> empty .)
    END             reduce using rule 46 (simple_expression_tail -> empty .)
    ELSE            reduce using rule 46 (simple_expression_tail -> empty .)
    TO              reduce using rule 46 (simple_expression_tail -> empty .)


state 104

    (47) addop -> PLUS .

    LPAREN          reduce using rule 47 (addop -> PLUS .)
    NUMBER          reduce using rule 47 (addop -> PLUS .)
    STRING_LITERAL  reduce using rule 47 (addop -> PLUS .)
    ID              reduce using rule 47 (addop -> PLUS .)


state 105

    (48) addop -> MINUS .

    LPAREN          reduce using rule 48 (addop -> MINUS .)
    NUMBER          reduce using rule 48 (addop -> MINUS .)
    STRING_LITERAL  reduce using rule 48 (addop -> MINUS .)
    ID              reduce using rule 48 (addop -> MINUS .)


state 106

    (49) term -> factor term_tail .

    PLUS            reduce using rule 49 (term -> factor term_tail .)
    MINUS           reduce using rule 49 (term -> factor term_tail .)
    LESS            reduce using rule 49 (term -> factor term_tail .)
    LESS_EQUAL      reduce using rule 49 (term -> factor term_tail .)
    GREAT           reduce using rule 49 (term -> factor term_tail .)
    GREAT_EQUAL     reduce using rule 49 (term -> factor term_tail .)
    EQUAL           reduce using rule 49 (term -> factor term_tail .)
    DIFFERENT       reduce using rule 49 (term -> factor term_tail .)
    THEN            reduce using rule 49 (term -> factor term_tail .)
    TIMES           reduce using rule 49 (term -> factor term_tail .)
    DIVIDE          reduce using rule 49 (term -> factor term_tail .)
    MOD             reduce using rule 49 (term -> factor term_tail .)
    DO              reduce using rule 49 (term -> factor term_tail .)
    COMMA           reduce using rule 49 (term -> factor term_tail .)
    RPAREN          reduce using rule 49 (term -> factor term_tail .)
    RBRACKET        reduce using rule 49 (term -> factor term_tail .)
    SEMICOLON       reduce using rule 49 (term -> factor term_tail .)
    END             reduce using rule 49 (term -> factor term_tail .)
    ELSE            reduce using rule 49 (term -> factor term_tail .)
    TO              reduce using rule 49 (term -> factor term_tail .)


state 107

    (50) term_tail -> mulop . factor
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . variable
    (62) factor -> . NUMBER
    (63) factor -> . STRING_LITERAL
    (33) variable -> . ID
    (34) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 66
    STRING_LITERAL  shift and go to state 67
    ID              shift and go to state 68

    factor                         shift and go to state 136
    variable                       shift and go to state 65

state 108

    (51) term_tail -> empty .

    PLUS            reduce using rule 51 (term_tail -> empty .)
    MINUS           reduce using rule 51 (term_tail -> empty .)
    LESS            reduce using rule 51 (term_tail -> empty .)
    LESS_EQUAL      reduce using rule 51 (term_tail -> empty .)
    GREAT           reduce using rule 51 (term_tail -> empty .)
    GREAT_EQUAL     reduce using rule 51 (term_tail -> empty .)
    EQUAL           reduce using rule 51 (term_tail -> empty .)
    DIFFERENT       reduce using rule 51 (term_tail -> empty .)
    THEN            reduce using rule 51 (term_tail -> empty .)
    TIMES           reduce using rule 51 (term_tail -> empty .)
    DIVIDE          reduce using rule 51 (term_tail -> empty .)
    MOD             reduce using rule 51 (term_tail -> empty .)
    DO              reduce using rule 51 (term_tail -> empty .)
    COMMA           reduce using rule 51 (term_tail -> empty .)
    RPAREN          reduce using rule 51 (term_tail -> empty .)
    RBRACKET        reduce using rule 51 (term_tail -> empty .)
    SEMICOLON       reduce using rule 51 (term_tail -> empty .)
    END             reduce using rule 51 (term_tail -> empty .)
    ELSE            reduce using rule 51 (term_tail -> empty .)
    TO              reduce using rule 51 (term_tail -> empty .)


state 109

    (52) mulop -> TIMES .

    LPAREN          reduce using rule 52 (mulop -> TIMES .)
    NUMBER          reduce using rule 52 (mulop -> TIMES .)
    STRING_LITERAL  reduce using rule 52 (mulop -> TIMES .)
    ID              reduce using rule 52 (mulop -> TIMES .)


state 110

    (53) mulop -> DIVIDE .

    LPAREN          reduce using rule 53 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 53 (mulop -> DIVIDE .)
    STRING_LITERAL  reduce using rule 53 (mulop -> DIVIDE .)
    ID              reduce using rule 53 (mulop -> DIVIDE .)


state 111

    (54) mulop -> DIV .

    LPAREN          reduce using rule 54 (mulop -> DIV .)
    NUMBER          reduce using rule 54 (mulop -> DIV .)
    STRING_LITERAL  reduce using rule 54 (mulop -> DIV .)
    ID              reduce using rule 54 (mulop -> DIV .)


state 112

    (60) factor -> LPAREN expression . RPAREN
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression

    RPAREN          shift and go to state 137
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    MOD             shift and go to state 93


state 113

    (36) while_statement -> WHILE expression DO . statement
    (25) statement -> . assignment_statement
    (26) statement -> . if_statement
    (27) statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (28) statement -> . while_statement
    (29) statement -> . procedure_call
    (30) statement -> . compound_statement
    (31) statement -> . empty
    (71) statement -> . READLN
    (72) statement -> . READLN LPAREN ID RPAREN
    (73) statement -> . WRITELN LPAREN expression_list RPAREN
    (74) statement -> . WRITE LPAREN expression_list RPAREN
    (75) statement -> . USES ID SEMICOLON
    (32) assignment_statement -> . variable COLON_EQUAL expression
    (35) if_statement -> . IF expression THEN statement ELSE statement
    (36) while_statement -> . WHILE expression DO statement
    (37) procedure_call -> . ID LPAREN expression_list RPAREN
    (21) compound_statement -> . BEGIN statement_list END
    (70) empty -> .
    (33) variable -> . ID
    (34) variable -> . ID LBRACKET expression RBRACKET

    FOR             shift and go to state 30
    READLN          shift and go to state 36
    WRITELN         shift and go to state 37
    WRITE           shift and go to state 38
    USES            shift and go to state 39
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    ID              shift and go to state 31
    BEGIN           shift and go to state 18
    SEMICOLON       reduce using rule 70 (empty -> .)
    END             reduce using rule 70 (empty -> .)
    ELSE            reduce using rule 70 (empty -> .)

    statement                      shift and go to state 138
    assignment_statement           shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 32
    procedure_call                 shift and go to state 33
    compound_statement             shift and go to state 34
    empty                          shift and go to state 35
    variable                       shift and go to state 40

state 114

    (11) declaration -> id_list COLON type_specifier SEMICOLON .

    PROCEDURE       reduce using rule 11 (declaration -> id_list COLON type_specifier SEMICOLON .)
    ID              reduce using rule 11 (declaration -> id_list COLON type_specifier SEMICOLON .)
    BEGIN           reduce using rule 11 (declaration -> id_list COLON type_specifier SEMICOLON .)


state 115

    (16) type_specifier -> ARRAY LBRACKET . NUMBER DOTDOT NUMBER RBRACKET OF INTEGER

    NUMBER          shift and go to state 139


state 116

    (19) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN . SEMICOLON block SEMICOLON

    SEMICOLON       shift and go to state 140


state 117

    (20) parameter_list -> id_list COLON . type_specifier
    (14) type_specifier -> . INTEGER
    (15) type_specifier -> . LONGINT
    (16) type_specifier -> . ARRAY LBRACKET NUMBER DOTDOT NUMBER RBRACKET OF INTEGER

    INTEGER         shift and go to state 71
    LONGINT         shift and go to state 72
    ARRAY           shift and go to state 73

    type_specifier                 shift and go to state 141

state 118

    (23) statement_list_tail -> SEMICOLON statement statement_list_tail .

    END             reduce using rule 23 (statement_list_tail -> SEMICOLON statement statement_list_tail .)


state 119

    (27) statement -> FOR ID COLON_EQUAL expression . TO expression DO statement
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression

    TO              shift and go to state 142
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    MOD             shift and go to state 93


state 120

    (37) procedure_call -> ID LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 37 (procedure_call -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 37 (procedure_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 37 (procedure_call -> ID LPAREN expression_list RPAREN .)


state 121

    (38) expression_list -> expression expression_list_tail .

    RPAREN          reduce using rule 38 (expression_list -> expression expression_list_tail .)


state 122

    (39) expression_list_tail -> COMMA . expression expression_list_tail
    (42) expression -> . simple_expression relop simple_expression
    (43) expression -> . simple_expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (44) simple_expression -> . term simple_expression_tail
    (49) term -> . factor term_tail
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . variable
    (62) factor -> . NUMBER
    (63) factor -> . STRING_LITERAL
    (33) variable -> . ID
    (34) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 66
    STRING_LITERAL  shift and go to state 67
    ID              shift and go to state 68

    expression                     shift and go to state 143
    simple_expression              shift and go to state 61
    term                           shift and go to state 62
    factor                         shift and go to state 63
    variable                       shift and go to state 65

state 123

    (40) expression_list_tail -> empty .

    RPAREN          reduce using rule 40 (expression_list_tail -> empty .)


state 124

    (34) variable -> ID LBRACKET expression RBRACKET .

    COLON_EQUAL     reduce using rule 34 (variable -> ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 34 (variable -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 34 (variable -> ID LBRACKET expression RBRACKET .)
    DIV             reduce using rule 34 (variable -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 34 (variable -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 34 (variable -> ID LBRACKET expression RBRACKET .)
    LESS            reduce using rule 34 (variable -> ID LBRACKET expression RBRACKET .)
    LESS_EQUAL      reduce using rule 34 (variable -> ID LBRACKET expression RBRACKET .)
    GREAT           reduce using rule 34 (variable -> ID LBRACKET expression RBRACKET .)
    GREAT_EQUAL     reduce using rule 34 (variable -> ID LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 34 (variable -> ID LBRACKET expression RBRACKET .)
    DIFFERENT       reduce using rule 34 (variable -> ID LBRACKET expression RBRACKET .)
    THEN            reduce using rule 34 (variable -> ID LBRACKET expression RBRACKET .)
    MOD             reduce using rule 34 (variable -> ID LBRACKET expression RBRACKET .)
    DO              reduce using rule 34 (variable -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 34 (variable -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 34 (variable -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 34 (variable -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 34 (variable -> ID LBRACKET expression RBRACKET .)
    END             reduce using rule 34 (variable -> ID LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 34 (variable -> ID LBRACKET expression RBRACKET .)
    TO              reduce using rule 34 (variable -> ID LBRACKET expression RBRACKET .)


state 125

    (72) statement -> READLN LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 72 (statement -> READLN LPAREN ID RPAREN .)
    END             reduce using rule 72 (statement -> READLN LPAREN ID RPAREN .)
    ELSE            reduce using rule 72 (statement -> READLN LPAREN ID RPAREN .)


state 126

    (73) statement -> WRITELN LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 73 (statement -> WRITELN LPAREN expression_list RPAREN .)
    END             reduce using rule 73 (statement -> WRITELN LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 73 (statement -> WRITELN LPAREN expression_list RPAREN .)


state 127

    (74) statement -> WRITE LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 74 (statement -> WRITE LPAREN expression_list RPAREN .)
    END             reduce using rule 74 (statement -> WRITE LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 74 (statement -> WRITE LPAREN expression_list RPAREN .)


state 128

    (35) if_statement -> IF expression THEN statement . ELSE statement

    ELSE            shift and go to state 144


state 129

    (55) expression -> expression PLUS expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    THEN            reduce using rule 55 (expression -> expression PLUS expression .)
    DO              reduce using rule 55 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 55 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 55 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 55 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 55 (expression -> expression PLUS expression .)
    END             reduce using rule 55 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 55 (expression -> expression PLUS expression .)
    TO              reduce using rule 55 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    MOD             shift and go to state 93

  ! PLUS            [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 55 (expression -> expression PLUS expression .) ]


state 130

    (56) expression -> expression MINUS expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    THEN            reduce using rule 56 (expression -> expression MINUS expression .)
    DO              reduce using rule 56 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 56 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 56 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 56 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 56 (expression -> expression MINUS expression .)
    END             reduce using rule 56 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 56 (expression -> expression MINUS expression .)
    TO              reduce using rule 56 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    MOD             shift and go to state 93

  ! PLUS            [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 56 (expression -> expression MINUS expression .) ]


state 131

    (57) expression -> expression TIMES expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    THEN            reduce using rule 57 (expression -> expression TIMES expression .)
    DO              reduce using rule 57 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 57 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 57 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 57 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 57 (expression -> expression TIMES expression .)
    END             reduce using rule 57 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 57 (expression -> expression TIMES expression .)
    TO              reduce using rule 57 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    MOD             shift and go to state 93

  ! PLUS            [ reduce using rule 57 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 57 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 57 (expression -> expression TIMES expression .) ]
  ! DIVIDE          [ reduce using rule 57 (expression -> expression TIMES expression .) ]
  ! MOD             [ reduce using rule 57 (expression -> expression TIMES expression .) ]


state 132

    (58) expression -> expression DIVIDE expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    THEN            reduce using rule 58 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 58 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 58 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 58 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 58 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 58 (expression -> expression DIVIDE expression .)
    END             reduce using rule 58 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 58 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 58 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    MOD             shift and go to state 93

  ! PLUS            [ reduce using rule 58 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 58 (expression -> expression DIVIDE expression .) ]
  ! TIMES           [ reduce using rule 58 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 58 (expression -> expression DIVIDE expression .) ]
  ! MOD             [ reduce using rule 58 (expression -> expression DIVIDE expression .) ]


state 133

    (59) expression -> expression MOD expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    THEN            reduce using rule 59 (expression -> expression MOD expression .)
    DO              reduce using rule 59 (expression -> expression MOD expression .)
    COMMA           reduce using rule 59 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 59 (expression -> expression MOD expression .)
    RBRACKET        reduce using rule 59 (expression -> expression MOD expression .)
    SEMICOLON       reduce using rule 59 (expression -> expression MOD expression .)
    END             reduce using rule 59 (expression -> expression MOD expression .)
    ELSE            reduce using rule 59 (expression -> expression MOD expression .)
    TO              reduce using rule 59 (expression -> expression MOD expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    MOD             shift and go to state 93

  ! PLUS            [ reduce using rule 59 (expression -> expression MOD expression .) ]
  ! MINUS           [ reduce using rule 59 (expression -> expression MOD expression .) ]
  ! TIMES           [ reduce using rule 59 (expression -> expression MOD expression .) ]
  ! DIVIDE          [ reduce using rule 59 (expression -> expression MOD expression .) ]
  ! MOD             [ reduce using rule 59 (expression -> expression MOD expression .) ]


state 134

    (42) expression -> simple_expression relop simple_expression .

    THEN            reduce using rule 42 (expression -> simple_expression relop simple_expression .)
    PLUS            reduce using rule 42 (expression -> simple_expression relop simple_expression .)
    MINUS           reduce using rule 42 (expression -> simple_expression relop simple_expression .)
    TIMES           reduce using rule 42 (expression -> simple_expression relop simple_expression .)
    DIVIDE          reduce using rule 42 (expression -> simple_expression relop simple_expression .)
    MOD             reduce using rule 42 (expression -> simple_expression relop simple_expression .)
    DO              reduce using rule 42 (expression -> simple_expression relop simple_expression .)
    COMMA           reduce using rule 42 (expression -> simple_expression relop simple_expression .)
    RPAREN          reduce using rule 42 (expression -> simple_expression relop simple_expression .)
    RBRACKET        reduce using rule 42 (expression -> simple_expression relop simple_expression .)
    SEMICOLON       reduce using rule 42 (expression -> simple_expression relop simple_expression .)
    END             reduce using rule 42 (expression -> simple_expression relop simple_expression .)
    ELSE            reduce using rule 42 (expression -> simple_expression relop simple_expression .)
    TO              reduce using rule 42 (expression -> simple_expression relop simple_expression .)


state 135

    (45) simple_expression_tail -> addop term .

    LESS            reduce using rule 45 (simple_expression_tail -> addop term .)
    LESS_EQUAL      reduce using rule 45 (simple_expression_tail -> addop term .)
    GREAT           reduce using rule 45 (simple_expression_tail -> addop term .)
    GREAT_EQUAL     reduce using rule 45 (simple_expression_tail -> addop term .)
    EQUAL           reduce using rule 45 (simple_expression_tail -> addop term .)
    DIFFERENT       reduce using rule 45 (simple_expression_tail -> addop term .)
    THEN            reduce using rule 45 (simple_expression_tail -> addop term .)
    PLUS            reduce using rule 45 (simple_expression_tail -> addop term .)
    MINUS           reduce using rule 45 (simple_expression_tail -> addop term .)
    TIMES           reduce using rule 45 (simple_expression_tail -> addop term .)
    DIVIDE          reduce using rule 45 (simple_expression_tail -> addop term .)
    MOD             reduce using rule 45 (simple_expression_tail -> addop term .)
    DO              reduce using rule 45 (simple_expression_tail -> addop term .)
    COMMA           reduce using rule 45 (simple_expression_tail -> addop term .)
    RPAREN          reduce using rule 45 (simple_expression_tail -> addop term .)
    RBRACKET        reduce using rule 45 (simple_expression_tail -> addop term .)
    SEMICOLON       reduce using rule 45 (simple_expression_tail -> addop term .)
    END             reduce using rule 45 (simple_expression_tail -> addop term .)
    ELSE            reduce using rule 45 (simple_expression_tail -> addop term .)
    TO              reduce using rule 45 (simple_expression_tail -> addop term .)


state 136

    (50) term_tail -> mulop factor .

    PLUS            reduce using rule 50 (term_tail -> mulop factor .)
    MINUS           reduce using rule 50 (term_tail -> mulop factor .)
    LESS            reduce using rule 50 (term_tail -> mulop factor .)
    LESS_EQUAL      reduce using rule 50 (term_tail -> mulop factor .)
    GREAT           reduce using rule 50 (term_tail -> mulop factor .)
    GREAT_EQUAL     reduce using rule 50 (term_tail -> mulop factor .)
    EQUAL           reduce using rule 50 (term_tail -> mulop factor .)
    DIFFERENT       reduce using rule 50 (term_tail -> mulop factor .)
    THEN            reduce using rule 50 (term_tail -> mulop factor .)
    TIMES           reduce using rule 50 (term_tail -> mulop factor .)
    DIVIDE          reduce using rule 50 (term_tail -> mulop factor .)
    MOD             reduce using rule 50 (term_tail -> mulop factor .)
    DO              reduce using rule 50 (term_tail -> mulop factor .)
    COMMA           reduce using rule 50 (term_tail -> mulop factor .)
    RPAREN          reduce using rule 50 (term_tail -> mulop factor .)
    RBRACKET        reduce using rule 50 (term_tail -> mulop factor .)
    SEMICOLON       reduce using rule 50 (term_tail -> mulop factor .)
    END             reduce using rule 50 (term_tail -> mulop factor .)
    ELSE            reduce using rule 50 (term_tail -> mulop factor .)
    TO              reduce using rule 50 (term_tail -> mulop factor .)


state 137

    (60) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    DIV             reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    LESS_EQUAL      reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    GREAT           reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    GREAT_EQUAL     reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    DIFFERENT       reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 60 (factor -> LPAREN expression RPAREN .)


state 138

    (36) while_statement -> WHILE expression DO statement .

    SEMICOLON       reduce using rule 36 (while_statement -> WHILE expression DO statement .)
    END             reduce using rule 36 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 36 (while_statement -> WHILE expression DO statement .)


state 139

    (16) type_specifier -> ARRAY LBRACKET NUMBER . DOTDOT NUMBER RBRACKET OF INTEGER

    DOTDOT          shift and go to state 145


state 140

    (19) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON . block SEMICOLON
    (4) block -> . declarations compound_statement
    (5) declarations -> . VAR declaration_list procedure_declarations
    (6) declarations -> . VAR declaration_list
    (7) declarations -> . procedure_declarations
    (8) declarations -> . empty
    (17) procedure_declarations -> . procedure_declaration
    (18) procedure_declarations -> . procedure_declarations procedure_declaration
    (70) empty -> .
    (19) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON

    VAR             shift and go to state 10
    BEGIN           reduce using rule 70 (empty -> .)
    PROCEDURE       shift and go to state 14

    block                          shift and go to state 146
    declarations                   shift and go to state 9
    procedure_declarations         shift and go to state 11
    empty                          shift and go to state 12
    procedure_declaration          shift and go to state 13

state 141

    (20) parameter_list -> id_list COLON type_specifier .

    RPAREN          reduce using rule 20 (parameter_list -> id_list COLON type_specifier .)


state 142

    (27) statement -> FOR ID COLON_EQUAL expression TO . expression DO statement
    (42) expression -> . simple_expression relop simple_expression
    (43) expression -> . simple_expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (44) simple_expression -> . term simple_expression_tail
    (49) term -> . factor term_tail
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . variable
    (62) factor -> . NUMBER
    (63) factor -> . STRING_LITERAL
    (33) variable -> . ID
    (34) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 66
    STRING_LITERAL  shift and go to state 67
    ID              shift and go to state 68

    expression                     shift and go to state 147
    simple_expression              shift and go to state 61
    term                           shift and go to state 62
    factor                         shift and go to state 63
    variable                       shift and go to state 65

state 143

    (39) expression_list_tail -> COMMA expression . expression_list_tail
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression
    (39) expression_list_tail -> . COMMA expression expression_list_tail
    (40) expression_list_tail -> . empty
    (70) empty -> .

    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    MOD             shift and go to state 93
    COMMA           shift and go to state 122
    RPAREN          reduce using rule 70 (empty -> .)

    expression_list_tail           shift and go to state 148
    empty                          shift and go to state 123

state 144

    (35) if_statement -> IF expression THEN statement ELSE . statement
    (25) statement -> . assignment_statement
    (26) statement -> . if_statement
    (27) statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (28) statement -> . while_statement
    (29) statement -> . procedure_call
    (30) statement -> . compound_statement
    (31) statement -> . empty
    (71) statement -> . READLN
    (72) statement -> . READLN LPAREN ID RPAREN
    (73) statement -> . WRITELN LPAREN expression_list RPAREN
    (74) statement -> . WRITE LPAREN expression_list RPAREN
    (75) statement -> . USES ID SEMICOLON
    (32) assignment_statement -> . variable COLON_EQUAL expression
    (35) if_statement -> . IF expression THEN statement ELSE statement
    (36) while_statement -> . WHILE expression DO statement
    (37) procedure_call -> . ID LPAREN expression_list RPAREN
    (21) compound_statement -> . BEGIN statement_list END
    (70) empty -> .
    (33) variable -> . ID
    (34) variable -> . ID LBRACKET expression RBRACKET

    FOR             shift and go to state 30
    READLN          shift and go to state 36
    WRITELN         shift and go to state 37
    WRITE           shift and go to state 38
    USES            shift and go to state 39
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    ID              shift and go to state 31
    BEGIN           shift and go to state 18
    SEMICOLON       reduce using rule 70 (empty -> .)
    END             reduce using rule 70 (empty -> .)
    ELSE            reduce using rule 70 (empty -> .)

    statement                      shift and go to state 149
    assignment_statement           shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 32
    procedure_call                 shift and go to state 33
    compound_statement             shift and go to state 34
    empty                          shift and go to state 35
    variable                       shift and go to state 40

state 145

    (16) type_specifier -> ARRAY LBRACKET NUMBER DOTDOT . NUMBER RBRACKET OF INTEGER

    NUMBER          shift and go to state 150


state 146

    (19) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 151


state 147

    (27) statement -> FOR ID COLON_EQUAL expression TO expression . DO statement
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression

    DO              shift and go to state 152
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    MOD             shift and go to state 93


state 148

    (39) expression_list_tail -> COMMA expression expression_list_tail .

    RPAREN          reduce using rule 39 (expression_list_tail -> COMMA expression expression_list_tail .)


state 149

    (35) if_statement -> IF expression THEN statement ELSE statement .

    SEMICOLON       reduce using rule 35 (if_statement -> IF expression THEN statement ELSE statement .)
    END             reduce using rule 35 (if_statement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 35 (if_statement -> IF expression THEN statement ELSE statement .)


state 150

    (16) type_specifier -> ARRAY LBRACKET NUMBER DOTDOT NUMBER . RBRACKET OF INTEGER

    RBRACKET        shift and go to state 153


state 151

    (19) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .

    PROCEDURE       reduce using rule 19 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    BEGIN           reduce using rule 19 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)


state 152

    (27) statement -> FOR ID COLON_EQUAL expression TO expression DO . statement
    (25) statement -> . assignment_statement
    (26) statement -> . if_statement
    (27) statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (28) statement -> . while_statement
    (29) statement -> . procedure_call
    (30) statement -> . compound_statement
    (31) statement -> . empty
    (71) statement -> . READLN
    (72) statement -> . READLN LPAREN ID RPAREN
    (73) statement -> . WRITELN LPAREN expression_list RPAREN
    (74) statement -> . WRITE LPAREN expression_list RPAREN
    (75) statement -> . USES ID SEMICOLON
    (32) assignment_statement -> . variable COLON_EQUAL expression
    (35) if_statement -> . IF expression THEN statement ELSE statement
    (36) while_statement -> . WHILE expression DO statement
    (37) procedure_call -> . ID LPAREN expression_list RPAREN
    (21) compound_statement -> . BEGIN statement_list END
    (70) empty -> .
    (33) variable -> . ID
    (34) variable -> . ID LBRACKET expression RBRACKET

    FOR             shift and go to state 30
    READLN          shift and go to state 36
    WRITELN         shift and go to state 37
    WRITE           shift and go to state 38
    USES            shift and go to state 39
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    ID              shift and go to state 31
    BEGIN           shift and go to state 18
    SEMICOLON       reduce using rule 70 (empty -> .)
    END             reduce using rule 70 (empty -> .)
    ELSE            reduce using rule 70 (empty -> .)

    statement                      shift and go to state 154
    assignment_statement           shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 32
    procedure_call                 shift and go to state 33
    compound_statement             shift and go to state 34
    empty                          shift and go to state 35
    variable                       shift and go to state 40

state 153

    (16) type_specifier -> ARRAY LBRACKET NUMBER DOTDOT NUMBER RBRACKET . OF INTEGER

    OF              shift and go to state 155


state 154

    (27) statement -> FOR ID COLON_EQUAL expression TO expression DO statement .

    SEMICOLON       reduce using rule 27 (statement -> FOR ID COLON_EQUAL expression TO expression DO statement .)
    END             reduce using rule 27 (statement -> FOR ID COLON_EQUAL expression TO expression DO statement .)
    ELSE            reduce using rule 27 (statement -> FOR ID COLON_EQUAL expression TO expression DO statement .)


state 155

    (16) type_specifier -> ARRAY LBRACKET NUMBER DOTDOT NUMBER RBRACKET OF . INTEGER

    INTEGER         shift and go to state 156


state 156

    (16) type_specifier -> ARRAY LBRACKET NUMBER DOTDOT NUMBER RBRACKET OF INTEGER .

    SEMICOLON       reduce using rule 16 (type_specifier -> ARRAY LBRACKET NUMBER DOTDOT NUMBER RBRACKET OF INTEGER .)
    RPAREN          reduce using rule 16 (type_specifier -> ARRAY LBRACKET NUMBER DOTDOT NUMBER RBRACKET OF INTEGER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 62 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 62 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 63 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 63 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 129 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 129 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 129 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 129 resolved as shift
WARNING: shift/reduce conflict for MOD in state 129 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 130 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 130 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 130 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 130 resolved as shift
WARNING: shift/reduce conflict for MOD in state 130 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 131 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 131 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 131 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 131 resolved as shift
WARNING: shift/reduce conflict for MOD in state 131 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 132 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 132 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 132 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 132 resolved as shift
WARNING: shift/reduce conflict for MOD in state 132 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 133 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 133 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 133 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 133 resolved as shift
WARNING: shift/reduce conflict for MOD in state 133 resolved as shift
