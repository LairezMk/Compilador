Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    FALSE
    GOTO
    LABEL
    LBLOCK
    NIL
    PACKED
    RBLOCK
    READLINE
    REPEAT
    SUBRANGE
    TRUE
    UNTIL

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON declaration_sections block DOT
Rule 2     declaration_sections -> declaration_sections declaration_section
Rule 3     declaration_sections -> empty
Rule 4     declaration_section -> uses_opt
Rule 5     declaration_section -> constant_declaration
Rule 6     declaration_section -> type_declaration
Rule 7     declaration_section -> var_declaration
Rule 8     declaration_section -> procedure_declarations
Rule 9     declaration_section -> function_declaration
Rule 10    declaration_section -> constructor_declaration
Rule 11    declaration_section -> method_declaration
Rule 12    method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block
Rule 13    method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block
Rule 14    method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block
Rule 15    method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block
Rule 16    constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block
Rule 17    constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block
Rule 18    uses_opt -> USES id_list SEMICOLON
Rule 19    id_list -> ID
Rule 20    id_list -> id_list COMMA ID
Rule 21    var_declaration -> VAR declaration_list
Rule 22    declaration_list -> declaration
Rule 23    declaration_list -> declaration_list declaration
Rule 24    declaration -> id_list COLON type_specifier SEMICOLON
Rule 25    block -> declaration_sections compound_statement
Rule 26    type_declaration -> TYPE type_list
Rule 27    type_list -> type_definition
Rule 28    type_list -> type_list type_definition
Rule 29    type_definition -> ID EQUAL type_specifier SEMICOLON
Rule 30    type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier
Rule 31    type_specifier -> subrange
Rule 32    type_specifier -> FILE OF type_specifier
Rule 33    type_specifier -> SET OF type_specifier
Rule 34    type_specifier -> RECORD field_list case_part END
Rule 35    type_specifier -> OBJECT field_list method_list END
Rule 36    type_specifier -> LPAREN id_list RPAREN
Rule 37    type_specifier -> BOOLEAN_LITERAL
Rule 38    type_specifier -> INTEGER
Rule 39    type_specifier -> BYTE
Rule 40    type_specifier -> CHAR
Rule 41    type_specifier -> STRING
Rule 42    type_specifier -> STRING LBRACKET NUMBER RBRACKET
Rule 43    type_specifier -> ID
Rule 44    type_expression -> type_expression COMMA subrange
Rule 45    type_expression -> subrange
Rule 46    subrange -> NUMBER DOTDOT NUMBER
Rule 47    subrange -> NUMBER DOTDOT ID
Rule 48    field_list -> field_list field
Rule 49    field_list -> field
Rule 50    field_list -> empty
Rule 51    field -> id_list COLON type_specifier
Rule 52    field -> id_list COLON type_specifier SEMICOLON
Rule 53    field -> VAR id_list COLON type_specifier
Rule 54    field -> VAR id_list COLON type_specifier SEMICOLON
Rule 55    field -> id_list LPAREN STRING_LITERAL RPAREN
Rule 56    field -> id_list assignment_statement
Rule 57    case_part -> CASE ID COLON type_specifier OF case_list SEMICOLON
Rule 58    case_part -> empty
Rule 59    case_list -> case_list SEMICOLON case_element
Rule 60    case_list -> case_element
Rule 61    case_element -> NUMBER COLON LPAREN field_list RPAREN
Rule 62    case_element -> NUMBER COLON field_list
Rule 63    method_list -> method_list method
Rule 64    method_list -> method
Rule 65    method_list -> empty
Rule 66    method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON
Rule 67    method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON
Rule 68    method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON
Rule 69    method -> DESTRUCTOR ID SEMICOLON
Rule 70    case_statement -> CASE expression OF case_list END SEMICOLON
Rule 71    case_statement -> CASE expression OF case_list END
Rule 72    type_specifier -> LONGINT
Rule 73    procedure_declarations -> procedure_declaration
Rule 74    procedure_declarations -> procedure_declarations procedure_declaration
Rule 75    procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON block SEMICOLON
Rule 76    procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON
Rule 77    procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON
Rule 78    procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON
Rule 79    procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON
Rule 80    procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON
Rule 81    function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
Rule 82    function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
Rule 83    function_call -> ID LPAREN expression_list RPAREN
Rule 84    factor -> function_call
Rule 85    parameter_list -> parameter
Rule 86    parameter_list -> parameter_list SEMICOLON parameter
Rule 87    parameter_list -> empty
Rule 88    parameter -> id_list COLON type_specifier
Rule 89    parameter -> VAR id_list COLON type_specifier
Rule 90    compound_statement -> BEGIN statement_list END
Rule 91    statement_list -> statement statement_list_tail
Rule 92    statement_list_tail -> SEMICOLON statement statement_list_tail
Rule 93    statement_list_tail -> empty
Rule 94    statement -> if_statement
Rule 95    statement -> assignment_statement
Rule 96    statement -> while_statement
Rule 97    statement -> procedure_call
Rule 98    statement -> compound_statement
Rule 99    statement -> for_statement
Rule 100   statement -> case_statement
Rule 101   statement -> with_statement
Rule 102   statement -> empty
Rule 103   with_statement -> WITH variable DO statement
Rule 104   if_statement -> IF expression THEN statement ELSE statement
Rule 105   if_statement -> IF expression THEN statement
Rule 106   if_statement -> IF expression IN statement THEN statement ELSE statement
Rule 107   if_statement -> IF expression IN statement THEN statement
Rule 108   for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement
Rule 109   for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement
Rule 110   assignment_statement -> variable COLON_EQUAL expression
Rule 111   assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL
Rule 112   assignment_statement -> ID COLON_EQUAL expression
Rule 113   variable -> ID
Rule 114   variable -> variable LBRACKET expression RBRACKET
Rule 115   variable -> variable DOT ID
Rule 116   variable -> ID LBRACKET index_list RBRACKET
Rule 117   index_list -> expression
Rule 118   index_list -> index_list COMMA expression
Rule 119   while_statement -> WHILE expression DO statement
Rule 120   procedure_call -> ID LPAREN expression_list RPAREN
Rule 121   procedure_call -> ID
Rule 122   expression_list -> expression expression_list_tail
Rule 123   expression_list_tail -> COMMA expression expression_list_tail
Rule 124   expression_list_tail -> empty
Rule 125   expression_list -> empty
Rule 126   expression -> simple_expression relop simple_expression
Rule 127   expression -> simple_expression
Rule 128   simple_expression -> term simple_expression_tail
Rule 129   simple_expression_tail -> addop term
Rule 130   simple_expression_tail -> empty
Rule 131   addop -> PLUS
Rule 132   addop -> MINUS
Rule 133   term -> factor term_tail
Rule 134   term_tail -> mulop factor
Rule 135   term_tail -> empty
Rule 136   mulop -> TIMES
Rule 137   mulop -> DIVIDE
Rule 138   mulop -> DIV
Rule 139   expression -> expression PLUS expression
Rule 140   expression -> expression MINUS expression
Rule 141   expression -> expression TIMES expression
Rule 142   expression -> expression DIVIDE expression
Rule 143   expression -> expression MOD expression
Rule 144   factor -> LPAREN expression RPAREN
Rule 145   factor -> variable
Rule 146   factor -> NUMBER
Rule 147   factor -> STRING_LITERAL
Rule 148   relop -> LESS
Rule 149   relop -> LESS_EQUAL
Rule 150   relop -> GREAT
Rule 151   relop -> GREAT_EQUAL
Rule 152   relop -> EQUAL
Rule 153   relop -> DIFFERENT
Rule 154   empty -> <empty>
Rule 155   statement -> READLN
Rule 156   statement -> READLN LPAREN variable RPAREN
Rule 157   statement -> READLN LBRACKET variable RBRACKET
Rule 158   statement -> WRITE LPAREN expression_list RPAREN
Rule 159   statement -> WRITELN LPAREN write_arguments RPAREN
Rule 160   write_arguments -> write_argument
Rule 161   write_arguments -> write_arguments COMMA write_argument
Rule 162   write_argument -> expression
Rule 163   write_argument -> expression COLON expression
Rule 164   write_argument -> expression COLON expression COLON expression
Rule 165   statement -> USES ID SEMICOLON
Rule 166   constant_declaration -> CONST constant_list
Rule 167   constant_list -> constant
Rule 168   constant_list -> constant_list constant
Rule 169   constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON
Rule 170   constant -> ID EQUAL NUMBER SEMICOLON
Rule 171   constant -> ID EQUAL STRING_LITERAL SEMICOLON
Rule 172   constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON
Rule 173   expression -> expression AND expression
Rule 174   expression -> expression OR expression
Rule 175   expression -> NOT expression

Terminals, with rules where they appear

AND                  : 173
ARRAY                : 30
BEGIN                : 90
BOOLEAN_LITERAL      : 37 111 172
BYTE                 : 39
CASE                 : 57 70 71
CHAR                 : 40
CHARACTER_LITERAL    : 169
COLON                : 14 24 51 52 53 54 57 61 62 68 81 82 88 89 163 164 164
COLON_EQUAL          : 108 109 110 111 112
COMMA                : 20 44 118 123 161
CONST                : 166
CONSTRUCTOR          : 12 16 17 66
DESTRUCTOR           : 15 69
DIFFERENT            : 153
DIV                  : 138
DIVIDE               : 137 142
DO                   : 103 108 109 119
DOT                  : 1 12 13 14 15 115
DOTDOT               : 46 47
DOWNTO               : 109
ELSE                 : 104 106
END                  : 34 35 70 71 90
EQUAL                : 29 152 169 170 171 172
FALSE                : 
FILE                 : 32
FOR                  : 108 109
FORWARD              : 78 79 80 82
FUNCTION             : 14 68 81 82
GOTO                 : 
GREAT                : 150
GREAT_EQUAL          : 151
ID                   : 1 12 12 13 13 14 14 15 15 16 17 19 20 29 43 47 57 66 67 68 69 75 76 77 78 79 80 81 82 83 108 109 112 113 115 116 120 121 165 169 170 171 172
IF                   : 104 105 106 107
IN                   : 106 107
INTEGER              : 38
LABEL                : 
LBLOCK               : 
LBRACKET             : 30 42 114 116 157
LESS                 : 148
LESS_EQUAL           : 149
LONGINT              : 72
LPAREN               : 12 13 14 16 17 36 55 61 66 67 68 75 76 78 79 81 82 83 120 144 156 158 159
MINUS                : 132 140
MOD                  : 143
NIL                  : 
NOT                  : 175
NUMBER               : 42 46 46 47 61 62 146 170
OBJECT               : 35
OF                   : 30 32 33 57 70 71
OR                   : 174
PACKED               : 
PLUS                 : 131 139
PROCEDURE            : 13 67 75 76 77 78 79 80
PROGRAM              : 1
RBLOCK               : 
RBRACKET             : 30 42 114 116 157
READLINE             : 
READLN               : 155 156 157
RECORD               : 34
REPEAT               : 
RPAREN               : 12 13 14 16 17 36 55 61 66 67 68 75 76 78 79 81 82 83 120 144 156 158 159
SEMICOLON            : 1 12 13 14 15 16 17 18 24 29 52 54 57 59 66 67 68 69 70 75 75 76 76 77 77 78 78 79 79 80 80 81 81 82 82 86 92 165 169 170 171 172
SET                  : 33
STRING               : 41 42
STRING_LITERAL       : 55 147 171
SUBRANGE             : 
THEN                 : 104 105 106 107
TIMES                : 136 141
TO                   : 108
TRUE                 : 
TYPE                 : 26
UNTIL                : 
USES                 : 18 165
VAR                  : 21 53 54 89
WHILE                : 119
WITH                 : 103
WRITE                : 158
WRITELN              : 159
error                : 

Nonterminals, with rules where they appear

addop                : 129
assignment_statement : 56 95
block                : 1 12 13 14 15 16 17 75 76 77 81
case_element         : 59 60
case_list            : 57 59 70 71
case_part            : 34
case_statement       : 100
compound_statement   : 25 98
constant             : 167 168
constant_declaration : 5
constant_list        : 166 168
constructor_declaration : 10
declaration          : 22 23
declaration_list     : 21 23
declaration_section  : 2
declaration_sections : 1 2 25
empty                : 3 50 58 65 87 93 102 124 125 130 135
expression           : 70 71 104 105 106 107 108 108 109 109 110 112 114 117 118 119 122 123 139 139 140 140 141 141 142 142 143 143 144 162 163 163 164 164 164 173 173 174 174 175
expression_list      : 83 120 158
expression_list_tail : 122 123
factor               : 133 134
field                : 48 49
field_list           : 16 34 35 48 61 62 66 67 68 75 78
for_statement        : 99
function_call        : 84
function_declaration : 9
id_list              : 18 20 24 36 51 52 53 54 55 56 88 89
if_statement         : 94
index_list           : 116 118
method               : 63 64
method_declaration   : 11
method_list          : 35 63
mulop                : 134
parameter            : 85 86
parameter_list       : 12 13 14 81 82 86
procedure_call       : 97
procedure_declaration : 73 74
procedure_declarations : 8 74
program              : 0
relop                : 126
simple_expression    : 126 126 127
simple_expression_tail : 128
statement            : 91 92 103 104 104 105 106 106 106 107 107 108 109 119
statement_list       : 90
statement_list_tail  : 91 92
subrange             : 31 44 45
term                 : 128 129
term_tail            : 133
type_declaration     : 6
type_definition      : 27 28
type_expression      : 30 44
type_list            : 26 28
type_specifier       : 14 24 29 30 32 33 51 52 53 54 57 68 81 82 88 89
uses_opt             : 4
var_declaration      : 7
variable             : 103 110 111 114 115 145 156 157
while_statement      : 96
with_statement       : 101
write_argument       : 160 161
write_arguments      : 159 161

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON declaration_sections block DOT

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON declaration_sections block DOT

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON declaration_sections block DOT

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . declaration_sections block DOT
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (154) empty -> .

    USES            reduce using rule 154 (empty -> .)
    CONST           reduce using rule 154 (empty -> .)
    TYPE            reduce using rule 154 (empty -> .)
    VAR             reduce using rule 154 (empty -> .)
    FUNCTION        reduce using rule 154 (empty -> .)
    CONSTRUCTOR     reduce using rule 154 (empty -> .)
    PROCEDURE       reduce using rule 154 (empty -> .)
    DESTRUCTOR      reduce using rule 154 (empty -> .)
    BEGIN           reduce using rule 154 (empty -> .)

    declaration_sections           shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) program -> PROGRAM ID SEMICOLON declaration_sections . block DOT
    (2) declaration_sections -> declaration_sections . declaration_section
    (25) block -> . declaration_sections compound_statement
    (4) declaration_section -> . uses_opt
    (5) declaration_section -> . constant_declaration
    (6) declaration_section -> . type_declaration
    (7) declaration_section -> . var_declaration
    (8) declaration_section -> . procedure_declarations
    (9) declaration_section -> . function_declaration
    (10) declaration_section -> . constructor_declaration
    (11) declaration_section -> . method_declaration
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (18) uses_opt -> . USES id_list SEMICOLON
    (166) constant_declaration -> . CONST constant_list
    (26) type_declaration -> . TYPE type_list
    (21) var_declaration -> . VAR declaration_list
    (73) procedure_declarations -> . procedure_declaration
    (74) procedure_declarations -> . procedure_declarations procedure_declaration
    (81) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (82) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (16) constructor_declaration -> . CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block
    (17) constructor_declaration -> . CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block
    (12) method_declaration -> . CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block
    (13) method_declaration -> . PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block
    (14) method_declaration -> . FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block
    (15) method_declaration -> . DESTRUCTOR ID DOT ID SEMICOLON block
    (154) empty -> .
    (75) procedure_declaration -> . PROCEDURE ID LPAREN field_list RPAREN SEMICOLON block SEMICOLON
    (76) procedure_declaration -> . PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON
    (77) procedure_declaration -> . PROCEDURE ID SEMICOLON block SEMICOLON
    (78) procedure_declaration -> . PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON
    (79) procedure_declaration -> . PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON
    (80) procedure_declaration -> . PROCEDURE ID SEMICOLON FORWARD SEMICOLON

  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for PROCEDURE resolved as shift
  ! shift/reduce conflict for DESTRUCTOR resolved as shift
    USES            shift and go to state 18
    CONST           shift and go to state 19
    TYPE            shift and go to state 20
    VAR             shift and go to state 21
    FUNCTION        shift and go to state 23
    CONSTRUCTOR     shift and go to state 24
    PROCEDURE       shift and go to state 25
    DESTRUCTOR      shift and go to state 26
    BEGIN           reduce using rule 154 (empty -> .)

  ! USES            [ reduce using rule 154 (empty -> .) ]
  ! CONST           [ reduce using rule 154 (empty -> .) ]
  ! TYPE            [ reduce using rule 154 (empty -> .) ]
  ! VAR             [ reduce using rule 154 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 154 (empty -> .) ]
  ! CONSTRUCTOR     [ reduce using rule 154 (empty -> .) ]
  ! PROCEDURE       [ reduce using rule 154 (empty -> .) ]
  ! DESTRUCTOR      [ reduce using rule 154 (empty -> .) ]

    declaration_sections           shift and go to state 7
    block                          shift and go to state 8
    declaration_section            shift and go to state 9
    uses_opt                       shift and go to state 10
    constant_declaration           shift and go to state 11
    type_declaration               shift and go to state 12
    var_declaration                shift and go to state 13
    procedure_declarations         shift and go to state 14
    function_declaration           shift and go to state 15
    constructor_declaration        shift and go to state 16
    method_declaration             shift and go to state 17
    empty                          shift and go to state 6
    procedure_declaration          shift and go to state 22

state 6

    (3) declaration_sections -> empty .

    USES            reduce using rule 3 (declaration_sections -> empty .)
    CONST           reduce using rule 3 (declaration_sections -> empty .)
    TYPE            reduce using rule 3 (declaration_sections -> empty .)
    VAR             reduce using rule 3 (declaration_sections -> empty .)
    FUNCTION        reduce using rule 3 (declaration_sections -> empty .)
    CONSTRUCTOR     reduce using rule 3 (declaration_sections -> empty .)
    PROCEDURE       reduce using rule 3 (declaration_sections -> empty .)
    DESTRUCTOR      reduce using rule 3 (declaration_sections -> empty .)
    BEGIN           reduce using rule 3 (declaration_sections -> empty .)


state 7

    (25) block -> declaration_sections . compound_statement
    (2) declaration_sections -> declaration_sections . declaration_section
    (90) compound_statement -> . BEGIN statement_list END
    (4) declaration_section -> . uses_opt
    (5) declaration_section -> . constant_declaration
    (6) declaration_section -> . type_declaration
    (7) declaration_section -> . var_declaration
    (8) declaration_section -> . procedure_declarations
    (9) declaration_section -> . function_declaration
    (10) declaration_section -> . constructor_declaration
    (11) declaration_section -> . method_declaration
    (18) uses_opt -> . USES id_list SEMICOLON
    (166) constant_declaration -> . CONST constant_list
    (26) type_declaration -> . TYPE type_list
    (21) var_declaration -> . VAR declaration_list
    (73) procedure_declarations -> . procedure_declaration
    (74) procedure_declarations -> . procedure_declarations procedure_declaration
    (81) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (82) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (16) constructor_declaration -> . CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block
    (17) constructor_declaration -> . CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block
    (12) method_declaration -> . CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block
    (13) method_declaration -> . PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block
    (14) method_declaration -> . FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block
    (15) method_declaration -> . DESTRUCTOR ID DOT ID SEMICOLON block
    (75) procedure_declaration -> . PROCEDURE ID LPAREN field_list RPAREN SEMICOLON block SEMICOLON
    (76) procedure_declaration -> . PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON
    (77) procedure_declaration -> . PROCEDURE ID SEMICOLON block SEMICOLON
    (78) procedure_declaration -> . PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON
    (79) procedure_declaration -> . PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON
    (80) procedure_declaration -> . PROCEDURE ID SEMICOLON FORWARD SEMICOLON

    BEGIN           shift and go to state 28
    USES            shift and go to state 18
    CONST           shift and go to state 19
    TYPE            shift and go to state 20
    VAR             shift and go to state 21
    FUNCTION        shift and go to state 23
    CONSTRUCTOR     shift and go to state 24
    PROCEDURE       shift and go to state 25
    DESTRUCTOR      shift and go to state 26

    compound_statement             shift and go to state 27
    declaration_section            shift and go to state 9
    uses_opt                       shift and go to state 10
    constant_declaration           shift and go to state 11
    type_declaration               shift and go to state 12
    var_declaration                shift and go to state 13
    procedure_declarations         shift and go to state 14
    function_declaration           shift and go to state 15
    constructor_declaration        shift and go to state 16
    method_declaration             shift and go to state 17
    procedure_declaration          shift and go to state 22

state 8

    (1) program -> PROGRAM ID SEMICOLON declaration_sections block . DOT

    DOT             shift and go to state 29


state 9

    (2) declaration_sections -> declaration_sections declaration_section .

    USES            reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    CONST           reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    TYPE            reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    VAR             reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    FUNCTION        reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    CONSTRUCTOR     reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    PROCEDURE       reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    DESTRUCTOR      reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    BEGIN           reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)


state 10

    (4) declaration_section -> uses_opt .

    USES            reduce using rule 4 (declaration_section -> uses_opt .)
    CONST           reduce using rule 4 (declaration_section -> uses_opt .)
    TYPE            reduce using rule 4 (declaration_section -> uses_opt .)
    VAR             reduce using rule 4 (declaration_section -> uses_opt .)
    FUNCTION        reduce using rule 4 (declaration_section -> uses_opt .)
    CONSTRUCTOR     reduce using rule 4 (declaration_section -> uses_opt .)
    PROCEDURE       reduce using rule 4 (declaration_section -> uses_opt .)
    DESTRUCTOR      reduce using rule 4 (declaration_section -> uses_opt .)
    BEGIN           reduce using rule 4 (declaration_section -> uses_opt .)


state 11

    (5) declaration_section -> constant_declaration .

    USES            reduce using rule 5 (declaration_section -> constant_declaration .)
    CONST           reduce using rule 5 (declaration_section -> constant_declaration .)
    TYPE            reduce using rule 5 (declaration_section -> constant_declaration .)
    VAR             reduce using rule 5 (declaration_section -> constant_declaration .)
    FUNCTION        reduce using rule 5 (declaration_section -> constant_declaration .)
    CONSTRUCTOR     reduce using rule 5 (declaration_section -> constant_declaration .)
    PROCEDURE       reduce using rule 5 (declaration_section -> constant_declaration .)
    DESTRUCTOR      reduce using rule 5 (declaration_section -> constant_declaration .)
    BEGIN           reduce using rule 5 (declaration_section -> constant_declaration .)


state 12

    (6) declaration_section -> type_declaration .

    USES            reduce using rule 6 (declaration_section -> type_declaration .)
    CONST           reduce using rule 6 (declaration_section -> type_declaration .)
    TYPE            reduce using rule 6 (declaration_section -> type_declaration .)
    VAR             reduce using rule 6 (declaration_section -> type_declaration .)
    FUNCTION        reduce using rule 6 (declaration_section -> type_declaration .)
    CONSTRUCTOR     reduce using rule 6 (declaration_section -> type_declaration .)
    PROCEDURE       reduce using rule 6 (declaration_section -> type_declaration .)
    DESTRUCTOR      reduce using rule 6 (declaration_section -> type_declaration .)
    BEGIN           reduce using rule 6 (declaration_section -> type_declaration .)


state 13

    (7) declaration_section -> var_declaration .

    USES            reduce using rule 7 (declaration_section -> var_declaration .)
    CONST           reduce using rule 7 (declaration_section -> var_declaration .)
    TYPE            reduce using rule 7 (declaration_section -> var_declaration .)
    VAR             reduce using rule 7 (declaration_section -> var_declaration .)
    FUNCTION        reduce using rule 7 (declaration_section -> var_declaration .)
    CONSTRUCTOR     reduce using rule 7 (declaration_section -> var_declaration .)
    PROCEDURE       reduce using rule 7 (declaration_section -> var_declaration .)
    DESTRUCTOR      reduce using rule 7 (declaration_section -> var_declaration .)
    BEGIN           reduce using rule 7 (declaration_section -> var_declaration .)


state 14

    (8) declaration_section -> procedure_declarations .
    (74) procedure_declarations -> procedure_declarations . procedure_declaration
    (75) procedure_declaration -> . PROCEDURE ID LPAREN field_list RPAREN SEMICOLON block SEMICOLON
    (76) procedure_declaration -> . PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON
    (77) procedure_declaration -> . PROCEDURE ID SEMICOLON block SEMICOLON
    (78) procedure_declaration -> . PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON
    (79) procedure_declaration -> . PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON
    (80) procedure_declaration -> . PROCEDURE ID SEMICOLON FORWARD SEMICOLON

  ! shift/reduce conflict for PROCEDURE resolved as shift
    USES            reduce using rule 8 (declaration_section -> procedure_declarations .)
    CONST           reduce using rule 8 (declaration_section -> procedure_declarations .)
    TYPE            reduce using rule 8 (declaration_section -> procedure_declarations .)
    VAR             reduce using rule 8 (declaration_section -> procedure_declarations .)
    FUNCTION        reduce using rule 8 (declaration_section -> procedure_declarations .)
    CONSTRUCTOR     reduce using rule 8 (declaration_section -> procedure_declarations .)
    DESTRUCTOR      reduce using rule 8 (declaration_section -> procedure_declarations .)
    BEGIN           reduce using rule 8 (declaration_section -> procedure_declarations .)
    PROCEDURE       shift and go to state 31

  ! PROCEDURE       [ reduce using rule 8 (declaration_section -> procedure_declarations .) ]

    procedure_declaration          shift and go to state 30

state 15

    (9) declaration_section -> function_declaration .

    USES            reduce using rule 9 (declaration_section -> function_declaration .)
    CONST           reduce using rule 9 (declaration_section -> function_declaration .)
    TYPE            reduce using rule 9 (declaration_section -> function_declaration .)
    VAR             reduce using rule 9 (declaration_section -> function_declaration .)
    FUNCTION        reduce using rule 9 (declaration_section -> function_declaration .)
    CONSTRUCTOR     reduce using rule 9 (declaration_section -> function_declaration .)
    PROCEDURE       reduce using rule 9 (declaration_section -> function_declaration .)
    DESTRUCTOR      reduce using rule 9 (declaration_section -> function_declaration .)
    BEGIN           reduce using rule 9 (declaration_section -> function_declaration .)


state 16

    (10) declaration_section -> constructor_declaration .

    USES            reduce using rule 10 (declaration_section -> constructor_declaration .)
    CONST           reduce using rule 10 (declaration_section -> constructor_declaration .)
    TYPE            reduce using rule 10 (declaration_section -> constructor_declaration .)
    VAR             reduce using rule 10 (declaration_section -> constructor_declaration .)
    FUNCTION        reduce using rule 10 (declaration_section -> constructor_declaration .)
    CONSTRUCTOR     reduce using rule 10 (declaration_section -> constructor_declaration .)
    PROCEDURE       reduce using rule 10 (declaration_section -> constructor_declaration .)
    DESTRUCTOR      reduce using rule 10 (declaration_section -> constructor_declaration .)
    BEGIN           reduce using rule 10 (declaration_section -> constructor_declaration .)


state 17

    (11) declaration_section -> method_declaration .

    USES            reduce using rule 11 (declaration_section -> method_declaration .)
    CONST           reduce using rule 11 (declaration_section -> method_declaration .)
    TYPE            reduce using rule 11 (declaration_section -> method_declaration .)
    VAR             reduce using rule 11 (declaration_section -> method_declaration .)
    FUNCTION        reduce using rule 11 (declaration_section -> method_declaration .)
    CONSTRUCTOR     reduce using rule 11 (declaration_section -> method_declaration .)
    PROCEDURE       reduce using rule 11 (declaration_section -> method_declaration .)
    DESTRUCTOR      reduce using rule 11 (declaration_section -> method_declaration .)
    BEGIN           reduce using rule 11 (declaration_section -> method_declaration .)


state 18

    (18) uses_opt -> USES . id_list SEMICOLON
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

    ID              shift and go to state 33

    id_list                        shift and go to state 32

state 19

    (166) constant_declaration -> CONST . constant_list
    (167) constant_list -> . constant
    (168) constant_list -> . constant_list constant
    (169) constant -> . ID EQUAL CHARACTER_LITERAL SEMICOLON
    (170) constant -> . ID EQUAL NUMBER SEMICOLON
    (171) constant -> . ID EQUAL STRING_LITERAL SEMICOLON
    (172) constant -> . ID EQUAL BOOLEAN_LITERAL SEMICOLON

    ID              shift and go to state 36

    constant_list                  shift and go to state 34
    constant                       shift and go to state 35

state 20

    (26) type_declaration -> TYPE . type_list
    (27) type_list -> . type_definition
    (28) type_list -> . type_list type_definition
    (29) type_definition -> . ID EQUAL type_specifier SEMICOLON

    ID              shift and go to state 39

    type_list                      shift and go to state 37
    type_definition                shift and go to state 38

state 21

    (21) var_declaration -> VAR . declaration_list
    (22) declaration_list -> . declaration
    (23) declaration_list -> . declaration_list declaration
    (24) declaration -> . id_list COLON type_specifier SEMICOLON
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

    ID              shift and go to state 33

    declaration_list               shift and go to state 40
    declaration                    shift and go to state 41
    id_list                        shift and go to state 42

state 22

    (73) procedure_declarations -> procedure_declaration .

    PROCEDURE       reduce using rule 73 (procedure_declarations -> procedure_declaration .)
    USES            reduce using rule 73 (procedure_declarations -> procedure_declaration .)
    CONST           reduce using rule 73 (procedure_declarations -> procedure_declaration .)
    TYPE            reduce using rule 73 (procedure_declarations -> procedure_declaration .)
    VAR             reduce using rule 73 (procedure_declarations -> procedure_declaration .)
    FUNCTION        reduce using rule 73 (procedure_declarations -> procedure_declaration .)
    CONSTRUCTOR     reduce using rule 73 (procedure_declarations -> procedure_declaration .)
    DESTRUCTOR      reduce using rule 73 (procedure_declarations -> procedure_declaration .)
    BEGIN           reduce using rule 73 (procedure_declarations -> procedure_declaration .)


state 23

    (81) function_declaration -> FUNCTION . ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (82) function_declaration -> FUNCTION . ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (14) method_declaration -> FUNCTION . ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block

    ID              shift and go to state 43


state 24

    (16) constructor_declaration -> CONSTRUCTOR . ID LPAREN field_list RPAREN SEMICOLON block
    (17) constructor_declaration -> CONSTRUCTOR . ID LPAREN RPAREN SEMICOLON block
    (12) method_declaration -> CONSTRUCTOR . ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block

    ID              shift and go to state 44


state 25

    (13) method_declaration -> PROCEDURE . ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block
    (75) procedure_declaration -> PROCEDURE . ID LPAREN field_list RPAREN SEMICOLON block SEMICOLON
    (76) procedure_declaration -> PROCEDURE . ID LPAREN RPAREN SEMICOLON block SEMICOLON
    (77) procedure_declaration -> PROCEDURE . ID SEMICOLON block SEMICOLON
    (78) procedure_declaration -> PROCEDURE . ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON
    (79) procedure_declaration -> PROCEDURE . ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON
    (80) procedure_declaration -> PROCEDURE . ID SEMICOLON FORWARD SEMICOLON

    ID              shift and go to state 45


state 26

    (15) method_declaration -> DESTRUCTOR . ID DOT ID SEMICOLON block

    ID              shift and go to state 46


state 27

    (25) block -> declaration_sections compound_statement .

    DOT             reduce using rule 25 (block -> declaration_sections compound_statement .)
    SEMICOLON       reduce using rule 25 (block -> declaration_sections compound_statement .)
    USES            reduce using rule 25 (block -> declaration_sections compound_statement .)
    CONST           reduce using rule 25 (block -> declaration_sections compound_statement .)
    TYPE            reduce using rule 25 (block -> declaration_sections compound_statement .)
    VAR             reduce using rule 25 (block -> declaration_sections compound_statement .)
    FUNCTION        reduce using rule 25 (block -> declaration_sections compound_statement .)
    CONSTRUCTOR     reduce using rule 25 (block -> declaration_sections compound_statement .)
    PROCEDURE       reduce using rule 25 (block -> declaration_sections compound_statement .)
    DESTRUCTOR      reduce using rule 25 (block -> declaration_sections compound_statement .)
    BEGIN           reduce using rule 25 (block -> declaration_sections compound_statement .)


state 28

    (90) compound_statement -> BEGIN . statement_list END
    (91) statement_list -> . statement statement_list_tail
    (94) statement -> . if_statement
    (95) statement -> . assignment_statement
    (96) statement -> . while_statement
    (97) statement -> . procedure_call
    (98) statement -> . compound_statement
    (99) statement -> . for_statement
    (100) statement -> . case_statement
    (101) statement -> . with_statement
    (102) statement -> . empty
    (155) statement -> . READLN
    (156) statement -> . READLN LPAREN variable RPAREN
    (157) statement -> . READLN LBRACKET variable RBRACKET
    (158) statement -> . WRITE LPAREN expression_list RPAREN
    (159) statement -> . WRITELN LPAREN write_arguments RPAREN
    (165) statement -> . USES ID SEMICOLON
    (104) if_statement -> . IF expression THEN statement ELSE statement
    (105) if_statement -> . IF expression THEN statement
    (106) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (107) if_statement -> . IF expression IN statement THEN statement
    (110) assignment_statement -> . variable COLON_EQUAL expression
    (111) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL
    (112) assignment_statement -> . ID COLON_EQUAL expression
    (119) while_statement -> . WHILE expression DO statement
    (120) procedure_call -> . ID LPAREN expression_list RPAREN
    (121) procedure_call -> . ID
    (90) compound_statement -> . BEGIN statement_list END
    (108) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (109) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (70) case_statement -> . CASE expression OF case_list END SEMICOLON
    (71) case_statement -> . CASE expression OF case_list END
    (103) with_statement -> . WITH variable DO statement
    (154) empty -> .
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    READLN          shift and go to state 58
    WRITE           shift and go to state 60
    WRITELN         shift and go to state 61
    USES            shift and go to state 62
    IF              shift and go to state 64
    ID              shift and go to state 63
    WHILE           shift and go to state 65
    BEGIN           shift and go to state 28
    FOR             shift and go to state 66
    CASE            shift and go to state 67
    WITH            shift and go to state 68
    SEMICOLON       reduce using rule 154 (empty -> .)
    END             reduce using rule 154 (empty -> .)

    statement_list                 shift and go to state 47
    statement                      shift and go to state 48
    if_statement                   shift and go to state 49
    assignment_statement           shift and go to state 50
    while_statement                shift and go to state 51
    procedure_call                 shift and go to state 52
    compound_statement             shift and go to state 53
    for_statement                  shift and go to state 54
    case_statement                 shift and go to state 55
    with_statement                 shift and go to state 56
    empty                          shift and go to state 57
    variable                       shift and go to state 59

state 29

    (1) program -> PROGRAM ID SEMICOLON declaration_sections block DOT .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON declaration_sections block DOT .)


state 30

    (74) procedure_declarations -> procedure_declarations procedure_declaration .

    PROCEDURE       reduce using rule 74 (procedure_declarations -> procedure_declarations procedure_declaration .)
    USES            reduce using rule 74 (procedure_declarations -> procedure_declarations procedure_declaration .)
    CONST           reduce using rule 74 (procedure_declarations -> procedure_declarations procedure_declaration .)
    TYPE            reduce using rule 74 (procedure_declarations -> procedure_declarations procedure_declaration .)
    VAR             reduce using rule 74 (procedure_declarations -> procedure_declarations procedure_declaration .)
    FUNCTION        reduce using rule 74 (procedure_declarations -> procedure_declarations procedure_declaration .)
    CONSTRUCTOR     reduce using rule 74 (procedure_declarations -> procedure_declarations procedure_declaration .)
    DESTRUCTOR      reduce using rule 74 (procedure_declarations -> procedure_declarations procedure_declaration .)
    BEGIN           reduce using rule 74 (procedure_declarations -> procedure_declarations procedure_declaration .)


state 31

    (75) procedure_declaration -> PROCEDURE . ID LPAREN field_list RPAREN SEMICOLON block SEMICOLON
    (76) procedure_declaration -> PROCEDURE . ID LPAREN RPAREN SEMICOLON block SEMICOLON
    (77) procedure_declaration -> PROCEDURE . ID SEMICOLON block SEMICOLON
    (78) procedure_declaration -> PROCEDURE . ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON
    (79) procedure_declaration -> PROCEDURE . ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON
    (80) procedure_declaration -> PROCEDURE . ID SEMICOLON FORWARD SEMICOLON

    ID              shift and go to state 69


state 32

    (18) uses_opt -> USES id_list . SEMICOLON
    (20) id_list -> id_list . COMMA ID

    SEMICOLON       shift and go to state 70
    COMMA           shift and go to state 71


state 33

    (19) id_list -> ID .

    SEMICOLON       reduce using rule 19 (id_list -> ID .)
    COMMA           reduce using rule 19 (id_list -> ID .)
    COLON           reduce using rule 19 (id_list -> ID .)
    LPAREN          reduce using rule 19 (id_list -> ID .)
    ID              reduce using rule 19 (id_list -> ID .)
    RPAREN          reduce using rule 19 (id_list -> ID .)


state 34

    (166) constant_declaration -> CONST constant_list .
    (168) constant_list -> constant_list . constant
    (169) constant -> . ID EQUAL CHARACTER_LITERAL SEMICOLON
    (170) constant -> . ID EQUAL NUMBER SEMICOLON
    (171) constant -> . ID EQUAL STRING_LITERAL SEMICOLON
    (172) constant -> . ID EQUAL BOOLEAN_LITERAL SEMICOLON

    USES            reduce using rule 166 (constant_declaration -> CONST constant_list .)
    CONST           reduce using rule 166 (constant_declaration -> CONST constant_list .)
    TYPE            reduce using rule 166 (constant_declaration -> CONST constant_list .)
    VAR             reduce using rule 166 (constant_declaration -> CONST constant_list .)
    FUNCTION        reduce using rule 166 (constant_declaration -> CONST constant_list .)
    CONSTRUCTOR     reduce using rule 166 (constant_declaration -> CONST constant_list .)
    PROCEDURE       reduce using rule 166 (constant_declaration -> CONST constant_list .)
    DESTRUCTOR      reduce using rule 166 (constant_declaration -> CONST constant_list .)
    BEGIN           reduce using rule 166 (constant_declaration -> CONST constant_list .)
    ID              shift and go to state 36

    constant                       shift and go to state 72

state 35

    (167) constant_list -> constant .

    ID              reduce using rule 167 (constant_list -> constant .)
    USES            reduce using rule 167 (constant_list -> constant .)
    CONST           reduce using rule 167 (constant_list -> constant .)
    TYPE            reduce using rule 167 (constant_list -> constant .)
    VAR             reduce using rule 167 (constant_list -> constant .)
    FUNCTION        reduce using rule 167 (constant_list -> constant .)
    CONSTRUCTOR     reduce using rule 167 (constant_list -> constant .)
    PROCEDURE       reduce using rule 167 (constant_list -> constant .)
    DESTRUCTOR      reduce using rule 167 (constant_list -> constant .)
    BEGIN           reduce using rule 167 (constant_list -> constant .)


state 36

    (169) constant -> ID . EQUAL CHARACTER_LITERAL SEMICOLON
    (170) constant -> ID . EQUAL NUMBER SEMICOLON
    (171) constant -> ID . EQUAL STRING_LITERAL SEMICOLON
    (172) constant -> ID . EQUAL BOOLEAN_LITERAL SEMICOLON

    EQUAL           shift and go to state 73


state 37

    (26) type_declaration -> TYPE type_list .
    (28) type_list -> type_list . type_definition
    (29) type_definition -> . ID EQUAL type_specifier SEMICOLON

    USES            reduce using rule 26 (type_declaration -> TYPE type_list .)
    CONST           reduce using rule 26 (type_declaration -> TYPE type_list .)
    TYPE            reduce using rule 26 (type_declaration -> TYPE type_list .)
    VAR             reduce using rule 26 (type_declaration -> TYPE type_list .)
    FUNCTION        reduce using rule 26 (type_declaration -> TYPE type_list .)
    CONSTRUCTOR     reduce using rule 26 (type_declaration -> TYPE type_list .)
    PROCEDURE       reduce using rule 26 (type_declaration -> TYPE type_list .)
    DESTRUCTOR      reduce using rule 26 (type_declaration -> TYPE type_list .)
    BEGIN           reduce using rule 26 (type_declaration -> TYPE type_list .)
    ID              shift and go to state 39

    type_definition                shift and go to state 74

state 38

    (27) type_list -> type_definition .

    ID              reduce using rule 27 (type_list -> type_definition .)
    USES            reduce using rule 27 (type_list -> type_definition .)
    CONST           reduce using rule 27 (type_list -> type_definition .)
    TYPE            reduce using rule 27 (type_list -> type_definition .)
    VAR             reduce using rule 27 (type_list -> type_definition .)
    FUNCTION        reduce using rule 27 (type_list -> type_definition .)
    CONSTRUCTOR     reduce using rule 27 (type_list -> type_definition .)
    PROCEDURE       reduce using rule 27 (type_list -> type_definition .)
    DESTRUCTOR      reduce using rule 27 (type_list -> type_definition .)
    BEGIN           reduce using rule 27 (type_list -> type_definition .)


state 39

    (29) type_definition -> ID . EQUAL type_specifier SEMICOLON

    EQUAL           shift and go to state 75


state 40

    (21) var_declaration -> VAR declaration_list .
    (23) declaration_list -> declaration_list . declaration
    (24) declaration -> . id_list COLON type_specifier SEMICOLON
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

    USES            reduce using rule 21 (var_declaration -> VAR declaration_list .)
    CONST           reduce using rule 21 (var_declaration -> VAR declaration_list .)
    TYPE            reduce using rule 21 (var_declaration -> VAR declaration_list .)
    VAR             reduce using rule 21 (var_declaration -> VAR declaration_list .)
    FUNCTION        reduce using rule 21 (var_declaration -> VAR declaration_list .)
    CONSTRUCTOR     reduce using rule 21 (var_declaration -> VAR declaration_list .)
    PROCEDURE       reduce using rule 21 (var_declaration -> VAR declaration_list .)
    DESTRUCTOR      reduce using rule 21 (var_declaration -> VAR declaration_list .)
    BEGIN           reduce using rule 21 (var_declaration -> VAR declaration_list .)
    ID              shift and go to state 33

    declaration                    shift and go to state 76
    id_list                        shift and go to state 42

state 41

    (22) declaration_list -> declaration .

    ID              reduce using rule 22 (declaration_list -> declaration .)
    USES            reduce using rule 22 (declaration_list -> declaration .)
    CONST           reduce using rule 22 (declaration_list -> declaration .)
    TYPE            reduce using rule 22 (declaration_list -> declaration .)
    VAR             reduce using rule 22 (declaration_list -> declaration .)
    FUNCTION        reduce using rule 22 (declaration_list -> declaration .)
    CONSTRUCTOR     reduce using rule 22 (declaration_list -> declaration .)
    PROCEDURE       reduce using rule 22 (declaration_list -> declaration .)
    DESTRUCTOR      reduce using rule 22 (declaration_list -> declaration .)
    BEGIN           reduce using rule 22 (declaration_list -> declaration .)


state 42

    (24) declaration -> id_list . COLON type_specifier SEMICOLON
    (20) id_list -> id_list . COMMA ID

    COLON           shift and go to state 77
    COMMA           shift and go to state 71


state 43

    (81) function_declaration -> FUNCTION ID . LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (82) function_declaration -> FUNCTION ID . LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (14) method_declaration -> FUNCTION ID . DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block

    LPAREN          shift and go to state 78
    DOT             shift and go to state 79


state 44

    (16) constructor_declaration -> CONSTRUCTOR ID . LPAREN field_list RPAREN SEMICOLON block
    (17) constructor_declaration -> CONSTRUCTOR ID . LPAREN RPAREN SEMICOLON block
    (12) method_declaration -> CONSTRUCTOR ID . DOT ID LPAREN parameter_list RPAREN SEMICOLON block

    LPAREN          shift and go to state 80
    DOT             shift and go to state 81


state 45

    (13) method_declaration -> PROCEDURE ID . DOT ID LPAREN parameter_list RPAREN SEMICOLON block
    (75) procedure_declaration -> PROCEDURE ID . LPAREN field_list RPAREN SEMICOLON block SEMICOLON
    (76) procedure_declaration -> PROCEDURE ID . LPAREN RPAREN SEMICOLON block SEMICOLON
    (77) procedure_declaration -> PROCEDURE ID . SEMICOLON block SEMICOLON
    (78) procedure_declaration -> PROCEDURE ID . LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON
    (79) procedure_declaration -> PROCEDURE ID . LPAREN RPAREN SEMICOLON FORWARD SEMICOLON
    (80) procedure_declaration -> PROCEDURE ID . SEMICOLON FORWARD SEMICOLON

    DOT             shift and go to state 82
    LPAREN          shift and go to state 83
    SEMICOLON       shift and go to state 84


state 46

    (15) method_declaration -> DESTRUCTOR ID . DOT ID SEMICOLON block

    DOT             shift and go to state 85


state 47

    (90) compound_statement -> BEGIN statement_list . END

    END             shift and go to state 86


state 48

    (91) statement_list -> statement . statement_list_tail
    (92) statement_list_tail -> . SEMICOLON statement statement_list_tail
    (93) statement_list_tail -> . empty
    (154) empty -> .

    SEMICOLON       shift and go to state 88
    END             reduce using rule 154 (empty -> .)

    statement_list_tail            shift and go to state 87
    empty                          shift and go to state 89

state 49

    (94) statement -> if_statement .

    SEMICOLON       reduce using rule 94 (statement -> if_statement .)
    END             reduce using rule 94 (statement -> if_statement .)
    ELSE            reduce using rule 94 (statement -> if_statement .)
    THEN            reduce using rule 94 (statement -> if_statement .)


state 50

    (95) statement -> assignment_statement .

    SEMICOLON       reduce using rule 95 (statement -> assignment_statement .)
    END             reduce using rule 95 (statement -> assignment_statement .)
    ELSE            reduce using rule 95 (statement -> assignment_statement .)
    THEN            reduce using rule 95 (statement -> assignment_statement .)


state 51

    (96) statement -> while_statement .

    SEMICOLON       reduce using rule 96 (statement -> while_statement .)
    END             reduce using rule 96 (statement -> while_statement .)
    ELSE            reduce using rule 96 (statement -> while_statement .)
    THEN            reduce using rule 96 (statement -> while_statement .)


state 52

    (97) statement -> procedure_call .

    SEMICOLON       reduce using rule 97 (statement -> procedure_call .)
    END             reduce using rule 97 (statement -> procedure_call .)
    ELSE            reduce using rule 97 (statement -> procedure_call .)
    THEN            reduce using rule 97 (statement -> procedure_call .)


state 53

    (98) statement -> compound_statement .

    SEMICOLON       reduce using rule 98 (statement -> compound_statement .)
    END             reduce using rule 98 (statement -> compound_statement .)
    ELSE            reduce using rule 98 (statement -> compound_statement .)
    THEN            reduce using rule 98 (statement -> compound_statement .)


state 54

    (99) statement -> for_statement .

    SEMICOLON       reduce using rule 99 (statement -> for_statement .)
    END             reduce using rule 99 (statement -> for_statement .)
    ELSE            reduce using rule 99 (statement -> for_statement .)
    THEN            reduce using rule 99 (statement -> for_statement .)


state 55

    (100) statement -> case_statement .

    SEMICOLON       reduce using rule 100 (statement -> case_statement .)
    END             reduce using rule 100 (statement -> case_statement .)
    ELSE            reduce using rule 100 (statement -> case_statement .)
    THEN            reduce using rule 100 (statement -> case_statement .)


state 56

    (101) statement -> with_statement .

    SEMICOLON       reduce using rule 101 (statement -> with_statement .)
    END             reduce using rule 101 (statement -> with_statement .)
    ELSE            reduce using rule 101 (statement -> with_statement .)
    THEN            reduce using rule 101 (statement -> with_statement .)


state 57

    (102) statement -> empty .

    SEMICOLON       reduce using rule 102 (statement -> empty .)
    END             reduce using rule 102 (statement -> empty .)
    ELSE            reduce using rule 102 (statement -> empty .)
    THEN            reduce using rule 102 (statement -> empty .)


state 58

    (155) statement -> READLN .
    (156) statement -> READLN . LPAREN variable RPAREN
    (157) statement -> READLN . LBRACKET variable RBRACKET

    SEMICOLON       reduce using rule 155 (statement -> READLN .)
    END             reduce using rule 155 (statement -> READLN .)
    ELSE            reduce using rule 155 (statement -> READLN .)
    THEN            reduce using rule 155 (statement -> READLN .)
    LPAREN          shift and go to state 90
    LBRACKET        shift and go to state 91


state 59

    (110) assignment_statement -> variable . COLON_EQUAL expression
    (111) assignment_statement -> variable . COLON_EQUAL BOOLEAN_LITERAL
    (114) variable -> variable . LBRACKET expression RBRACKET
    (115) variable -> variable . DOT ID

    COLON_EQUAL     shift and go to state 92
    LBRACKET        shift and go to state 93
    DOT             shift and go to state 94


state 60

    (158) statement -> WRITE . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 95


state 61

    (159) statement -> WRITELN . LPAREN write_arguments RPAREN

    LPAREN          shift and go to state 96


state 62

    (165) statement -> USES . ID SEMICOLON

    ID              shift and go to state 97


state 63

    (112) assignment_statement -> ID . COLON_EQUAL expression
    (120) procedure_call -> ID . LPAREN expression_list RPAREN
    (121) procedure_call -> ID .
    (113) variable -> ID .
    (116) variable -> ID . LBRACKET index_list RBRACKET

  ! shift/reduce conflict for COLON_EQUAL resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    COLON_EQUAL     shift and go to state 98
    LPAREN          shift and go to state 99
    SEMICOLON       reduce using rule 121 (procedure_call -> ID .)
    END             reduce using rule 121 (procedure_call -> ID .)
    ELSE            reduce using rule 121 (procedure_call -> ID .)
    THEN            reduce using rule 121 (procedure_call -> ID .)
    DOT             reduce using rule 113 (variable -> ID .)
    LBRACKET        shift and go to state 100

  ! COLON_EQUAL     [ reduce using rule 113 (variable -> ID .) ]
  ! LBRACKET        [ reduce using rule 113 (variable -> ID .) ]


state 64

    (104) if_statement -> IF . expression THEN statement ELSE statement
    (105) if_statement -> IF . expression THEN statement
    (106) if_statement -> IF . expression IN statement THEN statement ELSE statement
    (107) if_statement -> IF . expression IN statement THEN statement
    (126) expression -> . simple_expression relop simple_expression
    (127) expression -> . simple_expression
    (139) expression -> . expression PLUS expression
    (140) expression -> . expression MINUS expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (173) expression -> . expression AND expression
    (174) expression -> . expression OR expression
    (175) expression -> . NOT expression
    (128) simple_expression -> . term simple_expression_tail
    (133) term -> . factor term_tail
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 103
    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    expression                     shift and go to state 101
    simple_expression              shift and go to state 102
    term                           shift and go to state 104
    factor                         shift and go to state 105
    function_call                  shift and go to state 106
    variable                       shift and go to state 108

state 65

    (119) while_statement -> WHILE . expression DO statement
    (126) expression -> . simple_expression relop simple_expression
    (127) expression -> . simple_expression
    (139) expression -> . expression PLUS expression
    (140) expression -> . expression MINUS expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (173) expression -> . expression AND expression
    (174) expression -> . expression OR expression
    (175) expression -> . NOT expression
    (128) simple_expression -> . term simple_expression_tail
    (133) term -> . factor term_tail
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 103
    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    expression                     shift and go to state 112
    simple_expression              shift and go to state 102
    term                           shift and go to state 104
    factor                         shift and go to state 105
    function_call                  shift and go to state 106
    variable                       shift and go to state 108

state 66

    (108) for_statement -> FOR . ID COLON_EQUAL expression TO expression DO statement
    (109) for_statement -> FOR . ID COLON_EQUAL expression DOWNTO expression DO statement

    ID              shift and go to state 113


state 67

    (70) case_statement -> CASE . expression OF case_list END SEMICOLON
    (71) case_statement -> CASE . expression OF case_list END
    (126) expression -> . simple_expression relop simple_expression
    (127) expression -> . simple_expression
    (139) expression -> . expression PLUS expression
    (140) expression -> . expression MINUS expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (173) expression -> . expression AND expression
    (174) expression -> . expression OR expression
    (175) expression -> . NOT expression
    (128) simple_expression -> . term simple_expression_tail
    (133) term -> . factor term_tail
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 103
    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    expression                     shift and go to state 114
    simple_expression              shift and go to state 102
    term                           shift and go to state 104
    factor                         shift and go to state 105
    function_call                  shift and go to state 106
    variable                       shift and go to state 108

state 68

    (103) with_statement -> WITH . variable DO statement
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    ID              shift and go to state 116

    variable                       shift and go to state 115

state 69

    (75) procedure_declaration -> PROCEDURE ID . LPAREN field_list RPAREN SEMICOLON block SEMICOLON
    (76) procedure_declaration -> PROCEDURE ID . LPAREN RPAREN SEMICOLON block SEMICOLON
    (77) procedure_declaration -> PROCEDURE ID . SEMICOLON block SEMICOLON
    (78) procedure_declaration -> PROCEDURE ID . LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON
    (79) procedure_declaration -> PROCEDURE ID . LPAREN RPAREN SEMICOLON FORWARD SEMICOLON
    (80) procedure_declaration -> PROCEDURE ID . SEMICOLON FORWARD SEMICOLON

    LPAREN          shift and go to state 83
    SEMICOLON       shift and go to state 84


state 70

    (18) uses_opt -> USES id_list SEMICOLON .

    USES            reduce using rule 18 (uses_opt -> USES id_list SEMICOLON .)
    CONST           reduce using rule 18 (uses_opt -> USES id_list SEMICOLON .)
    TYPE            reduce using rule 18 (uses_opt -> USES id_list SEMICOLON .)
    VAR             reduce using rule 18 (uses_opt -> USES id_list SEMICOLON .)
    FUNCTION        reduce using rule 18 (uses_opt -> USES id_list SEMICOLON .)
    CONSTRUCTOR     reduce using rule 18 (uses_opt -> USES id_list SEMICOLON .)
    PROCEDURE       reduce using rule 18 (uses_opt -> USES id_list SEMICOLON .)
    DESTRUCTOR      reduce using rule 18 (uses_opt -> USES id_list SEMICOLON .)
    BEGIN           reduce using rule 18 (uses_opt -> USES id_list SEMICOLON .)


state 71

    (20) id_list -> id_list COMMA . ID

    ID              shift and go to state 117


state 72

    (168) constant_list -> constant_list constant .

    ID              reduce using rule 168 (constant_list -> constant_list constant .)
    USES            reduce using rule 168 (constant_list -> constant_list constant .)
    CONST           reduce using rule 168 (constant_list -> constant_list constant .)
    TYPE            reduce using rule 168 (constant_list -> constant_list constant .)
    VAR             reduce using rule 168 (constant_list -> constant_list constant .)
    FUNCTION        reduce using rule 168 (constant_list -> constant_list constant .)
    CONSTRUCTOR     reduce using rule 168 (constant_list -> constant_list constant .)
    PROCEDURE       reduce using rule 168 (constant_list -> constant_list constant .)
    DESTRUCTOR      reduce using rule 168 (constant_list -> constant_list constant .)
    BEGIN           reduce using rule 168 (constant_list -> constant_list constant .)


state 73

    (169) constant -> ID EQUAL . CHARACTER_LITERAL SEMICOLON
    (170) constant -> ID EQUAL . NUMBER SEMICOLON
    (171) constant -> ID EQUAL . STRING_LITERAL SEMICOLON
    (172) constant -> ID EQUAL . BOOLEAN_LITERAL SEMICOLON

    CHARACTER_LITERAL shift and go to state 118
    NUMBER          shift and go to state 119
    STRING_LITERAL  shift and go to state 120
    BOOLEAN_LITERAL shift and go to state 121


state 74

    (28) type_list -> type_list type_definition .

    ID              reduce using rule 28 (type_list -> type_list type_definition .)
    USES            reduce using rule 28 (type_list -> type_list type_definition .)
    CONST           reduce using rule 28 (type_list -> type_list type_definition .)
    TYPE            reduce using rule 28 (type_list -> type_list type_definition .)
    VAR             reduce using rule 28 (type_list -> type_list type_definition .)
    FUNCTION        reduce using rule 28 (type_list -> type_list type_definition .)
    CONSTRUCTOR     reduce using rule 28 (type_list -> type_list type_definition .)
    PROCEDURE       reduce using rule 28 (type_list -> type_list type_definition .)
    DESTRUCTOR      reduce using rule 28 (type_list -> type_list type_definition .)
    BEGIN           reduce using rule 28 (type_list -> type_list type_definition .)


state 75

    (29) type_definition -> ID EQUAL . type_specifier SEMICOLON
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (72) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 124
    FILE            shift and go to state 126
    SET             shift and go to state 127
    RECORD          shift and go to state 128
    OBJECT          shift and go to state 129
    LPAREN          shift and go to state 130
    BOOLEAN_LITERAL shift and go to state 131
    INTEGER         shift and go to state 132
    BYTE            shift and go to state 133
    CHAR            shift and go to state 134
    STRING          shift and go to state 135
    ID              shift and go to state 122
    LONGINT         shift and go to state 137
    NUMBER          shift and go to state 136

    type_specifier                 shift and go to state 123
    subrange                       shift and go to state 125

state 76

    (23) declaration_list -> declaration_list declaration .

    ID              reduce using rule 23 (declaration_list -> declaration_list declaration .)
    USES            reduce using rule 23 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 23 (declaration_list -> declaration_list declaration .)
    TYPE            reduce using rule 23 (declaration_list -> declaration_list declaration .)
    VAR             reduce using rule 23 (declaration_list -> declaration_list declaration .)
    FUNCTION        reduce using rule 23 (declaration_list -> declaration_list declaration .)
    CONSTRUCTOR     reduce using rule 23 (declaration_list -> declaration_list declaration .)
    PROCEDURE       reduce using rule 23 (declaration_list -> declaration_list declaration .)
    DESTRUCTOR      reduce using rule 23 (declaration_list -> declaration_list declaration .)
    BEGIN           reduce using rule 23 (declaration_list -> declaration_list declaration .)


state 77

    (24) declaration -> id_list COLON . type_specifier SEMICOLON
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (72) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 124
    FILE            shift and go to state 126
    SET             shift and go to state 127
    RECORD          shift and go to state 128
    OBJECT          shift and go to state 129
    LPAREN          shift and go to state 130
    BOOLEAN_LITERAL shift and go to state 131
    INTEGER         shift and go to state 132
    BYTE            shift and go to state 133
    CHAR            shift and go to state 134
    STRING          shift and go to state 135
    ID              shift and go to state 122
    LONGINT         shift and go to state 137
    NUMBER          shift and go to state 136

    type_specifier                 shift and go to state 138
    subrange                       shift and go to state 125

state 78

    (81) function_declaration -> FUNCTION ID LPAREN . parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (82) function_declaration -> FUNCTION ID LPAREN . parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (85) parameter_list -> . parameter
    (86) parameter_list -> . parameter_list SEMICOLON parameter
    (87) parameter_list -> . empty
    (88) parameter -> . id_list COLON type_specifier
    (89) parameter -> . VAR id_list COLON type_specifier
    (154) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

    VAR             shift and go to state 143
    RPAREN          reduce using rule 154 (empty -> .)
    SEMICOLON       reduce using rule 154 (empty -> .)
    ID              shift and go to state 33

    parameter_list                 shift and go to state 139
    parameter                      shift and go to state 140
    empty                          shift and go to state 141
    id_list                        shift and go to state 142

state 79

    (14) method_declaration -> FUNCTION ID DOT . ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block

    ID              shift and go to state 144


state 80

    (16) constructor_declaration -> CONSTRUCTOR ID LPAREN . field_list RPAREN SEMICOLON block
    (17) constructor_declaration -> CONSTRUCTOR ID LPAREN . RPAREN SEMICOLON block
    (48) field_list -> . field_list field
    (49) field_list -> . field
    (50) field_list -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . id_list assignment_statement
    (154) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    RPAREN          shift and go to state 146
    VAR             shift and go to state 150
    ID              shift and go to state 33

  ! RPAREN          [ reduce using rule 154 (empty -> .) ]
  ! VAR             [ reduce using rule 154 (empty -> .) ]
  ! ID              [ reduce using rule 154 (empty -> .) ]

    field_list                     shift and go to state 145
    field                          shift and go to state 147
    empty                          shift and go to state 148
    id_list                        shift and go to state 149

state 81

    (12) method_declaration -> CONSTRUCTOR ID DOT . ID LPAREN parameter_list RPAREN SEMICOLON block

    ID              shift and go to state 151


state 82

    (13) method_declaration -> PROCEDURE ID DOT . ID LPAREN parameter_list RPAREN SEMICOLON block

    ID              shift and go to state 152


state 83

    (75) procedure_declaration -> PROCEDURE ID LPAREN . field_list RPAREN SEMICOLON block SEMICOLON
    (76) procedure_declaration -> PROCEDURE ID LPAREN . RPAREN SEMICOLON block SEMICOLON
    (78) procedure_declaration -> PROCEDURE ID LPAREN . field_list RPAREN SEMICOLON FORWARD SEMICOLON
    (79) procedure_declaration -> PROCEDURE ID LPAREN . RPAREN SEMICOLON FORWARD SEMICOLON
    (48) field_list -> . field_list field
    (49) field_list -> . field
    (50) field_list -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . id_list assignment_statement
    (154) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    RPAREN          shift and go to state 154
    VAR             shift and go to state 150
    ID              shift and go to state 33

  ! RPAREN          [ reduce using rule 154 (empty -> .) ]
  ! VAR             [ reduce using rule 154 (empty -> .) ]
  ! ID              [ reduce using rule 154 (empty -> .) ]

    field_list                     shift and go to state 153
    field                          shift and go to state 147
    empty                          shift and go to state 148
    id_list                        shift and go to state 149

state 84

    (77) procedure_declaration -> PROCEDURE ID SEMICOLON . block SEMICOLON
    (80) procedure_declaration -> PROCEDURE ID SEMICOLON . FORWARD SEMICOLON
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (154) empty -> .

    FORWARD         shift and go to state 156
    BEGIN           reduce using rule 154 (empty -> .)
    USES            reduce using rule 154 (empty -> .)
    CONST           reduce using rule 154 (empty -> .)
    TYPE            reduce using rule 154 (empty -> .)
    VAR             reduce using rule 154 (empty -> .)
    FUNCTION        reduce using rule 154 (empty -> .)
    CONSTRUCTOR     reduce using rule 154 (empty -> .)
    PROCEDURE       reduce using rule 154 (empty -> .)
    DESTRUCTOR      reduce using rule 154 (empty -> .)

    block                          shift and go to state 155
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 85

    (15) method_declaration -> DESTRUCTOR ID DOT . ID SEMICOLON block

    ID              shift and go to state 157


state 86

    (90) compound_statement -> BEGIN statement_list END .

    DOT             reduce using rule 90 (compound_statement -> BEGIN statement_list END .)
    SEMICOLON       reduce using rule 90 (compound_statement -> BEGIN statement_list END .)
    USES            reduce using rule 90 (compound_statement -> BEGIN statement_list END .)
    CONST           reduce using rule 90 (compound_statement -> BEGIN statement_list END .)
    TYPE            reduce using rule 90 (compound_statement -> BEGIN statement_list END .)
    VAR             reduce using rule 90 (compound_statement -> BEGIN statement_list END .)
    FUNCTION        reduce using rule 90 (compound_statement -> BEGIN statement_list END .)
    CONSTRUCTOR     reduce using rule 90 (compound_statement -> BEGIN statement_list END .)
    PROCEDURE       reduce using rule 90 (compound_statement -> BEGIN statement_list END .)
    DESTRUCTOR      reduce using rule 90 (compound_statement -> BEGIN statement_list END .)
    BEGIN           reduce using rule 90 (compound_statement -> BEGIN statement_list END .)
    END             reduce using rule 90 (compound_statement -> BEGIN statement_list END .)
    ELSE            reduce using rule 90 (compound_statement -> BEGIN statement_list END .)
    THEN            reduce using rule 90 (compound_statement -> BEGIN statement_list END .)


state 87

    (91) statement_list -> statement statement_list_tail .

    END             reduce using rule 91 (statement_list -> statement statement_list_tail .)


state 88

    (92) statement_list_tail -> SEMICOLON . statement statement_list_tail
    (94) statement -> . if_statement
    (95) statement -> . assignment_statement
    (96) statement -> . while_statement
    (97) statement -> . procedure_call
    (98) statement -> . compound_statement
    (99) statement -> . for_statement
    (100) statement -> . case_statement
    (101) statement -> . with_statement
    (102) statement -> . empty
    (155) statement -> . READLN
    (156) statement -> . READLN LPAREN variable RPAREN
    (157) statement -> . READLN LBRACKET variable RBRACKET
    (158) statement -> . WRITE LPAREN expression_list RPAREN
    (159) statement -> . WRITELN LPAREN write_arguments RPAREN
    (165) statement -> . USES ID SEMICOLON
    (104) if_statement -> . IF expression THEN statement ELSE statement
    (105) if_statement -> . IF expression THEN statement
    (106) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (107) if_statement -> . IF expression IN statement THEN statement
    (110) assignment_statement -> . variable COLON_EQUAL expression
    (111) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL
    (112) assignment_statement -> . ID COLON_EQUAL expression
    (119) while_statement -> . WHILE expression DO statement
    (120) procedure_call -> . ID LPAREN expression_list RPAREN
    (121) procedure_call -> . ID
    (90) compound_statement -> . BEGIN statement_list END
    (108) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (109) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (70) case_statement -> . CASE expression OF case_list END SEMICOLON
    (71) case_statement -> . CASE expression OF case_list END
    (103) with_statement -> . WITH variable DO statement
    (154) empty -> .
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    READLN          shift and go to state 58
    WRITE           shift and go to state 60
    WRITELN         shift and go to state 61
    USES            shift and go to state 62
    IF              shift and go to state 64
    ID              shift and go to state 63
    WHILE           shift and go to state 65
    BEGIN           shift and go to state 28
    FOR             shift and go to state 66
    CASE            shift and go to state 67
    WITH            shift and go to state 68
    SEMICOLON       reduce using rule 154 (empty -> .)
    END             reduce using rule 154 (empty -> .)

    statement                      shift and go to state 158
    if_statement                   shift and go to state 49
    assignment_statement           shift and go to state 50
    while_statement                shift and go to state 51
    procedure_call                 shift and go to state 52
    compound_statement             shift and go to state 53
    for_statement                  shift and go to state 54
    case_statement                 shift and go to state 55
    with_statement                 shift and go to state 56
    empty                          shift and go to state 57
    variable                       shift and go to state 59

state 89

    (93) statement_list_tail -> empty .

    END             reduce using rule 93 (statement_list_tail -> empty .)


state 90

    (156) statement -> READLN LPAREN . variable RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    ID              shift and go to state 116

    variable                       shift and go to state 159

state 91

    (157) statement -> READLN LBRACKET . variable RBRACKET
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    ID              shift and go to state 116

    variable                       shift and go to state 160

state 92

    (110) assignment_statement -> variable COLON_EQUAL . expression
    (111) assignment_statement -> variable COLON_EQUAL . BOOLEAN_LITERAL
    (126) expression -> . simple_expression relop simple_expression
    (127) expression -> . simple_expression
    (139) expression -> . expression PLUS expression
    (140) expression -> . expression MINUS expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (173) expression -> . expression AND expression
    (174) expression -> . expression OR expression
    (175) expression -> . NOT expression
    (128) simple_expression -> . term simple_expression_tail
    (133) term -> . factor term_tail
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    BOOLEAN_LITERAL shift and go to state 162
    NOT             shift and go to state 103
    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    variable                       shift and go to state 108
    expression                     shift and go to state 161
    simple_expression              shift and go to state 102
    term                           shift and go to state 104
    factor                         shift and go to state 105
    function_call                  shift and go to state 106

state 93

    (114) variable -> variable LBRACKET . expression RBRACKET
    (126) expression -> . simple_expression relop simple_expression
    (127) expression -> . simple_expression
    (139) expression -> . expression PLUS expression
    (140) expression -> . expression MINUS expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (173) expression -> . expression AND expression
    (174) expression -> . expression OR expression
    (175) expression -> . NOT expression
    (128) simple_expression -> . term simple_expression_tail
    (133) term -> . factor term_tail
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 103
    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    variable                       shift and go to state 108
    expression                     shift and go to state 163
    simple_expression              shift and go to state 102
    term                           shift and go to state 104
    factor                         shift and go to state 105
    function_call                  shift and go to state 106

state 94

    (115) variable -> variable DOT . ID

    ID              shift and go to state 164


state 95

    (158) statement -> WRITE LPAREN . expression_list RPAREN
    (122) expression_list -> . expression expression_list_tail
    (125) expression_list -> . empty
    (126) expression -> . simple_expression relop simple_expression
    (127) expression -> . simple_expression
    (139) expression -> . expression PLUS expression
    (140) expression -> . expression MINUS expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (173) expression -> . expression AND expression
    (174) expression -> . expression OR expression
    (175) expression -> . NOT expression
    (154) empty -> .
    (128) simple_expression -> . term simple_expression_tail
    (133) term -> . factor term_tail
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 103
    RPAREN          reduce using rule 154 (empty -> .)
    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    expression_list                shift and go to state 165
    expression                     shift and go to state 166
    empty                          shift and go to state 167
    simple_expression              shift and go to state 102
    term                           shift and go to state 104
    factor                         shift and go to state 105
    function_call                  shift and go to state 106
    variable                       shift and go to state 108

state 96

    (159) statement -> WRITELN LPAREN . write_arguments RPAREN
    (160) write_arguments -> . write_argument
    (161) write_arguments -> . write_arguments COMMA write_argument
    (162) write_argument -> . expression
    (163) write_argument -> . expression COLON expression
    (164) write_argument -> . expression COLON expression COLON expression
    (126) expression -> . simple_expression relop simple_expression
    (127) expression -> . simple_expression
    (139) expression -> . expression PLUS expression
    (140) expression -> . expression MINUS expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (173) expression -> . expression AND expression
    (174) expression -> . expression OR expression
    (175) expression -> . NOT expression
    (128) simple_expression -> . term simple_expression_tail
    (133) term -> . factor term_tail
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 103
    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    write_arguments                shift and go to state 168
    write_argument                 shift and go to state 169
    expression                     shift and go to state 170
    simple_expression              shift and go to state 102
    term                           shift and go to state 104
    factor                         shift and go to state 105
    function_call                  shift and go to state 106
    variable                       shift and go to state 108

state 97

    (165) statement -> USES ID . SEMICOLON

    SEMICOLON       shift and go to state 171


state 98

    (112) assignment_statement -> ID COLON_EQUAL . expression
    (126) expression -> . simple_expression relop simple_expression
    (127) expression -> . simple_expression
    (139) expression -> . expression PLUS expression
    (140) expression -> . expression MINUS expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (173) expression -> . expression AND expression
    (174) expression -> . expression OR expression
    (175) expression -> . NOT expression
    (128) simple_expression -> . term simple_expression_tail
    (133) term -> . factor term_tail
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 103
    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    expression                     shift and go to state 172
    simple_expression              shift and go to state 102
    term                           shift and go to state 104
    factor                         shift and go to state 105
    function_call                  shift and go to state 106
    variable                       shift and go to state 108

state 99

    (120) procedure_call -> ID LPAREN . expression_list RPAREN
    (122) expression_list -> . expression expression_list_tail
    (125) expression_list -> . empty
    (126) expression -> . simple_expression relop simple_expression
    (127) expression -> . simple_expression
    (139) expression -> . expression PLUS expression
    (140) expression -> . expression MINUS expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (173) expression -> . expression AND expression
    (174) expression -> . expression OR expression
    (175) expression -> . NOT expression
    (154) empty -> .
    (128) simple_expression -> . term simple_expression_tail
    (133) term -> . factor term_tail
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 103
    RPAREN          reduce using rule 154 (empty -> .)
    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    expression_list                shift and go to state 173
    expression                     shift and go to state 166
    empty                          shift and go to state 167
    simple_expression              shift and go to state 102
    term                           shift and go to state 104
    factor                         shift and go to state 105
    function_call                  shift and go to state 106
    variable                       shift and go to state 108

state 100

    (116) variable -> ID LBRACKET . index_list RBRACKET
    (117) index_list -> . expression
    (118) index_list -> . index_list COMMA expression
    (126) expression -> . simple_expression relop simple_expression
    (127) expression -> . simple_expression
    (139) expression -> . expression PLUS expression
    (140) expression -> . expression MINUS expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (173) expression -> . expression AND expression
    (174) expression -> . expression OR expression
    (175) expression -> . NOT expression
    (128) simple_expression -> . term simple_expression_tail
    (133) term -> . factor term_tail
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 103
    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    index_list                     shift and go to state 174
    expression                     shift and go to state 175
    simple_expression              shift and go to state 102
    term                           shift and go to state 104
    factor                         shift and go to state 105
    function_call                  shift and go to state 106
    variable                       shift and go to state 108

state 101

    (104) if_statement -> IF expression . THEN statement ELSE statement
    (105) if_statement -> IF expression . THEN statement
    (106) if_statement -> IF expression . IN statement THEN statement ELSE statement
    (107) if_statement -> IF expression . IN statement THEN statement
    (139) expression -> expression . PLUS expression
    (140) expression -> expression . MINUS expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (173) expression -> expression . AND expression
    (174) expression -> expression . OR expression

    THEN            shift and go to state 176
    IN              shift and go to state 177
    PLUS            shift and go to state 178
    MINUS           shift and go to state 179
    TIMES           shift and go to state 180
    DIVIDE          shift and go to state 181
    MOD             shift and go to state 182
    AND             shift and go to state 183
    OR              shift and go to state 184


state 102

    (126) expression -> simple_expression . relop simple_expression
    (127) expression -> simple_expression .
    (148) relop -> . LESS
    (149) relop -> . LESS_EQUAL
    (150) relop -> . GREAT
    (151) relop -> . GREAT_EQUAL
    (152) relop -> . EQUAL
    (153) relop -> . DIFFERENT

    THEN            reduce using rule 127 (expression -> simple_expression .)
    IN              reduce using rule 127 (expression -> simple_expression .)
    PLUS            reduce using rule 127 (expression -> simple_expression .)
    MINUS           reduce using rule 127 (expression -> simple_expression .)
    TIMES           reduce using rule 127 (expression -> simple_expression .)
    DIVIDE          reduce using rule 127 (expression -> simple_expression .)
    MOD             reduce using rule 127 (expression -> simple_expression .)
    AND             reduce using rule 127 (expression -> simple_expression .)
    OR              reduce using rule 127 (expression -> simple_expression .)
    DO              reduce using rule 127 (expression -> simple_expression .)
    OF              reduce using rule 127 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 127 (expression -> simple_expression .)
    END             reduce using rule 127 (expression -> simple_expression .)
    RPAREN          reduce using rule 127 (expression -> simple_expression .)
    VAR             reduce using rule 127 (expression -> simple_expression .)
    ID              reduce using rule 127 (expression -> simple_expression .)
    CASE            reduce using rule 127 (expression -> simple_expression .)
    CONSTRUCTOR     reduce using rule 127 (expression -> simple_expression .)
    PROCEDURE       reduce using rule 127 (expression -> simple_expression .)
    FUNCTION        reduce using rule 127 (expression -> simple_expression .)
    DESTRUCTOR      reduce using rule 127 (expression -> simple_expression .)
    ELSE            reduce using rule 127 (expression -> simple_expression .)
    RBRACKET        reduce using rule 127 (expression -> simple_expression .)
    COMMA           reduce using rule 127 (expression -> simple_expression .)
    COLON           reduce using rule 127 (expression -> simple_expression .)
    TO              reduce using rule 127 (expression -> simple_expression .)
    DOWNTO          reduce using rule 127 (expression -> simple_expression .)
    LESS            shift and go to state 186
    LESS_EQUAL      shift and go to state 187
    GREAT           shift and go to state 188
    GREAT_EQUAL     shift and go to state 189
    EQUAL           shift and go to state 190
    DIFFERENT       shift and go to state 191

    relop                          shift and go to state 185

state 103

    (175) expression -> NOT . expression
    (126) expression -> . simple_expression relop simple_expression
    (127) expression -> . simple_expression
    (139) expression -> . expression PLUS expression
    (140) expression -> . expression MINUS expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (173) expression -> . expression AND expression
    (174) expression -> . expression OR expression
    (175) expression -> . NOT expression
    (128) simple_expression -> . term simple_expression_tail
    (133) term -> . factor term_tail
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 103
    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    expression                     shift and go to state 192
    simple_expression              shift and go to state 102
    term                           shift and go to state 104
    factor                         shift and go to state 105
    function_call                  shift and go to state 106
    variable                       shift and go to state 108

state 104

    (128) simple_expression -> term . simple_expression_tail
    (129) simple_expression_tail -> . addop term
    (130) simple_expression_tail -> . empty
    (131) addop -> . PLUS
    (132) addop -> . MINUS
    (154) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 196
    MINUS           shift and go to state 197
    LESS            reduce using rule 154 (empty -> .)
    LESS_EQUAL      reduce using rule 154 (empty -> .)
    GREAT           reduce using rule 154 (empty -> .)
    GREAT_EQUAL     reduce using rule 154 (empty -> .)
    EQUAL           reduce using rule 154 (empty -> .)
    DIFFERENT       reduce using rule 154 (empty -> .)
    THEN            reduce using rule 154 (empty -> .)
    IN              reduce using rule 154 (empty -> .)
    TIMES           reduce using rule 154 (empty -> .)
    DIVIDE          reduce using rule 154 (empty -> .)
    MOD             reduce using rule 154 (empty -> .)
    AND             reduce using rule 154 (empty -> .)
    OR              reduce using rule 154 (empty -> .)
    DO              reduce using rule 154 (empty -> .)
    OF              reduce using rule 154 (empty -> .)
    SEMICOLON       reduce using rule 154 (empty -> .)
    END             reduce using rule 154 (empty -> .)
    RPAREN          reduce using rule 154 (empty -> .)
    VAR             reduce using rule 154 (empty -> .)
    ID              reduce using rule 154 (empty -> .)
    CASE            reduce using rule 154 (empty -> .)
    CONSTRUCTOR     reduce using rule 154 (empty -> .)
    PROCEDURE       reduce using rule 154 (empty -> .)
    FUNCTION        reduce using rule 154 (empty -> .)
    DESTRUCTOR      reduce using rule 154 (empty -> .)
    ELSE            reduce using rule 154 (empty -> .)
    RBRACKET        reduce using rule 154 (empty -> .)
    COMMA           reduce using rule 154 (empty -> .)
    COLON           reduce using rule 154 (empty -> .)
    TO              reduce using rule 154 (empty -> .)
    DOWNTO          reduce using rule 154 (empty -> .)

  ! PLUS            [ reduce using rule 154 (empty -> .) ]
  ! MINUS           [ reduce using rule 154 (empty -> .) ]

    simple_expression_tail         shift and go to state 193
    addop                          shift and go to state 194
    empty                          shift and go to state 195

state 105

    (133) term -> factor . term_tail
    (134) term_tail -> . mulop factor
    (135) term_tail -> . empty
    (136) mulop -> . TIMES
    (137) mulop -> . DIVIDE
    (138) mulop -> . DIV
    (154) empty -> .

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    TIMES           shift and go to state 201
    DIVIDE          shift and go to state 202
    DIV             shift and go to state 203
    PLUS            reduce using rule 154 (empty -> .)
    MINUS           reduce using rule 154 (empty -> .)
    LESS            reduce using rule 154 (empty -> .)
    LESS_EQUAL      reduce using rule 154 (empty -> .)
    GREAT           reduce using rule 154 (empty -> .)
    GREAT_EQUAL     reduce using rule 154 (empty -> .)
    EQUAL           reduce using rule 154 (empty -> .)
    DIFFERENT       reduce using rule 154 (empty -> .)
    THEN            reduce using rule 154 (empty -> .)
    IN              reduce using rule 154 (empty -> .)
    MOD             reduce using rule 154 (empty -> .)
    AND             reduce using rule 154 (empty -> .)
    OR              reduce using rule 154 (empty -> .)
    DO              reduce using rule 154 (empty -> .)
    OF              reduce using rule 154 (empty -> .)
    SEMICOLON       reduce using rule 154 (empty -> .)
    END             reduce using rule 154 (empty -> .)
    RPAREN          reduce using rule 154 (empty -> .)
    VAR             reduce using rule 154 (empty -> .)
    ID              reduce using rule 154 (empty -> .)
    CASE            reduce using rule 154 (empty -> .)
    CONSTRUCTOR     reduce using rule 154 (empty -> .)
    PROCEDURE       reduce using rule 154 (empty -> .)
    FUNCTION        reduce using rule 154 (empty -> .)
    DESTRUCTOR      reduce using rule 154 (empty -> .)
    ELSE            reduce using rule 154 (empty -> .)
    RBRACKET        reduce using rule 154 (empty -> .)
    COMMA           reduce using rule 154 (empty -> .)
    COLON           reduce using rule 154 (empty -> .)
    TO              reduce using rule 154 (empty -> .)
    DOWNTO          reduce using rule 154 (empty -> .)

  ! TIMES           [ reduce using rule 154 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 154 (empty -> .) ]

    term_tail                      shift and go to state 198
    mulop                          shift and go to state 199
    empty                          shift and go to state 200

state 106

    (84) factor -> function_call .

    TIMES           reduce using rule 84 (factor -> function_call .)
    DIVIDE          reduce using rule 84 (factor -> function_call .)
    DIV             reduce using rule 84 (factor -> function_call .)
    PLUS            reduce using rule 84 (factor -> function_call .)
    MINUS           reduce using rule 84 (factor -> function_call .)
    LESS            reduce using rule 84 (factor -> function_call .)
    LESS_EQUAL      reduce using rule 84 (factor -> function_call .)
    GREAT           reduce using rule 84 (factor -> function_call .)
    GREAT_EQUAL     reduce using rule 84 (factor -> function_call .)
    EQUAL           reduce using rule 84 (factor -> function_call .)
    DIFFERENT       reduce using rule 84 (factor -> function_call .)
    THEN            reduce using rule 84 (factor -> function_call .)
    IN              reduce using rule 84 (factor -> function_call .)
    MOD             reduce using rule 84 (factor -> function_call .)
    AND             reduce using rule 84 (factor -> function_call .)
    OR              reduce using rule 84 (factor -> function_call .)
    DO              reduce using rule 84 (factor -> function_call .)
    OF              reduce using rule 84 (factor -> function_call .)
    SEMICOLON       reduce using rule 84 (factor -> function_call .)
    END             reduce using rule 84 (factor -> function_call .)
    RPAREN          reduce using rule 84 (factor -> function_call .)
    VAR             reduce using rule 84 (factor -> function_call .)
    ID              reduce using rule 84 (factor -> function_call .)
    CASE            reduce using rule 84 (factor -> function_call .)
    CONSTRUCTOR     reduce using rule 84 (factor -> function_call .)
    PROCEDURE       reduce using rule 84 (factor -> function_call .)
    FUNCTION        reduce using rule 84 (factor -> function_call .)
    DESTRUCTOR      reduce using rule 84 (factor -> function_call .)
    ELSE            reduce using rule 84 (factor -> function_call .)
    RBRACKET        reduce using rule 84 (factor -> function_call .)
    COMMA           reduce using rule 84 (factor -> function_call .)
    COLON           reduce using rule 84 (factor -> function_call .)
    TO              reduce using rule 84 (factor -> function_call .)
    DOWNTO          reduce using rule 84 (factor -> function_call .)


state 107

    (144) factor -> LPAREN . expression RPAREN
    (126) expression -> . simple_expression relop simple_expression
    (127) expression -> . simple_expression
    (139) expression -> . expression PLUS expression
    (140) expression -> . expression MINUS expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (173) expression -> . expression AND expression
    (174) expression -> . expression OR expression
    (175) expression -> . NOT expression
    (128) simple_expression -> . term simple_expression_tail
    (133) term -> . factor term_tail
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 103
    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    expression                     shift and go to state 204
    simple_expression              shift and go to state 102
    term                           shift and go to state 104
    factor                         shift and go to state 105
    function_call                  shift and go to state 106
    variable                       shift and go to state 108

state 108

    (145) factor -> variable .
    (114) variable -> variable . LBRACKET expression RBRACKET
    (115) variable -> variable . DOT ID

    TIMES           reduce using rule 145 (factor -> variable .)
    DIVIDE          reduce using rule 145 (factor -> variable .)
    DIV             reduce using rule 145 (factor -> variable .)
    PLUS            reduce using rule 145 (factor -> variable .)
    MINUS           reduce using rule 145 (factor -> variable .)
    LESS            reduce using rule 145 (factor -> variable .)
    LESS_EQUAL      reduce using rule 145 (factor -> variable .)
    GREAT           reduce using rule 145 (factor -> variable .)
    GREAT_EQUAL     reduce using rule 145 (factor -> variable .)
    EQUAL           reduce using rule 145 (factor -> variable .)
    DIFFERENT       reduce using rule 145 (factor -> variable .)
    THEN            reduce using rule 145 (factor -> variable .)
    IN              reduce using rule 145 (factor -> variable .)
    MOD             reduce using rule 145 (factor -> variable .)
    AND             reduce using rule 145 (factor -> variable .)
    OR              reduce using rule 145 (factor -> variable .)
    DO              reduce using rule 145 (factor -> variable .)
    OF              reduce using rule 145 (factor -> variable .)
    SEMICOLON       reduce using rule 145 (factor -> variable .)
    END             reduce using rule 145 (factor -> variable .)
    RPAREN          reduce using rule 145 (factor -> variable .)
    VAR             reduce using rule 145 (factor -> variable .)
    ID              reduce using rule 145 (factor -> variable .)
    CASE            reduce using rule 145 (factor -> variable .)
    CONSTRUCTOR     reduce using rule 145 (factor -> variable .)
    PROCEDURE       reduce using rule 145 (factor -> variable .)
    FUNCTION        reduce using rule 145 (factor -> variable .)
    DESTRUCTOR      reduce using rule 145 (factor -> variable .)
    ELSE            reduce using rule 145 (factor -> variable .)
    RBRACKET        reduce using rule 145 (factor -> variable .)
    COMMA           reduce using rule 145 (factor -> variable .)
    COLON           reduce using rule 145 (factor -> variable .)
    TO              reduce using rule 145 (factor -> variable .)
    DOWNTO          reduce using rule 145 (factor -> variable .)
    LBRACKET        shift and go to state 93
    DOT             shift and go to state 94


state 109

    (146) factor -> NUMBER .

    TIMES           reduce using rule 146 (factor -> NUMBER .)
    DIVIDE          reduce using rule 146 (factor -> NUMBER .)
    DIV             reduce using rule 146 (factor -> NUMBER .)
    PLUS            reduce using rule 146 (factor -> NUMBER .)
    MINUS           reduce using rule 146 (factor -> NUMBER .)
    LESS            reduce using rule 146 (factor -> NUMBER .)
    LESS_EQUAL      reduce using rule 146 (factor -> NUMBER .)
    GREAT           reduce using rule 146 (factor -> NUMBER .)
    GREAT_EQUAL     reduce using rule 146 (factor -> NUMBER .)
    EQUAL           reduce using rule 146 (factor -> NUMBER .)
    DIFFERENT       reduce using rule 146 (factor -> NUMBER .)
    THEN            reduce using rule 146 (factor -> NUMBER .)
    IN              reduce using rule 146 (factor -> NUMBER .)
    MOD             reduce using rule 146 (factor -> NUMBER .)
    AND             reduce using rule 146 (factor -> NUMBER .)
    OR              reduce using rule 146 (factor -> NUMBER .)
    DO              reduce using rule 146 (factor -> NUMBER .)
    OF              reduce using rule 146 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 146 (factor -> NUMBER .)
    END             reduce using rule 146 (factor -> NUMBER .)
    RPAREN          reduce using rule 146 (factor -> NUMBER .)
    VAR             reduce using rule 146 (factor -> NUMBER .)
    ID              reduce using rule 146 (factor -> NUMBER .)
    CASE            reduce using rule 146 (factor -> NUMBER .)
    CONSTRUCTOR     reduce using rule 146 (factor -> NUMBER .)
    PROCEDURE       reduce using rule 146 (factor -> NUMBER .)
    FUNCTION        reduce using rule 146 (factor -> NUMBER .)
    DESTRUCTOR      reduce using rule 146 (factor -> NUMBER .)
    ELSE            reduce using rule 146 (factor -> NUMBER .)
    RBRACKET        reduce using rule 146 (factor -> NUMBER .)
    COMMA           reduce using rule 146 (factor -> NUMBER .)
    COLON           reduce using rule 146 (factor -> NUMBER .)
    TO              reduce using rule 146 (factor -> NUMBER .)
    DOWNTO          reduce using rule 146 (factor -> NUMBER .)


state 110

    (147) factor -> STRING_LITERAL .

    TIMES           reduce using rule 147 (factor -> STRING_LITERAL .)
    DIVIDE          reduce using rule 147 (factor -> STRING_LITERAL .)
    DIV             reduce using rule 147 (factor -> STRING_LITERAL .)
    PLUS            reduce using rule 147 (factor -> STRING_LITERAL .)
    MINUS           reduce using rule 147 (factor -> STRING_LITERAL .)
    LESS            reduce using rule 147 (factor -> STRING_LITERAL .)
    LESS_EQUAL      reduce using rule 147 (factor -> STRING_LITERAL .)
    GREAT           reduce using rule 147 (factor -> STRING_LITERAL .)
    GREAT_EQUAL     reduce using rule 147 (factor -> STRING_LITERAL .)
    EQUAL           reduce using rule 147 (factor -> STRING_LITERAL .)
    DIFFERENT       reduce using rule 147 (factor -> STRING_LITERAL .)
    THEN            reduce using rule 147 (factor -> STRING_LITERAL .)
    IN              reduce using rule 147 (factor -> STRING_LITERAL .)
    MOD             reduce using rule 147 (factor -> STRING_LITERAL .)
    AND             reduce using rule 147 (factor -> STRING_LITERAL .)
    OR              reduce using rule 147 (factor -> STRING_LITERAL .)
    DO              reduce using rule 147 (factor -> STRING_LITERAL .)
    OF              reduce using rule 147 (factor -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 147 (factor -> STRING_LITERAL .)
    END             reduce using rule 147 (factor -> STRING_LITERAL .)
    RPAREN          reduce using rule 147 (factor -> STRING_LITERAL .)
    VAR             reduce using rule 147 (factor -> STRING_LITERAL .)
    ID              reduce using rule 147 (factor -> STRING_LITERAL .)
    CASE            reduce using rule 147 (factor -> STRING_LITERAL .)
    CONSTRUCTOR     reduce using rule 147 (factor -> STRING_LITERAL .)
    PROCEDURE       reduce using rule 147 (factor -> STRING_LITERAL .)
    FUNCTION        reduce using rule 147 (factor -> STRING_LITERAL .)
    DESTRUCTOR      reduce using rule 147 (factor -> STRING_LITERAL .)
    ELSE            reduce using rule 147 (factor -> STRING_LITERAL .)
    RBRACKET        reduce using rule 147 (factor -> STRING_LITERAL .)
    COMMA           reduce using rule 147 (factor -> STRING_LITERAL .)
    COLON           reduce using rule 147 (factor -> STRING_LITERAL .)
    TO              reduce using rule 147 (factor -> STRING_LITERAL .)
    DOWNTO          reduce using rule 147 (factor -> STRING_LITERAL .)


state 111

    (83) function_call -> ID . LPAREN expression_list RPAREN
    (113) variable -> ID .
    (116) variable -> ID . LBRACKET index_list RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    LPAREN          shift and go to state 205
    DOT             reduce using rule 113 (variable -> ID .)
    TIMES           reduce using rule 113 (variable -> ID .)
    DIVIDE          reduce using rule 113 (variable -> ID .)
    DIV             reduce using rule 113 (variable -> ID .)
    PLUS            reduce using rule 113 (variable -> ID .)
    MINUS           reduce using rule 113 (variable -> ID .)
    LESS            reduce using rule 113 (variable -> ID .)
    LESS_EQUAL      reduce using rule 113 (variable -> ID .)
    GREAT           reduce using rule 113 (variable -> ID .)
    GREAT_EQUAL     reduce using rule 113 (variable -> ID .)
    EQUAL           reduce using rule 113 (variable -> ID .)
    DIFFERENT       reduce using rule 113 (variable -> ID .)
    THEN            reduce using rule 113 (variable -> ID .)
    IN              reduce using rule 113 (variable -> ID .)
    MOD             reduce using rule 113 (variable -> ID .)
    AND             reduce using rule 113 (variable -> ID .)
    OR              reduce using rule 113 (variable -> ID .)
    DO              reduce using rule 113 (variable -> ID .)
    OF              reduce using rule 113 (variable -> ID .)
    SEMICOLON       reduce using rule 113 (variable -> ID .)
    END             reduce using rule 113 (variable -> ID .)
    RPAREN          reduce using rule 113 (variable -> ID .)
    VAR             reduce using rule 113 (variable -> ID .)
    ID              reduce using rule 113 (variable -> ID .)
    CASE            reduce using rule 113 (variable -> ID .)
    CONSTRUCTOR     reduce using rule 113 (variable -> ID .)
    PROCEDURE       reduce using rule 113 (variable -> ID .)
    FUNCTION        reduce using rule 113 (variable -> ID .)
    DESTRUCTOR      reduce using rule 113 (variable -> ID .)
    ELSE            reduce using rule 113 (variable -> ID .)
    RBRACKET        reduce using rule 113 (variable -> ID .)
    COMMA           reduce using rule 113 (variable -> ID .)
    COLON           reduce using rule 113 (variable -> ID .)
    TO              reduce using rule 113 (variable -> ID .)
    DOWNTO          reduce using rule 113 (variable -> ID .)
    LBRACKET        shift and go to state 100

  ! LBRACKET        [ reduce using rule 113 (variable -> ID .) ]


state 112

    (119) while_statement -> WHILE expression . DO statement
    (139) expression -> expression . PLUS expression
    (140) expression -> expression . MINUS expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (173) expression -> expression . AND expression
    (174) expression -> expression . OR expression

    DO              shift and go to state 206
    PLUS            shift and go to state 178
    MINUS           shift and go to state 179
    TIMES           shift and go to state 180
    DIVIDE          shift and go to state 181
    MOD             shift and go to state 182
    AND             shift and go to state 183
    OR              shift and go to state 184


state 113

    (108) for_statement -> FOR ID . COLON_EQUAL expression TO expression DO statement
    (109) for_statement -> FOR ID . COLON_EQUAL expression DOWNTO expression DO statement

    COLON_EQUAL     shift and go to state 207


state 114

    (70) case_statement -> CASE expression . OF case_list END SEMICOLON
    (71) case_statement -> CASE expression . OF case_list END
    (139) expression -> expression . PLUS expression
    (140) expression -> expression . MINUS expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (173) expression -> expression . AND expression
    (174) expression -> expression . OR expression

    OF              shift and go to state 208
    PLUS            shift and go to state 178
    MINUS           shift and go to state 179
    TIMES           shift and go to state 180
    DIVIDE          shift and go to state 181
    MOD             shift and go to state 182
    AND             shift and go to state 183
    OR              shift and go to state 184


state 115

    (103) with_statement -> WITH variable . DO statement
    (114) variable -> variable . LBRACKET expression RBRACKET
    (115) variable -> variable . DOT ID

    DO              shift and go to state 209
    LBRACKET        shift and go to state 93
    DOT             shift and go to state 94


state 116

    (113) variable -> ID .
    (116) variable -> ID . LBRACKET index_list RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    DO              reduce using rule 113 (variable -> ID .)
    DOT             reduce using rule 113 (variable -> ID .)
    RPAREN          reduce using rule 113 (variable -> ID .)
    RBRACKET        reduce using rule 113 (variable -> ID .)
    LBRACKET        shift and go to state 100

  ! LBRACKET        [ reduce using rule 113 (variable -> ID .) ]


state 117

    (20) id_list -> id_list COMMA ID .

    SEMICOLON       reduce using rule 20 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 20 (id_list -> id_list COMMA ID .)
    COLON           reduce using rule 20 (id_list -> id_list COMMA ID .)
    LPAREN          reduce using rule 20 (id_list -> id_list COMMA ID .)
    ID              reduce using rule 20 (id_list -> id_list COMMA ID .)
    RPAREN          reduce using rule 20 (id_list -> id_list COMMA ID .)


state 118

    (169) constant -> ID EQUAL CHARACTER_LITERAL . SEMICOLON

    SEMICOLON       shift and go to state 210


state 119

    (170) constant -> ID EQUAL NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 211


state 120

    (171) constant -> ID EQUAL STRING_LITERAL . SEMICOLON

    SEMICOLON       shift and go to state 212


state 121

    (172) constant -> ID EQUAL BOOLEAN_LITERAL . SEMICOLON

    SEMICOLON       shift and go to state 213


state 122

    (43) type_specifier -> ID .

    SEMICOLON       reduce using rule 43 (type_specifier -> ID .)
    RPAREN          reduce using rule 43 (type_specifier -> ID .)
    VAR             reduce using rule 43 (type_specifier -> ID .)
    ID              reduce using rule 43 (type_specifier -> ID .)
    CASE            reduce using rule 43 (type_specifier -> ID .)
    END             reduce using rule 43 (type_specifier -> ID .)
    CONSTRUCTOR     reduce using rule 43 (type_specifier -> ID .)
    PROCEDURE       reduce using rule 43 (type_specifier -> ID .)
    FUNCTION        reduce using rule 43 (type_specifier -> ID .)
    DESTRUCTOR      reduce using rule 43 (type_specifier -> ID .)
    OF              reduce using rule 43 (type_specifier -> ID .)


state 123

    (29) type_definition -> ID EQUAL type_specifier . SEMICOLON

    SEMICOLON       shift and go to state 214


state 124

    (30) type_specifier -> ARRAY . LBRACKET type_expression RBRACKET OF type_specifier

    LBRACKET        shift and go to state 215


state 125

    (31) type_specifier -> subrange .

    SEMICOLON       reduce using rule 31 (type_specifier -> subrange .)
    RPAREN          reduce using rule 31 (type_specifier -> subrange .)
    VAR             reduce using rule 31 (type_specifier -> subrange .)
    ID              reduce using rule 31 (type_specifier -> subrange .)
    CASE            reduce using rule 31 (type_specifier -> subrange .)
    END             reduce using rule 31 (type_specifier -> subrange .)
    CONSTRUCTOR     reduce using rule 31 (type_specifier -> subrange .)
    PROCEDURE       reduce using rule 31 (type_specifier -> subrange .)
    FUNCTION        reduce using rule 31 (type_specifier -> subrange .)
    DESTRUCTOR      reduce using rule 31 (type_specifier -> subrange .)
    OF              reduce using rule 31 (type_specifier -> subrange .)


state 126

    (32) type_specifier -> FILE . OF type_specifier

    OF              shift and go to state 216


state 127

    (33) type_specifier -> SET . OF type_specifier

    OF              shift and go to state 217


state 128

    (34) type_specifier -> RECORD . field_list case_part END
    (48) field_list -> . field_list field
    (49) field_list -> . field
    (50) field_list -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . id_list assignment_statement
    (154) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    VAR             shift and go to state 150
    CASE            reduce using rule 154 (empty -> .)
    END             reduce using rule 154 (empty -> .)
    ID              shift and go to state 33

  ! VAR             [ reduce using rule 154 (empty -> .) ]
  ! ID              [ reduce using rule 154 (empty -> .) ]

    field_list                     shift and go to state 218
    field                          shift and go to state 147
    empty                          shift and go to state 148
    id_list                        shift and go to state 149

state 129

    (35) type_specifier -> OBJECT . field_list method_list END
    (48) field_list -> . field_list field
    (49) field_list -> . field
    (50) field_list -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . id_list assignment_statement
    (154) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    VAR             shift and go to state 150
    CONSTRUCTOR     reduce using rule 154 (empty -> .)
    PROCEDURE       reduce using rule 154 (empty -> .)
    FUNCTION        reduce using rule 154 (empty -> .)
    DESTRUCTOR      reduce using rule 154 (empty -> .)
    END             reduce using rule 154 (empty -> .)
    ID              shift and go to state 33

  ! VAR             [ reduce using rule 154 (empty -> .) ]
  ! ID              [ reduce using rule 154 (empty -> .) ]

    field_list                     shift and go to state 219
    field                          shift and go to state 147
    empty                          shift and go to state 148
    id_list                        shift and go to state 149

state 130

    (36) type_specifier -> LPAREN . id_list RPAREN
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

    ID              shift and go to state 33

    id_list                        shift and go to state 220

state 131

    (37) type_specifier -> BOOLEAN_LITERAL .

    SEMICOLON       reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    RPAREN          reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    VAR             reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    ID              reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    CASE            reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    END             reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    CONSTRUCTOR     reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    PROCEDURE       reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    FUNCTION        reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    DESTRUCTOR      reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    OF              reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)


state 132

    (38) type_specifier -> INTEGER .

    SEMICOLON       reduce using rule 38 (type_specifier -> INTEGER .)
    RPAREN          reduce using rule 38 (type_specifier -> INTEGER .)
    VAR             reduce using rule 38 (type_specifier -> INTEGER .)
    ID              reduce using rule 38 (type_specifier -> INTEGER .)
    CASE            reduce using rule 38 (type_specifier -> INTEGER .)
    END             reduce using rule 38 (type_specifier -> INTEGER .)
    CONSTRUCTOR     reduce using rule 38 (type_specifier -> INTEGER .)
    PROCEDURE       reduce using rule 38 (type_specifier -> INTEGER .)
    FUNCTION        reduce using rule 38 (type_specifier -> INTEGER .)
    DESTRUCTOR      reduce using rule 38 (type_specifier -> INTEGER .)
    OF              reduce using rule 38 (type_specifier -> INTEGER .)


state 133

    (39) type_specifier -> BYTE .

    SEMICOLON       reduce using rule 39 (type_specifier -> BYTE .)
    RPAREN          reduce using rule 39 (type_specifier -> BYTE .)
    VAR             reduce using rule 39 (type_specifier -> BYTE .)
    ID              reduce using rule 39 (type_specifier -> BYTE .)
    CASE            reduce using rule 39 (type_specifier -> BYTE .)
    END             reduce using rule 39 (type_specifier -> BYTE .)
    CONSTRUCTOR     reduce using rule 39 (type_specifier -> BYTE .)
    PROCEDURE       reduce using rule 39 (type_specifier -> BYTE .)
    FUNCTION        reduce using rule 39 (type_specifier -> BYTE .)
    DESTRUCTOR      reduce using rule 39 (type_specifier -> BYTE .)
    OF              reduce using rule 39 (type_specifier -> BYTE .)


state 134

    (40) type_specifier -> CHAR .

    SEMICOLON       reduce using rule 40 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 40 (type_specifier -> CHAR .)
    VAR             reduce using rule 40 (type_specifier -> CHAR .)
    ID              reduce using rule 40 (type_specifier -> CHAR .)
    CASE            reduce using rule 40 (type_specifier -> CHAR .)
    END             reduce using rule 40 (type_specifier -> CHAR .)
    CONSTRUCTOR     reduce using rule 40 (type_specifier -> CHAR .)
    PROCEDURE       reduce using rule 40 (type_specifier -> CHAR .)
    FUNCTION        reduce using rule 40 (type_specifier -> CHAR .)
    DESTRUCTOR      reduce using rule 40 (type_specifier -> CHAR .)
    OF              reduce using rule 40 (type_specifier -> CHAR .)


state 135

    (41) type_specifier -> STRING .
    (42) type_specifier -> STRING . LBRACKET NUMBER RBRACKET

    SEMICOLON       reduce using rule 41 (type_specifier -> STRING .)
    RPAREN          reduce using rule 41 (type_specifier -> STRING .)
    VAR             reduce using rule 41 (type_specifier -> STRING .)
    ID              reduce using rule 41 (type_specifier -> STRING .)
    CASE            reduce using rule 41 (type_specifier -> STRING .)
    END             reduce using rule 41 (type_specifier -> STRING .)
    CONSTRUCTOR     reduce using rule 41 (type_specifier -> STRING .)
    PROCEDURE       reduce using rule 41 (type_specifier -> STRING .)
    FUNCTION        reduce using rule 41 (type_specifier -> STRING .)
    DESTRUCTOR      reduce using rule 41 (type_specifier -> STRING .)
    OF              reduce using rule 41 (type_specifier -> STRING .)
    LBRACKET        shift and go to state 221


state 136

    (46) subrange -> NUMBER . DOTDOT NUMBER
    (47) subrange -> NUMBER . DOTDOT ID

    DOTDOT          shift and go to state 222


state 137

    (72) type_specifier -> LONGINT .

    SEMICOLON       reduce using rule 72 (type_specifier -> LONGINT .)
    RPAREN          reduce using rule 72 (type_specifier -> LONGINT .)
    VAR             reduce using rule 72 (type_specifier -> LONGINT .)
    ID              reduce using rule 72 (type_specifier -> LONGINT .)
    CASE            reduce using rule 72 (type_specifier -> LONGINT .)
    END             reduce using rule 72 (type_specifier -> LONGINT .)
    CONSTRUCTOR     reduce using rule 72 (type_specifier -> LONGINT .)
    PROCEDURE       reduce using rule 72 (type_specifier -> LONGINT .)
    FUNCTION        reduce using rule 72 (type_specifier -> LONGINT .)
    DESTRUCTOR      reduce using rule 72 (type_specifier -> LONGINT .)
    OF              reduce using rule 72 (type_specifier -> LONGINT .)


state 138

    (24) declaration -> id_list COLON type_specifier . SEMICOLON

    SEMICOLON       shift and go to state 223


state 139

    (81) function_declaration -> FUNCTION ID LPAREN parameter_list . RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (82) function_declaration -> FUNCTION ID LPAREN parameter_list . RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (86) parameter_list -> parameter_list . SEMICOLON parameter

    RPAREN          shift and go to state 224
    SEMICOLON       shift and go to state 225


state 140

    (85) parameter_list -> parameter .

    RPAREN          reduce using rule 85 (parameter_list -> parameter .)
    SEMICOLON       reduce using rule 85 (parameter_list -> parameter .)


state 141

    (87) parameter_list -> empty .

    RPAREN          reduce using rule 87 (parameter_list -> empty .)
    SEMICOLON       reduce using rule 87 (parameter_list -> empty .)


state 142

    (88) parameter -> id_list . COLON type_specifier
    (20) id_list -> id_list . COMMA ID

    COLON           shift and go to state 226
    COMMA           shift and go to state 71


state 143

    (89) parameter -> VAR . id_list COLON type_specifier
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

    ID              shift and go to state 33

    id_list                        shift and go to state 227

state 144

    (14) method_declaration -> FUNCTION ID DOT ID . LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block

    LPAREN          shift and go to state 228


state 145

    (16) constructor_declaration -> CONSTRUCTOR ID LPAREN field_list . RPAREN SEMICOLON block
    (48) field_list -> field_list . field
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . id_list assignment_statement
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 229
    VAR             shift and go to state 150
    ID              shift and go to state 33

    field                          shift and go to state 230
    id_list                        shift and go to state 149

state 146

    (17) constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN . SEMICOLON block

    SEMICOLON       shift and go to state 231


state 147

    (49) field_list -> field .

    RPAREN          reduce using rule 49 (field_list -> field .)
    VAR             reduce using rule 49 (field_list -> field .)
    ID              reduce using rule 49 (field_list -> field .)
    CASE            reduce using rule 49 (field_list -> field .)
    END             reduce using rule 49 (field_list -> field .)
    CONSTRUCTOR     reduce using rule 49 (field_list -> field .)
    PROCEDURE       reduce using rule 49 (field_list -> field .)
    FUNCTION        reduce using rule 49 (field_list -> field .)
    DESTRUCTOR      reduce using rule 49 (field_list -> field .)
    SEMICOLON       reduce using rule 49 (field_list -> field .)


state 148

    (50) field_list -> empty .

    RPAREN          reduce using rule 50 (field_list -> empty .)
    VAR             reduce using rule 50 (field_list -> empty .)
    ID              reduce using rule 50 (field_list -> empty .)
    CASE            reduce using rule 50 (field_list -> empty .)
    END             reduce using rule 50 (field_list -> empty .)
    CONSTRUCTOR     reduce using rule 50 (field_list -> empty .)
    PROCEDURE       reduce using rule 50 (field_list -> empty .)
    FUNCTION        reduce using rule 50 (field_list -> empty .)
    DESTRUCTOR      reduce using rule 50 (field_list -> empty .)
    SEMICOLON       reduce using rule 50 (field_list -> empty .)


state 149

    (51) field -> id_list . COLON type_specifier
    (52) field -> id_list . COLON type_specifier SEMICOLON
    (55) field -> id_list . LPAREN STRING_LITERAL RPAREN
    (56) field -> id_list . assignment_statement
    (20) id_list -> id_list . COMMA ID
    (110) assignment_statement -> . variable COLON_EQUAL expression
    (111) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL
    (112) assignment_statement -> . ID COLON_EQUAL expression
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    COLON           shift and go to state 232
    LPAREN          shift and go to state 233
    COMMA           shift and go to state 71
    ID              shift and go to state 235

    assignment_statement           shift and go to state 234
    variable                       shift and go to state 59

state 150

    (53) field -> VAR . id_list COLON type_specifier
    (54) field -> VAR . id_list COLON type_specifier SEMICOLON
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

    ID              shift and go to state 33

    id_list                        shift and go to state 236

state 151

    (12) method_declaration -> CONSTRUCTOR ID DOT ID . LPAREN parameter_list RPAREN SEMICOLON block

    LPAREN          shift and go to state 237


state 152

    (13) method_declaration -> PROCEDURE ID DOT ID . LPAREN parameter_list RPAREN SEMICOLON block

    LPAREN          shift and go to state 238


state 153

    (75) procedure_declaration -> PROCEDURE ID LPAREN field_list . RPAREN SEMICOLON block SEMICOLON
    (78) procedure_declaration -> PROCEDURE ID LPAREN field_list . RPAREN SEMICOLON FORWARD SEMICOLON
    (48) field_list -> field_list . field
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . id_list assignment_statement
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 239
    VAR             shift and go to state 150
    ID              shift and go to state 33

    field                          shift and go to state 230
    id_list                        shift and go to state 149

state 154

    (76) procedure_declaration -> PROCEDURE ID LPAREN RPAREN . SEMICOLON block SEMICOLON
    (79) procedure_declaration -> PROCEDURE ID LPAREN RPAREN . SEMICOLON FORWARD SEMICOLON

    SEMICOLON       shift and go to state 240


state 155

    (77) procedure_declaration -> PROCEDURE ID SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 241


state 156

    (80) procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD . SEMICOLON

    SEMICOLON       shift and go to state 242


state 157

    (15) method_declaration -> DESTRUCTOR ID DOT ID . SEMICOLON block

    SEMICOLON       shift and go to state 243


state 158

    (92) statement_list_tail -> SEMICOLON statement . statement_list_tail
    (92) statement_list_tail -> . SEMICOLON statement statement_list_tail
    (93) statement_list_tail -> . empty
    (154) empty -> .

    SEMICOLON       shift and go to state 88
    END             reduce using rule 154 (empty -> .)

    statement_list_tail            shift and go to state 244
    empty                          shift and go to state 89

state 159

    (156) statement -> READLN LPAREN variable . RPAREN
    (114) variable -> variable . LBRACKET expression RBRACKET
    (115) variable -> variable . DOT ID

    RPAREN          shift and go to state 245
    LBRACKET        shift and go to state 93
    DOT             shift and go to state 94


state 160

    (157) statement -> READLN LBRACKET variable . RBRACKET
    (114) variable -> variable . LBRACKET expression RBRACKET
    (115) variable -> variable . DOT ID

    RBRACKET        shift and go to state 246
    LBRACKET        shift and go to state 93
    DOT             shift and go to state 94


state 161

    (110) assignment_statement -> variable COLON_EQUAL expression .
    (139) expression -> expression . PLUS expression
    (140) expression -> expression . MINUS expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (173) expression -> expression . AND expression
    (174) expression -> expression . OR expression

    SEMICOLON       reduce using rule 110 (assignment_statement -> variable COLON_EQUAL expression .)
    END             reduce using rule 110 (assignment_statement -> variable COLON_EQUAL expression .)
    RPAREN          reduce using rule 110 (assignment_statement -> variable COLON_EQUAL expression .)
    VAR             reduce using rule 110 (assignment_statement -> variable COLON_EQUAL expression .)
    ID              reduce using rule 110 (assignment_statement -> variable COLON_EQUAL expression .)
    CASE            reduce using rule 110 (assignment_statement -> variable COLON_EQUAL expression .)
    CONSTRUCTOR     reduce using rule 110 (assignment_statement -> variable COLON_EQUAL expression .)
    PROCEDURE       reduce using rule 110 (assignment_statement -> variable COLON_EQUAL expression .)
    FUNCTION        reduce using rule 110 (assignment_statement -> variable COLON_EQUAL expression .)
    DESTRUCTOR      reduce using rule 110 (assignment_statement -> variable COLON_EQUAL expression .)
    ELSE            reduce using rule 110 (assignment_statement -> variable COLON_EQUAL expression .)
    THEN            reduce using rule 110 (assignment_statement -> variable COLON_EQUAL expression .)
    PLUS            shift and go to state 178
    MINUS           shift and go to state 179
    TIMES           shift and go to state 180
    DIVIDE          shift and go to state 181
    MOD             shift and go to state 182
    AND             shift and go to state 183
    OR              shift and go to state 184


state 162

    (111) assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL .

    SEMICOLON       reduce using rule 111 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL .)
    END             reduce using rule 111 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL .)
    RPAREN          reduce using rule 111 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL .)
    VAR             reduce using rule 111 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL .)
    ID              reduce using rule 111 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL .)
    CASE            reduce using rule 111 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL .)
    CONSTRUCTOR     reduce using rule 111 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL .)
    PROCEDURE       reduce using rule 111 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL .)
    FUNCTION        reduce using rule 111 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL .)
    DESTRUCTOR      reduce using rule 111 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL .)
    ELSE            reduce using rule 111 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL .)
    THEN            reduce using rule 111 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL .)


state 163

    (114) variable -> variable LBRACKET expression . RBRACKET
    (139) expression -> expression . PLUS expression
    (140) expression -> expression . MINUS expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (173) expression -> expression . AND expression
    (174) expression -> expression . OR expression

    RBRACKET        shift and go to state 247
    PLUS            shift and go to state 178
    MINUS           shift and go to state 179
    TIMES           shift and go to state 180
    DIVIDE          shift and go to state 181
    MOD             shift and go to state 182
    AND             shift and go to state 183
    OR              shift and go to state 184


state 164

    (115) variable -> variable DOT ID .

    COLON_EQUAL     reduce using rule 115 (variable -> variable DOT ID .)
    LBRACKET        reduce using rule 115 (variable -> variable DOT ID .)
    DOT             reduce using rule 115 (variable -> variable DOT ID .)
    TIMES           reduce using rule 115 (variable -> variable DOT ID .)
    DIVIDE          reduce using rule 115 (variable -> variable DOT ID .)
    DIV             reduce using rule 115 (variable -> variable DOT ID .)
    PLUS            reduce using rule 115 (variable -> variable DOT ID .)
    MINUS           reduce using rule 115 (variable -> variable DOT ID .)
    LESS            reduce using rule 115 (variable -> variable DOT ID .)
    LESS_EQUAL      reduce using rule 115 (variable -> variable DOT ID .)
    GREAT           reduce using rule 115 (variable -> variable DOT ID .)
    GREAT_EQUAL     reduce using rule 115 (variable -> variable DOT ID .)
    EQUAL           reduce using rule 115 (variable -> variable DOT ID .)
    DIFFERENT       reduce using rule 115 (variable -> variable DOT ID .)
    THEN            reduce using rule 115 (variable -> variable DOT ID .)
    IN              reduce using rule 115 (variable -> variable DOT ID .)
    MOD             reduce using rule 115 (variable -> variable DOT ID .)
    AND             reduce using rule 115 (variable -> variable DOT ID .)
    OR              reduce using rule 115 (variable -> variable DOT ID .)
    DO              reduce using rule 115 (variable -> variable DOT ID .)
    OF              reduce using rule 115 (variable -> variable DOT ID .)
    RPAREN          reduce using rule 115 (variable -> variable DOT ID .)
    RBRACKET        reduce using rule 115 (variable -> variable DOT ID .)
    SEMICOLON       reduce using rule 115 (variable -> variable DOT ID .)
    END             reduce using rule 115 (variable -> variable DOT ID .)
    VAR             reduce using rule 115 (variable -> variable DOT ID .)
    ID              reduce using rule 115 (variable -> variable DOT ID .)
    CASE            reduce using rule 115 (variable -> variable DOT ID .)
    CONSTRUCTOR     reduce using rule 115 (variable -> variable DOT ID .)
    PROCEDURE       reduce using rule 115 (variable -> variable DOT ID .)
    FUNCTION        reduce using rule 115 (variable -> variable DOT ID .)
    DESTRUCTOR      reduce using rule 115 (variable -> variable DOT ID .)
    ELSE            reduce using rule 115 (variable -> variable DOT ID .)
    COMMA           reduce using rule 115 (variable -> variable DOT ID .)
    COLON           reduce using rule 115 (variable -> variable DOT ID .)
    TO              reduce using rule 115 (variable -> variable DOT ID .)
    DOWNTO          reduce using rule 115 (variable -> variable DOT ID .)


state 165

    (158) statement -> WRITE LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 248


state 166

    (122) expression_list -> expression . expression_list_tail
    (139) expression -> expression . PLUS expression
    (140) expression -> expression . MINUS expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (173) expression -> expression . AND expression
    (174) expression -> expression . OR expression
    (123) expression_list_tail -> . COMMA expression expression_list_tail
    (124) expression_list_tail -> . empty
    (154) empty -> .

    PLUS            shift and go to state 178
    MINUS           shift and go to state 179
    TIMES           shift and go to state 180
    DIVIDE          shift and go to state 181
    MOD             shift and go to state 182
    AND             shift and go to state 183
    OR              shift and go to state 184
    COMMA           shift and go to state 250
    RPAREN          reduce using rule 154 (empty -> .)

    expression_list_tail           shift and go to state 249
    empty                          shift and go to state 251

state 167

    (125) expression_list -> empty .

    RPAREN          reduce using rule 125 (expression_list -> empty .)


state 168

    (159) statement -> WRITELN LPAREN write_arguments . RPAREN
    (161) write_arguments -> write_arguments . COMMA write_argument

    RPAREN          shift and go to state 252
    COMMA           shift and go to state 253


state 169

    (160) write_arguments -> write_argument .

    RPAREN          reduce using rule 160 (write_arguments -> write_argument .)
    COMMA           reduce using rule 160 (write_arguments -> write_argument .)


state 170

    (162) write_argument -> expression .
    (163) write_argument -> expression . COLON expression
    (164) write_argument -> expression . COLON expression COLON expression
    (139) expression -> expression . PLUS expression
    (140) expression -> expression . MINUS expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (173) expression -> expression . AND expression
    (174) expression -> expression . OR expression

    RPAREN          reduce using rule 162 (write_argument -> expression .)
    COMMA           reduce using rule 162 (write_argument -> expression .)
    COLON           shift and go to state 254
    PLUS            shift and go to state 178
    MINUS           shift and go to state 179
    TIMES           shift and go to state 180
    DIVIDE          shift and go to state 181
    MOD             shift and go to state 182
    AND             shift and go to state 183
    OR              shift and go to state 184


state 171

    (165) statement -> USES ID SEMICOLON .

    SEMICOLON       reduce using rule 165 (statement -> USES ID SEMICOLON .)
    END             reduce using rule 165 (statement -> USES ID SEMICOLON .)
    ELSE            reduce using rule 165 (statement -> USES ID SEMICOLON .)
    THEN            reduce using rule 165 (statement -> USES ID SEMICOLON .)


state 172

    (112) assignment_statement -> ID COLON_EQUAL expression .
    (139) expression -> expression . PLUS expression
    (140) expression -> expression . MINUS expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (173) expression -> expression . AND expression
    (174) expression -> expression . OR expression

    SEMICOLON       reduce using rule 112 (assignment_statement -> ID COLON_EQUAL expression .)
    END             reduce using rule 112 (assignment_statement -> ID COLON_EQUAL expression .)
    RPAREN          reduce using rule 112 (assignment_statement -> ID COLON_EQUAL expression .)
    VAR             reduce using rule 112 (assignment_statement -> ID COLON_EQUAL expression .)
    ID              reduce using rule 112 (assignment_statement -> ID COLON_EQUAL expression .)
    CASE            reduce using rule 112 (assignment_statement -> ID COLON_EQUAL expression .)
    CONSTRUCTOR     reduce using rule 112 (assignment_statement -> ID COLON_EQUAL expression .)
    PROCEDURE       reduce using rule 112 (assignment_statement -> ID COLON_EQUAL expression .)
    FUNCTION        reduce using rule 112 (assignment_statement -> ID COLON_EQUAL expression .)
    DESTRUCTOR      reduce using rule 112 (assignment_statement -> ID COLON_EQUAL expression .)
    ELSE            reduce using rule 112 (assignment_statement -> ID COLON_EQUAL expression .)
    THEN            reduce using rule 112 (assignment_statement -> ID COLON_EQUAL expression .)
    PLUS            shift and go to state 178
    MINUS           shift and go to state 179
    TIMES           shift and go to state 180
    DIVIDE          shift and go to state 181
    MOD             shift and go to state 182
    AND             shift and go to state 183
    OR              shift and go to state 184


state 173

    (120) procedure_call -> ID LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 255


state 174

    (116) variable -> ID LBRACKET index_list . RBRACKET
    (118) index_list -> index_list . COMMA expression

    RBRACKET        shift and go to state 256
    COMMA           shift and go to state 257


state 175

    (117) index_list -> expression .
    (139) expression -> expression . PLUS expression
    (140) expression -> expression . MINUS expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (173) expression -> expression . AND expression
    (174) expression -> expression . OR expression

    RBRACKET        reduce using rule 117 (index_list -> expression .)
    COMMA           reduce using rule 117 (index_list -> expression .)
    PLUS            shift and go to state 178
    MINUS           shift and go to state 179
    TIMES           shift and go to state 180
    DIVIDE          shift and go to state 181
    MOD             shift and go to state 182
    AND             shift and go to state 183
    OR              shift and go to state 184


state 176

    (104) if_statement -> IF expression THEN . statement ELSE statement
    (105) if_statement -> IF expression THEN . statement
    (94) statement -> . if_statement
    (95) statement -> . assignment_statement
    (96) statement -> . while_statement
    (97) statement -> . procedure_call
    (98) statement -> . compound_statement
    (99) statement -> . for_statement
    (100) statement -> . case_statement
    (101) statement -> . with_statement
    (102) statement -> . empty
    (155) statement -> . READLN
    (156) statement -> . READLN LPAREN variable RPAREN
    (157) statement -> . READLN LBRACKET variable RBRACKET
    (158) statement -> . WRITE LPAREN expression_list RPAREN
    (159) statement -> . WRITELN LPAREN write_arguments RPAREN
    (165) statement -> . USES ID SEMICOLON
    (104) if_statement -> . IF expression THEN statement ELSE statement
    (105) if_statement -> . IF expression THEN statement
    (106) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (107) if_statement -> . IF expression IN statement THEN statement
    (110) assignment_statement -> . variable COLON_EQUAL expression
    (111) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL
    (112) assignment_statement -> . ID COLON_EQUAL expression
    (119) while_statement -> . WHILE expression DO statement
    (120) procedure_call -> . ID LPAREN expression_list RPAREN
    (121) procedure_call -> . ID
    (90) compound_statement -> . BEGIN statement_list END
    (108) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (109) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (70) case_statement -> . CASE expression OF case_list END SEMICOLON
    (71) case_statement -> . CASE expression OF case_list END
    (103) with_statement -> . WITH variable DO statement
    (154) empty -> .
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    READLN          shift and go to state 58
    WRITE           shift and go to state 60
    WRITELN         shift and go to state 61
    USES            shift and go to state 62
    IF              shift and go to state 64
    ID              shift and go to state 63
    WHILE           shift and go to state 65
    BEGIN           shift and go to state 28
    FOR             shift and go to state 66
    CASE            shift and go to state 67
    WITH            shift and go to state 68
    ELSE            reduce using rule 154 (empty -> .)
    SEMICOLON       reduce using rule 154 (empty -> .)
    END             reduce using rule 154 (empty -> .)
    THEN            reduce using rule 154 (empty -> .)

    statement                      shift and go to state 258
    if_statement                   shift and go to state 49
    assignment_statement           shift and go to state 50
    while_statement                shift and go to state 51
    procedure_call                 shift and go to state 52
    compound_statement             shift and go to state 53
    for_statement                  shift and go to state 54
    case_statement                 shift and go to state 55
    with_statement                 shift and go to state 56
    empty                          shift and go to state 57
    variable                       shift and go to state 59

state 177

    (106) if_statement -> IF expression IN . statement THEN statement ELSE statement
    (107) if_statement -> IF expression IN . statement THEN statement
    (94) statement -> . if_statement
    (95) statement -> . assignment_statement
    (96) statement -> . while_statement
    (97) statement -> . procedure_call
    (98) statement -> . compound_statement
    (99) statement -> . for_statement
    (100) statement -> . case_statement
    (101) statement -> . with_statement
    (102) statement -> . empty
    (155) statement -> . READLN
    (156) statement -> . READLN LPAREN variable RPAREN
    (157) statement -> . READLN LBRACKET variable RBRACKET
    (158) statement -> . WRITE LPAREN expression_list RPAREN
    (159) statement -> . WRITELN LPAREN write_arguments RPAREN
    (165) statement -> . USES ID SEMICOLON
    (104) if_statement -> . IF expression THEN statement ELSE statement
    (105) if_statement -> . IF expression THEN statement
    (106) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (107) if_statement -> . IF expression IN statement THEN statement
    (110) assignment_statement -> . variable COLON_EQUAL expression
    (111) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL
    (112) assignment_statement -> . ID COLON_EQUAL expression
    (119) while_statement -> . WHILE expression DO statement
    (120) procedure_call -> . ID LPAREN expression_list RPAREN
    (121) procedure_call -> . ID
    (90) compound_statement -> . BEGIN statement_list END
    (108) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (109) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (70) case_statement -> . CASE expression OF case_list END SEMICOLON
    (71) case_statement -> . CASE expression OF case_list END
    (103) with_statement -> . WITH variable DO statement
    (154) empty -> .
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    READLN          shift and go to state 58
    WRITE           shift and go to state 60
    WRITELN         shift and go to state 61
    USES            shift and go to state 62
    IF              shift and go to state 64
    ID              shift and go to state 63
    WHILE           shift and go to state 65
    BEGIN           shift and go to state 28
    FOR             shift and go to state 66
    CASE            shift and go to state 67
    WITH            shift and go to state 68
    THEN            reduce using rule 154 (empty -> .)

    statement                      shift and go to state 259
    if_statement                   shift and go to state 49
    assignment_statement           shift and go to state 50
    while_statement                shift and go to state 51
    procedure_call                 shift and go to state 52
    compound_statement             shift and go to state 53
    for_statement                  shift and go to state 54
    case_statement                 shift and go to state 55
    with_statement                 shift and go to state 56
    empty                          shift and go to state 57
    variable                       shift and go to state 59

state 178

    (139) expression -> expression PLUS . expression
    (126) expression -> . simple_expression relop simple_expression
    (127) expression -> . simple_expression
    (139) expression -> . expression PLUS expression
    (140) expression -> . expression MINUS expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (173) expression -> . expression AND expression
    (174) expression -> . expression OR expression
    (175) expression -> . NOT expression
    (128) simple_expression -> . term simple_expression_tail
    (133) term -> . factor term_tail
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 103
    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    expression                     shift and go to state 260
    simple_expression              shift and go to state 102
    term                           shift and go to state 104
    factor                         shift and go to state 105
    function_call                  shift and go to state 106
    variable                       shift and go to state 108

state 179

    (140) expression -> expression MINUS . expression
    (126) expression -> . simple_expression relop simple_expression
    (127) expression -> . simple_expression
    (139) expression -> . expression PLUS expression
    (140) expression -> . expression MINUS expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (173) expression -> . expression AND expression
    (174) expression -> . expression OR expression
    (175) expression -> . NOT expression
    (128) simple_expression -> . term simple_expression_tail
    (133) term -> . factor term_tail
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 103
    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    expression                     shift and go to state 261
    simple_expression              shift and go to state 102
    term                           shift and go to state 104
    factor                         shift and go to state 105
    function_call                  shift and go to state 106
    variable                       shift and go to state 108

state 180

    (141) expression -> expression TIMES . expression
    (126) expression -> . simple_expression relop simple_expression
    (127) expression -> . simple_expression
    (139) expression -> . expression PLUS expression
    (140) expression -> . expression MINUS expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (173) expression -> . expression AND expression
    (174) expression -> . expression OR expression
    (175) expression -> . NOT expression
    (128) simple_expression -> . term simple_expression_tail
    (133) term -> . factor term_tail
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 103
    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    expression                     shift and go to state 262
    simple_expression              shift and go to state 102
    term                           shift and go to state 104
    factor                         shift and go to state 105
    function_call                  shift and go to state 106
    variable                       shift and go to state 108

state 181

    (142) expression -> expression DIVIDE . expression
    (126) expression -> . simple_expression relop simple_expression
    (127) expression -> . simple_expression
    (139) expression -> . expression PLUS expression
    (140) expression -> . expression MINUS expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (173) expression -> . expression AND expression
    (174) expression -> . expression OR expression
    (175) expression -> . NOT expression
    (128) simple_expression -> . term simple_expression_tail
    (133) term -> . factor term_tail
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 103
    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    expression                     shift and go to state 263
    simple_expression              shift and go to state 102
    term                           shift and go to state 104
    factor                         shift and go to state 105
    function_call                  shift and go to state 106
    variable                       shift and go to state 108

state 182

    (143) expression -> expression MOD . expression
    (126) expression -> . simple_expression relop simple_expression
    (127) expression -> . simple_expression
    (139) expression -> . expression PLUS expression
    (140) expression -> . expression MINUS expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (173) expression -> . expression AND expression
    (174) expression -> . expression OR expression
    (175) expression -> . NOT expression
    (128) simple_expression -> . term simple_expression_tail
    (133) term -> . factor term_tail
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 103
    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    expression                     shift and go to state 264
    simple_expression              shift and go to state 102
    term                           shift and go to state 104
    factor                         shift and go to state 105
    function_call                  shift and go to state 106
    variable                       shift and go to state 108

state 183

    (173) expression -> expression AND . expression
    (126) expression -> . simple_expression relop simple_expression
    (127) expression -> . simple_expression
    (139) expression -> . expression PLUS expression
    (140) expression -> . expression MINUS expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (173) expression -> . expression AND expression
    (174) expression -> . expression OR expression
    (175) expression -> . NOT expression
    (128) simple_expression -> . term simple_expression_tail
    (133) term -> . factor term_tail
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 103
    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    expression                     shift and go to state 265
    simple_expression              shift and go to state 102
    term                           shift and go to state 104
    factor                         shift and go to state 105
    function_call                  shift and go to state 106
    variable                       shift and go to state 108

state 184

    (174) expression -> expression OR . expression
    (126) expression -> . simple_expression relop simple_expression
    (127) expression -> . simple_expression
    (139) expression -> . expression PLUS expression
    (140) expression -> . expression MINUS expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (173) expression -> . expression AND expression
    (174) expression -> . expression OR expression
    (175) expression -> . NOT expression
    (128) simple_expression -> . term simple_expression_tail
    (133) term -> . factor term_tail
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 103
    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    expression                     shift and go to state 266
    simple_expression              shift and go to state 102
    term                           shift and go to state 104
    factor                         shift and go to state 105
    function_call                  shift and go to state 106
    variable                       shift and go to state 108

state 185

    (126) expression -> simple_expression relop . simple_expression
    (128) simple_expression -> . term simple_expression_tail
    (133) term -> . factor term_tail
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    simple_expression              shift and go to state 267
    term                           shift and go to state 104
    factor                         shift and go to state 105
    function_call                  shift and go to state 106
    variable                       shift and go to state 108

state 186

    (148) relop -> LESS .

    LPAREN          reduce using rule 148 (relop -> LESS .)
    NUMBER          reduce using rule 148 (relop -> LESS .)
    STRING_LITERAL  reduce using rule 148 (relop -> LESS .)
    ID              reduce using rule 148 (relop -> LESS .)


state 187

    (149) relop -> LESS_EQUAL .

    LPAREN          reduce using rule 149 (relop -> LESS_EQUAL .)
    NUMBER          reduce using rule 149 (relop -> LESS_EQUAL .)
    STRING_LITERAL  reduce using rule 149 (relop -> LESS_EQUAL .)
    ID              reduce using rule 149 (relop -> LESS_EQUAL .)


state 188

    (150) relop -> GREAT .

    LPAREN          reduce using rule 150 (relop -> GREAT .)
    NUMBER          reduce using rule 150 (relop -> GREAT .)
    STRING_LITERAL  reduce using rule 150 (relop -> GREAT .)
    ID              reduce using rule 150 (relop -> GREAT .)


state 189

    (151) relop -> GREAT_EQUAL .

    LPAREN          reduce using rule 151 (relop -> GREAT_EQUAL .)
    NUMBER          reduce using rule 151 (relop -> GREAT_EQUAL .)
    STRING_LITERAL  reduce using rule 151 (relop -> GREAT_EQUAL .)
    ID              reduce using rule 151 (relop -> GREAT_EQUAL .)


state 190

    (152) relop -> EQUAL .

    LPAREN          reduce using rule 152 (relop -> EQUAL .)
    NUMBER          reduce using rule 152 (relop -> EQUAL .)
    STRING_LITERAL  reduce using rule 152 (relop -> EQUAL .)
    ID              reduce using rule 152 (relop -> EQUAL .)


state 191

    (153) relop -> DIFFERENT .

    LPAREN          reduce using rule 153 (relop -> DIFFERENT .)
    NUMBER          reduce using rule 153 (relop -> DIFFERENT .)
    STRING_LITERAL  reduce using rule 153 (relop -> DIFFERENT .)
    ID              reduce using rule 153 (relop -> DIFFERENT .)


state 192

    (175) expression -> NOT expression .
    (139) expression -> expression . PLUS expression
    (140) expression -> expression . MINUS expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (173) expression -> expression . AND expression
    (174) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 175 (expression -> NOT expression .)
    IN              reduce using rule 175 (expression -> NOT expression .)
    DO              reduce using rule 175 (expression -> NOT expression .)
    OF              reduce using rule 175 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 175 (expression -> NOT expression .)
    END             reduce using rule 175 (expression -> NOT expression .)
    RPAREN          reduce using rule 175 (expression -> NOT expression .)
    VAR             reduce using rule 175 (expression -> NOT expression .)
    ID              reduce using rule 175 (expression -> NOT expression .)
    CASE            reduce using rule 175 (expression -> NOT expression .)
    CONSTRUCTOR     reduce using rule 175 (expression -> NOT expression .)
    PROCEDURE       reduce using rule 175 (expression -> NOT expression .)
    FUNCTION        reduce using rule 175 (expression -> NOT expression .)
    DESTRUCTOR      reduce using rule 175 (expression -> NOT expression .)
    ELSE            reduce using rule 175 (expression -> NOT expression .)
    RBRACKET        reduce using rule 175 (expression -> NOT expression .)
    COMMA           reduce using rule 175 (expression -> NOT expression .)
    COLON           reduce using rule 175 (expression -> NOT expression .)
    TO              reduce using rule 175 (expression -> NOT expression .)
    DOWNTO          reduce using rule 175 (expression -> NOT expression .)
    PLUS            shift and go to state 178
    MINUS           shift and go to state 179
    TIMES           shift and go to state 180
    DIVIDE          shift and go to state 181
    MOD             shift and go to state 182
    AND             shift and go to state 183
    OR              shift and go to state 184

  ! PLUS            [ reduce using rule 175 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 175 (expression -> NOT expression .) ]
  ! TIMES           [ reduce using rule 175 (expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 175 (expression -> NOT expression .) ]
  ! MOD             [ reduce using rule 175 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 175 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 175 (expression -> NOT expression .) ]


state 193

    (128) simple_expression -> term simple_expression_tail .

    LESS            reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    LESS_EQUAL      reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    GREAT           reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    GREAT_EQUAL     reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    EQUAL           reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    DIFFERENT       reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    THEN            reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    IN              reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    PLUS            reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    MINUS           reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    TIMES           reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    DIVIDE          reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    MOD             reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    AND             reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    OR              reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    DO              reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    OF              reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    SEMICOLON       reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    END             reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    RPAREN          reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    VAR             reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    ID              reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    CASE            reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    CONSTRUCTOR     reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    PROCEDURE       reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    FUNCTION        reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    DESTRUCTOR      reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    ELSE            reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    RBRACKET        reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    COMMA           reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    COLON           reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    TO              reduce using rule 128 (simple_expression -> term simple_expression_tail .)
    DOWNTO          reduce using rule 128 (simple_expression -> term simple_expression_tail .)


state 194

    (129) simple_expression_tail -> addop . term
    (133) term -> . factor term_tail
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    term                           shift and go to state 268
    factor                         shift and go to state 105
    function_call                  shift and go to state 106
    variable                       shift and go to state 108

state 195

    (130) simple_expression_tail -> empty .

    LESS            reduce using rule 130 (simple_expression_tail -> empty .)
    LESS_EQUAL      reduce using rule 130 (simple_expression_tail -> empty .)
    GREAT           reduce using rule 130 (simple_expression_tail -> empty .)
    GREAT_EQUAL     reduce using rule 130 (simple_expression_tail -> empty .)
    EQUAL           reduce using rule 130 (simple_expression_tail -> empty .)
    DIFFERENT       reduce using rule 130 (simple_expression_tail -> empty .)
    THEN            reduce using rule 130 (simple_expression_tail -> empty .)
    IN              reduce using rule 130 (simple_expression_tail -> empty .)
    PLUS            reduce using rule 130 (simple_expression_tail -> empty .)
    MINUS           reduce using rule 130 (simple_expression_tail -> empty .)
    TIMES           reduce using rule 130 (simple_expression_tail -> empty .)
    DIVIDE          reduce using rule 130 (simple_expression_tail -> empty .)
    MOD             reduce using rule 130 (simple_expression_tail -> empty .)
    AND             reduce using rule 130 (simple_expression_tail -> empty .)
    OR              reduce using rule 130 (simple_expression_tail -> empty .)
    DO              reduce using rule 130 (simple_expression_tail -> empty .)
    OF              reduce using rule 130 (simple_expression_tail -> empty .)
    SEMICOLON       reduce using rule 130 (simple_expression_tail -> empty .)
    END             reduce using rule 130 (simple_expression_tail -> empty .)
    RPAREN          reduce using rule 130 (simple_expression_tail -> empty .)
    VAR             reduce using rule 130 (simple_expression_tail -> empty .)
    ID              reduce using rule 130 (simple_expression_tail -> empty .)
    CASE            reduce using rule 130 (simple_expression_tail -> empty .)
    CONSTRUCTOR     reduce using rule 130 (simple_expression_tail -> empty .)
    PROCEDURE       reduce using rule 130 (simple_expression_tail -> empty .)
    FUNCTION        reduce using rule 130 (simple_expression_tail -> empty .)
    DESTRUCTOR      reduce using rule 130 (simple_expression_tail -> empty .)
    ELSE            reduce using rule 130 (simple_expression_tail -> empty .)
    RBRACKET        reduce using rule 130 (simple_expression_tail -> empty .)
    COMMA           reduce using rule 130 (simple_expression_tail -> empty .)
    COLON           reduce using rule 130 (simple_expression_tail -> empty .)
    TO              reduce using rule 130 (simple_expression_tail -> empty .)
    DOWNTO          reduce using rule 130 (simple_expression_tail -> empty .)


state 196

    (131) addop -> PLUS .

    LPAREN          reduce using rule 131 (addop -> PLUS .)
    NUMBER          reduce using rule 131 (addop -> PLUS .)
    STRING_LITERAL  reduce using rule 131 (addop -> PLUS .)
    ID              reduce using rule 131 (addop -> PLUS .)


state 197

    (132) addop -> MINUS .

    LPAREN          reduce using rule 132 (addop -> MINUS .)
    NUMBER          reduce using rule 132 (addop -> MINUS .)
    STRING_LITERAL  reduce using rule 132 (addop -> MINUS .)
    ID              reduce using rule 132 (addop -> MINUS .)


state 198

    (133) term -> factor term_tail .

    PLUS            reduce using rule 133 (term -> factor term_tail .)
    MINUS           reduce using rule 133 (term -> factor term_tail .)
    LESS            reduce using rule 133 (term -> factor term_tail .)
    LESS_EQUAL      reduce using rule 133 (term -> factor term_tail .)
    GREAT           reduce using rule 133 (term -> factor term_tail .)
    GREAT_EQUAL     reduce using rule 133 (term -> factor term_tail .)
    EQUAL           reduce using rule 133 (term -> factor term_tail .)
    DIFFERENT       reduce using rule 133 (term -> factor term_tail .)
    THEN            reduce using rule 133 (term -> factor term_tail .)
    IN              reduce using rule 133 (term -> factor term_tail .)
    TIMES           reduce using rule 133 (term -> factor term_tail .)
    DIVIDE          reduce using rule 133 (term -> factor term_tail .)
    MOD             reduce using rule 133 (term -> factor term_tail .)
    AND             reduce using rule 133 (term -> factor term_tail .)
    OR              reduce using rule 133 (term -> factor term_tail .)
    DO              reduce using rule 133 (term -> factor term_tail .)
    OF              reduce using rule 133 (term -> factor term_tail .)
    SEMICOLON       reduce using rule 133 (term -> factor term_tail .)
    END             reduce using rule 133 (term -> factor term_tail .)
    RPAREN          reduce using rule 133 (term -> factor term_tail .)
    VAR             reduce using rule 133 (term -> factor term_tail .)
    ID              reduce using rule 133 (term -> factor term_tail .)
    CASE            reduce using rule 133 (term -> factor term_tail .)
    CONSTRUCTOR     reduce using rule 133 (term -> factor term_tail .)
    PROCEDURE       reduce using rule 133 (term -> factor term_tail .)
    FUNCTION        reduce using rule 133 (term -> factor term_tail .)
    DESTRUCTOR      reduce using rule 133 (term -> factor term_tail .)
    ELSE            reduce using rule 133 (term -> factor term_tail .)
    RBRACKET        reduce using rule 133 (term -> factor term_tail .)
    COMMA           reduce using rule 133 (term -> factor term_tail .)
    COLON           reduce using rule 133 (term -> factor term_tail .)
    TO              reduce using rule 133 (term -> factor term_tail .)
    DOWNTO          reduce using rule 133 (term -> factor term_tail .)


state 199

    (134) term_tail -> mulop . factor
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    factor                         shift and go to state 269
    function_call                  shift and go to state 106
    variable                       shift and go to state 108

state 200

    (135) term_tail -> empty .

    PLUS            reduce using rule 135 (term_tail -> empty .)
    MINUS           reduce using rule 135 (term_tail -> empty .)
    LESS            reduce using rule 135 (term_tail -> empty .)
    LESS_EQUAL      reduce using rule 135 (term_tail -> empty .)
    GREAT           reduce using rule 135 (term_tail -> empty .)
    GREAT_EQUAL     reduce using rule 135 (term_tail -> empty .)
    EQUAL           reduce using rule 135 (term_tail -> empty .)
    DIFFERENT       reduce using rule 135 (term_tail -> empty .)
    THEN            reduce using rule 135 (term_tail -> empty .)
    IN              reduce using rule 135 (term_tail -> empty .)
    TIMES           reduce using rule 135 (term_tail -> empty .)
    DIVIDE          reduce using rule 135 (term_tail -> empty .)
    MOD             reduce using rule 135 (term_tail -> empty .)
    AND             reduce using rule 135 (term_tail -> empty .)
    OR              reduce using rule 135 (term_tail -> empty .)
    DO              reduce using rule 135 (term_tail -> empty .)
    OF              reduce using rule 135 (term_tail -> empty .)
    SEMICOLON       reduce using rule 135 (term_tail -> empty .)
    END             reduce using rule 135 (term_tail -> empty .)
    RPAREN          reduce using rule 135 (term_tail -> empty .)
    VAR             reduce using rule 135 (term_tail -> empty .)
    ID              reduce using rule 135 (term_tail -> empty .)
    CASE            reduce using rule 135 (term_tail -> empty .)
    CONSTRUCTOR     reduce using rule 135 (term_tail -> empty .)
    PROCEDURE       reduce using rule 135 (term_tail -> empty .)
    FUNCTION        reduce using rule 135 (term_tail -> empty .)
    DESTRUCTOR      reduce using rule 135 (term_tail -> empty .)
    ELSE            reduce using rule 135 (term_tail -> empty .)
    RBRACKET        reduce using rule 135 (term_tail -> empty .)
    COMMA           reduce using rule 135 (term_tail -> empty .)
    COLON           reduce using rule 135 (term_tail -> empty .)
    TO              reduce using rule 135 (term_tail -> empty .)
    DOWNTO          reduce using rule 135 (term_tail -> empty .)


state 201

    (136) mulop -> TIMES .

    LPAREN          reduce using rule 136 (mulop -> TIMES .)
    NUMBER          reduce using rule 136 (mulop -> TIMES .)
    STRING_LITERAL  reduce using rule 136 (mulop -> TIMES .)
    ID              reduce using rule 136 (mulop -> TIMES .)


state 202

    (137) mulop -> DIVIDE .

    LPAREN          reduce using rule 137 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 137 (mulop -> DIVIDE .)
    STRING_LITERAL  reduce using rule 137 (mulop -> DIVIDE .)
    ID              reduce using rule 137 (mulop -> DIVIDE .)


state 203

    (138) mulop -> DIV .

    LPAREN          reduce using rule 138 (mulop -> DIV .)
    NUMBER          reduce using rule 138 (mulop -> DIV .)
    STRING_LITERAL  reduce using rule 138 (mulop -> DIV .)
    ID              reduce using rule 138 (mulop -> DIV .)


state 204

    (144) factor -> LPAREN expression . RPAREN
    (139) expression -> expression . PLUS expression
    (140) expression -> expression . MINUS expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (173) expression -> expression . AND expression
    (174) expression -> expression . OR expression

    RPAREN          shift and go to state 270
    PLUS            shift and go to state 178
    MINUS           shift and go to state 179
    TIMES           shift and go to state 180
    DIVIDE          shift and go to state 181
    MOD             shift and go to state 182
    AND             shift and go to state 183
    OR              shift and go to state 184


state 205

    (83) function_call -> ID LPAREN . expression_list RPAREN
    (122) expression_list -> . expression expression_list_tail
    (125) expression_list -> . empty
    (126) expression -> . simple_expression relop simple_expression
    (127) expression -> . simple_expression
    (139) expression -> . expression PLUS expression
    (140) expression -> . expression MINUS expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (173) expression -> . expression AND expression
    (174) expression -> . expression OR expression
    (175) expression -> . NOT expression
    (154) empty -> .
    (128) simple_expression -> . term simple_expression_tail
    (133) term -> . factor term_tail
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 103
    RPAREN          reduce using rule 154 (empty -> .)
    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    expression_list                shift and go to state 271
    expression                     shift and go to state 166
    empty                          shift and go to state 167
    simple_expression              shift and go to state 102
    term                           shift and go to state 104
    factor                         shift and go to state 105
    function_call                  shift and go to state 106
    variable                       shift and go to state 108

state 206

    (119) while_statement -> WHILE expression DO . statement
    (94) statement -> . if_statement
    (95) statement -> . assignment_statement
    (96) statement -> . while_statement
    (97) statement -> . procedure_call
    (98) statement -> . compound_statement
    (99) statement -> . for_statement
    (100) statement -> . case_statement
    (101) statement -> . with_statement
    (102) statement -> . empty
    (155) statement -> . READLN
    (156) statement -> . READLN LPAREN variable RPAREN
    (157) statement -> . READLN LBRACKET variable RBRACKET
    (158) statement -> . WRITE LPAREN expression_list RPAREN
    (159) statement -> . WRITELN LPAREN write_arguments RPAREN
    (165) statement -> . USES ID SEMICOLON
    (104) if_statement -> . IF expression THEN statement ELSE statement
    (105) if_statement -> . IF expression THEN statement
    (106) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (107) if_statement -> . IF expression IN statement THEN statement
    (110) assignment_statement -> . variable COLON_EQUAL expression
    (111) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL
    (112) assignment_statement -> . ID COLON_EQUAL expression
    (119) while_statement -> . WHILE expression DO statement
    (120) procedure_call -> . ID LPAREN expression_list RPAREN
    (121) procedure_call -> . ID
    (90) compound_statement -> . BEGIN statement_list END
    (108) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (109) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (70) case_statement -> . CASE expression OF case_list END SEMICOLON
    (71) case_statement -> . CASE expression OF case_list END
    (103) with_statement -> . WITH variable DO statement
    (154) empty -> .
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    READLN          shift and go to state 58
    WRITE           shift and go to state 60
    WRITELN         shift and go to state 61
    USES            shift and go to state 62
    IF              shift and go to state 64
    ID              shift and go to state 63
    WHILE           shift and go to state 65
    BEGIN           shift and go to state 28
    FOR             shift and go to state 66
    CASE            shift and go to state 67
    WITH            shift and go to state 68
    ELSE            reduce using rule 154 (empty -> .)
    SEMICOLON       reduce using rule 154 (empty -> .)
    END             reduce using rule 154 (empty -> .)
    THEN            reduce using rule 154 (empty -> .)

    statement                      shift and go to state 272
    if_statement                   shift and go to state 49
    assignment_statement           shift and go to state 50
    while_statement                shift and go to state 51
    procedure_call                 shift and go to state 52
    compound_statement             shift and go to state 53
    for_statement                  shift and go to state 54
    case_statement                 shift and go to state 55
    with_statement                 shift and go to state 56
    empty                          shift and go to state 57
    variable                       shift and go to state 59

state 207

    (108) for_statement -> FOR ID COLON_EQUAL . expression TO expression DO statement
    (109) for_statement -> FOR ID COLON_EQUAL . expression DOWNTO expression DO statement
    (126) expression -> . simple_expression relop simple_expression
    (127) expression -> . simple_expression
    (139) expression -> . expression PLUS expression
    (140) expression -> . expression MINUS expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (173) expression -> . expression AND expression
    (174) expression -> . expression OR expression
    (175) expression -> . NOT expression
    (128) simple_expression -> . term simple_expression_tail
    (133) term -> . factor term_tail
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 103
    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    expression                     shift and go to state 273
    simple_expression              shift and go to state 102
    term                           shift and go to state 104
    factor                         shift and go to state 105
    function_call                  shift and go to state 106
    variable                       shift and go to state 108

state 208

    (70) case_statement -> CASE expression OF . case_list END SEMICOLON
    (71) case_statement -> CASE expression OF . case_list END
    (59) case_list -> . case_list SEMICOLON case_element
    (60) case_list -> . case_element
    (61) case_element -> . NUMBER COLON LPAREN field_list RPAREN
    (62) case_element -> . NUMBER COLON field_list

    NUMBER          shift and go to state 276

    case_list                      shift and go to state 274
    case_element                   shift and go to state 275

state 209

    (103) with_statement -> WITH variable DO . statement
    (94) statement -> . if_statement
    (95) statement -> . assignment_statement
    (96) statement -> . while_statement
    (97) statement -> . procedure_call
    (98) statement -> . compound_statement
    (99) statement -> . for_statement
    (100) statement -> . case_statement
    (101) statement -> . with_statement
    (102) statement -> . empty
    (155) statement -> . READLN
    (156) statement -> . READLN LPAREN variable RPAREN
    (157) statement -> . READLN LBRACKET variable RBRACKET
    (158) statement -> . WRITE LPAREN expression_list RPAREN
    (159) statement -> . WRITELN LPAREN write_arguments RPAREN
    (165) statement -> . USES ID SEMICOLON
    (104) if_statement -> . IF expression THEN statement ELSE statement
    (105) if_statement -> . IF expression THEN statement
    (106) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (107) if_statement -> . IF expression IN statement THEN statement
    (110) assignment_statement -> . variable COLON_EQUAL expression
    (111) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL
    (112) assignment_statement -> . ID COLON_EQUAL expression
    (119) while_statement -> . WHILE expression DO statement
    (120) procedure_call -> . ID LPAREN expression_list RPAREN
    (121) procedure_call -> . ID
    (90) compound_statement -> . BEGIN statement_list END
    (108) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (109) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (70) case_statement -> . CASE expression OF case_list END SEMICOLON
    (71) case_statement -> . CASE expression OF case_list END
    (103) with_statement -> . WITH variable DO statement
    (154) empty -> .
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    READLN          shift and go to state 58
    WRITE           shift and go to state 60
    WRITELN         shift and go to state 61
    USES            shift and go to state 62
    IF              shift and go to state 64
    ID              shift and go to state 63
    WHILE           shift and go to state 65
    BEGIN           shift and go to state 28
    FOR             shift and go to state 66
    CASE            shift and go to state 67
    WITH            shift and go to state 68
    ELSE            reduce using rule 154 (empty -> .)
    SEMICOLON       reduce using rule 154 (empty -> .)
    END             reduce using rule 154 (empty -> .)
    THEN            reduce using rule 154 (empty -> .)

    variable                       shift and go to state 59
    statement                      shift and go to state 277
    if_statement                   shift and go to state 49
    assignment_statement           shift and go to state 50
    while_statement                shift and go to state 51
    procedure_call                 shift and go to state 52
    compound_statement             shift and go to state 53
    for_statement                  shift and go to state 54
    case_statement                 shift and go to state 55
    with_statement                 shift and go to state 56
    empty                          shift and go to state 57

state 210

    (169) constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .

    ID              reduce using rule 169 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    USES            reduce using rule 169 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    CONST           reduce using rule 169 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    TYPE            reduce using rule 169 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    VAR             reduce using rule 169 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    FUNCTION        reduce using rule 169 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    CONSTRUCTOR     reduce using rule 169 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    PROCEDURE       reduce using rule 169 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    DESTRUCTOR      reduce using rule 169 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    BEGIN           reduce using rule 169 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)


state 211

    (170) constant -> ID EQUAL NUMBER SEMICOLON .

    ID              reduce using rule 170 (constant -> ID EQUAL NUMBER SEMICOLON .)
    USES            reduce using rule 170 (constant -> ID EQUAL NUMBER SEMICOLON .)
    CONST           reduce using rule 170 (constant -> ID EQUAL NUMBER SEMICOLON .)
    TYPE            reduce using rule 170 (constant -> ID EQUAL NUMBER SEMICOLON .)
    VAR             reduce using rule 170 (constant -> ID EQUAL NUMBER SEMICOLON .)
    FUNCTION        reduce using rule 170 (constant -> ID EQUAL NUMBER SEMICOLON .)
    CONSTRUCTOR     reduce using rule 170 (constant -> ID EQUAL NUMBER SEMICOLON .)
    PROCEDURE       reduce using rule 170 (constant -> ID EQUAL NUMBER SEMICOLON .)
    DESTRUCTOR      reduce using rule 170 (constant -> ID EQUAL NUMBER SEMICOLON .)
    BEGIN           reduce using rule 170 (constant -> ID EQUAL NUMBER SEMICOLON .)


state 212

    (171) constant -> ID EQUAL STRING_LITERAL SEMICOLON .

    ID              reduce using rule 171 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    USES            reduce using rule 171 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    CONST           reduce using rule 171 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    TYPE            reduce using rule 171 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    VAR             reduce using rule 171 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    FUNCTION        reduce using rule 171 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    CONSTRUCTOR     reduce using rule 171 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    PROCEDURE       reduce using rule 171 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    DESTRUCTOR      reduce using rule 171 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    BEGIN           reduce using rule 171 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)


state 213

    (172) constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .

    ID              reduce using rule 172 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    USES            reduce using rule 172 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    CONST           reduce using rule 172 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    TYPE            reduce using rule 172 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    VAR             reduce using rule 172 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    FUNCTION        reduce using rule 172 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    CONSTRUCTOR     reduce using rule 172 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    PROCEDURE       reduce using rule 172 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    DESTRUCTOR      reduce using rule 172 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    BEGIN           reduce using rule 172 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)


state 214

    (29) type_definition -> ID EQUAL type_specifier SEMICOLON .

    ID              reduce using rule 29 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    USES            reduce using rule 29 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    CONST           reduce using rule 29 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    TYPE            reduce using rule 29 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    VAR             reduce using rule 29 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 29 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    CONSTRUCTOR     reduce using rule 29 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 29 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    DESTRUCTOR      reduce using rule 29 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    BEGIN           reduce using rule 29 (type_definition -> ID EQUAL type_specifier SEMICOLON .)


state 215

    (30) type_specifier -> ARRAY LBRACKET . type_expression RBRACKET OF type_specifier
    (44) type_expression -> . type_expression COMMA subrange
    (45) type_expression -> . subrange
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    NUMBER          shift and go to state 136

    type_expression                shift and go to state 278
    subrange                       shift and go to state 279

state 216

    (32) type_specifier -> FILE OF . type_specifier
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (72) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 124
    FILE            shift and go to state 126
    SET             shift and go to state 127
    RECORD          shift and go to state 128
    OBJECT          shift and go to state 129
    LPAREN          shift and go to state 130
    BOOLEAN_LITERAL shift and go to state 131
    INTEGER         shift and go to state 132
    BYTE            shift and go to state 133
    CHAR            shift and go to state 134
    STRING          shift and go to state 135
    ID              shift and go to state 122
    LONGINT         shift and go to state 137
    NUMBER          shift and go to state 136

    type_specifier                 shift and go to state 280
    subrange                       shift and go to state 125

state 217

    (33) type_specifier -> SET OF . type_specifier
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (72) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 124
    FILE            shift and go to state 126
    SET             shift and go to state 127
    RECORD          shift and go to state 128
    OBJECT          shift and go to state 129
    LPAREN          shift and go to state 130
    BOOLEAN_LITERAL shift and go to state 131
    INTEGER         shift and go to state 132
    BYTE            shift and go to state 133
    CHAR            shift and go to state 134
    STRING          shift and go to state 135
    ID              shift and go to state 122
    LONGINT         shift and go to state 137
    NUMBER          shift and go to state 136

    type_specifier                 shift and go to state 281
    subrange                       shift and go to state 125

state 218

    (34) type_specifier -> RECORD field_list . case_part END
    (48) field_list -> field_list . field
    (57) case_part -> . CASE ID COLON type_specifier OF case_list SEMICOLON
    (58) case_part -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . id_list assignment_statement
    (154) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

    CASE            shift and go to state 283
    VAR             shift and go to state 150
    END             reduce using rule 154 (empty -> .)
    ID              shift and go to state 33

    case_part                      shift and go to state 282
    field                          shift and go to state 230
    empty                          shift and go to state 284
    id_list                        shift and go to state 149

state 219

    (35) type_specifier -> OBJECT field_list . method_list END
    (48) field_list -> field_list . field
    (63) method_list -> . method_list method
    (64) method_list -> . method
    (65) method_list -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . id_list assignment_statement
    (66) method -> . CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON
    (67) method -> . PROCEDURE ID LPAREN field_list RPAREN SEMICOLON
    (68) method -> . FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON
    (69) method -> . DESTRUCTOR ID SEMICOLON
    (154) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for PROCEDURE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DESTRUCTOR resolved as shift
    VAR             shift and go to state 150
    CONSTRUCTOR     shift and go to state 288
    PROCEDURE       shift and go to state 289
    FUNCTION        shift and go to state 290
    DESTRUCTOR      shift and go to state 291
    END             reduce using rule 154 (empty -> .)
    ID              shift and go to state 33

  ! CONSTRUCTOR     [ reduce using rule 154 (empty -> .) ]
  ! PROCEDURE       [ reduce using rule 154 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 154 (empty -> .) ]
  ! DESTRUCTOR      [ reduce using rule 154 (empty -> .) ]

    method_list                    shift and go to state 285
    field                          shift and go to state 230
    method                         shift and go to state 286
    empty                          shift and go to state 287
    id_list                        shift and go to state 149

state 220

    (36) type_specifier -> LPAREN id_list . RPAREN
    (20) id_list -> id_list . COMMA ID

    RPAREN          shift and go to state 292
    COMMA           shift and go to state 71


state 221

    (42) type_specifier -> STRING LBRACKET . NUMBER RBRACKET

    NUMBER          shift and go to state 293


state 222

    (46) subrange -> NUMBER DOTDOT . NUMBER
    (47) subrange -> NUMBER DOTDOT . ID

    NUMBER          shift and go to state 294
    ID              shift and go to state 295


state 223

    (24) declaration -> id_list COLON type_specifier SEMICOLON .

    ID              reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    USES            reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    CONST           reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    TYPE            reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    VAR             reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    CONSTRUCTOR     reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    DESTRUCTOR      reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    BEGIN           reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)


state 224

    (81) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN . COLON type_specifier SEMICOLON block SEMICOLON
    (82) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN . COLON type_specifier SEMICOLON FORWARD SEMICOLON

    COLON           shift and go to state 296


state 225

    (86) parameter_list -> parameter_list SEMICOLON . parameter
    (88) parameter -> . id_list COLON type_specifier
    (89) parameter -> . VAR id_list COLON type_specifier
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

    VAR             shift and go to state 143
    ID              shift and go to state 33

    parameter                      shift and go to state 297
    id_list                        shift and go to state 142

state 226

    (88) parameter -> id_list COLON . type_specifier
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (72) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 124
    FILE            shift and go to state 126
    SET             shift and go to state 127
    RECORD          shift and go to state 128
    OBJECT          shift and go to state 129
    LPAREN          shift and go to state 130
    BOOLEAN_LITERAL shift and go to state 131
    INTEGER         shift and go to state 132
    BYTE            shift and go to state 133
    CHAR            shift and go to state 134
    STRING          shift and go to state 135
    ID              shift and go to state 122
    LONGINT         shift and go to state 137
    NUMBER          shift and go to state 136

    type_specifier                 shift and go to state 298
    subrange                       shift and go to state 125

state 227

    (89) parameter -> VAR id_list . COLON type_specifier
    (20) id_list -> id_list . COMMA ID

    COLON           shift and go to state 299
    COMMA           shift and go to state 71


state 228

    (14) method_declaration -> FUNCTION ID DOT ID LPAREN . parameter_list RPAREN COLON type_specifier SEMICOLON block
    (85) parameter_list -> . parameter
    (86) parameter_list -> . parameter_list SEMICOLON parameter
    (87) parameter_list -> . empty
    (88) parameter -> . id_list COLON type_specifier
    (89) parameter -> . VAR id_list COLON type_specifier
    (154) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

    VAR             shift and go to state 143
    RPAREN          reduce using rule 154 (empty -> .)
    SEMICOLON       reduce using rule 154 (empty -> .)
    ID              shift and go to state 33

    parameter_list                 shift and go to state 300
    parameter                      shift and go to state 140
    empty                          shift and go to state 141
    id_list                        shift and go to state 142

state 229

    (16) constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN . SEMICOLON block

    SEMICOLON       shift and go to state 301


state 230

    (48) field_list -> field_list field .

    RPAREN          reduce using rule 48 (field_list -> field_list field .)
    VAR             reduce using rule 48 (field_list -> field_list field .)
    ID              reduce using rule 48 (field_list -> field_list field .)
    CASE            reduce using rule 48 (field_list -> field_list field .)
    END             reduce using rule 48 (field_list -> field_list field .)
    CONSTRUCTOR     reduce using rule 48 (field_list -> field_list field .)
    PROCEDURE       reduce using rule 48 (field_list -> field_list field .)
    FUNCTION        reduce using rule 48 (field_list -> field_list field .)
    DESTRUCTOR      reduce using rule 48 (field_list -> field_list field .)
    SEMICOLON       reduce using rule 48 (field_list -> field_list field .)


state 231

    (17) constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON . block
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (154) empty -> .

    BEGIN           reduce using rule 154 (empty -> .)
    USES            reduce using rule 154 (empty -> .)
    CONST           reduce using rule 154 (empty -> .)
    TYPE            reduce using rule 154 (empty -> .)
    VAR             reduce using rule 154 (empty -> .)
    FUNCTION        reduce using rule 154 (empty -> .)
    CONSTRUCTOR     reduce using rule 154 (empty -> .)
    PROCEDURE       reduce using rule 154 (empty -> .)
    DESTRUCTOR      reduce using rule 154 (empty -> .)

    block                          shift and go to state 302
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 232

    (51) field -> id_list COLON . type_specifier
    (52) field -> id_list COLON . type_specifier SEMICOLON
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (72) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 124
    FILE            shift and go to state 126
    SET             shift and go to state 127
    RECORD          shift and go to state 128
    OBJECT          shift and go to state 129
    LPAREN          shift and go to state 130
    BOOLEAN_LITERAL shift and go to state 131
    INTEGER         shift and go to state 132
    BYTE            shift and go to state 133
    CHAR            shift and go to state 134
    STRING          shift and go to state 135
    ID              shift and go to state 122
    LONGINT         shift and go to state 137
    NUMBER          shift and go to state 136

    type_specifier                 shift and go to state 303
    subrange                       shift and go to state 125

state 233

    (55) field -> id_list LPAREN . STRING_LITERAL RPAREN

    STRING_LITERAL  shift and go to state 304


state 234

    (56) field -> id_list assignment_statement .

    RPAREN          reduce using rule 56 (field -> id_list assignment_statement .)
    VAR             reduce using rule 56 (field -> id_list assignment_statement .)
    ID              reduce using rule 56 (field -> id_list assignment_statement .)
    CASE            reduce using rule 56 (field -> id_list assignment_statement .)
    END             reduce using rule 56 (field -> id_list assignment_statement .)
    CONSTRUCTOR     reduce using rule 56 (field -> id_list assignment_statement .)
    PROCEDURE       reduce using rule 56 (field -> id_list assignment_statement .)
    FUNCTION        reduce using rule 56 (field -> id_list assignment_statement .)
    DESTRUCTOR      reduce using rule 56 (field -> id_list assignment_statement .)
    SEMICOLON       reduce using rule 56 (field -> id_list assignment_statement .)


state 235

    (112) assignment_statement -> ID . COLON_EQUAL expression
    (113) variable -> ID .
    (116) variable -> ID . LBRACKET index_list RBRACKET

  ! shift/reduce conflict for COLON_EQUAL resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    COLON_EQUAL     shift and go to state 98
    DOT             reduce using rule 113 (variable -> ID .)
    LBRACKET        shift and go to state 100

  ! COLON_EQUAL     [ reduce using rule 113 (variable -> ID .) ]
  ! LBRACKET        [ reduce using rule 113 (variable -> ID .) ]


state 236

    (53) field -> VAR id_list . COLON type_specifier
    (54) field -> VAR id_list . COLON type_specifier SEMICOLON
    (20) id_list -> id_list . COMMA ID

    COLON           shift and go to state 305
    COMMA           shift and go to state 71


state 237

    (12) method_declaration -> CONSTRUCTOR ID DOT ID LPAREN . parameter_list RPAREN SEMICOLON block
    (85) parameter_list -> . parameter
    (86) parameter_list -> . parameter_list SEMICOLON parameter
    (87) parameter_list -> . empty
    (88) parameter -> . id_list COLON type_specifier
    (89) parameter -> . VAR id_list COLON type_specifier
    (154) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

    VAR             shift and go to state 143
    RPAREN          reduce using rule 154 (empty -> .)
    SEMICOLON       reduce using rule 154 (empty -> .)
    ID              shift and go to state 33

    parameter_list                 shift and go to state 306
    parameter                      shift and go to state 140
    empty                          shift and go to state 141
    id_list                        shift and go to state 142

state 238

    (13) method_declaration -> PROCEDURE ID DOT ID LPAREN . parameter_list RPAREN SEMICOLON block
    (85) parameter_list -> . parameter
    (86) parameter_list -> . parameter_list SEMICOLON parameter
    (87) parameter_list -> . empty
    (88) parameter -> . id_list COLON type_specifier
    (89) parameter -> . VAR id_list COLON type_specifier
    (154) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

    VAR             shift and go to state 143
    RPAREN          reduce using rule 154 (empty -> .)
    SEMICOLON       reduce using rule 154 (empty -> .)
    ID              shift and go to state 33

    parameter_list                 shift and go to state 307
    parameter                      shift and go to state 140
    empty                          shift and go to state 141
    id_list                        shift and go to state 142

state 239

    (75) procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN . SEMICOLON block SEMICOLON
    (78) procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN . SEMICOLON FORWARD SEMICOLON

    SEMICOLON       shift and go to state 308


state 240

    (76) procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON . block SEMICOLON
    (79) procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON . FORWARD SEMICOLON
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (154) empty -> .

    FORWARD         shift and go to state 310
    BEGIN           reduce using rule 154 (empty -> .)
    USES            reduce using rule 154 (empty -> .)
    CONST           reduce using rule 154 (empty -> .)
    TYPE            reduce using rule 154 (empty -> .)
    VAR             reduce using rule 154 (empty -> .)
    FUNCTION        reduce using rule 154 (empty -> .)
    CONSTRUCTOR     reduce using rule 154 (empty -> .)
    PROCEDURE       reduce using rule 154 (empty -> .)
    DESTRUCTOR      reduce using rule 154 (empty -> .)

    block                          shift and go to state 309
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 241

    (77) procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .

    PROCEDURE       reduce using rule 77 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    USES            reduce using rule 77 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    CONST           reduce using rule 77 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    TYPE            reduce using rule 77 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    VAR             reduce using rule 77 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 77 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    CONSTRUCTOR     reduce using rule 77 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    DESTRUCTOR      reduce using rule 77 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    BEGIN           reduce using rule 77 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)


state 242

    (80) procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .

    PROCEDURE       reduce using rule 80 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)
    USES            reduce using rule 80 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)
    CONST           reduce using rule 80 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)
    TYPE            reduce using rule 80 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)
    VAR             reduce using rule 80 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)
    FUNCTION        reduce using rule 80 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)
    CONSTRUCTOR     reduce using rule 80 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)
    DESTRUCTOR      reduce using rule 80 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)
    BEGIN           reduce using rule 80 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)


state 243

    (15) method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON . block
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (154) empty -> .

    BEGIN           reduce using rule 154 (empty -> .)
    USES            reduce using rule 154 (empty -> .)
    CONST           reduce using rule 154 (empty -> .)
    TYPE            reduce using rule 154 (empty -> .)
    VAR             reduce using rule 154 (empty -> .)
    FUNCTION        reduce using rule 154 (empty -> .)
    CONSTRUCTOR     reduce using rule 154 (empty -> .)
    PROCEDURE       reduce using rule 154 (empty -> .)
    DESTRUCTOR      reduce using rule 154 (empty -> .)

    block                          shift and go to state 311
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 244

    (92) statement_list_tail -> SEMICOLON statement statement_list_tail .

    END             reduce using rule 92 (statement_list_tail -> SEMICOLON statement statement_list_tail .)


state 245

    (156) statement -> READLN LPAREN variable RPAREN .

    SEMICOLON       reduce using rule 156 (statement -> READLN LPAREN variable RPAREN .)
    END             reduce using rule 156 (statement -> READLN LPAREN variable RPAREN .)
    ELSE            reduce using rule 156 (statement -> READLN LPAREN variable RPAREN .)
    THEN            reduce using rule 156 (statement -> READLN LPAREN variable RPAREN .)


state 246

    (157) statement -> READLN LBRACKET variable RBRACKET .

    SEMICOLON       reduce using rule 157 (statement -> READLN LBRACKET variable RBRACKET .)
    END             reduce using rule 157 (statement -> READLN LBRACKET variable RBRACKET .)
    ELSE            reduce using rule 157 (statement -> READLN LBRACKET variable RBRACKET .)
    THEN            reduce using rule 157 (statement -> READLN LBRACKET variable RBRACKET .)


state 247

    (114) variable -> variable LBRACKET expression RBRACKET .

    COLON_EQUAL     reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    DOT             reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    DIV             reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    LESS            reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    LESS_EQUAL      reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    GREAT           reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    GREAT_EQUAL     reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    DIFFERENT       reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    THEN            reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    IN              reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    MOD             reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    AND             reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    OR              reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    DO              reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    OF              reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    END             reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    VAR             reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    ID              reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    CASE            reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    CONSTRUCTOR     reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    PROCEDURE       reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    FUNCTION        reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    DESTRUCTOR      reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    COLON           reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    TO              reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)
    DOWNTO          reduce using rule 114 (variable -> variable LBRACKET expression RBRACKET .)


state 248

    (158) statement -> WRITE LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 158 (statement -> WRITE LPAREN expression_list RPAREN .)
    END             reduce using rule 158 (statement -> WRITE LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 158 (statement -> WRITE LPAREN expression_list RPAREN .)
    THEN            reduce using rule 158 (statement -> WRITE LPAREN expression_list RPAREN .)


state 249

    (122) expression_list -> expression expression_list_tail .

    RPAREN          reduce using rule 122 (expression_list -> expression expression_list_tail .)


state 250

    (123) expression_list_tail -> COMMA . expression expression_list_tail
    (126) expression -> . simple_expression relop simple_expression
    (127) expression -> . simple_expression
    (139) expression -> . expression PLUS expression
    (140) expression -> . expression MINUS expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (173) expression -> . expression AND expression
    (174) expression -> . expression OR expression
    (175) expression -> . NOT expression
    (128) simple_expression -> . term simple_expression_tail
    (133) term -> . factor term_tail
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 103
    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    expression                     shift and go to state 312
    simple_expression              shift and go to state 102
    term                           shift and go to state 104
    factor                         shift and go to state 105
    function_call                  shift and go to state 106
    variable                       shift and go to state 108

state 251

    (124) expression_list_tail -> empty .

    RPAREN          reduce using rule 124 (expression_list_tail -> empty .)


state 252

    (159) statement -> WRITELN LPAREN write_arguments RPAREN .

    SEMICOLON       reduce using rule 159 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    END             reduce using rule 159 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    ELSE            reduce using rule 159 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    THEN            reduce using rule 159 (statement -> WRITELN LPAREN write_arguments RPAREN .)


state 253

    (161) write_arguments -> write_arguments COMMA . write_argument
    (162) write_argument -> . expression
    (163) write_argument -> . expression COLON expression
    (164) write_argument -> . expression COLON expression COLON expression
    (126) expression -> . simple_expression relop simple_expression
    (127) expression -> . simple_expression
    (139) expression -> . expression PLUS expression
    (140) expression -> . expression MINUS expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (173) expression -> . expression AND expression
    (174) expression -> . expression OR expression
    (175) expression -> . NOT expression
    (128) simple_expression -> . term simple_expression_tail
    (133) term -> . factor term_tail
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 103
    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    write_argument                 shift and go to state 313
    expression                     shift and go to state 170
    simple_expression              shift and go to state 102
    term                           shift and go to state 104
    factor                         shift and go to state 105
    function_call                  shift and go to state 106
    variable                       shift and go to state 108

state 254

    (163) write_argument -> expression COLON . expression
    (164) write_argument -> expression COLON . expression COLON expression
    (126) expression -> . simple_expression relop simple_expression
    (127) expression -> . simple_expression
    (139) expression -> . expression PLUS expression
    (140) expression -> . expression MINUS expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (173) expression -> . expression AND expression
    (174) expression -> . expression OR expression
    (175) expression -> . NOT expression
    (128) simple_expression -> . term simple_expression_tail
    (133) term -> . factor term_tail
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 103
    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    expression                     shift and go to state 314
    simple_expression              shift and go to state 102
    term                           shift and go to state 104
    factor                         shift and go to state 105
    function_call                  shift and go to state 106
    variable                       shift and go to state 108

state 255

    (120) procedure_call -> ID LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 120 (procedure_call -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 120 (procedure_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 120 (procedure_call -> ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 120 (procedure_call -> ID LPAREN expression_list RPAREN .)


state 256

    (116) variable -> ID LBRACKET index_list RBRACKET .

    COLON_EQUAL     reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    LBRACKET        reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    DOT             reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    TIMES           reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    DIVIDE          reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    DIV             reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    PLUS            reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    MINUS           reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    LESS            reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    LESS_EQUAL      reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    GREAT           reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    GREAT_EQUAL     reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    EQUAL           reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    DIFFERENT       reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    THEN            reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    IN              reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    MOD             reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    AND             reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    OR              reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    DO              reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    OF              reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    RPAREN          reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    RBRACKET        reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    SEMICOLON       reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    END             reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    VAR             reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    ID              reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    CASE            reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    CONSTRUCTOR     reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    PROCEDURE       reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    FUNCTION        reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    DESTRUCTOR      reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    ELSE            reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    COMMA           reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    COLON           reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    TO              reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)
    DOWNTO          reduce using rule 116 (variable -> ID LBRACKET index_list RBRACKET .)


state 257

    (118) index_list -> index_list COMMA . expression
    (126) expression -> . simple_expression relop simple_expression
    (127) expression -> . simple_expression
    (139) expression -> . expression PLUS expression
    (140) expression -> . expression MINUS expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (173) expression -> . expression AND expression
    (174) expression -> . expression OR expression
    (175) expression -> . NOT expression
    (128) simple_expression -> . term simple_expression_tail
    (133) term -> . factor term_tail
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 103
    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    expression                     shift and go to state 315
    simple_expression              shift and go to state 102
    term                           shift and go to state 104
    factor                         shift and go to state 105
    function_call                  shift and go to state 106
    variable                       shift and go to state 108

state 258

    (104) if_statement -> IF expression THEN statement . ELSE statement
    (105) if_statement -> IF expression THEN statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 316
    SEMICOLON       reduce using rule 105 (if_statement -> IF expression THEN statement .)
    END             reduce using rule 105 (if_statement -> IF expression THEN statement .)
    THEN            reduce using rule 105 (if_statement -> IF expression THEN statement .)

  ! ELSE            [ reduce using rule 105 (if_statement -> IF expression THEN statement .) ]


state 259

    (106) if_statement -> IF expression IN statement . THEN statement ELSE statement
    (107) if_statement -> IF expression IN statement . THEN statement

    THEN            shift and go to state 317


state 260

    (139) expression -> expression PLUS expression .
    (139) expression -> expression . PLUS expression
    (140) expression -> expression . MINUS expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (173) expression -> expression . AND expression
    (174) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 139 (expression -> expression PLUS expression .)
    IN              reduce using rule 139 (expression -> expression PLUS expression .)
    DO              reduce using rule 139 (expression -> expression PLUS expression .)
    OF              reduce using rule 139 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 139 (expression -> expression PLUS expression .)
    END             reduce using rule 139 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 139 (expression -> expression PLUS expression .)
    VAR             reduce using rule 139 (expression -> expression PLUS expression .)
    ID              reduce using rule 139 (expression -> expression PLUS expression .)
    CASE            reduce using rule 139 (expression -> expression PLUS expression .)
    CONSTRUCTOR     reduce using rule 139 (expression -> expression PLUS expression .)
    PROCEDURE       reduce using rule 139 (expression -> expression PLUS expression .)
    FUNCTION        reduce using rule 139 (expression -> expression PLUS expression .)
    DESTRUCTOR      reduce using rule 139 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 139 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 139 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 139 (expression -> expression PLUS expression .)
    COLON           reduce using rule 139 (expression -> expression PLUS expression .)
    TO              reduce using rule 139 (expression -> expression PLUS expression .)
    DOWNTO          reduce using rule 139 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 178
    MINUS           shift and go to state 179
    TIMES           shift and go to state 180
    DIVIDE          shift and go to state 181
    MOD             shift and go to state 182
    AND             shift and go to state 183
    OR              shift and go to state 184

  ! PLUS            [ reduce using rule 139 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 139 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 139 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 139 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 139 (expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 139 (expression -> expression PLUS expression .) ]
  ! OR              [ reduce using rule 139 (expression -> expression PLUS expression .) ]


state 261

    (140) expression -> expression MINUS expression .
    (139) expression -> expression . PLUS expression
    (140) expression -> expression . MINUS expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (173) expression -> expression . AND expression
    (174) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 140 (expression -> expression MINUS expression .)
    IN              reduce using rule 140 (expression -> expression MINUS expression .)
    DO              reduce using rule 140 (expression -> expression MINUS expression .)
    OF              reduce using rule 140 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 140 (expression -> expression MINUS expression .)
    END             reduce using rule 140 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 140 (expression -> expression MINUS expression .)
    VAR             reduce using rule 140 (expression -> expression MINUS expression .)
    ID              reduce using rule 140 (expression -> expression MINUS expression .)
    CASE            reduce using rule 140 (expression -> expression MINUS expression .)
    CONSTRUCTOR     reduce using rule 140 (expression -> expression MINUS expression .)
    PROCEDURE       reduce using rule 140 (expression -> expression MINUS expression .)
    FUNCTION        reduce using rule 140 (expression -> expression MINUS expression .)
    DESTRUCTOR      reduce using rule 140 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 140 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 140 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 140 (expression -> expression MINUS expression .)
    COLON           reduce using rule 140 (expression -> expression MINUS expression .)
    TO              reduce using rule 140 (expression -> expression MINUS expression .)
    DOWNTO          reduce using rule 140 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 178
    MINUS           shift and go to state 179
    TIMES           shift and go to state 180
    DIVIDE          shift and go to state 181
    MOD             shift and go to state 182
    AND             shift and go to state 183
    OR              shift and go to state 184

  ! PLUS            [ reduce using rule 140 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 140 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 140 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 140 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 140 (expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 140 (expression -> expression MINUS expression .) ]
  ! OR              [ reduce using rule 140 (expression -> expression MINUS expression .) ]


state 262

    (141) expression -> expression TIMES expression .
    (139) expression -> expression . PLUS expression
    (140) expression -> expression . MINUS expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (173) expression -> expression . AND expression
    (174) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 141 (expression -> expression TIMES expression .)
    IN              reduce using rule 141 (expression -> expression TIMES expression .)
    DO              reduce using rule 141 (expression -> expression TIMES expression .)
    OF              reduce using rule 141 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 141 (expression -> expression TIMES expression .)
    END             reduce using rule 141 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 141 (expression -> expression TIMES expression .)
    VAR             reduce using rule 141 (expression -> expression TIMES expression .)
    ID              reduce using rule 141 (expression -> expression TIMES expression .)
    CASE            reduce using rule 141 (expression -> expression TIMES expression .)
    CONSTRUCTOR     reduce using rule 141 (expression -> expression TIMES expression .)
    PROCEDURE       reduce using rule 141 (expression -> expression TIMES expression .)
    FUNCTION        reduce using rule 141 (expression -> expression TIMES expression .)
    DESTRUCTOR      reduce using rule 141 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 141 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 141 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 141 (expression -> expression TIMES expression .)
    COLON           reduce using rule 141 (expression -> expression TIMES expression .)
    TO              reduce using rule 141 (expression -> expression TIMES expression .)
    DOWNTO          reduce using rule 141 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 178
    MINUS           shift and go to state 179
    TIMES           shift and go to state 180
    DIVIDE          shift and go to state 181
    MOD             shift and go to state 182
    AND             shift and go to state 183
    OR              shift and go to state 184

  ! PLUS            [ reduce using rule 141 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 141 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 141 (expression -> expression TIMES expression .) ]
  ! DIVIDE          [ reduce using rule 141 (expression -> expression TIMES expression .) ]
  ! MOD             [ reduce using rule 141 (expression -> expression TIMES expression .) ]
  ! AND             [ reduce using rule 141 (expression -> expression TIMES expression .) ]
  ! OR              [ reduce using rule 141 (expression -> expression TIMES expression .) ]


state 263

    (142) expression -> expression DIVIDE expression .
    (139) expression -> expression . PLUS expression
    (140) expression -> expression . MINUS expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (173) expression -> expression . AND expression
    (174) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 142 (expression -> expression DIVIDE expression .)
    IN              reduce using rule 142 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 142 (expression -> expression DIVIDE expression .)
    OF              reduce using rule 142 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 142 (expression -> expression DIVIDE expression .)
    END             reduce using rule 142 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 142 (expression -> expression DIVIDE expression .)
    VAR             reduce using rule 142 (expression -> expression DIVIDE expression .)
    ID              reduce using rule 142 (expression -> expression DIVIDE expression .)
    CASE            reduce using rule 142 (expression -> expression DIVIDE expression .)
    CONSTRUCTOR     reduce using rule 142 (expression -> expression DIVIDE expression .)
    PROCEDURE       reduce using rule 142 (expression -> expression DIVIDE expression .)
    FUNCTION        reduce using rule 142 (expression -> expression DIVIDE expression .)
    DESTRUCTOR      reduce using rule 142 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 142 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 142 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 142 (expression -> expression DIVIDE expression .)
    COLON           reduce using rule 142 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 142 (expression -> expression DIVIDE expression .)
    DOWNTO          reduce using rule 142 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 178
    MINUS           shift and go to state 179
    TIMES           shift and go to state 180
    DIVIDE          shift and go to state 181
    MOD             shift and go to state 182
    AND             shift and go to state 183
    OR              shift and go to state 184

  ! PLUS            [ reduce using rule 142 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 142 (expression -> expression DIVIDE expression .) ]
  ! TIMES           [ reduce using rule 142 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 142 (expression -> expression DIVIDE expression .) ]
  ! MOD             [ reduce using rule 142 (expression -> expression DIVIDE expression .) ]
  ! AND             [ reduce using rule 142 (expression -> expression DIVIDE expression .) ]
  ! OR              [ reduce using rule 142 (expression -> expression DIVIDE expression .) ]


state 264

    (143) expression -> expression MOD expression .
    (139) expression -> expression . PLUS expression
    (140) expression -> expression . MINUS expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (173) expression -> expression . AND expression
    (174) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 143 (expression -> expression MOD expression .)
    IN              reduce using rule 143 (expression -> expression MOD expression .)
    DO              reduce using rule 143 (expression -> expression MOD expression .)
    OF              reduce using rule 143 (expression -> expression MOD expression .)
    SEMICOLON       reduce using rule 143 (expression -> expression MOD expression .)
    END             reduce using rule 143 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 143 (expression -> expression MOD expression .)
    VAR             reduce using rule 143 (expression -> expression MOD expression .)
    ID              reduce using rule 143 (expression -> expression MOD expression .)
    CASE            reduce using rule 143 (expression -> expression MOD expression .)
    CONSTRUCTOR     reduce using rule 143 (expression -> expression MOD expression .)
    PROCEDURE       reduce using rule 143 (expression -> expression MOD expression .)
    FUNCTION        reduce using rule 143 (expression -> expression MOD expression .)
    DESTRUCTOR      reduce using rule 143 (expression -> expression MOD expression .)
    ELSE            reduce using rule 143 (expression -> expression MOD expression .)
    RBRACKET        reduce using rule 143 (expression -> expression MOD expression .)
    COMMA           reduce using rule 143 (expression -> expression MOD expression .)
    COLON           reduce using rule 143 (expression -> expression MOD expression .)
    TO              reduce using rule 143 (expression -> expression MOD expression .)
    DOWNTO          reduce using rule 143 (expression -> expression MOD expression .)
    PLUS            shift and go to state 178
    MINUS           shift and go to state 179
    TIMES           shift and go to state 180
    DIVIDE          shift and go to state 181
    MOD             shift and go to state 182
    AND             shift and go to state 183
    OR              shift and go to state 184

  ! PLUS            [ reduce using rule 143 (expression -> expression MOD expression .) ]
  ! MINUS           [ reduce using rule 143 (expression -> expression MOD expression .) ]
  ! TIMES           [ reduce using rule 143 (expression -> expression MOD expression .) ]
  ! DIVIDE          [ reduce using rule 143 (expression -> expression MOD expression .) ]
  ! MOD             [ reduce using rule 143 (expression -> expression MOD expression .) ]
  ! AND             [ reduce using rule 143 (expression -> expression MOD expression .) ]
  ! OR              [ reduce using rule 143 (expression -> expression MOD expression .) ]


state 265

    (173) expression -> expression AND expression .
    (139) expression -> expression . PLUS expression
    (140) expression -> expression . MINUS expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (173) expression -> expression . AND expression
    (174) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 173 (expression -> expression AND expression .)
    IN              reduce using rule 173 (expression -> expression AND expression .)
    DO              reduce using rule 173 (expression -> expression AND expression .)
    OF              reduce using rule 173 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 173 (expression -> expression AND expression .)
    END             reduce using rule 173 (expression -> expression AND expression .)
    RPAREN          reduce using rule 173 (expression -> expression AND expression .)
    VAR             reduce using rule 173 (expression -> expression AND expression .)
    ID              reduce using rule 173 (expression -> expression AND expression .)
    CASE            reduce using rule 173 (expression -> expression AND expression .)
    CONSTRUCTOR     reduce using rule 173 (expression -> expression AND expression .)
    PROCEDURE       reduce using rule 173 (expression -> expression AND expression .)
    FUNCTION        reduce using rule 173 (expression -> expression AND expression .)
    DESTRUCTOR      reduce using rule 173 (expression -> expression AND expression .)
    ELSE            reduce using rule 173 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 173 (expression -> expression AND expression .)
    COMMA           reduce using rule 173 (expression -> expression AND expression .)
    COLON           reduce using rule 173 (expression -> expression AND expression .)
    TO              reduce using rule 173 (expression -> expression AND expression .)
    DOWNTO          reduce using rule 173 (expression -> expression AND expression .)
    PLUS            shift and go to state 178
    MINUS           shift and go to state 179
    TIMES           shift and go to state 180
    DIVIDE          shift and go to state 181
    MOD             shift and go to state 182
    AND             shift and go to state 183
    OR              shift and go to state 184

  ! PLUS            [ reduce using rule 173 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 173 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 173 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 173 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 173 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 173 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 173 (expression -> expression AND expression .) ]


state 266

    (174) expression -> expression OR expression .
    (139) expression -> expression . PLUS expression
    (140) expression -> expression . MINUS expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (173) expression -> expression . AND expression
    (174) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 174 (expression -> expression OR expression .)
    IN              reduce using rule 174 (expression -> expression OR expression .)
    DO              reduce using rule 174 (expression -> expression OR expression .)
    OF              reduce using rule 174 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 174 (expression -> expression OR expression .)
    END             reduce using rule 174 (expression -> expression OR expression .)
    RPAREN          reduce using rule 174 (expression -> expression OR expression .)
    VAR             reduce using rule 174 (expression -> expression OR expression .)
    ID              reduce using rule 174 (expression -> expression OR expression .)
    CASE            reduce using rule 174 (expression -> expression OR expression .)
    CONSTRUCTOR     reduce using rule 174 (expression -> expression OR expression .)
    PROCEDURE       reduce using rule 174 (expression -> expression OR expression .)
    FUNCTION        reduce using rule 174 (expression -> expression OR expression .)
    DESTRUCTOR      reduce using rule 174 (expression -> expression OR expression .)
    ELSE            reduce using rule 174 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 174 (expression -> expression OR expression .)
    COMMA           reduce using rule 174 (expression -> expression OR expression .)
    COLON           reduce using rule 174 (expression -> expression OR expression .)
    TO              reduce using rule 174 (expression -> expression OR expression .)
    DOWNTO          reduce using rule 174 (expression -> expression OR expression .)
    PLUS            shift and go to state 178
    MINUS           shift and go to state 179
    TIMES           shift and go to state 180
    DIVIDE          shift and go to state 181
    MOD             shift and go to state 182
    AND             shift and go to state 183
    OR              shift and go to state 184

  ! PLUS            [ reduce using rule 174 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 174 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 174 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 174 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 174 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 174 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 174 (expression -> expression OR expression .) ]


state 267

    (126) expression -> simple_expression relop simple_expression .

    THEN            reduce using rule 126 (expression -> simple_expression relop simple_expression .)
    IN              reduce using rule 126 (expression -> simple_expression relop simple_expression .)
    PLUS            reduce using rule 126 (expression -> simple_expression relop simple_expression .)
    MINUS           reduce using rule 126 (expression -> simple_expression relop simple_expression .)
    TIMES           reduce using rule 126 (expression -> simple_expression relop simple_expression .)
    DIVIDE          reduce using rule 126 (expression -> simple_expression relop simple_expression .)
    MOD             reduce using rule 126 (expression -> simple_expression relop simple_expression .)
    AND             reduce using rule 126 (expression -> simple_expression relop simple_expression .)
    OR              reduce using rule 126 (expression -> simple_expression relop simple_expression .)
    DO              reduce using rule 126 (expression -> simple_expression relop simple_expression .)
    OF              reduce using rule 126 (expression -> simple_expression relop simple_expression .)
    SEMICOLON       reduce using rule 126 (expression -> simple_expression relop simple_expression .)
    END             reduce using rule 126 (expression -> simple_expression relop simple_expression .)
    RPAREN          reduce using rule 126 (expression -> simple_expression relop simple_expression .)
    VAR             reduce using rule 126 (expression -> simple_expression relop simple_expression .)
    ID              reduce using rule 126 (expression -> simple_expression relop simple_expression .)
    CASE            reduce using rule 126 (expression -> simple_expression relop simple_expression .)
    CONSTRUCTOR     reduce using rule 126 (expression -> simple_expression relop simple_expression .)
    PROCEDURE       reduce using rule 126 (expression -> simple_expression relop simple_expression .)
    FUNCTION        reduce using rule 126 (expression -> simple_expression relop simple_expression .)
    DESTRUCTOR      reduce using rule 126 (expression -> simple_expression relop simple_expression .)
    ELSE            reduce using rule 126 (expression -> simple_expression relop simple_expression .)
    RBRACKET        reduce using rule 126 (expression -> simple_expression relop simple_expression .)
    COMMA           reduce using rule 126 (expression -> simple_expression relop simple_expression .)
    COLON           reduce using rule 126 (expression -> simple_expression relop simple_expression .)
    TO              reduce using rule 126 (expression -> simple_expression relop simple_expression .)
    DOWNTO          reduce using rule 126 (expression -> simple_expression relop simple_expression .)


state 268

    (129) simple_expression_tail -> addop term .

    LESS            reduce using rule 129 (simple_expression_tail -> addop term .)
    LESS_EQUAL      reduce using rule 129 (simple_expression_tail -> addop term .)
    GREAT           reduce using rule 129 (simple_expression_tail -> addop term .)
    GREAT_EQUAL     reduce using rule 129 (simple_expression_tail -> addop term .)
    EQUAL           reduce using rule 129 (simple_expression_tail -> addop term .)
    DIFFERENT       reduce using rule 129 (simple_expression_tail -> addop term .)
    THEN            reduce using rule 129 (simple_expression_tail -> addop term .)
    IN              reduce using rule 129 (simple_expression_tail -> addop term .)
    PLUS            reduce using rule 129 (simple_expression_tail -> addop term .)
    MINUS           reduce using rule 129 (simple_expression_tail -> addop term .)
    TIMES           reduce using rule 129 (simple_expression_tail -> addop term .)
    DIVIDE          reduce using rule 129 (simple_expression_tail -> addop term .)
    MOD             reduce using rule 129 (simple_expression_tail -> addop term .)
    AND             reduce using rule 129 (simple_expression_tail -> addop term .)
    OR              reduce using rule 129 (simple_expression_tail -> addop term .)
    DO              reduce using rule 129 (simple_expression_tail -> addop term .)
    OF              reduce using rule 129 (simple_expression_tail -> addop term .)
    SEMICOLON       reduce using rule 129 (simple_expression_tail -> addop term .)
    END             reduce using rule 129 (simple_expression_tail -> addop term .)
    RPAREN          reduce using rule 129 (simple_expression_tail -> addop term .)
    VAR             reduce using rule 129 (simple_expression_tail -> addop term .)
    ID              reduce using rule 129 (simple_expression_tail -> addop term .)
    CASE            reduce using rule 129 (simple_expression_tail -> addop term .)
    CONSTRUCTOR     reduce using rule 129 (simple_expression_tail -> addop term .)
    PROCEDURE       reduce using rule 129 (simple_expression_tail -> addop term .)
    FUNCTION        reduce using rule 129 (simple_expression_tail -> addop term .)
    DESTRUCTOR      reduce using rule 129 (simple_expression_tail -> addop term .)
    ELSE            reduce using rule 129 (simple_expression_tail -> addop term .)
    RBRACKET        reduce using rule 129 (simple_expression_tail -> addop term .)
    COMMA           reduce using rule 129 (simple_expression_tail -> addop term .)
    COLON           reduce using rule 129 (simple_expression_tail -> addop term .)
    TO              reduce using rule 129 (simple_expression_tail -> addop term .)
    DOWNTO          reduce using rule 129 (simple_expression_tail -> addop term .)


state 269

    (134) term_tail -> mulop factor .

    PLUS            reduce using rule 134 (term_tail -> mulop factor .)
    MINUS           reduce using rule 134 (term_tail -> mulop factor .)
    LESS            reduce using rule 134 (term_tail -> mulop factor .)
    LESS_EQUAL      reduce using rule 134 (term_tail -> mulop factor .)
    GREAT           reduce using rule 134 (term_tail -> mulop factor .)
    GREAT_EQUAL     reduce using rule 134 (term_tail -> mulop factor .)
    EQUAL           reduce using rule 134 (term_tail -> mulop factor .)
    DIFFERENT       reduce using rule 134 (term_tail -> mulop factor .)
    THEN            reduce using rule 134 (term_tail -> mulop factor .)
    IN              reduce using rule 134 (term_tail -> mulop factor .)
    TIMES           reduce using rule 134 (term_tail -> mulop factor .)
    DIVIDE          reduce using rule 134 (term_tail -> mulop factor .)
    MOD             reduce using rule 134 (term_tail -> mulop factor .)
    AND             reduce using rule 134 (term_tail -> mulop factor .)
    OR              reduce using rule 134 (term_tail -> mulop factor .)
    DO              reduce using rule 134 (term_tail -> mulop factor .)
    OF              reduce using rule 134 (term_tail -> mulop factor .)
    SEMICOLON       reduce using rule 134 (term_tail -> mulop factor .)
    END             reduce using rule 134 (term_tail -> mulop factor .)
    RPAREN          reduce using rule 134 (term_tail -> mulop factor .)
    VAR             reduce using rule 134 (term_tail -> mulop factor .)
    ID              reduce using rule 134 (term_tail -> mulop factor .)
    CASE            reduce using rule 134 (term_tail -> mulop factor .)
    CONSTRUCTOR     reduce using rule 134 (term_tail -> mulop factor .)
    PROCEDURE       reduce using rule 134 (term_tail -> mulop factor .)
    FUNCTION        reduce using rule 134 (term_tail -> mulop factor .)
    DESTRUCTOR      reduce using rule 134 (term_tail -> mulop factor .)
    ELSE            reduce using rule 134 (term_tail -> mulop factor .)
    RBRACKET        reduce using rule 134 (term_tail -> mulop factor .)
    COMMA           reduce using rule 134 (term_tail -> mulop factor .)
    COLON           reduce using rule 134 (term_tail -> mulop factor .)
    TO              reduce using rule 134 (term_tail -> mulop factor .)
    DOWNTO          reduce using rule 134 (term_tail -> mulop factor .)


state 270

    (144) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    DIV             reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    LESS_EQUAL      reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    GREAT           reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    GREAT_EQUAL     reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    DIFFERENT       reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    IN              reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    OF              reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    VAR             reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    ID              reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    CASE            reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    CONSTRUCTOR     reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    PROCEDURE       reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    DESTRUCTOR      reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    COLON           reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 144 (factor -> LPAREN expression RPAREN .)


state 271

    (83) function_call -> ID LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 318


state 272

    (119) while_statement -> WHILE expression DO statement .

    SEMICOLON       reduce using rule 119 (while_statement -> WHILE expression DO statement .)
    END             reduce using rule 119 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 119 (while_statement -> WHILE expression DO statement .)
    THEN            reduce using rule 119 (while_statement -> WHILE expression DO statement .)


state 273

    (108) for_statement -> FOR ID COLON_EQUAL expression . TO expression DO statement
    (109) for_statement -> FOR ID COLON_EQUAL expression . DOWNTO expression DO statement
    (139) expression -> expression . PLUS expression
    (140) expression -> expression . MINUS expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (173) expression -> expression . AND expression
    (174) expression -> expression . OR expression

    TO              shift and go to state 319
    DOWNTO          shift and go to state 320
    PLUS            shift and go to state 178
    MINUS           shift and go to state 179
    TIMES           shift and go to state 180
    DIVIDE          shift and go to state 181
    MOD             shift and go to state 182
    AND             shift and go to state 183
    OR              shift and go to state 184


state 274

    (70) case_statement -> CASE expression OF case_list . END SEMICOLON
    (71) case_statement -> CASE expression OF case_list . END
    (59) case_list -> case_list . SEMICOLON case_element

    END             shift and go to state 321
    SEMICOLON       shift and go to state 322


state 275

    (60) case_list -> case_element .

    END             reduce using rule 60 (case_list -> case_element .)
    SEMICOLON       reduce using rule 60 (case_list -> case_element .)


state 276

    (61) case_element -> NUMBER . COLON LPAREN field_list RPAREN
    (62) case_element -> NUMBER . COLON field_list

    COLON           shift and go to state 323


state 277

    (103) with_statement -> WITH variable DO statement .

    SEMICOLON       reduce using rule 103 (with_statement -> WITH variable DO statement .)
    END             reduce using rule 103 (with_statement -> WITH variable DO statement .)
    ELSE            reduce using rule 103 (with_statement -> WITH variable DO statement .)
    THEN            reduce using rule 103 (with_statement -> WITH variable DO statement .)


state 278

    (30) type_specifier -> ARRAY LBRACKET type_expression . RBRACKET OF type_specifier
    (44) type_expression -> type_expression . COMMA subrange

    RBRACKET        shift and go to state 324
    COMMA           shift and go to state 325


state 279

    (45) type_expression -> subrange .

    RBRACKET        reduce using rule 45 (type_expression -> subrange .)
    COMMA           reduce using rule 45 (type_expression -> subrange .)


state 280

    (32) type_specifier -> FILE OF type_specifier .

    SEMICOLON       reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    RPAREN          reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    VAR             reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    ID              reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    CASE            reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    END             reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    CONSTRUCTOR     reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    PROCEDURE       reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    FUNCTION        reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    DESTRUCTOR      reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    OF              reduce using rule 32 (type_specifier -> FILE OF type_specifier .)


state 281

    (33) type_specifier -> SET OF type_specifier .

    SEMICOLON       reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    RPAREN          reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    VAR             reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    ID              reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    CASE            reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    END             reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    CONSTRUCTOR     reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    PROCEDURE       reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    FUNCTION        reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    DESTRUCTOR      reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    OF              reduce using rule 33 (type_specifier -> SET OF type_specifier .)


state 282

    (34) type_specifier -> RECORD field_list case_part . END

    END             shift and go to state 326


state 283

    (57) case_part -> CASE . ID COLON type_specifier OF case_list SEMICOLON

    ID              shift and go to state 327


state 284

    (58) case_part -> empty .

    END             reduce using rule 58 (case_part -> empty .)


state 285

    (35) type_specifier -> OBJECT field_list method_list . END
    (63) method_list -> method_list . method
    (66) method -> . CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON
    (67) method -> . PROCEDURE ID LPAREN field_list RPAREN SEMICOLON
    (68) method -> . FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON
    (69) method -> . DESTRUCTOR ID SEMICOLON

    END             shift and go to state 328
    CONSTRUCTOR     shift and go to state 288
    PROCEDURE       shift and go to state 289
    FUNCTION        shift and go to state 290
    DESTRUCTOR      shift and go to state 291

    method                         shift and go to state 329

state 286

    (64) method_list -> method .

    END             reduce using rule 64 (method_list -> method .)
    CONSTRUCTOR     reduce using rule 64 (method_list -> method .)
    PROCEDURE       reduce using rule 64 (method_list -> method .)
    FUNCTION        reduce using rule 64 (method_list -> method .)
    DESTRUCTOR      reduce using rule 64 (method_list -> method .)


state 287

    (65) method_list -> empty .

    END             reduce using rule 65 (method_list -> empty .)
    CONSTRUCTOR     reduce using rule 65 (method_list -> empty .)
    PROCEDURE       reduce using rule 65 (method_list -> empty .)
    FUNCTION        reduce using rule 65 (method_list -> empty .)
    DESTRUCTOR      reduce using rule 65 (method_list -> empty .)


state 288

    (66) method -> CONSTRUCTOR . ID LPAREN field_list RPAREN SEMICOLON

    ID              shift and go to state 330


state 289

    (67) method -> PROCEDURE . ID LPAREN field_list RPAREN SEMICOLON

    ID              shift and go to state 331


state 290

    (68) method -> FUNCTION . ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON

    ID              shift and go to state 332


state 291

    (69) method -> DESTRUCTOR . ID SEMICOLON

    ID              shift and go to state 333


state 292

    (36) type_specifier -> LPAREN id_list RPAREN .

    SEMICOLON       reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    RPAREN          reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    VAR             reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    ID              reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    CASE            reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    END             reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    CONSTRUCTOR     reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    PROCEDURE       reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    FUNCTION        reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    DESTRUCTOR      reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    OF              reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)


state 293

    (42) type_specifier -> STRING LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 334


state 294

    (46) subrange -> NUMBER DOTDOT NUMBER .

    SEMICOLON       reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    RBRACKET        reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    COMMA           reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    RPAREN          reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    VAR             reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    ID              reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    CASE            reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    END             reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    CONSTRUCTOR     reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    PROCEDURE       reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    FUNCTION        reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    DESTRUCTOR      reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    OF              reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)


state 295

    (47) subrange -> NUMBER DOTDOT ID .

    SEMICOLON       reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    RBRACKET        reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    COMMA           reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    RPAREN          reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    VAR             reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    ID              reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    CASE            reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    END             reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    CONSTRUCTOR     reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    PROCEDURE       reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    FUNCTION        reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    DESTRUCTOR      reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    OF              reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)


state 296

    (81) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON . type_specifier SEMICOLON block SEMICOLON
    (82) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON . type_specifier SEMICOLON FORWARD SEMICOLON
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (72) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 124
    FILE            shift and go to state 126
    SET             shift and go to state 127
    RECORD          shift and go to state 128
    OBJECT          shift and go to state 129
    LPAREN          shift and go to state 130
    BOOLEAN_LITERAL shift and go to state 131
    INTEGER         shift and go to state 132
    BYTE            shift and go to state 133
    CHAR            shift and go to state 134
    STRING          shift and go to state 135
    ID              shift and go to state 122
    LONGINT         shift and go to state 137
    NUMBER          shift and go to state 136

    type_specifier                 shift and go to state 335
    subrange                       shift and go to state 125

state 297

    (86) parameter_list -> parameter_list SEMICOLON parameter .

    RPAREN          reduce using rule 86 (parameter_list -> parameter_list SEMICOLON parameter .)
    SEMICOLON       reduce using rule 86 (parameter_list -> parameter_list SEMICOLON parameter .)


state 298

    (88) parameter -> id_list COLON type_specifier .

    RPAREN          reduce using rule 88 (parameter -> id_list COLON type_specifier .)
    SEMICOLON       reduce using rule 88 (parameter -> id_list COLON type_specifier .)


state 299

    (89) parameter -> VAR id_list COLON . type_specifier
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (72) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 124
    FILE            shift and go to state 126
    SET             shift and go to state 127
    RECORD          shift and go to state 128
    OBJECT          shift and go to state 129
    LPAREN          shift and go to state 130
    BOOLEAN_LITERAL shift and go to state 131
    INTEGER         shift and go to state 132
    BYTE            shift and go to state 133
    CHAR            shift and go to state 134
    STRING          shift and go to state 135
    ID              shift and go to state 122
    LONGINT         shift and go to state 137
    NUMBER          shift and go to state 136

    type_specifier                 shift and go to state 336
    subrange                       shift and go to state 125

state 300

    (14) method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list . RPAREN COLON type_specifier SEMICOLON block
    (86) parameter_list -> parameter_list . SEMICOLON parameter

    RPAREN          shift and go to state 337
    SEMICOLON       shift and go to state 225


state 301

    (16) constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON . block
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (154) empty -> .

    BEGIN           reduce using rule 154 (empty -> .)
    USES            reduce using rule 154 (empty -> .)
    CONST           reduce using rule 154 (empty -> .)
    TYPE            reduce using rule 154 (empty -> .)
    VAR             reduce using rule 154 (empty -> .)
    FUNCTION        reduce using rule 154 (empty -> .)
    CONSTRUCTOR     reduce using rule 154 (empty -> .)
    PROCEDURE       reduce using rule 154 (empty -> .)
    DESTRUCTOR      reduce using rule 154 (empty -> .)

    block                          shift and go to state 338
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 302

    (17) constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block .

    USES            reduce using rule 17 (constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block .)
    CONST           reduce using rule 17 (constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block .)
    TYPE            reduce using rule 17 (constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block .)
    VAR             reduce using rule 17 (constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block .)
    FUNCTION        reduce using rule 17 (constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block .)
    CONSTRUCTOR     reduce using rule 17 (constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block .)
    PROCEDURE       reduce using rule 17 (constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block .)
    DESTRUCTOR      reduce using rule 17 (constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block .)
    BEGIN           reduce using rule 17 (constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block .)


state 303

    (51) field -> id_list COLON type_specifier .
    (52) field -> id_list COLON type_specifier . SEMICOLON

  ! shift/reduce conflict for SEMICOLON resolved as shift
    RPAREN          reduce using rule 51 (field -> id_list COLON type_specifier .)
    VAR             reduce using rule 51 (field -> id_list COLON type_specifier .)
    ID              reduce using rule 51 (field -> id_list COLON type_specifier .)
    CASE            reduce using rule 51 (field -> id_list COLON type_specifier .)
    END             reduce using rule 51 (field -> id_list COLON type_specifier .)
    CONSTRUCTOR     reduce using rule 51 (field -> id_list COLON type_specifier .)
    PROCEDURE       reduce using rule 51 (field -> id_list COLON type_specifier .)
    FUNCTION        reduce using rule 51 (field -> id_list COLON type_specifier .)
    DESTRUCTOR      reduce using rule 51 (field -> id_list COLON type_specifier .)
    SEMICOLON       shift and go to state 339

  ! SEMICOLON       [ reduce using rule 51 (field -> id_list COLON type_specifier .) ]


state 304

    (55) field -> id_list LPAREN STRING_LITERAL . RPAREN

    RPAREN          shift and go to state 340


state 305

    (53) field -> VAR id_list COLON . type_specifier
    (54) field -> VAR id_list COLON . type_specifier SEMICOLON
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (72) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 124
    FILE            shift and go to state 126
    SET             shift and go to state 127
    RECORD          shift and go to state 128
    OBJECT          shift and go to state 129
    LPAREN          shift and go to state 130
    BOOLEAN_LITERAL shift and go to state 131
    INTEGER         shift and go to state 132
    BYTE            shift and go to state 133
    CHAR            shift and go to state 134
    STRING          shift and go to state 135
    ID              shift and go to state 122
    LONGINT         shift and go to state 137
    NUMBER          shift and go to state 136

    type_specifier                 shift and go to state 341
    subrange                       shift and go to state 125

state 306

    (12) method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list . RPAREN SEMICOLON block
    (86) parameter_list -> parameter_list . SEMICOLON parameter

    RPAREN          shift and go to state 342
    SEMICOLON       shift and go to state 225


state 307

    (13) method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list . RPAREN SEMICOLON block
    (86) parameter_list -> parameter_list . SEMICOLON parameter

    RPAREN          shift and go to state 343
    SEMICOLON       shift and go to state 225


state 308

    (75) procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON . block SEMICOLON
    (78) procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON . FORWARD SEMICOLON
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (154) empty -> .

    FORWARD         shift and go to state 345
    BEGIN           reduce using rule 154 (empty -> .)
    USES            reduce using rule 154 (empty -> .)
    CONST           reduce using rule 154 (empty -> .)
    TYPE            reduce using rule 154 (empty -> .)
    VAR             reduce using rule 154 (empty -> .)
    FUNCTION        reduce using rule 154 (empty -> .)
    CONSTRUCTOR     reduce using rule 154 (empty -> .)
    PROCEDURE       reduce using rule 154 (empty -> .)
    DESTRUCTOR      reduce using rule 154 (empty -> .)

    block                          shift and go to state 344
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 309

    (76) procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 346


state 310

    (79) procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD . SEMICOLON

    SEMICOLON       shift and go to state 347


state 311

    (15) method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block .

    USES            reduce using rule 15 (method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block .)
    CONST           reduce using rule 15 (method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block .)
    TYPE            reduce using rule 15 (method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block .)
    VAR             reduce using rule 15 (method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block .)
    FUNCTION        reduce using rule 15 (method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block .)
    CONSTRUCTOR     reduce using rule 15 (method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block .)
    PROCEDURE       reduce using rule 15 (method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block .)
    DESTRUCTOR      reduce using rule 15 (method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block .)
    BEGIN           reduce using rule 15 (method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block .)


state 312

    (123) expression_list_tail -> COMMA expression . expression_list_tail
    (139) expression -> expression . PLUS expression
    (140) expression -> expression . MINUS expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (173) expression -> expression . AND expression
    (174) expression -> expression . OR expression
    (123) expression_list_tail -> . COMMA expression expression_list_tail
    (124) expression_list_tail -> . empty
    (154) empty -> .

    PLUS            shift and go to state 178
    MINUS           shift and go to state 179
    TIMES           shift and go to state 180
    DIVIDE          shift and go to state 181
    MOD             shift and go to state 182
    AND             shift and go to state 183
    OR              shift and go to state 184
    COMMA           shift and go to state 250
    RPAREN          reduce using rule 154 (empty -> .)

    expression_list_tail           shift and go to state 348
    empty                          shift and go to state 251

state 313

    (161) write_arguments -> write_arguments COMMA write_argument .

    RPAREN          reduce using rule 161 (write_arguments -> write_arguments COMMA write_argument .)
    COMMA           reduce using rule 161 (write_arguments -> write_arguments COMMA write_argument .)


state 314

    (163) write_argument -> expression COLON expression .
    (164) write_argument -> expression COLON expression . COLON expression
    (139) expression -> expression . PLUS expression
    (140) expression -> expression . MINUS expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (173) expression -> expression . AND expression
    (174) expression -> expression . OR expression

    RPAREN          reduce using rule 163 (write_argument -> expression COLON expression .)
    COMMA           reduce using rule 163 (write_argument -> expression COLON expression .)
    COLON           shift and go to state 349
    PLUS            shift and go to state 178
    MINUS           shift and go to state 179
    TIMES           shift and go to state 180
    DIVIDE          shift and go to state 181
    MOD             shift and go to state 182
    AND             shift and go to state 183
    OR              shift and go to state 184


state 315

    (118) index_list -> index_list COMMA expression .
    (139) expression -> expression . PLUS expression
    (140) expression -> expression . MINUS expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (173) expression -> expression . AND expression
    (174) expression -> expression . OR expression

    RBRACKET        reduce using rule 118 (index_list -> index_list COMMA expression .)
    COMMA           reduce using rule 118 (index_list -> index_list COMMA expression .)
    PLUS            shift and go to state 178
    MINUS           shift and go to state 179
    TIMES           shift and go to state 180
    DIVIDE          shift and go to state 181
    MOD             shift and go to state 182
    AND             shift and go to state 183
    OR              shift and go to state 184


state 316

    (104) if_statement -> IF expression THEN statement ELSE . statement
    (94) statement -> . if_statement
    (95) statement -> . assignment_statement
    (96) statement -> . while_statement
    (97) statement -> . procedure_call
    (98) statement -> . compound_statement
    (99) statement -> . for_statement
    (100) statement -> . case_statement
    (101) statement -> . with_statement
    (102) statement -> . empty
    (155) statement -> . READLN
    (156) statement -> . READLN LPAREN variable RPAREN
    (157) statement -> . READLN LBRACKET variable RBRACKET
    (158) statement -> . WRITE LPAREN expression_list RPAREN
    (159) statement -> . WRITELN LPAREN write_arguments RPAREN
    (165) statement -> . USES ID SEMICOLON
    (104) if_statement -> . IF expression THEN statement ELSE statement
    (105) if_statement -> . IF expression THEN statement
    (106) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (107) if_statement -> . IF expression IN statement THEN statement
    (110) assignment_statement -> . variable COLON_EQUAL expression
    (111) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL
    (112) assignment_statement -> . ID COLON_EQUAL expression
    (119) while_statement -> . WHILE expression DO statement
    (120) procedure_call -> . ID LPAREN expression_list RPAREN
    (121) procedure_call -> . ID
    (90) compound_statement -> . BEGIN statement_list END
    (108) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (109) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (70) case_statement -> . CASE expression OF case_list END SEMICOLON
    (71) case_statement -> . CASE expression OF case_list END
    (103) with_statement -> . WITH variable DO statement
    (154) empty -> .
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    READLN          shift and go to state 58
    WRITE           shift and go to state 60
    WRITELN         shift and go to state 61
    USES            shift and go to state 62
    IF              shift and go to state 64
    ID              shift and go to state 63
    WHILE           shift and go to state 65
    BEGIN           shift and go to state 28
    FOR             shift and go to state 66
    CASE            shift and go to state 67
    WITH            shift and go to state 68
    ELSE            reduce using rule 154 (empty -> .)
    SEMICOLON       reduce using rule 154 (empty -> .)
    END             reduce using rule 154 (empty -> .)
    THEN            reduce using rule 154 (empty -> .)

    statement                      shift and go to state 350
    if_statement                   shift and go to state 49
    assignment_statement           shift and go to state 50
    while_statement                shift and go to state 51
    procedure_call                 shift and go to state 52
    compound_statement             shift and go to state 53
    for_statement                  shift and go to state 54
    case_statement                 shift and go to state 55
    with_statement                 shift and go to state 56
    empty                          shift and go to state 57
    variable                       shift and go to state 59

state 317

    (106) if_statement -> IF expression IN statement THEN . statement ELSE statement
    (107) if_statement -> IF expression IN statement THEN . statement
    (94) statement -> . if_statement
    (95) statement -> . assignment_statement
    (96) statement -> . while_statement
    (97) statement -> . procedure_call
    (98) statement -> . compound_statement
    (99) statement -> . for_statement
    (100) statement -> . case_statement
    (101) statement -> . with_statement
    (102) statement -> . empty
    (155) statement -> . READLN
    (156) statement -> . READLN LPAREN variable RPAREN
    (157) statement -> . READLN LBRACKET variable RBRACKET
    (158) statement -> . WRITE LPAREN expression_list RPAREN
    (159) statement -> . WRITELN LPAREN write_arguments RPAREN
    (165) statement -> . USES ID SEMICOLON
    (104) if_statement -> . IF expression THEN statement ELSE statement
    (105) if_statement -> . IF expression THEN statement
    (106) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (107) if_statement -> . IF expression IN statement THEN statement
    (110) assignment_statement -> . variable COLON_EQUAL expression
    (111) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL
    (112) assignment_statement -> . ID COLON_EQUAL expression
    (119) while_statement -> . WHILE expression DO statement
    (120) procedure_call -> . ID LPAREN expression_list RPAREN
    (121) procedure_call -> . ID
    (90) compound_statement -> . BEGIN statement_list END
    (108) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (109) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (70) case_statement -> . CASE expression OF case_list END SEMICOLON
    (71) case_statement -> . CASE expression OF case_list END
    (103) with_statement -> . WITH variable DO statement
    (154) empty -> .
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    READLN          shift and go to state 58
    WRITE           shift and go to state 60
    WRITELN         shift and go to state 61
    USES            shift and go to state 62
    IF              shift and go to state 64
    ID              shift and go to state 63
    WHILE           shift and go to state 65
    BEGIN           shift and go to state 28
    FOR             shift and go to state 66
    CASE            shift and go to state 67
    WITH            shift and go to state 68
    ELSE            reduce using rule 154 (empty -> .)
    SEMICOLON       reduce using rule 154 (empty -> .)
    END             reduce using rule 154 (empty -> .)
    THEN            reduce using rule 154 (empty -> .)

    statement                      shift and go to state 351
    if_statement                   shift and go to state 49
    assignment_statement           shift and go to state 50
    while_statement                shift and go to state 51
    procedure_call                 shift and go to state 52
    compound_statement             shift and go to state 53
    for_statement                  shift and go to state 54
    case_statement                 shift and go to state 55
    with_statement                 shift and go to state 56
    empty                          shift and go to state 57
    variable                       shift and go to state 59

state 318

    (83) function_call -> ID LPAREN expression_list RPAREN .

    TIMES           reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    DIVIDE          reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    DIV             reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    PLUS            reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    MINUS           reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    LESS            reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    LESS_EQUAL      reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    GREAT           reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    GREAT_EQUAL     reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    DIFFERENT       reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    IN              reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    MOD             reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    AND             reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    OR              reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    OF              reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    VAR             reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    ID              reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    CASE            reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    CONSTRUCTOR     reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    PROCEDURE       reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    FUNCTION        reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    DESTRUCTOR      reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    RBRACKET        reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    COLON           reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)
    DOWNTO          reduce using rule 83 (function_call -> ID LPAREN expression_list RPAREN .)


state 319

    (108) for_statement -> FOR ID COLON_EQUAL expression TO . expression DO statement
    (126) expression -> . simple_expression relop simple_expression
    (127) expression -> . simple_expression
    (139) expression -> . expression PLUS expression
    (140) expression -> . expression MINUS expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (173) expression -> . expression AND expression
    (174) expression -> . expression OR expression
    (175) expression -> . NOT expression
    (128) simple_expression -> . term simple_expression_tail
    (133) term -> . factor term_tail
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 103
    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    expression                     shift and go to state 352
    simple_expression              shift and go to state 102
    term                           shift and go to state 104
    factor                         shift and go to state 105
    function_call                  shift and go to state 106
    variable                       shift and go to state 108

state 320

    (109) for_statement -> FOR ID COLON_EQUAL expression DOWNTO . expression DO statement
    (126) expression -> . simple_expression relop simple_expression
    (127) expression -> . simple_expression
    (139) expression -> . expression PLUS expression
    (140) expression -> . expression MINUS expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (173) expression -> . expression AND expression
    (174) expression -> . expression OR expression
    (175) expression -> . NOT expression
    (128) simple_expression -> . term simple_expression_tail
    (133) term -> . factor term_tail
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 103
    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    expression                     shift and go to state 353
    simple_expression              shift and go to state 102
    term                           shift and go to state 104
    factor                         shift and go to state 105
    function_call                  shift and go to state 106
    variable                       shift and go to state 108

state 321

    (70) case_statement -> CASE expression OF case_list END . SEMICOLON
    (71) case_statement -> CASE expression OF case_list END .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 354
    END             reduce using rule 71 (case_statement -> CASE expression OF case_list END .)
    ELSE            reduce using rule 71 (case_statement -> CASE expression OF case_list END .)
    THEN            reduce using rule 71 (case_statement -> CASE expression OF case_list END .)

  ! SEMICOLON       [ reduce using rule 71 (case_statement -> CASE expression OF case_list END .) ]


state 322

    (59) case_list -> case_list SEMICOLON . case_element
    (61) case_element -> . NUMBER COLON LPAREN field_list RPAREN
    (62) case_element -> . NUMBER COLON field_list

    NUMBER          shift and go to state 276

    case_element                   shift and go to state 355

state 323

    (61) case_element -> NUMBER COLON . LPAREN field_list RPAREN
    (62) case_element -> NUMBER COLON . field_list
    (48) field_list -> . field_list field
    (49) field_list -> . field
    (50) field_list -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . id_list assignment_statement
    (154) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    LPAREN          shift and go to state 356
    VAR             shift and go to state 150
    END             reduce using rule 154 (empty -> .)
    SEMICOLON       reduce using rule 154 (empty -> .)
    ID              shift and go to state 33

  ! VAR             [ reduce using rule 154 (empty -> .) ]
  ! ID              [ reduce using rule 154 (empty -> .) ]

    field_list                     shift and go to state 357
    field                          shift and go to state 147
    empty                          shift and go to state 148
    id_list                        shift and go to state 149

state 324

    (30) type_specifier -> ARRAY LBRACKET type_expression RBRACKET . OF type_specifier

    OF              shift and go to state 358


state 325

    (44) type_expression -> type_expression COMMA . subrange
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    NUMBER          shift and go to state 136

    subrange                       shift and go to state 359

state 326

    (34) type_specifier -> RECORD field_list case_part END .

    SEMICOLON       reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    RPAREN          reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    VAR             reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    ID              reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    CASE            reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    END             reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    CONSTRUCTOR     reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    PROCEDURE       reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    FUNCTION        reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    DESTRUCTOR      reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    OF              reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)


state 327

    (57) case_part -> CASE ID . COLON type_specifier OF case_list SEMICOLON

    COLON           shift and go to state 360


state 328

    (35) type_specifier -> OBJECT field_list method_list END .

    SEMICOLON       reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    RPAREN          reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    VAR             reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    ID              reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    CASE            reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    END             reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    CONSTRUCTOR     reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    PROCEDURE       reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    FUNCTION        reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    DESTRUCTOR      reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    OF              reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)


state 329

    (63) method_list -> method_list method .

    END             reduce using rule 63 (method_list -> method_list method .)
    CONSTRUCTOR     reduce using rule 63 (method_list -> method_list method .)
    PROCEDURE       reduce using rule 63 (method_list -> method_list method .)
    FUNCTION        reduce using rule 63 (method_list -> method_list method .)
    DESTRUCTOR      reduce using rule 63 (method_list -> method_list method .)


state 330

    (66) method -> CONSTRUCTOR ID . LPAREN field_list RPAREN SEMICOLON

    LPAREN          shift and go to state 361


state 331

    (67) method -> PROCEDURE ID . LPAREN field_list RPAREN SEMICOLON

    LPAREN          shift and go to state 362


state 332

    (68) method -> FUNCTION ID . LPAREN field_list RPAREN COLON type_specifier SEMICOLON

    LPAREN          shift and go to state 363


state 333

    (69) method -> DESTRUCTOR ID . SEMICOLON

    SEMICOLON       shift and go to state 364


state 334

    (42) type_specifier -> STRING LBRACKET NUMBER RBRACKET .

    SEMICOLON       reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    RPAREN          reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    VAR             reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    ID              reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    CASE            reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    END             reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    CONSTRUCTOR     reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    PROCEDURE       reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    FUNCTION        reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    DESTRUCTOR      reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    OF              reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)


state 335

    (81) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier . SEMICOLON block SEMICOLON
    (82) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier . SEMICOLON FORWARD SEMICOLON

    SEMICOLON       shift and go to state 365


state 336

    (89) parameter -> VAR id_list COLON type_specifier .

    RPAREN          reduce using rule 89 (parameter -> VAR id_list COLON type_specifier .)
    SEMICOLON       reduce using rule 89 (parameter -> VAR id_list COLON type_specifier .)


state 337

    (14) method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN . COLON type_specifier SEMICOLON block

    COLON           shift and go to state 366


state 338

    (16) constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block .

    USES            reduce using rule 16 (constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block .)
    CONST           reduce using rule 16 (constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block .)
    TYPE            reduce using rule 16 (constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block .)
    VAR             reduce using rule 16 (constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block .)
    FUNCTION        reduce using rule 16 (constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block .)
    CONSTRUCTOR     reduce using rule 16 (constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block .)
    PROCEDURE       reduce using rule 16 (constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block .)
    DESTRUCTOR      reduce using rule 16 (constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block .)
    BEGIN           reduce using rule 16 (constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block .)


state 339

    (52) field -> id_list COLON type_specifier SEMICOLON .

    RPAREN          reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    VAR             reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    ID              reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    CASE            reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    END             reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    CONSTRUCTOR     reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    DESTRUCTOR      reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    SEMICOLON       reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)


state 340

    (55) field -> id_list LPAREN STRING_LITERAL RPAREN .

    RPAREN          reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    VAR             reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    ID              reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    CASE            reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    END             reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    CONSTRUCTOR     reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    PROCEDURE       reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    FUNCTION        reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    DESTRUCTOR      reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    SEMICOLON       reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)


state 341

    (53) field -> VAR id_list COLON type_specifier .
    (54) field -> VAR id_list COLON type_specifier . SEMICOLON

  ! shift/reduce conflict for SEMICOLON resolved as shift
    RPAREN          reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    VAR             reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    ID              reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    CASE            reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    END             reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    CONSTRUCTOR     reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    PROCEDURE       reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    FUNCTION        reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    DESTRUCTOR      reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    SEMICOLON       shift and go to state 367

  ! SEMICOLON       [ reduce using rule 53 (field -> VAR id_list COLON type_specifier .) ]


state 342

    (12) method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN . SEMICOLON block

    SEMICOLON       shift and go to state 368


state 343

    (13) method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN . SEMICOLON block

    SEMICOLON       shift and go to state 369


state 344

    (75) procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 370


state 345

    (78) procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD . SEMICOLON

    SEMICOLON       shift and go to state 371


state 346

    (76) procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .

    PROCEDURE       reduce using rule 76 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    USES            reduce using rule 76 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    CONST           reduce using rule 76 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    TYPE            reduce using rule 76 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    VAR             reduce using rule 76 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 76 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    CONSTRUCTOR     reduce using rule 76 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    DESTRUCTOR      reduce using rule 76 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    BEGIN           reduce using rule 76 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)


state 347

    (79) procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .

    PROCEDURE       reduce using rule 79 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)
    USES            reduce using rule 79 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)
    CONST           reduce using rule 79 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)
    TYPE            reduce using rule 79 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)
    VAR             reduce using rule 79 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)
    FUNCTION        reduce using rule 79 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)
    CONSTRUCTOR     reduce using rule 79 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)
    DESTRUCTOR      reduce using rule 79 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)
    BEGIN           reduce using rule 79 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)


state 348

    (123) expression_list_tail -> COMMA expression expression_list_tail .

    RPAREN          reduce using rule 123 (expression_list_tail -> COMMA expression expression_list_tail .)


state 349

    (164) write_argument -> expression COLON expression COLON . expression
    (126) expression -> . simple_expression relop simple_expression
    (127) expression -> . simple_expression
    (139) expression -> . expression PLUS expression
    (140) expression -> . expression MINUS expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (173) expression -> . expression AND expression
    (174) expression -> . expression OR expression
    (175) expression -> . NOT expression
    (128) simple_expression -> . term simple_expression_tail
    (133) term -> . factor term_tail
    (84) factor -> . function_call
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . variable
    (146) factor -> . NUMBER
    (147) factor -> . STRING_LITERAL
    (83) function_call -> . ID LPAREN expression_list RPAREN
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 103
    LPAREN          shift and go to state 107
    NUMBER          shift and go to state 109
    STRING_LITERAL  shift and go to state 110
    ID              shift and go to state 111

    expression                     shift and go to state 372
    simple_expression              shift and go to state 102
    term                           shift and go to state 104
    factor                         shift and go to state 105
    function_call                  shift and go to state 106
    variable                       shift and go to state 108

state 350

    (104) if_statement -> IF expression THEN statement ELSE statement .

    SEMICOLON       reduce using rule 104 (if_statement -> IF expression THEN statement ELSE statement .)
    END             reduce using rule 104 (if_statement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 104 (if_statement -> IF expression THEN statement ELSE statement .)
    THEN            reduce using rule 104 (if_statement -> IF expression THEN statement ELSE statement .)


state 351

    (106) if_statement -> IF expression IN statement THEN statement . ELSE statement
    (107) if_statement -> IF expression IN statement THEN statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 373
    SEMICOLON       reduce using rule 107 (if_statement -> IF expression IN statement THEN statement .)
    END             reduce using rule 107 (if_statement -> IF expression IN statement THEN statement .)
    THEN            reduce using rule 107 (if_statement -> IF expression IN statement THEN statement .)

  ! ELSE            [ reduce using rule 107 (if_statement -> IF expression IN statement THEN statement .) ]


state 352

    (108) for_statement -> FOR ID COLON_EQUAL expression TO expression . DO statement
    (139) expression -> expression . PLUS expression
    (140) expression -> expression . MINUS expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (173) expression -> expression . AND expression
    (174) expression -> expression . OR expression

    DO              shift and go to state 374
    PLUS            shift and go to state 178
    MINUS           shift and go to state 179
    TIMES           shift and go to state 180
    DIVIDE          shift and go to state 181
    MOD             shift and go to state 182
    AND             shift and go to state 183
    OR              shift and go to state 184


state 353

    (109) for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression . DO statement
    (139) expression -> expression . PLUS expression
    (140) expression -> expression . MINUS expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (173) expression -> expression . AND expression
    (174) expression -> expression . OR expression

    DO              shift and go to state 375
    PLUS            shift and go to state 178
    MINUS           shift and go to state 179
    TIMES           shift and go to state 180
    DIVIDE          shift and go to state 181
    MOD             shift and go to state 182
    AND             shift and go to state 183
    OR              shift and go to state 184


state 354

    (70) case_statement -> CASE expression OF case_list END SEMICOLON .

    SEMICOLON       reduce using rule 70 (case_statement -> CASE expression OF case_list END SEMICOLON .)
    END             reduce using rule 70 (case_statement -> CASE expression OF case_list END SEMICOLON .)
    ELSE            reduce using rule 70 (case_statement -> CASE expression OF case_list END SEMICOLON .)
    THEN            reduce using rule 70 (case_statement -> CASE expression OF case_list END SEMICOLON .)


state 355

    (59) case_list -> case_list SEMICOLON case_element .

    END             reduce using rule 59 (case_list -> case_list SEMICOLON case_element .)
    SEMICOLON       reduce using rule 59 (case_list -> case_list SEMICOLON case_element .)


state 356

    (61) case_element -> NUMBER COLON LPAREN . field_list RPAREN
    (48) field_list -> . field_list field
    (49) field_list -> . field
    (50) field_list -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . id_list assignment_statement
    (154) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    VAR             shift and go to state 150
    RPAREN          reduce using rule 154 (empty -> .)
    ID              shift and go to state 33

  ! VAR             [ reduce using rule 154 (empty -> .) ]
  ! ID              [ reduce using rule 154 (empty -> .) ]

    field_list                     shift and go to state 376
    field                          shift and go to state 147
    empty                          shift and go to state 148
    id_list                        shift and go to state 149

state 357

    (62) case_element -> NUMBER COLON field_list .
    (48) field_list -> field_list . field
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . id_list assignment_statement
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

    END             reduce using rule 62 (case_element -> NUMBER COLON field_list .)
    SEMICOLON       reduce using rule 62 (case_element -> NUMBER COLON field_list .)
    VAR             shift and go to state 150
    ID              shift and go to state 33

    field                          shift and go to state 230
    id_list                        shift and go to state 149

state 358

    (30) type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF . type_specifier
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (72) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 124
    FILE            shift and go to state 126
    SET             shift and go to state 127
    RECORD          shift and go to state 128
    OBJECT          shift and go to state 129
    LPAREN          shift and go to state 130
    BOOLEAN_LITERAL shift and go to state 131
    INTEGER         shift and go to state 132
    BYTE            shift and go to state 133
    CHAR            shift and go to state 134
    STRING          shift and go to state 135
    ID              shift and go to state 122
    LONGINT         shift and go to state 137
    NUMBER          shift and go to state 136

    type_specifier                 shift and go to state 377
    subrange                       shift and go to state 125

state 359

    (44) type_expression -> type_expression COMMA subrange .

    RBRACKET        reduce using rule 44 (type_expression -> type_expression COMMA subrange .)
    COMMA           reduce using rule 44 (type_expression -> type_expression COMMA subrange .)


state 360

    (57) case_part -> CASE ID COLON . type_specifier OF case_list SEMICOLON
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (72) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 124
    FILE            shift and go to state 126
    SET             shift and go to state 127
    RECORD          shift and go to state 128
    OBJECT          shift and go to state 129
    LPAREN          shift and go to state 130
    BOOLEAN_LITERAL shift and go to state 131
    INTEGER         shift and go to state 132
    BYTE            shift and go to state 133
    CHAR            shift and go to state 134
    STRING          shift and go to state 135
    ID              shift and go to state 122
    LONGINT         shift and go to state 137
    NUMBER          shift and go to state 136

    type_specifier                 shift and go to state 378
    subrange                       shift and go to state 125

state 361

    (66) method -> CONSTRUCTOR ID LPAREN . field_list RPAREN SEMICOLON
    (48) field_list -> . field_list field
    (49) field_list -> . field
    (50) field_list -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . id_list assignment_statement
    (154) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    VAR             shift and go to state 150
    RPAREN          reduce using rule 154 (empty -> .)
    ID              shift and go to state 33

  ! VAR             [ reduce using rule 154 (empty -> .) ]
  ! ID              [ reduce using rule 154 (empty -> .) ]

    field_list                     shift and go to state 379
    field                          shift and go to state 147
    empty                          shift and go to state 148
    id_list                        shift and go to state 149

state 362

    (67) method -> PROCEDURE ID LPAREN . field_list RPAREN SEMICOLON
    (48) field_list -> . field_list field
    (49) field_list -> . field
    (50) field_list -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . id_list assignment_statement
    (154) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    VAR             shift and go to state 150
    RPAREN          reduce using rule 154 (empty -> .)
    ID              shift and go to state 33

  ! VAR             [ reduce using rule 154 (empty -> .) ]
  ! ID              [ reduce using rule 154 (empty -> .) ]

    field_list                     shift and go to state 380
    field                          shift and go to state 147
    empty                          shift and go to state 148
    id_list                        shift and go to state 149

state 363

    (68) method -> FUNCTION ID LPAREN . field_list RPAREN COLON type_specifier SEMICOLON
    (48) field_list -> . field_list field
    (49) field_list -> . field
    (50) field_list -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . id_list assignment_statement
    (154) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    VAR             shift and go to state 150
    RPAREN          reduce using rule 154 (empty -> .)
    ID              shift and go to state 33

  ! VAR             [ reduce using rule 154 (empty -> .) ]
  ! ID              [ reduce using rule 154 (empty -> .) ]

    field_list                     shift and go to state 381
    field                          shift and go to state 147
    empty                          shift and go to state 148
    id_list                        shift and go to state 149

state 364

    (69) method -> DESTRUCTOR ID SEMICOLON .

    END             reduce using rule 69 (method -> DESTRUCTOR ID SEMICOLON .)
    CONSTRUCTOR     reduce using rule 69 (method -> DESTRUCTOR ID SEMICOLON .)
    PROCEDURE       reduce using rule 69 (method -> DESTRUCTOR ID SEMICOLON .)
    FUNCTION        reduce using rule 69 (method -> DESTRUCTOR ID SEMICOLON .)
    DESTRUCTOR      reduce using rule 69 (method -> DESTRUCTOR ID SEMICOLON .)


state 365

    (81) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON . block SEMICOLON
    (82) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON . FORWARD SEMICOLON
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (154) empty -> .

    FORWARD         shift and go to state 383
    BEGIN           reduce using rule 154 (empty -> .)
    USES            reduce using rule 154 (empty -> .)
    CONST           reduce using rule 154 (empty -> .)
    TYPE            reduce using rule 154 (empty -> .)
    VAR             reduce using rule 154 (empty -> .)
    FUNCTION        reduce using rule 154 (empty -> .)
    CONSTRUCTOR     reduce using rule 154 (empty -> .)
    PROCEDURE       reduce using rule 154 (empty -> .)
    DESTRUCTOR      reduce using rule 154 (empty -> .)

    block                          shift and go to state 382
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 366

    (14) method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON . type_specifier SEMICOLON block
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (72) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 124
    FILE            shift and go to state 126
    SET             shift and go to state 127
    RECORD          shift and go to state 128
    OBJECT          shift and go to state 129
    LPAREN          shift and go to state 130
    BOOLEAN_LITERAL shift and go to state 131
    INTEGER         shift and go to state 132
    BYTE            shift and go to state 133
    CHAR            shift and go to state 134
    STRING          shift and go to state 135
    ID              shift and go to state 122
    LONGINT         shift and go to state 137
    NUMBER          shift and go to state 136

    type_specifier                 shift and go to state 384
    subrange                       shift and go to state 125

state 367

    (54) field -> VAR id_list COLON type_specifier SEMICOLON .

    RPAREN          reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    VAR             reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    ID              reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    CASE            reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    END             reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    CONSTRUCTOR     reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    DESTRUCTOR      reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    SEMICOLON       reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)


state 368

    (12) method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON . block
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (154) empty -> .

    BEGIN           reduce using rule 154 (empty -> .)
    USES            reduce using rule 154 (empty -> .)
    CONST           reduce using rule 154 (empty -> .)
    TYPE            reduce using rule 154 (empty -> .)
    VAR             reduce using rule 154 (empty -> .)
    FUNCTION        reduce using rule 154 (empty -> .)
    CONSTRUCTOR     reduce using rule 154 (empty -> .)
    PROCEDURE       reduce using rule 154 (empty -> .)
    DESTRUCTOR      reduce using rule 154 (empty -> .)

    block                          shift and go to state 385
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 369

    (13) method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON . block
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (154) empty -> .

    BEGIN           reduce using rule 154 (empty -> .)
    USES            reduce using rule 154 (empty -> .)
    CONST           reduce using rule 154 (empty -> .)
    TYPE            reduce using rule 154 (empty -> .)
    VAR             reduce using rule 154 (empty -> .)
    FUNCTION        reduce using rule 154 (empty -> .)
    CONSTRUCTOR     reduce using rule 154 (empty -> .)
    PROCEDURE       reduce using rule 154 (empty -> .)
    DESTRUCTOR      reduce using rule 154 (empty -> .)

    block                          shift and go to state 386
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 370

    (75) procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON block SEMICOLON .

    PROCEDURE       reduce using rule 75 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON block SEMICOLON .)
    USES            reduce using rule 75 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON block SEMICOLON .)
    CONST           reduce using rule 75 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON block SEMICOLON .)
    TYPE            reduce using rule 75 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON block SEMICOLON .)
    VAR             reduce using rule 75 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 75 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON block SEMICOLON .)
    CONSTRUCTOR     reduce using rule 75 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON block SEMICOLON .)
    DESTRUCTOR      reduce using rule 75 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON block SEMICOLON .)
    BEGIN           reduce using rule 75 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON block SEMICOLON .)


state 371

    (78) procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON .

    PROCEDURE       reduce using rule 78 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON .)
    USES            reduce using rule 78 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON .)
    CONST           reduce using rule 78 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON .)
    TYPE            reduce using rule 78 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON .)
    VAR             reduce using rule 78 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON .)
    FUNCTION        reduce using rule 78 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON .)
    CONSTRUCTOR     reduce using rule 78 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON .)
    DESTRUCTOR      reduce using rule 78 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON .)
    BEGIN           reduce using rule 78 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON .)


state 372

    (164) write_argument -> expression COLON expression COLON expression .
    (139) expression -> expression . PLUS expression
    (140) expression -> expression . MINUS expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (173) expression -> expression . AND expression
    (174) expression -> expression . OR expression

    RPAREN          reduce using rule 164 (write_argument -> expression COLON expression COLON expression .)
    COMMA           reduce using rule 164 (write_argument -> expression COLON expression COLON expression .)
    PLUS            shift and go to state 178
    MINUS           shift and go to state 179
    TIMES           shift and go to state 180
    DIVIDE          shift and go to state 181
    MOD             shift and go to state 182
    AND             shift and go to state 183
    OR              shift and go to state 184


state 373

    (106) if_statement -> IF expression IN statement THEN statement ELSE . statement
    (94) statement -> . if_statement
    (95) statement -> . assignment_statement
    (96) statement -> . while_statement
    (97) statement -> . procedure_call
    (98) statement -> . compound_statement
    (99) statement -> . for_statement
    (100) statement -> . case_statement
    (101) statement -> . with_statement
    (102) statement -> . empty
    (155) statement -> . READLN
    (156) statement -> . READLN LPAREN variable RPAREN
    (157) statement -> . READLN LBRACKET variable RBRACKET
    (158) statement -> . WRITE LPAREN expression_list RPAREN
    (159) statement -> . WRITELN LPAREN write_arguments RPAREN
    (165) statement -> . USES ID SEMICOLON
    (104) if_statement -> . IF expression THEN statement ELSE statement
    (105) if_statement -> . IF expression THEN statement
    (106) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (107) if_statement -> . IF expression IN statement THEN statement
    (110) assignment_statement -> . variable COLON_EQUAL expression
    (111) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL
    (112) assignment_statement -> . ID COLON_EQUAL expression
    (119) while_statement -> . WHILE expression DO statement
    (120) procedure_call -> . ID LPAREN expression_list RPAREN
    (121) procedure_call -> . ID
    (90) compound_statement -> . BEGIN statement_list END
    (108) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (109) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (70) case_statement -> . CASE expression OF case_list END SEMICOLON
    (71) case_statement -> . CASE expression OF case_list END
    (103) with_statement -> . WITH variable DO statement
    (154) empty -> .
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    READLN          shift and go to state 58
    WRITE           shift and go to state 60
    WRITELN         shift and go to state 61
    USES            shift and go to state 62
    IF              shift and go to state 64
    ID              shift and go to state 63
    WHILE           shift and go to state 65
    BEGIN           shift and go to state 28
    FOR             shift and go to state 66
    CASE            shift and go to state 67
    WITH            shift and go to state 68
    ELSE            reduce using rule 154 (empty -> .)
    SEMICOLON       reduce using rule 154 (empty -> .)
    END             reduce using rule 154 (empty -> .)
    THEN            reduce using rule 154 (empty -> .)

    statement                      shift and go to state 387
    if_statement                   shift and go to state 49
    assignment_statement           shift and go to state 50
    while_statement                shift and go to state 51
    procedure_call                 shift and go to state 52
    compound_statement             shift and go to state 53
    for_statement                  shift and go to state 54
    case_statement                 shift and go to state 55
    with_statement                 shift and go to state 56
    empty                          shift and go to state 57
    variable                       shift and go to state 59

state 374

    (108) for_statement -> FOR ID COLON_EQUAL expression TO expression DO . statement
    (94) statement -> . if_statement
    (95) statement -> . assignment_statement
    (96) statement -> . while_statement
    (97) statement -> . procedure_call
    (98) statement -> . compound_statement
    (99) statement -> . for_statement
    (100) statement -> . case_statement
    (101) statement -> . with_statement
    (102) statement -> . empty
    (155) statement -> . READLN
    (156) statement -> . READLN LPAREN variable RPAREN
    (157) statement -> . READLN LBRACKET variable RBRACKET
    (158) statement -> . WRITE LPAREN expression_list RPAREN
    (159) statement -> . WRITELN LPAREN write_arguments RPAREN
    (165) statement -> . USES ID SEMICOLON
    (104) if_statement -> . IF expression THEN statement ELSE statement
    (105) if_statement -> . IF expression THEN statement
    (106) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (107) if_statement -> . IF expression IN statement THEN statement
    (110) assignment_statement -> . variable COLON_EQUAL expression
    (111) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL
    (112) assignment_statement -> . ID COLON_EQUAL expression
    (119) while_statement -> . WHILE expression DO statement
    (120) procedure_call -> . ID LPAREN expression_list RPAREN
    (121) procedure_call -> . ID
    (90) compound_statement -> . BEGIN statement_list END
    (108) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (109) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (70) case_statement -> . CASE expression OF case_list END SEMICOLON
    (71) case_statement -> . CASE expression OF case_list END
    (103) with_statement -> . WITH variable DO statement
    (154) empty -> .
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    READLN          shift and go to state 58
    WRITE           shift and go to state 60
    WRITELN         shift and go to state 61
    USES            shift and go to state 62
    IF              shift and go to state 64
    ID              shift and go to state 63
    WHILE           shift and go to state 65
    BEGIN           shift and go to state 28
    FOR             shift and go to state 66
    CASE            shift and go to state 67
    WITH            shift and go to state 68
    ELSE            reduce using rule 154 (empty -> .)
    SEMICOLON       reduce using rule 154 (empty -> .)
    END             reduce using rule 154 (empty -> .)
    THEN            reduce using rule 154 (empty -> .)

    statement                      shift and go to state 388
    if_statement                   shift and go to state 49
    assignment_statement           shift and go to state 50
    while_statement                shift and go to state 51
    procedure_call                 shift and go to state 52
    compound_statement             shift and go to state 53
    for_statement                  shift and go to state 54
    case_statement                 shift and go to state 55
    with_statement                 shift and go to state 56
    empty                          shift and go to state 57
    variable                       shift and go to state 59

state 375

    (109) for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO . statement
    (94) statement -> . if_statement
    (95) statement -> . assignment_statement
    (96) statement -> . while_statement
    (97) statement -> . procedure_call
    (98) statement -> . compound_statement
    (99) statement -> . for_statement
    (100) statement -> . case_statement
    (101) statement -> . with_statement
    (102) statement -> . empty
    (155) statement -> . READLN
    (156) statement -> . READLN LPAREN variable RPAREN
    (157) statement -> . READLN LBRACKET variable RBRACKET
    (158) statement -> . WRITE LPAREN expression_list RPAREN
    (159) statement -> . WRITELN LPAREN write_arguments RPAREN
    (165) statement -> . USES ID SEMICOLON
    (104) if_statement -> . IF expression THEN statement ELSE statement
    (105) if_statement -> . IF expression THEN statement
    (106) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (107) if_statement -> . IF expression IN statement THEN statement
    (110) assignment_statement -> . variable COLON_EQUAL expression
    (111) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL
    (112) assignment_statement -> . ID COLON_EQUAL expression
    (119) while_statement -> . WHILE expression DO statement
    (120) procedure_call -> . ID LPAREN expression_list RPAREN
    (121) procedure_call -> . ID
    (90) compound_statement -> . BEGIN statement_list END
    (108) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (109) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (70) case_statement -> . CASE expression OF case_list END SEMICOLON
    (71) case_statement -> . CASE expression OF case_list END
    (103) with_statement -> . WITH variable DO statement
    (154) empty -> .
    (113) variable -> . ID
    (114) variable -> . variable LBRACKET expression RBRACKET
    (115) variable -> . variable DOT ID
    (116) variable -> . ID LBRACKET index_list RBRACKET

    READLN          shift and go to state 58
    WRITE           shift and go to state 60
    WRITELN         shift and go to state 61
    USES            shift and go to state 62
    IF              shift and go to state 64
    ID              shift and go to state 63
    WHILE           shift and go to state 65
    BEGIN           shift and go to state 28
    FOR             shift and go to state 66
    CASE            shift and go to state 67
    WITH            shift and go to state 68
    ELSE            reduce using rule 154 (empty -> .)
    SEMICOLON       reduce using rule 154 (empty -> .)
    END             reduce using rule 154 (empty -> .)
    THEN            reduce using rule 154 (empty -> .)

    statement                      shift and go to state 389
    if_statement                   shift and go to state 49
    assignment_statement           shift and go to state 50
    while_statement                shift and go to state 51
    procedure_call                 shift and go to state 52
    compound_statement             shift and go to state 53
    for_statement                  shift and go to state 54
    case_statement                 shift and go to state 55
    with_statement                 shift and go to state 56
    empty                          shift and go to state 57
    variable                       shift and go to state 59

state 376

    (61) case_element -> NUMBER COLON LPAREN field_list . RPAREN
    (48) field_list -> field_list . field
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . id_list assignment_statement
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 390
    VAR             shift and go to state 150
    ID              shift and go to state 33

    field                          shift and go to state 230
    id_list                        shift and go to state 149

state 377

    (30) type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .

    SEMICOLON       reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    RPAREN          reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    VAR             reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    ID              reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    CASE            reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    END             reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    CONSTRUCTOR     reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    PROCEDURE       reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    FUNCTION        reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    DESTRUCTOR      reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    OF              reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)


state 378

    (57) case_part -> CASE ID COLON type_specifier . OF case_list SEMICOLON

    OF              shift and go to state 391


state 379

    (66) method -> CONSTRUCTOR ID LPAREN field_list . RPAREN SEMICOLON
    (48) field_list -> field_list . field
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . id_list assignment_statement
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 392
    VAR             shift and go to state 150
    ID              shift and go to state 33

    field                          shift and go to state 230
    id_list                        shift and go to state 149

state 380

    (67) method -> PROCEDURE ID LPAREN field_list . RPAREN SEMICOLON
    (48) field_list -> field_list . field
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . id_list assignment_statement
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 393
    VAR             shift and go to state 150
    ID              shift and go to state 33

    field                          shift and go to state 230
    id_list                        shift and go to state 149

state 381

    (68) method -> FUNCTION ID LPAREN field_list . RPAREN COLON type_specifier SEMICOLON
    (48) field_list -> field_list . field
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . id_list assignment_statement
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 394
    VAR             shift and go to state 150
    ID              shift and go to state 33

    field                          shift and go to state 230
    id_list                        shift and go to state 149

state 382

    (81) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 395


state 383

    (82) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD . SEMICOLON

    SEMICOLON       shift and go to state 396


state 384

    (14) method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier . SEMICOLON block

    SEMICOLON       shift and go to state 397


state 385

    (12) method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .

    USES            reduce using rule 12 (method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    CONST           reduce using rule 12 (method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    TYPE            reduce using rule 12 (method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    VAR             reduce using rule 12 (method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    FUNCTION        reduce using rule 12 (method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    CONSTRUCTOR     reduce using rule 12 (method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    PROCEDURE       reduce using rule 12 (method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    DESTRUCTOR      reduce using rule 12 (method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    BEGIN           reduce using rule 12 (method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)


state 386

    (13) method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .

    USES            reduce using rule 13 (method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    CONST           reduce using rule 13 (method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    TYPE            reduce using rule 13 (method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    VAR             reduce using rule 13 (method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    FUNCTION        reduce using rule 13 (method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    CONSTRUCTOR     reduce using rule 13 (method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    PROCEDURE       reduce using rule 13 (method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    DESTRUCTOR      reduce using rule 13 (method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    BEGIN           reduce using rule 13 (method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)


state 387

    (106) if_statement -> IF expression IN statement THEN statement ELSE statement .

    SEMICOLON       reduce using rule 106 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    END             reduce using rule 106 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    ELSE            reduce using rule 106 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    THEN            reduce using rule 106 (if_statement -> IF expression IN statement THEN statement ELSE statement .)


state 388

    (108) for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement .

    SEMICOLON       reduce using rule 108 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement .)
    END             reduce using rule 108 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement .)
    ELSE            reduce using rule 108 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement .)
    THEN            reduce using rule 108 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement .)


state 389

    (109) for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement .

    SEMICOLON       reduce using rule 109 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement .)
    END             reduce using rule 109 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement .)
    ELSE            reduce using rule 109 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement .)
    THEN            reduce using rule 109 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement .)


state 390

    (61) case_element -> NUMBER COLON LPAREN field_list RPAREN .

    END             reduce using rule 61 (case_element -> NUMBER COLON LPAREN field_list RPAREN .)
    SEMICOLON       reduce using rule 61 (case_element -> NUMBER COLON LPAREN field_list RPAREN .)


state 391

    (57) case_part -> CASE ID COLON type_specifier OF . case_list SEMICOLON
    (59) case_list -> . case_list SEMICOLON case_element
    (60) case_list -> . case_element
    (61) case_element -> . NUMBER COLON LPAREN field_list RPAREN
    (62) case_element -> . NUMBER COLON field_list

    NUMBER          shift and go to state 276

    case_list                      shift and go to state 398
    case_element                   shift and go to state 275

state 392

    (66) method -> CONSTRUCTOR ID LPAREN field_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 399


state 393

    (67) method -> PROCEDURE ID LPAREN field_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 400


state 394

    (68) method -> FUNCTION ID LPAREN field_list RPAREN . COLON type_specifier SEMICOLON

    COLON           shift and go to state 401


state 395

    (81) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .

    USES            reduce using rule 81 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    CONST           reduce using rule 81 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    TYPE            reduce using rule 81 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    VAR             reduce using rule 81 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 81 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    CONSTRUCTOR     reduce using rule 81 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    PROCEDURE       reduce using rule 81 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    DESTRUCTOR      reduce using rule 81 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    BEGIN           reduce using rule 81 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)


state 396

    (82) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .

    USES            reduce using rule 82 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    CONST           reduce using rule 82 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    TYPE            reduce using rule 82 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    VAR             reduce using rule 82 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    FUNCTION        reduce using rule 82 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    CONSTRUCTOR     reduce using rule 82 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    PROCEDURE       reduce using rule 82 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    DESTRUCTOR      reduce using rule 82 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    BEGIN           reduce using rule 82 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)


state 397

    (14) method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON . block
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (154) empty -> .

    BEGIN           reduce using rule 154 (empty -> .)
    USES            reduce using rule 154 (empty -> .)
    CONST           reduce using rule 154 (empty -> .)
    TYPE            reduce using rule 154 (empty -> .)
    VAR             reduce using rule 154 (empty -> .)
    FUNCTION        reduce using rule 154 (empty -> .)
    CONSTRUCTOR     reduce using rule 154 (empty -> .)
    PROCEDURE       reduce using rule 154 (empty -> .)
    DESTRUCTOR      reduce using rule 154 (empty -> .)

    block                          shift and go to state 402
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 398

    (57) case_part -> CASE ID COLON type_specifier OF case_list . SEMICOLON
    (59) case_list -> case_list . SEMICOLON case_element

    SEMICOLON       shift and go to state 403


state 399

    (66) method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .

    END             reduce using rule 66 (method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .)
    CONSTRUCTOR     reduce using rule 66 (method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .)
    PROCEDURE       reduce using rule 66 (method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 66 (method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .)
    DESTRUCTOR      reduce using rule 66 (method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .)


state 400

    (67) method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .

    END             reduce using rule 67 (method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    CONSTRUCTOR     reduce using rule 67 (method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    PROCEDURE       reduce using rule 67 (method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 67 (method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    DESTRUCTOR      reduce using rule 67 (method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)


state 401

    (68) method -> FUNCTION ID LPAREN field_list RPAREN COLON . type_specifier SEMICOLON
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (72) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 124
    FILE            shift and go to state 126
    SET             shift and go to state 127
    RECORD          shift and go to state 128
    OBJECT          shift and go to state 129
    LPAREN          shift and go to state 130
    BOOLEAN_LITERAL shift and go to state 131
    INTEGER         shift and go to state 132
    BYTE            shift and go to state 133
    CHAR            shift and go to state 134
    STRING          shift and go to state 135
    ID              shift and go to state 122
    LONGINT         shift and go to state 137
    NUMBER          shift and go to state 136

    type_specifier                 shift and go to state 404
    subrange                       shift and go to state 125

state 402

    (14) method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block .

    USES            reduce using rule 14 (method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block .)
    CONST           reduce using rule 14 (method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block .)
    TYPE            reduce using rule 14 (method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block .)
    VAR             reduce using rule 14 (method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block .)
    FUNCTION        reduce using rule 14 (method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block .)
    CONSTRUCTOR     reduce using rule 14 (method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block .)
    PROCEDURE       reduce using rule 14 (method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block .)
    DESTRUCTOR      reduce using rule 14 (method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block .)
    BEGIN           reduce using rule 14 (method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block .)


state 403

    (57) case_part -> CASE ID COLON type_specifier OF case_list SEMICOLON .
    (59) case_list -> case_list SEMICOLON . case_element
    (61) case_element -> . NUMBER COLON LPAREN field_list RPAREN
    (62) case_element -> . NUMBER COLON field_list

    END             reduce using rule 57 (case_part -> CASE ID COLON type_specifier OF case_list SEMICOLON .)
    NUMBER          shift and go to state 276

    case_element                   shift and go to state 355

state 404

    (68) method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier . SEMICOLON

    SEMICOLON       shift and go to state 405


state 405

    (68) method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .

    END             reduce using rule 68 (method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .)
    CONSTRUCTOR     reduce using rule 68 (method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 68 (method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 68 (method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .)
    DESTRUCTOR      reduce using rule 68 (method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for USES in state 5 resolved as shift
WARNING: shift/reduce conflict for CONST in state 5 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 5 resolved as shift
WARNING: shift/reduce conflict for VAR in state 5 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 5 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 5 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 5 resolved as shift
WARNING: shift/reduce conflict for DESTRUCTOR in state 5 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 14 resolved as shift
WARNING: shift/reduce conflict for COLON_EQUAL in state 63 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 63 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 80 resolved as shift
WARNING: shift/reduce conflict for VAR in state 80 resolved as shift
WARNING: shift/reduce conflict for ID in state 80 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 83 resolved as shift
WARNING: shift/reduce conflict for VAR in state 83 resolved as shift
WARNING: shift/reduce conflict for ID in state 83 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 104 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 105 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 105 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 111 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 116 resolved as shift
WARNING: shift/reduce conflict for VAR in state 128 resolved as shift
WARNING: shift/reduce conflict for ID in state 128 resolved as shift
WARNING: shift/reduce conflict for VAR in state 129 resolved as shift
WARNING: shift/reduce conflict for ID in state 129 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 192 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 192 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 192 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 192 resolved as shift
WARNING: shift/reduce conflict for MOD in state 192 resolved as shift
WARNING: shift/reduce conflict for AND in state 192 resolved as shift
WARNING: shift/reduce conflict for OR in state 192 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 219 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 219 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 219 resolved as shift
WARNING: shift/reduce conflict for DESTRUCTOR in state 219 resolved as shift
WARNING: shift/reduce conflict for COLON_EQUAL in state 235 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 235 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 258 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 260 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 260 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 260 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 260 resolved as shift
WARNING: shift/reduce conflict for MOD in state 260 resolved as shift
WARNING: shift/reduce conflict for AND in state 260 resolved as shift
WARNING: shift/reduce conflict for OR in state 260 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 261 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 261 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 261 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 261 resolved as shift
WARNING: shift/reduce conflict for MOD in state 261 resolved as shift
WARNING: shift/reduce conflict for AND in state 261 resolved as shift
WARNING: shift/reduce conflict for OR in state 261 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 262 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 262 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 262 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 262 resolved as shift
WARNING: shift/reduce conflict for MOD in state 262 resolved as shift
WARNING: shift/reduce conflict for AND in state 262 resolved as shift
WARNING: shift/reduce conflict for OR in state 262 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 263 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 263 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 263 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 263 resolved as shift
WARNING: shift/reduce conflict for MOD in state 263 resolved as shift
WARNING: shift/reduce conflict for AND in state 263 resolved as shift
WARNING: shift/reduce conflict for OR in state 263 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 264 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 264 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 264 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 264 resolved as shift
WARNING: shift/reduce conflict for MOD in state 264 resolved as shift
WARNING: shift/reduce conflict for AND in state 264 resolved as shift
WARNING: shift/reduce conflict for OR in state 264 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 265 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 265 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 265 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 265 resolved as shift
WARNING: shift/reduce conflict for MOD in state 265 resolved as shift
WARNING: shift/reduce conflict for AND in state 265 resolved as shift
WARNING: shift/reduce conflict for OR in state 265 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 266 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 266 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 266 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 266 resolved as shift
WARNING: shift/reduce conflict for MOD in state 266 resolved as shift
WARNING: shift/reduce conflict for AND in state 266 resolved as shift
WARNING: shift/reduce conflict for OR in state 266 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 303 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 321 resolved as shift
WARNING: shift/reduce conflict for VAR in state 323 resolved as shift
WARNING: shift/reduce conflict for ID in state 323 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 341 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 351 resolved as shift
WARNING: shift/reduce conflict for VAR in state 356 resolved as shift
WARNING: shift/reduce conflict for ID in state 356 resolved as shift
WARNING: shift/reduce conflict for VAR in state 361 resolved as shift
WARNING: shift/reduce conflict for ID in state 361 resolved as shift
WARNING: shift/reduce conflict for VAR in state 362 resolved as shift
WARNING: shift/reduce conflict for ID in state 362 resolved as shift
WARNING: shift/reduce conflict for VAR in state 363 resolved as shift
WARNING: shift/reduce conflict for ID in state 363 resolved as shift
