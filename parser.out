Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    FALSE
    GOTO
    IN
    LABEL
    LBLOCK
    NIL
    PACKED
    RBLOCK
    READLINE
    REPEAT
    SUBRANGE
    TRUE
    UNTIL
    WITH

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON declaration_sections block DOT
Rule 2     declaration_sections -> declaration_sections declaration_section
Rule 3     declaration_sections -> empty
Rule 4     declaration_section -> uses_opt
Rule 5     declaration_section -> constant_declaration
Rule 6     declaration_section -> type_declaration
Rule 7     declaration_section -> var_declaration
Rule 8     declaration_section -> procedure_declarations
Rule 9     declaration_section -> function_declaration
Rule 10    uses_opt -> USES id_list SEMICOLON
Rule 11    id_list -> ID
Rule 12    id_list -> id_list COMMA ID
Rule 13    var_declaration -> VAR declaration_list
Rule 14    declaration_list -> declaration
Rule 15    declaration_list -> declaration_list declaration
Rule 16    declaration -> id_list COLON type_specifier SEMICOLON
Rule 17    block -> declaration_sections compound_statement
Rule 18    type_declaration -> TYPE type_list
Rule 19    type_list -> type_definition
Rule 20    type_list -> type_list type_definition
Rule 21    type_definition -> ID EQUAL type_specifier SEMICOLON
Rule 22    type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier
Rule 23    type_specifier -> subrange
Rule 24    type_specifier -> FILE OF type_specifier
Rule 25    type_specifier -> SET OF type_specifier
Rule 26    type_specifier -> RECORD field_list case_part END
Rule 27    type_specifier -> OBJECT field_list method_list END
Rule 28    type_specifier -> LPAREN id_list RPAREN
Rule 29    type_specifier -> BOOLEAN_LITERAL
Rule 30    type_specifier -> INTEGER
Rule 31    type_specifier -> BYTE
Rule 32    type_specifier -> CHAR
Rule 33    type_specifier -> STRING
Rule 34    type_specifier -> STRING LBRACKET NUMBER RBRACKET
Rule 35    type_specifier -> ID
Rule 36    type_expression -> type_expression COMMA subrange
Rule 37    type_expression -> subrange
Rule 38    subrange -> NUMBER DOTDOT NUMBER
Rule 39    field_list -> field_list field
Rule 40    field_list -> field
Rule 41    field_list -> empty
Rule 42    field -> id_list COLON type_specifier
Rule 43    field -> id_list COLON type_specifier SEMICOLON
Rule 44    field -> VAR id_list COLON type_specifier
Rule 45    field -> VAR id_list COLON type_specifier SEMICOLON
Rule 46    case_part -> CASE ID COLON type_specifier OF case_list SEMICOLON
Rule 47    case_part -> empty
Rule 48    case_list -> case_list SEMICOLON case_element
Rule 49    case_list -> case_element
Rule 50    case_element -> NUMBER COLON LPAREN field_list RPAREN
Rule 51    method_list -> method_list method
Rule 52    method_list -> method
Rule 53    method_list -> empty
Rule 54    method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON
Rule 55    method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON
Rule 56    method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON
Rule 57    method -> DESTRUCTOR ID SEMICOLON
Rule 58    type_specifier -> LONGINT
Rule 59    procedure_declarations -> procedure_declaration
Rule 60    procedure_declarations -> procedure_declarations procedure_declaration
Rule 61    procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON
Rule 62    procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON
Rule 63    procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON
Rule 64    procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON
Rule 65    procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON
Rule 66    procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON
Rule 67    function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
Rule 68    function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
Rule 69    function_call -> ID LPAREN expression_list RPAREN
Rule 70    factor -> function_call
Rule 71    parameter_list -> parameter
Rule 72    parameter_list -> parameter_list SEMICOLON parameter
Rule 73    parameter_list -> empty
Rule 74    parameter -> id_list COLON type_specifier
Rule 75    parameter -> VAR id_list COLON type_specifier
Rule 76    compound_statement -> BEGIN statement_list END
Rule 77    compound_statement -> BEGIN statement_list END SEMICOLON
Rule 78    statement_list -> statement statement_list_tail
Rule 79    statement_list_tail -> SEMICOLON statement statement_list_tail
Rule 80    statement_list_tail -> empty
Rule 81    statement -> if_statement
Rule 82    statement -> assignment_statement
Rule 83    statement -> while_statement
Rule 84    statement -> procedure_call
Rule 85    statement -> compound_statement
Rule 86    statement -> for_statement
Rule 87    statement -> empty
Rule 88    if_statement -> IF expression THEN statement ELSE statement
Rule 89    if_statement -> IF expression THEN statement
Rule 90    for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement
Rule 91    for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement
Rule 92    assignment_statement -> variable COLON_EQUAL expression
Rule 93    variable -> ID
Rule 94    variable -> ID LBRACKET index_list RBRACKET
Rule 95    index_list -> expression
Rule 96    index_list -> index_list COMMA expression
Rule 97    while_statement -> WHILE expression DO statement
Rule 98    procedure_call -> ID LPAREN expression_list RPAREN
Rule 99    procedure_call -> ID
Rule 100   expression_list -> expression expression_list_tail
Rule 101   expression_list_tail -> COMMA expression expression_list_tail
Rule 102   expression_list_tail -> empty
Rule 103   expression_list -> empty
Rule 104   expression -> simple_expression relop simple_expression
Rule 105   expression -> simple_expression
Rule 106   simple_expression -> term simple_expression_tail
Rule 107   simple_expression_tail -> addop term
Rule 108   simple_expression_tail -> empty
Rule 109   addop -> PLUS
Rule 110   addop -> MINUS
Rule 111   term -> factor term_tail
Rule 112   term_tail -> mulop factor
Rule 113   term_tail -> empty
Rule 114   mulop -> TIMES
Rule 115   mulop -> DIVIDE
Rule 116   mulop -> DIV
Rule 117   expression -> expression PLUS expression
Rule 118   expression -> expression MINUS expression
Rule 119   expression -> expression TIMES expression
Rule 120   expression -> expression DIVIDE expression
Rule 121   expression -> expression MOD expression
Rule 122   factor -> LPAREN expression RPAREN
Rule 123   factor -> variable
Rule 124   factor -> NUMBER
Rule 125   factor -> STRING_LITERAL
Rule 126   relop -> LESS
Rule 127   relop -> LESS_EQUAL
Rule 128   relop -> GREAT
Rule 129   relop -> GREAT_EQUAL
Rule 130   relop -> EQUAL
Rule 131   relop -> DIFFERENT
Rule 132   empty -> <empty>
Rule 133   statement -> READLN
Rule 134   statement -> READLN LPAREN variable RPAREN
Rule 135   statement -> READLN LBRACKET variable RBRACKET
Rule 136   statement -> WRITELN LPAREN expression_list RPAREN
Rule 137   statement -> WRITE LPAREN expression_list RPAREN
Rule 138   statement -> USES ID SEMICOLON
Rule 139   constant_declaration -> CONST constant_list
Rule 140   constant_list -> constant
Rule 141   constant_list -> constant_list constant
Rule 142   constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON
Rule 143   constant -> ID EQUAL NUMBER SEMICOLON
Rule 144   constant -> ID EQUAL STRING_LITERAL SEMICOLON
Rule 145   constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON
Rule 146   expression -> expression AND expression
Rule 147   expression -> expression OR expression
Rule 148   expression -> NOT expression

Terminals, with rules where they appear

AND                  : 146
ARRAY                : 22
BEGIN                : 76 77
BOOLEAN_LITERAL      : 29 145
BYTE                 : 31
CASE                 : 46
CHAR                 : 32
CHARACTER_LITERAL    : 142
COLON                : 16 42 43 44 45 46 50 56 67 68 74 75
COLON_EQUAL          : 90 91 92
COMMA                : 12 36 96 101
CONST                : 139
CONSTRUCTOR          : 54
DESTRUCTOR           : 57
DIFFERENT            : 131
DIV                  : 116
DIVIDE               : 115 120
DO                   : 90 91 97
DOT                  : 1
DOTDOT               : 38
DOWNTO               : 91
ELSE                 : 88
END                  : 26 27 76 77
EQUAL                : 21 130 142 143 144 145
FALSE                : 
FILE                 : 24
FOR                  : 90 91
FORWARD              : 64 65 66 68
FUNCTION             : 56 67 68
GOTO                 : 
GREAT                : 128
GREAT_EQUAL          : 129
ID                   : 1 11 12 21 35 46 54 55 56 57 61 62 63 64 65 66 67 68 69 90 91 93 94 98 99 138 142 143 144 145
IF                   : 88 89
IN                   : 
INTEGER              : 30
LABEL                : 
LBLOCK               : 
LBRACKET             : 22 34 94 135
LESS                 : 126
LESS_EQUAL           : 127
LONGINT              : 58
LPAREN               : 28 50 54 55 56 61 62 64 65 67 68 69 98 122 134 136 137
MINUS                : 110 118
MOD                  : 121
NIL                  : 
NOT                  : 148
NUMBER               : 34 38 38 50 124 143
OBJECT               : 27
OF                   : 22 24 25 46
OR                   : 147
PACKED               : 
PLUS                 : 109 117
PROCEDURE            : 55 61 62 63 64 65 66
PROGRAM              : 1
RBLOCK               : 
RBRACKET             : 22 34 94 135
READLINE             : 
READLN               : 133 134 135
RECORD               : 26
REPEAT               : 
RPAREN               : 28 50 54 55 56 61 62 64 65 67 68 69 98 122 134 136 137
SEMICOLON            : 1 10 16 21 43 45 46 48 54 55 56 57 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 72 77 79 138 142 143 144 145
SET                  : 25
STRING               : 33 34
STRING_LITERAL       : 125 144
SUBRANGE             : 
THEN                 : 88 89
TIMES                : 114 119
TO                   : 90
TRUE                 : 
TYPE                 : 18
UNTIL                : 
USES                 : 10 138
VAR                  : 13 44 45 75
WHILE                : 97
WITH                 : 
WRITE                : 137
WRITELN              : 136
error                : 

Nonterminals, with rules where they appear

addop                : 107
assignment_statement : 82
block                : 1 62 63 67
case_element         : 48 49
case_list            : 46 48
case_part            : 26
compound_statement   : 17 85
constant             : 140 141
constant_declaration : 5
constant_list        : 139 141
declaration          : 14 15
declaration_list     : 13 15
declaration_section  : 2
declaration_sections : 1 2 17
empty                : 3 41 47 53 73 80 87 102 103 108 113
expression           : 88 89 90 90 91 91 92 95 96 97 100 101 117 117 118 118 119 119 120 120 121 121 122 146 146 147 147 148
expression_list      : 69 98 136 137
expression_list_tail : 100 101
factor               : 111 112
field                : 39 40
field_list           : 26 27 39 50 54 55 56 61 64
for_statement        : 86
function_call        : 70
function_declaration : 9
id_list              : 10 12 16 28 42 43 44 45 74 75
if_statement         : 81
index_list           : 94 96
method               : 51 52
method_list          : 27 51
mulop                : 112
parameter            : 71 72
parameter_list       : 67 68 72
procedure_call       : 84
procedure_declaration : 59 60
procedure_declarations : 8 60
program              : 0
relop                : 104
simple_expression    : 104 104 105
simple_expression_tail : 106
statement            : 78 79 88 88 89 90 91 97
statement_list       : 76 77
statement_list_tail  : 78 79
subrange             : 23 36 37
term                 : 106 107
term_tail            : 111
type_declaration     : 6
type_definition      : 19 20
type_expression      : 22 36
type_list            : 18 20
type_specifier       : 16 21 22 24 25 42 43 44 45 46 56 67 68 74 75
uses_opt             : 4
var_declaration      : 7
variable             : 92 123 134 135
while_statement      : 83

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON declaration_sections block DOT

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON declaration_sections block DOT

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON declaration_sections block DOT

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . declaration_sections block DOT
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (132) empty -> .

    USES            reduce using rule 132 (empty -> .)
    CONST           reduce using rule 132 (empty -> .)
    TYPE            reduce using rule 132 (empty -> .)
    VAR             reduce using rule 132 (empty -> .)
    FUNCTION        reduce using rule 132 (empty -> .)
    PROCEDURE       reduce using rule 132 (empty -> .)
    BEGIN           reduce using rule 132 (empty -> .)

    declaration_sections           shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) program -> PROGRAM ID SEMICOLON declaration_sections . block DOT
    (2) declaration_sections -> declaration_sections . declaration_section
    (17) block -> . declaration_sections compound_statement
    (4) declaration_section -> . uses_opt
    (5) declaration_section -> . constant_declaration
    (6) declaration_section -> . type_declaration
    (7) declaration_section -> . var_declaration
    (8) declaration_section -> . procedure_declarations
    (9) declaration_section -> . function_declaration
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (10) uses_opt -> . USES id_list SEMICOLON
    (139) constant_declaration -> . CONST constant_list
    (18) type_declaration -> . TYPE type_list
    (13) var_declaration -> . VAR declaration_list
    (59) procedure_declarations -> . procedure_declaration
    (60) procedure_declarations -> . procedure_declarations procedure_declaration
    (67) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (68) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (132) empty -> .
    (61) procedure_declaration -> . PROCEDURE ID LPAREN field_list RPAREN SEMICOLON
    (62) procedure_declaration -> . PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON
    (63) procedure_declaration -> . PROCEDURE ID SEMICOLON block SEMICOLON
    (64) procedure_declaration -> . PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON
    (65) procedure_declaration -> . PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON
    (66) procedure_declaration -> . PROCEDURE ID SEMICOLON FORWARD SEMICOLON

  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for PROCEDURE resolved as shift
    USES            shift and go to state 16
    CONST           shift and go to state 17
    TYPE            shift and go to state 18
    VAR             shift and go to state 19
    FUNCTION        shift and go to state 21
    BEGIN           reduce using rule 132 (empty -> .)
    PROCEDURE       shift and go to state 22

  ! USES            [ reduce using rule 132 (empty -> .) ]
  ! CONST           [ reduce using rule 132 (empty -> .) ]
  ! TYPE            [ reduce using rule 132 (empty -> .) ]
  ! VAR             [ reduce using rule 132 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 132 (empty -> .) ]
  ! PROCEDURE       [ reduce using rule 132 (empty -> .) ]

    declaration_sections           shift and go to state 7
    block                          shift and go to state 8
    declaration_section            shift and go to state 9
    uses_opt                       shift and go to state 10
    constant_declaration           shift and go to state 11
    type_declaration               shift and go to state 12
    var_declaration                shift and go to state 13
    procedure_declarations         shift and go to state 14
    function_declaration           shift and go to state 15
    empty                          shift and go to state 6
    procedure_declaration          shift and go to state 20

state 6

    (3) declaration_sections -> empty .

    USES            reduce using rule 3 (declaration_sections -> empty .)
    CONST           reduce using rule 3 (declaration_sections -> empty .)
    TYPE            reduce using rule 3 (declaration_sections -> empty .)
    VAR             reduce using rule 3 (declaration_sections -> empty .)
    FUNCTION        reduce using rule 3 (declaration_sections -> empty .)
    PROCEDURE       reduce using rule 3 (declaration_sections -> empty .)
    BEGIN           reduce using rule 3 (declaration_sections -> empty .)


state 7

    (17) block -> declaration_sections . compound_statement
    (2) declaration_sections -> declaration_sections . declaration_section
    (76) compound_statement -> . BEGIN statement_list END
    (77) compound_statement -> . BEGIN statement_list END SEMICOLON
    (4) declaration_section -> . uses_opt
    (5) declaration_section -> . constant_declaration
    (6) declaration_section -> . type_declaration
    (7) declaration_section -> . var_declaration
    (8) declaration_section -> . procedure_declarations
    (9) declaration_section -> . function_declaration
    (10) uses_opt -> . USES id_list SEMICOLON
    (139) constant_declaration -> . CONST constant_list
    (18) type_declaration -> . TYPE type_list
    (13) var_declaration -> . VAR declaration_list
    (59) procedure_declarations -> . procedure_declaration
    (60) procedure_declarations -> . procedure_declarations procedure_declaration
    (67) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (68) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (61) procedure_declaration -> . PROCEDURE ID LPAREN field_list RPAREN SEMICOLON
    (62) procedure_declaration -> . PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON
    (63) procedure_declaration -> . PROCEDURE ID SEMICOLON block SEMICOLON
    (64) procedure_declaration -> . PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON
    (65) procedure_declaration -> . PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON
    (66) procedure_declaration -> . PROCEDURE ID SEMICOLON FORWARD SEMICOLON

    BEGIN           shift and go to state 24
    USES            shift and go to state 16
    CONST           shift and go to state 17
    TYPE            shift and go to state 18
    VAR             shift and go to state 19
    FUNCTION        shift and go to state 21
    PROCEDURE       shift and go to state 22

    compound_statement             shift and go to state 23
    declaration_section            shift and go to state 9
    uses_opt                       shift and go to state 10
    constant_declaration           shift and go to state 11
    type_declaration               shift and go to state 12
    var_declaration                shift and go to state 13
    procedure_declarations         shift and go to state 14
    function_declaration           shift and go to state 15
    procedure_declaration          shift and go to state 20

state 8

    (1) program -> PROGRAM ID SEMICOLON declaration_sections block . DOT

    DOT             shift and go to state 25


state 9

    (2) declaration_sections -> declaration_sections declaration_section .

    USES            reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    CONST           reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    TYPE            reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    VAR             reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    FUNCTION        reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    PROCEDURE       reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    BEGIN           reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)


state 10

    (4) declaration_section -> uses_opt .

    USES            reduce using rule 4 (declaration_section -> uses_opt .)
    CONST           reduce using rule 4 (declaration_section -> uses_opt .)
    TYPE            reduce using rule 4 (declaration_section -> uses_opt .)
    VAR             reduce using rule 4 (declaration_section -> uses_opt .)
    FUNCTION        reduce using rule 4 (declaration_section -> uses_opt .)
    PROCEDURE       reduce using rule 4 (declaration_section -> uses_opt .)
    BEGIN           reduce using rule 4 (declaration_section -> uses_opt .)


state 11

    (5) declaration_section -> constant_declaration .

    USES            reduce using rule 5 (declaration_section -> constant_declaration .)
    CONST           reduce using rule 5 (declaration_section -> constant_declaration .)
    TYPE            reduce using rule 5 (declaration_section -> constant_declaration .)
    VAR             reduce using rule 5 (declaration_section -> constant_declaration .)
    FUNCTION        reduce using rule 5 (declaration_section -> constant_declaration .)
    PROCEDURE       reduce using rule 5 (declaration_section -> constant_declaration .)
    BEGIN           reduce using rule 5 (declaration_section -> constant_declaration .)


state 12

    (6) declaration_section -> type_declaration .

    USES            reduce using rule 6 (declaration_section -> type_declaration .)
    CONST           reduce using rule 6 (declaration_section -> type_declaration .)
    TYPE            reduce using rule 6 (declaration_section -> type_declaration .)
    VAR             reduce using rule 6 (declaration_section -> type_declaration .)
    FUNCTION        reduce using rule 6 (declaration_section -> type_declaration .)
    PROCEDURE       reduce using rule 6 (declaration_section -> type_declaration .)
    BEGIN           reduce using rule 6 (declaration_section -> type_declaration .)


state 13

    (7) declaration_section -> var_declaration .

    USES            reduce using rule 7 (declaration_section -> var_declaration .)
    CONST           reduce using rule 7 (declaration_section -> var_declaration .)
    TYPE            reduce using rule 7 (declaration_section -> var_declaration .)
    VAR             reduce using rule 7 (declaration_section -> var_declaration .)
    FUNCTION        reduce using rule 7 (declaration_section -> var_declaration .)
    PROCEDURE       reduce using rule 7 (declaration_section -> var_declaration .)
    BEGIN           reduce using rule 7 (declaration_section -> var_declaration .)


state 14

    (8) declaration_section -> procedure_declarations .
    (60) procedure_declarations -> procedure_declarations . procedure_declaration
    (61) procedure_declaration -> . PROCEDURE ID LPAREN field_list RPAREN SEMICOLON
    (62) procedure_declaration -> . PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON
    (63) procedure_declaration -> . PROCEDURE ID SEMICOLON block SEMICOLON
    (64) procedure_declaration -> . PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON
    (65) procedure_declaration -> . PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON
    (66) procedure_declaration -> . PROCEDURE ID SEMICOLON FORWARD SEMICOLON

  ! shift/reduce conflict for PROCEDURE resolved as shift
    USES            reduce using rule 8 (declaration_section -> procedure_declarations .)
    CONST           reduce using rule 8 (declaration_section -> procedure_declarations .)
    TYPE            reduce using rule 8 (declaration_section -> procedure_declarations .)
    VAR             reduce using rule 8 (declaration_section -> procedure_declarations .)
    FUNCTION        reduce using rule 8 (declaration_section -> procedure_declarations .)
    BEGIN           reduce using rule 8 (declaration_section -> procedure_declarations .)
    PROCEDURE       shift and go to state 22

  ! PROCEDURE       [ reduce using rule 8 (declaration_section -> procedure_declarations .) ]

    procedure_declaration          shift and go to state 26

state 15

    (9) declaration_section -> function_declaration .

    USES            reduce using rule 9 (declaration_section -> function_declaration .)
    CONST           reduce using rule 9 (declaration_section -> function_declaration .)
    TYPE            reduce using rule 9 (declaration_section -> function_declaration .)
    VAR             reduce using rule 9 (declaration_section -> function_declaration .)
    FUNCTION        reduce using rule 9 (declaration_section -> function_declaration .)
    PROCEDURE       reduce using rule 9 (declaration_section -> function_declaration .)
    BEGIN           reduce using rule 9 (declaration_section -> function_declaration .)


state 16

    (10) uses_opt -> USES . id_list SEMICOLON
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    ID              shift and go to state 28

    id_list                        shift and go to state 27

state 17

    (139) constant_declaration -> CONST . constant_list
    (140) constant_list -> . constant
    (141) constant_list -> . constant_list constant
    (142) constant -> . ID EQUAL CHARACTER_LITERAL SEMICOLON
    (143) constant -> . ID EQUAL NUMBER SEMICOLON
    (144) constant -> . ID EQUAL STRING_LITERAL SEMICOLON
    (145) constant -> . ID EQUAL BOOLEAN_LITERAL SEMICOLON

    ID              shift and go to state 31

    constant_list                  shift and go to state 29
    constant                       shift and go to state 30

state 18

    (18) type_declaration -> TYPE . type_list
    (19) type_list -> . type_definition
    (20) type_list -> . type_list type_definition
    (21) type_definition -> . ID EQUAL type_specifier SEMICOLON

    ID              shift and go to state 34

    type_list                      shift and go to state 32
    type_definition                shift and go to state 33

state 19

    (13) var_declaration -> VAR . declaration_list
    (14) declaration_list -> . declaration
    (15) declaration_list -> . declaration_list declaration
    (16) declaration -> . id_list COLON type_specifier SEMICOLON
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    ID              shift and go to state 28

    declaration_list               shift and go to state 35
    declaration                    shift and go to state 36
    id_list                        shift and go to state 37

state 20

    (59) procedure_declarations -> procedure_declaration .

    PROCEDURE       reduce using rule 59 (procedure_declarations -> procedure_declaration .)
    USES            reduce using rule 59 (procedure_declarations -> procedure_declaration .)
    CONST           reduce using rule 59 (procedure_declarations -> procedure_declaration .)
    TYPE            reduce using rule 59 (procedure_declarations -> procedure_declaration .)
    VAR             reduce using rule 59 (procedure_declarations -> procedure_declaration .)
    FUNCTION        reduce using rule 59 (procedure_declarations -> procedure_declaration .)
    BEGIN           reduce using rule 59 (procedure_declarations -> procedure_declaration .)


state 21

    (67) function_declaration -> FUNCTION . ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (68) function_declaration -> FUNCTION . ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON

    ID              shift and go to state 38


state 22

    (61) procedure_declaration -> PROCEDURE . ID LPAREN field_list RPAREN SEMICOLON
    (62) procedure_declaration -> PROCEDURE . ID LPAREN RPAREN SEMICOLON block SEMICOLON
    (63) procedure_declaration -> PROCEDURE . ID SEMICOLON block SEMICOLON
    (64) procedure_declaration -> PROCEDURE . ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON
    (65) procedure_declaration -> PROCEDURE . ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON
    (66) procedure_declaration -> PROCEDURE . ID SEMICOLON FORWARD SEMICOLON

    ID              shift and go to state 39


state 23

    (17) block -> declaration_sections compound_statement .

    DOT             reduce using rule 17 (block -> declaration_sections compound_statement .)
    SEMICOLON       reduce using rule 17 (block -> declaration_sections compound_statement .)


state 24

    (76) compound_statement -> BEGIN . statement_list END
    (77) compound_statement -> BEGIN . statement_list END SEMICOLON
    (78) statement_list -> . statement statement_list_tail
    (81) statement -> . if_statement
    (82) statement -> . assignment_statement
    (83) statement -> . while_statement
    (84) statement -> . procedure_call
    (85) statement -> . compound_statement
    (86) statement -> . for_statement
    (87) statement -> . empty
    (133) statement -> . READLN
    (134) statement -> . READLN LPAREN variable RPAREN
    (135) statement -> . READLN LBRACKET variable RBRACKET
    (136) statement -> . WRITELN LPAREN expression_list RPAREN
    (137) statement -> . WRITE LPAREN expression_list RPAREN
    (138) statement -> . USES ID SEMICOLON
    (88) if_statement -> . IF expression THEN statement ELSE statement
    (89) if_statement -> . IF expression THEN statement
    (92) assignment_statement -> . variable COLON_EQUAL expression
    (97) while_statement -> . WHILE expression DO statement
    (98) procedure_call -> . ID LPAREN expression_list RPAREN
    (99) procedure_call -> . ID
    (76) compound_statement -> . BEGIN statement_list END
    (77) compound_statement -> . BEGIN statement_list END SEMICOLON
    (90) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (91) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (132) empty -> .
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    READLN          shift and go to state 49
    WRITELN         shift and go to state 51
    WRITE           shift and go to state 52
    USES            shift and go to state 53
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    ID              shift and go to state 54
    BEGIN           shift and go to state 24
    FOR             shift and go to state 57
    SEMICOLON       reduce using rule 132 (empty -> .)
    END             reduce using rule 132 (empty -> .)

    statement_list                 shift and go to state 40
    statement                      shift and go to state 41
    if_statement                   shift and go to state 42
    assignment_statement           shift and go to state 43
    while_statement                shift and go to state 44
    procedure_call                 shift and go to state 45
    compound_statement             shift and go to state 46
    for_statement                  shift and go to state 47
    empty                          shift and go to state 48
    variable                       shift and go to state 50

state 25

    (1) program -> PROGRAM ID SEMICOLON declaration_sections block DOT .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON declaration_sections block DOT .)


state 26

    (60) procedure_declarations -> procedure_declarations procedure_declaration .

    PROCEDURE       reduce using rule 60 (procedure_declarations -> procedure_declarations procedure_declaration .)
    USES            reduce using rule 60 (procedure_declarations -> procedure_declarations procedure_declaration .)
    CONST           reduce using rule 60 (procedure_declarations -> procedure_declarations procedure_declaration .)
    TYPE            reduce using rule 60 (procedure_declarations -> procedure_declarations procedure_declaration .)
    VAR             reduce using rule 60 (procedure_declarations -> procedure_declarations procedure_declaration .)
    FUNCTION        reduce using rule 60 (procedure_declarations -> procedure_declarations procedure_declaration .)
    BEGIN           reduce using rule 60 (procedure_declarations -> procedure_declarations procedure_declaration .)


state 27

    (10) uses_opt -> USES id_list . SEMICOLON
    (12) id_list -> id_list . COMMA ID

    SEMICOLON       shift and go to state 58
    COMMA           shift and go to state 59


state 28

    (11) id_list -> ID .

    SEMICOLON       reduce using rule 11 (id_list -> ID .)
    COMMA           reduce using rule 11 (id_list -> ID .)
    COLON           reduce using rule 11 (id_list -> ID .)
    RPAREN          reduce using rule 11 (id_list -> ID .)


state 29

    (139) constant_declaration -> CONST constant_list .
    (141) constant_list -> constant_list . constant
    (142) constant -> . ID EQUAL CHARACTER_LITERAL SEMICOLON
    (143) constant -> . ID EQUAL NUMBER SEMICOLON
    (144) constant -> . ID EQUAL STRING_LITERAL SEMICOLON
    (145) constant -> . ID EQUAL BOOLEAN_LITERAL SEMICOLON

    USES            reduce using rule 139 (constant_declaration -> CONST constant_list .)
    CONST           reduce using rule 139 (constant_declaration -> CONST constant_list .)
    TYPE            reduce using rule 139 (constant_declaration -> CONST constant_list .)
    VAR             reduce using rule 139 (constant_declaration -> CONST constant_list .)
    FUNCTION        reduce using rule 139 (constant_declaration -> CONST constant_list .)
    PROCEDURE       reduce using rule 139 (constant_declaration -> CONST constant_list .)
    BEGIN           reduce using rule 139 (constant_declaration -> CONST constant_list .)
    ID              shift and go to state 31

    constant                       shift and go to state 60

state 30

    (140) constant_list -> constant .

    ID              reduce using rule 140 (constant_list -> constant .)
    USES            reduce using rule 140 (constant_list -> constant .)
    CONST           reduce using rule 140 (constant_list -> constant .)
    TYPE            reduce using rule 140 (constant_list -> constant .)
    VAR             reduce using rule 140 (constant_list -> constant .)
    FUNCTION        reduce using rule 140 (constant_list -> constant .)
    PROCEDURE       reduce using rule 140 (constant_list -> constant .)
    BEGIN           reduce using rule 140 (constant_list -> constant .)


state 31

    (142) constant -> ID . EQUAL CHARACTER_LITERAL SEMICOLON
    (143) constant -> ID . EQUAL NUMBER SEMICOLON
    (144) constant -> ID . EQUAL STRING_LITERAL SEMICOLON
    (145) constant -> ID . EQUAL BOOLEAN_LITERAL SEMICOLON

    EQUAL           shift and go to state 61


state 32

    (18) type_declaration -> TYPE type_list .
    (20) type_list -> type_list . type_definition
    (21) type_definition -> . ID EQUAL type_specifier SEMICOLON

    USES            reduce using rule 18 (type_declaration -> TYPE type_list .)
    CONST           reduce using rule 18 (type_declaration -> TYPE type_list .)
    TYPE            reduce using rule 18 (type_declaration -> TYPE type_list .)
    VAR             reduce using rule 18 (type_declaration -> TYPE type_list .)
    FUNCTION        reduce using rule 18 (type_declaration -> TYPE type_list .)
    PROCEDURE       reduce using rule 18 (type_declaration -> TYPE type_list .)
    BEGIN           reduce using rule 18 (type_declaration -> TYPE type_list .)
    ID              shift and go to state 34

    type_definition                shift and go to state 62

state 33

    (19) type_list -> type_definition .

    ID              reduce using rule 19 (type_list -> type_definition .)
    USES            reduce using rule 19 (type_list -> type_definition .)
    CONST           reduce using rule 19 (type_list -> type_definition .)
    TYPE            reduce using rule 19 (type_list -> type_definition .)
    VAR             reduce using rule 19 (type_list -> type_definition .)
    FUNCTION        reduce using rule 19 (type_list -> type_definition .)
    PROCEDURE       reduce using rule 19 (type_list -> type_definition .)
    BEGIN           reduce using rule 19 (type_list -> type_definition .)


state 34

    (21) type_definition -> ID . EQUAL type_specifier SEMICOLON

    EQUAL           shift and go to state 63


state 35

    (13) var_declaration -> VAR declaration_list .
    (15) declaration_list -> declaration_list . declaration
    (16) declaration -> . id_list COLON type_specifier SEMICOLON
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    USES            reduce using rule 13 (var_declaration -> VAR declaration_list .)
    CONST           reduce using rule 13 (var_declaration -> VAR declaration_list .)
    TYPE            reduce using rule 13 (var_declaration -> VAR declaration_list .)
    VAR             reduce using rule 13 (var_declaration -> VAR declaration_list .)
    FUNCTION        reduce using rule 13 (var_declaration -> VAR declaration_list .)
    PROCEDURE       reduce using rule 13 (var_declaration -> VAR declaration_list .)
    BEGIN           reduce using rule 13 (var_declaration -> VAR declaration_list .)
    ID              shift and go to state 28

    declaration                    shift and go to state 64
    id_list                        shift and go to state 37

state 36

    (14) declaration_list -> declaration .

    ID              reduce using rule 14 (declaration_list -> declaration .)
    USES            reduce using rule 14 (declaration_list -> declaration .)
    CONST           reduce using rule 14 (declaration_list -> declaration .)
    TYPE            reduce using rule 14 (declaration_list -> declaration .)
    VAR             reduce using rule 14 (declaration_list -> declaration .)
    FUNCTION        reduce using rule 14 (declaration_list -> declaration .)
    PROCEDURE       reduce using rule 14 (declaration_list -> declaration .)
    BEGIN           reduce using rule 14 (declaration_list -> declaration .)


state 37

    (16) declaration -> id_list . COLON type_specifier SEMICOLON
    (12) id_list -> id_list . COMMA ID

    COLON           shift and go to state 65
    COMMA           shift and go to state 59


state 38

    (67) function_declaration -> FUNCTION ID . LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (68) function_declaration -> FUNCTION ID . LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON

    LPAREN          shift and go to state 66


state 39

    (61) procedure_declaration -> PROCEDURE ID . LPAREN field_list RPAREN SEMICOLON
    (62) procedure_declaration -> PROCEDURE ID . LPAREN RPAREN SEMICOLON block SEMICOLON
    (63) procedure_declaration -> PROCEDURE ID . SEMICOLON block SEMICOLON
    (64) procedure_declaration -> PROCEDURE ID . LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON
    (65) procedure_declaration -> PROCEDURE ID . LPAREN RPAREN SEMICOLON FORWARD SEMICOLON
    (66) procedure_declaration -> PROCEDURE ID . SEMICOLON FORWARD SEMICOLON

    LPAREN          shift and go to state 67
    SEMICOLON       shift and go to state 68


state 40

    (76) compound_statement -> BEGIN statement_list . END
    (77) compound_statement -> BEGIN statement_list . END SEMICOLON

    END             shift and go to state 69


state 41

    (78) statement_list -> statement . statement_list_tail
    (79) statement_list_tail -> . SEMICOLON statement statement_list_tail
    (80) statement_list_tail -> . empty
    (132) empty -> .

    SEMICOLON       shift and go to state 71
    END             reduce using rule 132 (empty -> .)

    statement_list_tail            shift and go to state 70
    empty                          shift and go to state 72

state 42

    (81) statement -> if_statement .

    SEMICOLON       reduce using rule 81 (statement -> if_statement .)
    END             reduce using rule 81 (statement -> if_statement .)
    ELSE            reduce using rule 81 (statement -> if_statement .)


state 43

    (82) statement -> assignment_statement .

    SEMICOLON       reduce using rule 82 (statement -> assignment_statement .)
    END             reduce using rule 82 (statement -> assignment_statement .)
    ELSE            reduce using rule 82 (statement -> assignment_statement .)


state 44

    (83) statement -> while_statement .

    SEMICOLON       reduce using rule 83 (statement -> while_statement .)
    END             reduce using rule 83 (statement -> while_statement .)
    ELSE            reduce using rule 83 (statement -> while_statement .)


state 45

    (84) statement -> procedure_call .

    SEMICOLON       reduce using rule 84 (statement -> procedure_call .)
    END             reduce using rule 84 (statement -> procedure_call .)
    ELSE            reduce using rule 84 (statement -> procedure_call .)


state 46

    (85) statement -> compound_statement .

    SEMICOLON       reduce using rule 85 (statement -> compound_statement .)
    END             reduce using rule 85 (statement -> compound_statement .)
    ELSE            reduce using rule 85 (statement -> compound_statement .)


state 47

    (86) statement -> for_statement .

    SEMICOLON       reduce using rule 86 (statement -> for_statement .)
    END             reduce using rule 86 (statement -> for_statement .)
    ELSE            reduce using rule 86 (statement -> for_statement .)


state 48

    (87) statement -> empty .

    SEMICOLON       reduce using rule 87 (statement -> empty .)
    END             reduce using rule 87 (statement -> empty .)
    ELSE            reduce using rule 87 (statement -> empty .)


state 49

    (133) statement -> READLN .
    (134) statement -> READLN . LPAREN variable RPAREN
    (135) statement -> READLN . LBRACKET variable RBRACKET

    SEMICOLON       reduce using rule 133 (statement -> READLN .)
    END             reduce using rule 133 (statement -> READLN .)
    ELSE            reduce using rule 133 (statement -> READLN .)
    LPAREN          shift and go to state 73
    LBRACKET        shift and go to state 74


state 50

    (92) assignment_statement -> variable . COLON_EQUAL expression

    COLON_EQUAL     shift and go to state 75


state 51

    (136) statement -> WRITELN . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 76


state 52

    (137) statement -> WRITE . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 77


state 53

    (138) statement -> USES . ID SEMICOLON

    ID              shift and go to state 78


state 54

    (98) procedure_call -> ID . LPAREN expression_list RPAREN
    (99) procedure_call -> ID .
    (93) variable -> ID .
    (94) variable -> ID . LBRACKET index_list RBRACKET

    LPAREN          shift and go to state 79
    SEMICOLON       reduce using rule 99 (procedure_call -> ID .)
    END             reduce using rule 99 (procedure_call -> ID .)
    ELSE            reduce using rule 99 (procedure_call -> ID .)
    COLON_EQUAL     reduce using rule 93 (variable -> ID .)
    LBRACKET        shift and go to state 80


state 55

    (88) if_statement -> IF . expression THEN statement ELSE statement
    (89) if_statement -> IF . expression THEN statement
    (104) expression -> . simple_expression relop simple_expression
    (105) expression -> . simple_expression
    (117) expression -> . expression PLUS expression
    (118) expression -> . expression MINUS expression
    (119) expression -> . expression TIMES expression
    (120) expression -> . expression DIVIDE expression
    (121) expression -> . expression MOD expression
    (146) expression -> . expression AND expression
    (147) expression -> . expression OR expression
    (148) expression -> . NOT expression
    (106) simple_expression -> . term simple_expression_tail
    (111) term -> . factor term_tail
    (70) factor -> . function_call
    (122) factor -> . LPAREN expression RPAREN
    (123) factor -> . variable
    (124) factor -> . NUMBER
    (125) factor -> . STRING_LITERAL
    (69) function_call -> . ID LPAREN expression_list RPAREN
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 81
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 56

    (97) while_statement -> WHILE . expression DO statement
    (104) expression -> . simple_expression relop simple_expression
    (105) expression -> . simple_expression
    (117) expression -> . expression PLUS expression
    (118) expression -> . expression MINUS expression
    (119) expression -> . expression TIMES expression
    (120) expression -> . expression DIVIDE expression
    (121) expression -> . expression MOD expression
    (146) expression -> . expression AND expression
    (147) expression -> . expression OR expression
    (148) expression -> . NOT expression
    (106) simple_expression -> . term simple_expression_tail
    (111) term -> . factor term_tail
    (70) factor -> . function_call
    (122) factor -> . LPAREN expression RPAREN
    (123) factor -> . variable
    (124) factor -> . NUMBER
    (125) factor -> . STRING_LITERAL
    (69) function_call -> . ID LPAREN expression_list RPAREN
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 92
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 57

    (90) for_statement -> FOR . ID COLON_EQUAL expression TO expression DO statement
    (91) for_statement -> FOR . ID COLON_EQUAL expression DOWNTO expression DO statement

    ID              shift and go to state 93


state 58

    (10) uses_opt -> USES id_list SEMICOLON .

    USES            reduce using rule 10 (uses_opt -> USES id_list SEMICOLON .)
    CONST           reduce using rule 10 (uses_opt -> USES id_list SEMICOLON .)
    TYPE            reduce using rule 10 (uses_opt -> USES id_list SEMICOLON .)
    VAR             reduce using rule 10 (uses_opt -> USES id_list SEMICOLON .)
    FUNCTION        reduce using rule 10 (uses_opt -> USES id_list SEMICOLON .)
    PROCEDURE       reduce using rule 10 (uses_opt -> USES id_list SEMICOLON .)
    BEGIN           reduce using rule 10 (uses_opt -> USES id_list SEMICOLON .)


state 59

    (12) id_list -> id_list COMMA . ID

    ID              shift and go to state 94


state 60

    (141) constant_list -> constant_list constant .

    ID              reduce using rule 141 (constant_list -> constant_list constant .)
    USES            reduce using rule 141 (constant_list -> constant_list constant .)
    CONST           reduce using rule 141 (constant_list -> constant_list constant .)
    TYPE            reduce using rule 141 (constant_list -> constant_list constant .)
    VAR             reduce using rule 141 (constant_list -> constant_list constant .)
    FUNCTION        reduce using rule 141 (constant_list -> constant_list constant .)
    PROCEDURE       reduce using rule 141 (constant_list -> constant_list constant .)
    BEGIN           reduce using rule 141 (constant_list -> constant_list constant .)


state 61

    (142) constant -> ID EQUAL . CHARACTER_LITERAL SEMICOLON
    (143) constant -> ID EQUAL . NUMBER SEMICOLON
    (144) constant -> ID EQUAL . STRING_LITERAL SEMICOLON
    (145) constant -> ID EQUAL . BOOLEAN_LITERAL SEMICOLON

    CHARACTER_LITERAL shift and go to state 95
    NUMBER          shift and go to state 96
    STRING_LITERAL  shift and go to state 97
    BOOLEAN_LITERAL shift and go to state 98


state 62

    (20) type_list -> type_list type_definition .

    ID              reduce using rule 20 (type_list -> type_list type_definition .)
    USES            reduce using rule 20 (type_list -> type_list type_definition .)
    CONST           reduce using rule 20 (type_list -> type_list type_definition .)
    TYPE            reduce using rule 20 (type_list -> type_list type_definition .)
    VAR             reduce using rule 20 (type_list -> type_list type_definition .)
    FUNCTION        reduce using rule 20 (type_list -> type_list type_definition .)
    PROCEDURE       reduce using rule 20 (type_list -> type_list type_definition .)
    BEGIN           reduce using rule 20 (type_list -> type_list type_definition .)


state 63

    (21) type_definition -> ID EQUAL . type_specifier SEMICOLON
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING
    (34) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (35) type_specifier -> . ID
    (58) type_specifier -> . LONGINT
    (38) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 101
    FILE            shift and go to state 103
    SET             shift and go to state 104
    RECORD          shift and go to state 105
    OBJECT          shift and go to state 106
    LPAREN          shift and go to state 107
    BOOLEAN_LITERAL shift and go to state 108
    INTEGER         shift and go to state 109
    BYTE            shift and go to state 110
    CHAR            shift and go to state 111
    STRING          shift and go to state 112
    ID              shift and go to state 99
    LONGINT         shift and go to state 114
    NUMBER          shift and go to state 113

    type_specifier                 shift and go to state 100
    subrange                       shift and go to state 102

state 64

    (15) declaration_list -> declaration_list declaration .

    ID              reduce using rule 15 (declaration_list -> declaration_list declaration .)
    USES            reduce using rule 15 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 15 (declaration_list -> declaration_list declaration .)
    TYPE            reduce using rule 15 (declaration_list -> declaration_list declaration .)
    VAR             reduce using rule 15 (declaration_list -> declaration_list declaration .)
    FUNCTION        reduce using rule 15 (declaration_list -> declaration_list declaration .)
    PROCEDURE       reduce using rule 15 (declaration_list -> declaration_list declaration .)
    BEGIN           reduce using rule 15 (declaration_list -> declaration_list declaration .)


state 65

    (16) declaration -> id_list COLON . type_specifier SEMICOLON
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING
    (34) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (35) type_specifier -> . ID
    (58) type_specifier -> . LONGINT
    (38) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 101
    FILE            shift and go to state 103
    SET             shift and go to state 104
    RECORD          shift and go to state 105
    OBJECT          shift and go to state 106
    LPAREN          shift and go to state 107
    BOOLEAN_LITERAL shift and go to state 108
    INTEGER         shift and go to state 109
    BYTE            shift and go to state 110
    CHAR            shift and go to state 111
    STRING          shift and go to state 112
    ID              shift and go to state 99
    LONGINT         shift and go to state 114
    NUMBER          shift and go to state 113

    type_specifier                 shift and go to state 115
    subrange                       shift and go to state 102

state 66

    (67) function_declaration -> FUNCTION ID LPAREN . parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (68) function_declaration -> FUNCTION ID LPAREN . parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (71) parameter_list -> . parameter
    (72) parameter_list -> . parameter_list SEMICOLON parameter
    (73) parameter_list -> . empty
    (74) parameter -> . id_list COLON type_specifier
    (75) parameter -> . VAR id_list COLON type_specifier
    (132) empty -> .
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    VAR             shift and go to state 120
    RPAREN          reduce using rule 132 (empty -> .)
    SEMICOLON       reduce using rule 132 (empty -> .)
    ID              shift and go to state 28

    parameter_list                 shift and go to state 116
    parameter                      shift and go to state 117
    empty                          shift and go to state 118
    id_list                        shift and go to state 119

state 67

    (61) procedure_declaration -> PROCEDURE ID LPAREN . field_list RPAREN SEMICOLON
    (62) procedure_declaration -> PROCEDURE ID LPAREN . RPAREN SEMICOLON block SEMICOLON
    (64) procedure_declaration -> PROCEDURE ID LPAREN . field_list RPAREN SEMICOLON FORWARD SEMICOLON
    (65) procedure_declaration -> PROCEDURE ID LPAREN . RPAREN SEMICOLON FORWARD SEMICOLON
    (39) field_list -> . field_list field
    (40) field_list -> . field
    (41) field_list -> . empty
    (42) field -> . id_list COLON type_specifier
    (43) field -> . id_list COLON type_specifier SEMICOLON
    (44) field -> . VAR id_list COLON type_specifier
    (45) field -> . VAR id_list COLON type_specifier SEMICOLON
    (132) empty -> .
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    RPAREN          shift and go to state 122
    VAR             shift and go to state 126
    ID              shift and go to state 28

  ! RPAREN          [ reduce using rule 132 (empty -> .) ]
  ! VAR             [ reduce using rule 132 (empty -> .) ]
  ! ID              [ reduce using rule 132 (empty -> .) ]

    field_list                     shift and go to state 121
    field                          shift and go to state 123
    empty                          shift and go to state 124
    id_list                        shift and go to state 125

state 68

    (63) procedure_declaration -> PROCEDURE ID SEMICOLON . block SEMICOLON
    (66) procedure_declaration -> PROCEDURE ID SEMICOLON . FORWARD SEMICOLON
    (17) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (132) empty -> .

    FORWARD         shift and go to state 128
    BEGIN           reduce using rule 132 (empty -> .)
    USES            reduce using rule 132 (empty -> .)
    CONST           reduce using rule 132 (empty -> .)
    TYPE            reduce using rule 132 (empty -> .)
    VAR             reduce using rule 132 (empty -> .)
    FUNCTION        reduce using rule 132 (empty -> .)
    PROCEDURE       reduce using rule 132 (empty -> .)

    block                          shift and go to state 127
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 69

    (76) compound_statement -> BEGIN statement_list END .
    (77) compound_statement -> BEGIN statement_list END . SEMICOLON

  ! shift/reduce conflict for SEMICOLON resolved as shift
    DOT             reduce using rule 76 (compound_statement -> BEGIN statement_list END .)
    END             reduce using rule 76 (compound_statement -> BEGIN statement_list END .)
    ELSE            reduce using rule 76 (compound_statement -> BEGIN statement_list END .)
    SEMICOLON       shift and go to state 129

  ! SEMICOLON       [ reduce using rule 76 (compound_statement -> BEGIN statement_list END .) ]


state 70

    (78) statement_list -> statement statement_list_tail .

    END             reduce using rule 78 (statement_list -> statement statement_list_tail .)


state 71

    (79) statement_list_tail -> SEMICOLON . statement statement_list_tail
    (81) statement -> . if_statement
    (82) statement -> . assignment_statement
    (83) statement -> . while_statement
    (84) statement -> . procedure_call
    (85) statement -> . compound_statement
    (86) statement -> . for_statement
    (87) statement -> . empty
    (133) statement -> . READLN
    (134) statement -> . READLN LPAREN variable RPAREN
    (135) statement -> . READLN LBRACKET variable RBRACKET
    (136) statement -> . WRITELN LPAREN expression_list RPAREN
    (137) statement -> . WRITE LPAREN expression_list RPAREN
    (138) statement -> . USES ID SEMICOLON
    (88) if_statement -> . IF expression THEN statement ELSE statement
    (89) if_statement -> . IF expression THEN statement
    (92) assignment_statement -> . variable COLON_EQUAL expression
    (97) while_statement -> . WHILE expression DO statement
    (98) procedure_call -> . ID LPAREN expression_list RPAREN
    (99) procedure_call -> . ID
    (76) compound_statement -> . BEGIN statement_list END
    (77) compound_statement -> . BEGIN statement_list END SEMICOLON
    (90) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (91) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (132) empty -> .
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    READLN          shift and go to state 49
    WRITELN         shift and go to state 51
    WRITE           shift and go to state 52
    USES            shift and go to state 53
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    ID              shift and go to state 54
    BEGIN           shift and go to state 24
    FOR             shift and go to state 57
    SEMICOLON       reduce using rule 132 (empty -> .)
    END             reduce using rule 132 (empty -> .)

    statement                      shift and go to state 130
    if_statement                   shift and go to state 42
    assignment_statement           shift and go to state 43
    while_statement                shift and go to state 44
    procedure_call                 shift and go to state 45
    compound_statement             shift and go to state 46
    for_statement                  shift and go to state 47
    empty                          shift and go to state 48
    variable                       shift and go to state 50

state 72

    (80) statement_list_tail -> empty .

    END             reduce using rule 80 (statement_list_tail -> empty .)


state 73

    (134) statement -> READLN LPAREN . variable RPAREN
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    ID              shift and go to state 132

    variable                       shift and go to state 131

state 74

    (135) statement -> READLN LBRACKET . variable RBRACKET
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    ID              shift and go to state 132

    variable                       shift and go to state 133

state 75

    (92) assignment_statement -> variable COLON_EQUAL . expression
    (104) expression -> . simple_expression relop simple_expression
    (105) expression -> . simple_expression
    (117) expression -> . expression PLUS expression
    (118) expression -> . expression MINUS expression
    (119) expression -> . expression TIMES expression
    (120) expression -> . expression DIVIDE expression
    (121) expression -> . expression MOD expression
    (146) expression -> . expression AND expression
    (147) expression -> . expression OR expression
    (148) expression -> . NOT expression
    (106) simple_expression -> . term simple_expression_tail
    (111) term -> . factor term_tail
    (70) factor -> . function_call
    (122) factor -> . LPAREN expression RPAREN
    (123) factor -> . variable
    (124) factor -> . NUMBER
    (125) factor -> . STRING_LITERAL
    (69) function_call -> . ID LPAREN expression_list RPAREN
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    variable                       shift and go to state 88
    expression                     shift and go to state 134
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86

state 76

    (136) statement -> WRITELN LPAREN . expression_list RPAREN
    (100) expression_list -> . expression expression_list_tail
    (103) expression_list -> . empty
    (104) expression -> . simple_expression relop simple_expression
    (105) expression -> . simple_expression
    (117) expression -> . expression PLUS expression
    (118) expression -> . expression MINUS expression
    (119) expression -> . expression TIMES expression
    (120) expression -> . expression DIVIDE expression
    (121) expression -> . expression MOD expression
    (146) expression -> . expression AND expression
    (147) expression -> . expression OR expression
    (148) expression -> . NOT expression
    (132) empty -> .
    (106) simple_expression -> . term simple_expression_tail
    (111) term -> . factor term_tail
    (70) factor -> . function_call
    (122) factor -> . LPAREN expression RPAREN
    (123) factor -> . variable
    (124) factor -> . NUMBER
    (125) factor -> . STRING_LITERAL
    (69) function_call -> . ID LPAREN expression_list RPAREN
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    RPAREN          reduce using rule 132 (empty -> .)
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression_list                shift and go to state 135
    expression                     shift and go to state 136
    empty                          shift and go to state 137
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 77

    (137) statement -> WRITE LPAREN . expression_list RPAREN
    (100) expression_list -> . expression expression_list_tail
    (103) expression_list -> . empty
    (104) expression -> . simple_expression relop simple_expression
    (105) expression -> . simple_expression
    (117) expression -> . expression PLUS expression
    (118) expression -> . expression MINUS expression
    (119) expression -> . expression TIMES expression
    (120) expression -> . expression DIVIDE expression
    (121) expression -> . expression MOD expression
    (146) expression -> . expression AND expression
    (147) expression -> . expression OR expression
    (148) expression -> . NOT expression
    (132) empty -> .
    (106) simple_expression -> . term simple_expression_tail
    (111) term -> . factor term_tail
    (70) factor -> . function_call
    (122) factor -> . LPAREN expression RPAREN
    (123) factor -> . variable
    (124) factor -> . NUMBER
    (125) factor -> . STRING_LITERAL
    (69) function_call -> . ID LPAREN expression_list RPAREN
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    RPAREN          reduce using rule 132 (empty -> .)
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression_list                shift and go to state 138
    expression                     shift and go to state 136
    empty                          shift and go to state 137
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 78

    (138) statement -> USES ID . SEMICOLON

    SEMICOLON       shift and go to state 139


state 79

    (98) procedure_call -> ID LPAREN . expression_list RPAREN
    (100) expression_list -> . expression expression_list_tail
    (103) expression_list -> . empty
    (104) expression -> . simple_expression relop simple_expression
    (105) expression -> . simple_expression
    (117) expression -> . expression PLUS expression
    (118) expression -> . expression MINUS expression
    (119) expression -> . expression TIMES expression
    (120) expression -> . expression DIVIDE expression
    (121) expression -> . expression MOD expression
    (146) expression -> . expression AND expression
    (147) expression -> . expression OR expression
    (148) expression -> . NOT expression
    (132) empty -> .
    (106) simple_expression -> . term simple_expression_tail
    (111) term -> . factor term_tail
    (70) factor -> . function_call
    (122) factor -> . LPAREN expression RPAREN
    (123) factor -> . variable
    (124) factor -> . NUMBER
    (125) factor -> . STRING_LITERAL
    (69) function_call -> . ID LPAREN expression_list RPAREN
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    RPAREN          reduce using rule 132 (empty -> .)
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression_list                shift and go to state 140
    expression                     shift and go to state 136
    empty                          shift and go to state 137
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 80

    (94) variable -> ID LBRACKET . index_list RBRACKET
    (95) index_list -> . expression
    (96) index_list -> . index_list COMMA expression
    (104) expression -> . simple_expression relop simple_expression
    (105) expression -> . simple_expression
    (117) expression -> . expression PLUS expression
    (118) expression -> . expression MINUS expression
    (119) expression -> . expression TIMES expression
    (120) expression -> . expression DIVIDE expression
    (121) expression -> . expression MOD expression
    (146) expression -> . expression AND expression
    (147) expression -> . expression OR expression
    (148) expression -> . NOT expression
    (106) simple_expression -> . term simple_expression_tail
    (111) term -> . factor term_tail
    (70) factor -> . function_call
    (122) factor -> . LPAREN expression RPAREN
    (123) factor -> . variable
    (124) factor -> . NUMBER
    (125) factor -> . STRING_LITERAL
    (69) function_call -> . ID LPAREN expression_list RPAREN
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    index_list                     shift and go to state 141
    expression                     shift and go to state 142
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 81

    (88) if_statement -> IF expression . THEN statement ELSE statement
    (89) if_statement -> IF expression . THEN statement
    (117) expression -> expression . PLUS expression
    (118) expression -> expression . MINUS expression
    (119) expression -> expression . TIMES expression
    (120) expression -> expression . DIVIDE expression
    (121) expression -> expression . MOD expression
    (146) expression -> expression . AND expression
    (147) expression -> expression . OR expression

    THEN            shift and go to state 143
    PLUS            shift and go to state 144
    MINUS           shift and go to state 145
    TIMES           shift and go to state 146
    DIVIDE          shift and go to state 147
    MOD             shift and go to state 148
    AND             shift and go to state 149
    OR              shift and go to state 150


state 82

    (104) expression -> simple_expression . relop simple_expression
    (105) expression -> simple_expression .
    (126) relop -> . LESS
    (127) relop -> . LESS_EQUAL
    (128) relop -> . GREAT
    (129) relop -> . GREAT_EQUAL
    (130) relop -> . EQUAL
    (131) relop -> . DIFFERENT

    THEN            reduce using rule 105 (expression -> simple_expression .)
    PLUS            reduce using rule 105 (expression -> simple_expression .)
    MINUS           reduce using rule 105 (expression -> simple_expression .)
    TIMES           reduce using rule 105 (expression -> simple_expression .)
    DIVIDE          reduce using rule 105 (expression -> simple_expression .)
    MOD             reduce using rule 105 (expression -> simple_expression .)
    AND             reduce using rule 105 (expression -> simple_expression .)
    OR              reduce using rule 105 (expression -> simple_expression .)
    DO              reduce using rule 105 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 105 (expression -> simple_expression .)
    END             reduce using rule 105 (expression -> simple_expression .)
    ELSE            reduce using rule 105 (expression -> simple_expression .)
    COMMA           reduce using rule 105 (expression -> simple_expression .)
    RPAREN          reduce using rule 105 (expression -> simple_expression .)
    RBRACKET        reduce using rule 105 (expression -> simple_expression .)
    TO              reduce using rule 105 (expression -> simple_expression .)
    DOWNTO          reduce using rule 105 (expression -> simple_expression .)
    LESS            shift and go to state 152
    LESS_EQUAL      shift and go to state 153
    GREAT           shift and go to state 154
    GREAT_EQUAL     shift and go to state 155
    EQUAL           shift and go to state 156
    DIFFERENT       shift and go to state 157

    relop                          shift and go to state 151

state 83

    (148) expression -> NOT . expression
    (104) expression -> . simple_expression relop simple_expression
    (105) expression -> . simple_expression
    (117) expression -> . expression PLUS expression
    (118) expression -> . expression MINUS expression
    (119) expression -> . expression TIMES expression
    (120) expression -> . expression DIVIDE expression
    (121) expression -> . expression MOD expression
    (146) expression -> . expression AND expression
    (147) expression -> . expression OR expression
    (148) expression -> . NOT expression
    (106) simple_expression -> . term simple_expression_tail
    (111) term -> . factor term_tail
    (70) factor -> . function_call
    (122) factor -> . LPAREN expression RPAREN
    (123) factor -> . variable
    (124) factor -> . NUMBER
    (125) factor -> . STRING_LITERAL
    (69) function_call -> . ID LPAREN expression_list RPAREN
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 158
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 84

    (106) simple_expression -> term . simple_expression_tail
    (107) simple_expression_tail -> . addop term
    (108) simple_expression_tail -> . empty
    (109) addop -> . PLUS
    (110) addop -> . MINUS
    (132) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 162
    MINUS           shift and go to state 163
    LESS            reduce using rule 132 (empty -> .)
    LESS_EQUAL      reduce using rule 132 (empty -> .)
    GREAT           reduce using rule 132 (empty -> .)
    GREAT_EQUAL     reduce using rule 132 (empty -> .)
    EQUAL           reduce using rule 132 (empty -> .)
    DIFFERENT       reduce using rule 132 (empty -> .)
    THEN            reduce using rule 132 (empty -> .)
    TIMES           reduce using rule 132 (empty -> .)
    DIVIDE          reduce using rule 132 (empty -> .)
    MOD             reduce using rule 132 (empty -> .)
    AND             reduce using rule 132 (empty -> .)
    OR              reduce using rule 132 (empty -> .)
    DO              reduce using rule 132 (empty -> .)
    SEMICOLON       reduce using rule 132 (empty -> .)
    END             reduce using rule 132 (empty -> .)
    ELSE            reduce using rule 132 (empty -> .)
    COMMA           reduce using rule 132 (empty -> .)
    RPAREN          reduce using rule 132 (empty -> .)
    RBRACKET        reduce using rule 132 (empty -> .)
    TO              reduce using rule 132 (empty -> .)
    DOWNTO          reduce using rule 132 (empty -> .)

  ! PLUS            [ reduce using rule 132 (empty -> .) ]
  ! MINUS           [ reduce using rule 132 (empty -> .) ]

    simple_expression_tail         shift and go to state 159
    addop                          shift and go to state 160
    empty                          shift and go to state 161

state 85

    (111) term -> factor . term_tail
    (112) term_tail -> . mulop factor
    (113) term_tail -> . empty
    (114) mulop -> . TIMES
    (115) mulop -> . DIVIDE
    (116) mulop -> . DIV
    (132) empty -> .

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    TIMES           shift and go to state 167
    DIVIDE          shift and go to state 168
    DIV             shift and go to state 169
    PLUS            reduce using rule 132 (empty -> .)
    MINUS           reduce using rule 132 (empty -> .)
    LESS            reduce using rule 132 (empty -> .)
    LESS_EQUAL      reduce using rule 132 (empty -> .)
    GREAT           reduce using rule 132 (empty -> .)
    GREAT_EQUAL     reduce using rule 132 (empty -> .)
    EQUAL           reduce using rule 132 (empty -> .)
    DIFFERENT       reduce using rule 132 (empty -> .)
    THEN            reduce using rule 132 (empty -> .)
    MOD             reduce using rule 132 (empty -> .)
    AND             reduce using rule 132 (empty -> .)
    OR              reduce using rule 132 (empty -> .)
    DO              reduce using rule 132 (empty -> .)
    SEMICOLON       reduce using rule 132 (empty -> .)
    END             reduce using rule 132 (empty -> .)
    ELSE            reduce using rule 132 (empty -> .)
    COMMA           reduce using rule 132 (empty -> .)
    RPAREN          reduce using rule 132 (empty -> .)
    RBRACKET        reduce using rule 132 (empty -> .)
    TO              reduce using rule 132 (empty -> .)
    DOWNTO          reduce using rule 132 (empty -> .)

  ! TIMES           [ reduce using rule 132 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 132 (empty -> .) ]

    term_tail                      shift and go to state 164
    mulop                          shift and go to state 165
    empty                          shift and go to state 166

state 86

    (70) factor -> function_call .

    TIMES           reduce using rule 70 (factor -> function_call .)
    DIVIDE          reduce using rule 70 (factor -> function_call .)
    DIV             reduce using rule 70 (factor -> function_call .)
    PLUS            reduce using rule 70 (factor -> function_call .)
    MINUS           reduce using rule 70 (factor -> function_call .)
    LESS            reduce using rule 70 (factor -> function_call .)
    LESS_EQUAL      reduce using rule 70 (factor -> function_call .)
    GREAT           reduce using rule 70 (factor -> function_call .)
    GREAT_EQUAL     reduce using rule 70 (factor -> function_call .)
    EQUAL           reduce using rule 70 (factor -> function_call .)
    DIFFERENT       reduce using rule 70 (factor -> function_call .)
    THEN            reduce using rule 70 (factor -> function_call .)
    MOD             reduce using rule 70 (factor -> function_call .)
    AND             reduce using rule 70 (factor -> function_call .)
    OR              reduce using rule 70 (factor -> function_call .)
    DO              reduce using rule 70 (factor -> function_call .)
    SEMICOLON       reduce using rule 70 (factor -> function_call .)
    END             reduce using rule 70 (factor -> function_call .)
    ELSE            reduce using rule 70 (factor -> function_call .)
    COMMA           reduce using rule 70 (factor -> function_call .)
    RPAREN          reduce using rule 70 (factor -> function_call .)
    RBRACKET        reduce using rule 70 (factor -> function_call .)
    TO              reduce using rule 70 (factor -> function_call .)
    DOWNTO          reduce using rule 70 (factor -> function_call .)


state 87

    (122) factor -> LPAREN . expression RPAREN
    (104) expression -> . simple_expression relop simple_expression
    (105) expression -> . simple_expression
    (117) expression -> . expression PLUS expression
    (118) expression -> . expression MINUS expression
    (119) expression -> . expression TIMES expression
    (120) expression -> . expression DIVIDE expression
    (121) expression -> . expression MOD expression
    (146) expression -> . expression AND expression
    (147) expression -> . expression OR expression
    (148) expression -> . NOT expression
    (106) simple_expression -> . term simple_expression_tail
    (111) term -> . factor term_tail
    (70) factor -> . function_call
    (122) factor -> . LPAREN expression RPAREN
    (123) factor -> . variable
    (124) factor -> . NUMBER
    (125) factor -> . STRING_LITERAL
    (69) function_call -> . ID LPAREN expression_list RPAREN
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 170
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 88

    (123) factor -> variable .

    TIMES           reduce using rule 123 (factor -> variable .)
    DIVIDE          reduce using rule 123 (factor -> variable .)
    DIV             reduce using rule 123 (factor -> variable .)
    PLUS            reduce using rule 123 (factor -> variable .)
    MINUS           reduce using rule 123 (factor -> variable .)
    LESS            reduce using rule 123 (factor -> variable .)
    LESS_EQUAL      reduce using rule 123 (factor -> variable .)
    GREAT           reduce using rule 123 (factor -> variable .)
    GREAT_EQUAL     reduce using rule 123 (factor -> variable .)
    EQUAL           reduce using rule 123 (factor -> variable .)
    DIFFERENT       reduce using rule 123 (factor -> variable .)
    THEN            reduce using rule 123 (factor -> variable .)
    MOD             reduce using rule 123 (factor -> variable .)
    AND             reduce using rule 123 (factor -> variable .)
    OR              reduce using rule 123 (factor -> variable .)
    DO              reduce using rule 123 (factor -> variable .)
    SEMICOLON       reduce using rule 123 (factor -> variable .)
    END             reduce using rule 123 (factor -> variable .)
    ELSE            reduce using rule 123 (factor -> variable .)
    COMMA           reduce using rule 123 (factor -> variable .)
    RPAREN          reduce using rule 123 (factor -> variable .)
    RBRACKET        reduce using rule 123 (factor -> variable .)
    TO              reduce using rule 123 (factor -> variable .)
    DOWNTO          reduce using rule 123 (factor -> variable .)


state 89

    (124) factor -> NUMBER .

    TIMES           reduce using rule 124 (factor -> NUMBER .)
    DIVIDE          reduce using rule 124 (factor -> NUMBER .)
    DIV             reduce using rule 124 (factor -> NUMBER .)
    PLUS            reduce using rule 124 (factor -> NUMBER .)
    MINUS           reduce using rule 124 (factor -> NUMBER .)
    LESS            reduce using rule 124 (factor -> NUMBER .)
    LESS_EQUAL      reduce using rule 124 (factor -> NUMBER .)
    GREAT           reduce using rule 124 (factor -> NUMBER .)
    GREAT_EQUAL     reduce using rule 124 (factor -> NUMBER .)
    EQUAL           reduce using rule 124 (factor -> NUMBER .)
    DIFFERENT       reduce using rule 124 (factor -> NUMBER .)
    THEN            reduce using rule 124 (factor -> NUMBER .)
    MOD             reduce using rule 124 (factor -> NUMBER .)
    AND             reduce using rule 124 (factor -> NUMBER .)
    OR              reduce using rule 124 (factor -> NUMBER .)
    DO              reduce using rule 124 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 124 (factor -> NUMBER .)
    END             reduce using rule 124 (factor -> NUMBER .)
    ELSE            reduce using rule 124 (factor -> NUMBER .)
    COMMA           reduce using rule 124 (factor -> NUMBER .)
    RPAREN          reduce using rule 124 (factor -> NUMBER .)
    RBRACKET        reduce using rule 124 (factor -> NUMBER .)
    TO              reduce using rule 124 (factor -> NUMBER .)
    DOWNTO          reduce using rule 124 (factor -> NUMBER .)


state 90

    (125) factor -> STRING_LITERAL .

    TIMES           reduce using rule 125 (factor -> STRING_LITERAL .)
    DIVIDE          reduce using rule 125 (factor -> STRING_LITERAL .)
    DIV             reduce using rule 125 (factor -> STRING_LITERAL .)
    PLUS            reduce using rule 125 (factor -> STRING_LITERAL .)
    MINUS           reduce using rule 125 (factor -> STRING_LITERAL .)
    LESS            reduce using rule 125 (factor -> STRING_LITERAL .)
    LESS_EQUAL      reduce using rule 125 (factor -> STRING_LITERAL .)
    GREAT           reduce using rule 125 (factor -> STRING_LITERAL .)
    GREAT_EQUAL     reduce using rule 125 (factor -> STRING_LITERAL .)
    EQUAL           reduce using rule 125 (factor -> STRING_LITERAL .)
    DIFFERENT       reduce using rule 125 (factor -> STRING_LITERAL .)
    THEN            reduce using rule 125 (factor -> STRING_LITERAL .)
    MOD             reduce using rule 125 (factor -> STRING_LITERAL .)
    AND             reduce using rule 125 (factor -> STRING_LITERAL .)
    OR              reduce using rule 125 (factor -> STRING_LITERAL .)
    DO              reduce using rule 125 (factor -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 125 (factor -> STRING_LITERAL .)
    END             reduce using rule 125 (factor -> STRING_LITERAL .)
    ELSE            reduce using rule 125 (factor -> STRING_LITERAL .)
    COMMA           reduce using rule 125 (factor -> STRING_LITERAL .)
    RPAREN          reduce using rule 125 (factor -> STRING_LITERAL .)
    RBRACKET        reduce using rule 125 (factor -> STRING_LITERAL .)
    TO              reduce using rule 125 (factor -> STRING_LITERAL .)
    DOWNTO          reduce using rule 125 (factor -> STRING_LITERAL .)


state 91

    (69) function_call -> ID . LPAREN expression_list RPAREN
    (93) variable -> ID .
    (94) variable -> ID . LBRACKET index_list RBRACKET

    LPAREN          shift and go to state 171
    TIMES           reduce using rule 93 (variable -> ID .)
    DIVIDE          reduce using rule 93 (variable -> ID .)
    DIV             reduce using rule 93 (variable -> ID .)
    PLUS            reduce using rule 93 (variable -> ID .)
    MINUS           reduce using rule 93 (variable -> ID .)
    LESS            reduce using rule 93 (variable -> ID .)
    LESS_EQUAL      reduce using rule 93 (variable -> ID .)
    GREAT           reduce using rule 93 (variable -> ID .)
    GREAT_EQUAL     reduce using rule 93 (variable -> ID .)
    EQUAL           reduce using rule 93 (variable -> ID .)
    DIFFERENT       reduce using rule 93 (variable -> ID .)
    THEN            reduce using rule 93 (variable -> ID .)
    MOD             reduce using rule 93 (variable -> ID .)
    AND             reduce using rule 93 (variable -> ID .)
    OR              reduce using rule 93 (variable -> ID .)
    DO              reduce using rule 93 (variable -> ID .)
    SEMICOLON       reduce using rule 93 (variable -> ID .)
    END             reduce using rule 93 (variable -> ID .)
    ELSE            reduce using rule 93 (variable -> ID .)
    COMMA           reduce using rule 93 (variable -> ID .)
    RPAREN          reduce using rule 93 (variable -> ID .)
    RBRACKET        reduce using rule 93 (variable -> ID .)
    TO              reduce using rule 93 (variable -> ID .)
    DOWNTO          reduce using rule 93 (variable -> ID .)
    LBRACKET        shift and go to state 80


state 92

    (97) while_statement -> WHILE expression . DO statement
    (117) expression -> expression . PLUS expression
    (118) expression -> expression . MINUS expression
    (119) expression -> expression . TIMES expression
    (120) expression -> expression . DIVIDE expression
    (121) expression -> expression . MOD expression
    (146) expression -> expression . AND expression
    (147) expression -> expression . OR expression

    DO              shift and go to state 172
    PLUS            shift and go to state 144
    MINUS           shift and go to state 145
    TIMES           shift and go to state 146
    DIVIDE          shift and go to state 147
    MOD             shift and go to state 148
    AND             shift and go to state 149
    OR              shift and go to state 150


state 93

    (90) for_statement -> FOR ID . COLON_EQUAL expression TO expression DO statement
    (91) for_statement -> FOR ID . COLON_EQUAL expression DOWNTO expression DO statement

    COLON_EQUAL     shift and go to state 173


state 94

    (12) id_list -> id_list COMMA ID .

    SEMICOLON       reduce using rule 12 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 12 (id_list -> id_list COMMA ID .)
    COLON           reduce using rule 12 (id_list -> id_list COMMA ID .)
    RPAREN          reduce using rule 12 (id_list -> id_list COMMA ID .)


state 95

    (142) constant -> ID EQUAL CHARACTER_LITERAL . SEMICOLON

    SEMICOLON       shift and go to state 174


state 96

    (143) constant -> ID EQUAL NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 175


state 97

    (144) constant -> ID EQUAL STRING_LITERAL . SEMICOLON

    SEMICOLON       shift and go to state 176


state 98

    (145) constant -> ID EQUAL BOOLEAN_LITERAL . SEMICOLON

    SEMICOLON       shift and go to state 177


state 99

    (35) type_specifier -> ID .

    SEMICOLON       reduce using rule 35 (type_specifier -> ID .)
    RPAREN          reduce using rule 35 (type_specifier -> ID .)
    VAR             reduce using rule 35 (type_specifier -> ID .)
    ID              reduce using rule 35 (type_specifier -> ID .)
    CASE            reduce using rule 35 (type_specifier -> ID .)
    END             reduce using rule 35 (type_specifier -> ID .)
    CONSTRUCTOR     reduce using rule 35 (type_specifier -> ID .)
    PROCEDURE       reduce using rule 35 (type_specifier -> ID .)
    FUNCTION        reduce using rule 35 (type_specifier -> ID .)
    DESTRUCTOR      reduce using rule 35 (type_specifier -> ID .)
    OF              reduce using rule 35 (type_specifier -> ID .)


state 100

    (21) type_definition -> ID EQUAL type_specifier . SEMICOLON

    SEMICOLON       shift and go to state 178


state 101

    (22) type_specifier -> ARRAY . LBRACKET type_expression RBRACKET OF type_specifier

    LBRACKET        shift and go to state 179


state 102

    (23) type_specifier -> subrange .

    SEMICOLON       reduce using rule 23 (type_specifier -> subrange .)
    RPAREN          reduce using rule 23 (type_specifier -> subrange .)
    VAR             reduce using rule 23 (type_specifier -> subrange .)
    ID              reduce using rule 23 (type_specifier -> subrange .)
    CASE            reduce using rule 23 (type_specifier -> subrange .)
    END             reduce using rule 23 (type_specifier -> subrange .)
    CONSTRUCTOR     reduce using rule 23 (type_specifier -> subrange .)
    PROCEDURE       reduce using rule 23 (type_specifier -> subrange .)
    FUNCTION        reduce using rule 23 (type_specifier -> subrange .)
    DESTRUCTOR      reduce using rule 23 (type_specifier -> subrange .)
    OF              reduce using rule 23 (type_specifier -> subrange .)


state 103

    (24) type_specifier -> FILE . OF type_specifier

    OF              shift and go to state 180


state 104

    (25) type_specifier -> SET . OF type_specifier

    OF              shift and go to state 181


state 105

    (26) type_specifier -> RECORD . field_list case_part END
    (39) field_list -> . field_list field
    (40) field_list -> . field
    (41) field_list -> . empty
    (42) field -> . id_list COLON type_specifier
    (43) field -> . id_list COLON type_specifier SEMICOLON
    (44) field -> . VAR id_list COLON type_specifier
    (45) field -> . VAR id_list COLON type_specifier SEMICOLON
    (132) empty -> .
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    VAR             shift and go to state 126
    CASE            reduce using rule 132 (empty -> .)
    END             reduce using rule 132 (empty -> .)
    ID              shift and go to state 28

  ! VAR             [ reduce using rule 132 (empty -> .) ]
  ! ID              [ reduce using rule 132 (empty -> .) ]

    field_list                     shift and go to state 182
    field                          shift and go to state 123
    empty                          shift and go to state 124
    id_list                        shift and go to state 125

state 106

    (27) type_specifier -> OBJECT . field_list method_list END
    (39) field_list -> . field_list field
    (40) field_list -> . field
    (41) field_list -> . empty
    (42) field -> . id_list COLON type_specifier
    (43) field -> . id_list COLON type_specifier SEMICOLON
    (44) field -> . VAR id_list COLON type_specifier
    (45) field -> . VAR id_list COLON type_specifier SEMICOLON
    (132) empty -> .
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    VAR             shift and go to state 126
    CONSTRUCTOR     reduce using rule 132 (empty -> .)
    PROCEDURE       reduce using rule 132 (empty -> .)
    FUNCTION        reduce using rule 132 (empty -> .)
    DESTRUCTOR      reduce using rule 132 (empty -> .)
    END             reduce using rule 132 (empty -> .)
    ID              shift and go to state 28

  ! VAR             [ reduce using rule 132 (empty -> .) ]
  ! ID              [ reduce using rule 132 (empty -> .) ]

    field_list                     shift and go to state 183
    field                          shift and go to state 123
    empty                          shift and go to state 124
    id_list                        shift and go to state 125

state 107

    (28) type_specifier -> LPAREN . id_list RPAREN
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    ID              shift and go to state 28

    id_list                        shift and go to state 184

state 108

    (29) type_specifier -> BOOLEAN_LITERAL .

    SEMICOLON       reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)
    RPAREN          reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)
    VAR             reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)
    ID              reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)
    CASE            reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)
    END             reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)
    CONSTRUCTOR     reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)
    PROCEDURE       reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)
    FUNCTION        reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)
    DESTRUCTOR      reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)
    OF              reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)


state 109

    (30) type_specifier -> INTEGER .

    SEMICOLON       reduce using rule 30 (type_specifier -> INTEGER .)
    RPAREN          reduce using rule 30 (type_specifier -> INTEGER .)
    VAR             reduce using rule 30 (type_specifier -> INTEGER .)
    ID              reduce using rule 30 (type_specifier -> INTEGER .)
    CASE            reduce using rule 30 (type_specifier -> INTEGER .)
    END             reduce using rule 30 (type_specifier -> INTEGER .)
    CONSTRUCTOR     reduce using rule 30 (type_specifier -> INTEGER .)
    PROCEDURE       reduce using rule 30 (type_specifier -> INTEGER .)
    FUNCTION        reduce using rule 30 (type_specifier -> INTEGER .)
    DESTRUCTOR      reduce using rule 30 (type_specifier -> INTEGER .)
    OF              reduce using rule 30 (type_specifier -> INTEGER .)


state 110

    (31) type_specifier -> BYTE .

    SEMICOLON       reduce using rule 31 (type_specifier -> BYTE .)
    RPAREN          reduce using rule 31 (type_specifier -> BYTE .)
    VAR             reduce using rule 31 (type_specifier -> BYTE .)
    ID              reduce using rule 31 (type_specifier -> BYTE .)
    CASE            reduce using rule 31 (type_specifier -> BYTE .)
    END             reduce using rule 31 (type_specifier -> BYTE .)
    CONSTRUCTOR     reduce using rule 31 (type_specifier -> BYTE .)
    PROCEDURE       reduce using rule 31 (type_specifier -> BYTE .)
    FUNCTION        reduce using rule 31 (type_specifier -> BYTE .)
    DESTRUCTOR      reduce using rule 31 (type_specifier -> BYTE .)
    OF              reduce using rule 31 (type_specifier -> BYTE .)


state 111

    (32) type_specifier -> CHAR .

    SEMICOLON       reduce using rule 32 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 32 (type_specifier -> CHAR .)
    VAR             reduce using rule 32 (type_specifier -> CHAR .)
    ID              reduce using rule 32 (type_specifier -> CHAR .)
    CASE            reduce using rule 32 (type_specifier -> CHAR .)
    END             reduce using rule 32 (type_specifier -> CHAR .)
    CONSTRUCTOR     reduce using rule 32 (type_specifier -> CHAR .)
    PROCEDURE       reduce using rule 32 (type_specifier -> CHAR .)
    FUNCTION        reduce using rule 32 (type_specifier -> CHAR .)
    DESTRUCTOR      reduce using rule 32 (type_specifier -> CHAR .)
    OF              reduce using rule 32 (type_specifier -> CHAR .)


state 112

    (33) type_specifier -> STRING .
    (34) type_specifier -> STRING . LBRACKET NUMBER RBRACKET

    SEMICOLON       reduce using rule 33 (type_specifier -> STRING .)
    RPAREN          reduce using rule 33 (type_specifier -> STRING .)
    VAR             reduce using rule 33 (type_specifier -> STRING .)
    ID              reduce using rule 33 (type_specifier -> STRING .)
    CASE            reduce using rule 33 (type_specifier -> STRING .)
    END             reduce using rule 33 (type_specifier -> STRING .)
    CONSTRUCTOR     reduce using rule 33 (type_specifier -> STRING .)
    PROCEDURE       reduce using rule 33 (type_specifier -> STRING .)
    FUNCTION        reduce using rule 33 (type_specifier -> STRING .)
    DESTRUCTOR      reduce using rule 33 (type_specifier -> STRING .)
    OF              reduce using rule 33 (type_specifier -> STRING .)
    LBRACKET        shift and go to state 185


state 113

    (38) subrange -> NUMBER . DOTDOT NUMBER

    DOTDOT          shift and go to state 186


state 114

    (58) type_specifier -> LONGINT .

    SEMICOLON       reduce using rule 58 (type_specifier -> LONGINT .)
    RPAREN          reduce using rule 58 (type_specifier -> LONGINT .)
    VAR             reduce using rule 58 (type_specifier -> LONGINT .)
    ID              reduce using rule 58 (type_specifier -> LONGINT .)
    CASE            reduce using rule 58 (type_specifier -> LONGINT .)
    END             reduce using rule 58 (type_specifier -> LONGINT .)
    CONSTRUCTOR     reduce using rule 58 (type_specifier -> LONGINT .)
    PROCEDURE       reduce using rule 58 (type_specifier -> LONGINT .)
    FUNCTION        reduce using rule 58 (type_specifier -> LONGINT .)
    DESTRUCTOR      reduce using rule 58 (type_specifier -> LONGINT .)
    OF              reduce using rule 58 (type_specifier -> LONGINT .)


state 115

    (16) declaration -> id_list COLON type_specifier . SEMICOLON

    SEMICOLON       shift and go to state 187


state 116

    (67) function_declaration -> FUNCTION ID LPAREN parameter_list . RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (68) function_declaration -> FUNCTION ID LPAREN parameter_list . RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (72) parameter_list -> parameter_list . SEMICOLON parameter

    RPAREN          shift and go to state 188
    SEMICOLON       shift and go to state 189


state 117

    (71) parameter_list -> parameter .

    RPAREN          reduce using rule 71 (parameter_list -> parameter .)
    SEMICOLON       reduce using rule 71 (parameter_list -> parameter .)


state 118

    (73) parameter_list -> empty .

    RPAREN          reduce using rule 73 (parameter_list -> empty .)
    SEMICOLON       reduce using rule 73 (parameter_list -> empty .)


state 119

    (74) parameter -> id_list . COLON type_specifier
    (12) id_list -> id_list . COMMA ID

    COLON           shift and go to state 190
    COMMA           shift and go to state 59


state 120

    (75) parameter -> VAR . id_list COLON type_specifier
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    ID              shift and go to state 28

    id_list                        shift and go to state 191

state 121

    (61) procedure_declaration -> PROCEDURE ID LPAREN field_list . RPAREN SEMICOLON
    (64) procedure_declaration -> PROCEDURE ID LPAREN field_list . RPAREN SEMICOLON FORWARD SEMICOLON
    (39) field_list -> field_list . field
    (42) field -> . id_list COLON type_specifier
    (43) field -> . id_list COLON type_specifier SEMICOLON
    (44) field -> . VAR id_list COLON type_specifier
    (45) field -> . VAR id_list COLON type_specifier SEMICOLON
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 192
    VAR             shift and go to state 126
    ID              shift and go to state 28

    field                          shift and go to state 193
    id_list                        shift and go to state 125

state 122

    (62) procedure_declaration -> PROCEDURE ID LPAREN RPAREN . SEMICOLON block SEMICOLON
    (65) procedure_declaration -> PROCEDURE ID LPAREN RPAREN . SEMICOLON FORWARD SEMICOLON

    SEMICOLON       shift and go to state 194


state 123

    (40) field_list -> field .

    RPAREN          reduce using rule 40 (field_list -> field .)
    VAR             reduce using rule 40 (field_list -> field .)
    ID              reduce using rule 40 (field_list -> field .)
    CASE            reduce using rule 40 (field_list -> field .)
    END             reduce using rule 40 (field_list -> field .)
    CONSTRUCTOR     reduce using rule 40 (field_list -> field .)
    PROCEDURE       reduce using rule 40 (field_list -> field .)
    FUNCTION        reduce using rule 40 (field_list -> field .)
    DESTRUCTOR      reduce using rule 40 (field_list -> field .)


state 124

    (41) field_list -> empty .

    RPAREN          reduce using rule 41 (field_list -> empty .)
    VAR             reduce using rule 41 (field_list -> empty .)
    ID              reduce using rule 41 (field_list -> empty .)
    CASE            reduce using rule 41 (field_list -> empty .)
    END             reduce using rule 41 (field_list -> empty .)
    CONSTRUCTOR     reduce using rule 41 (field_list -> empty .)
    PROCEDURE       reduce using rule 41 (field_list -> empty .)
    FUNCTION        reduce using rule 41 (field_list -> empty .)
    DESTRUCTOR      reduce using rule 41 (field_list -> empty .)


state 125

    (42) field -> id_list . COLON type_specifier
    (43) field -> id_list . COLON type_specifier SEMICOLON
    (12) id_list -> id_list . COMMA ID

    COLON           shift and go to state 195
    COMMA           shift and go to state 59


state 126

    (44) field -> VAR . id_list COLON type_specifier
    (45) field -> VAR . id_list COLON type_specifier SEMICOLON
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    ID              shift and go to state 28

    id_list                        shift and go to state 196

state 127

    (63) procedure_declaration -> PROCEDURE ID SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 197


state 128

    (66) procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD . SEMICOLON

    SEMICOLON       shift and go to state 198


state 129

    (77) compound_statement -> BEGIN statement_list END SEMICOLON .

    DOT             reduce using rule 77 (compound_statement -> BEGIN statement_list END SEMICOLON .)
    SEMICOLON       reduce using rule 77 (compound_statement -> BEGIN statement_list END SEMICOLON .)
    END             reduce using rule 77 (compound_statement -> BEGIN statement_list END SEMICOLON .)
    ELSE            reduce using rule 77 (compound_statement -> BEGIN statement_list END SEMICOLON .)


state 130

    (79) statement_list_tail -> SEMICOLON statement . statement_list_tail
    (79) statement_list_tail -> . SEMICOLON statement statement_list_tail
    (80) statement_list_tail -> . empty
    (132) empty -> .

    SEMICOLON       shift and go to state 71
    END             reduce using rule 132 (empty -> .)

    statement_list_tail            shift and go to state 199
    empty                          shift and go to state 72

state 131

    (134) statement -> READLN LPAREN variable . RPAREN

    RPAREN          shift and go to state 200


state 132

    (93) variable -> ID .
    (94) variable -> ID . LBRACKET index_list RBRACKET

    RPAREN          reduce using rule 93 (variable -> ID .)
    RBRACKET        reduce using rule 93 (variable -> ID .)
    LBRACKET        shift and go to state 80


state 133

    (135) statement -> READLN LBRACKET variable . RBRACKET

    RBRACKET        shift and go to state 201


state 134

    (92) assignment_statement -> variable COLON_EQUAL expression .
    (117) expression -> expression . PLUS expression
    (118) expression -> expression . MINUS expression
    (119) expression -> expression . TIMES expression
    (120) expression -> expression . DIVIDE expression
    (121) expression -> expression . MOD expression
    (146) expression -> expression . AND expression
    (147) expression -> expression . OR expression

    SEMICOLON       reduce using rule 92 (assignment_statement -> variable COLON_EQUAL expression .)
    END             reduce using rule 92 (assignment_statement -> variable COLON_EQUAL expression .)
    ELSE            reduce using rule 92 (assignment_statement -> variable COLON_EQUAL expression .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 145
    TIMES           shift and go to state 146
    DIVIDE          shift and go to state 147
    MOD             shift and go to state 148
    AND             shift and go to state 149
    OR              shift and go to state 150


state 135

    (136) statement -> WRITELN LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 202


state 136

    (100) expression_list -> expression . expression_list_tail
    (117) expression -> expression . PLUS expression
    (118) expression -> expression . MINUS expression
    (119) expression -> expression . TIMES expression
    (120) expression -> expression . DIVIDE expression
    (121) expression -> expression . MOD expression
    (146) expression -> expression . AND expression
    (147) expression -> expression . OR expression
    (101) expression_list_tail -> . COMMA expression expression_list_tail
    (102) expression_list_tail -> . empty
    (132) empty -> .

    PLUS            shift and go to state 144
    MINUS           shift and go to state 145
    TIMES           shift and go to state 146
    DIVIDE          shift and go to state 147
    MOD             shift and go to state 148
    AND             shift and go to state 149
    OR              shift and go to state 150
    COMMA           shift and go to state 204
    RPAREN          reduce using rule 132 (empty -> .)

    expression_list_tail           shift and go to state 203
    empty                          shift and go to state 205

state 137

    (103) expression_list -> empty .

    RPAREN          reduce using rule 103 (expression_list -> empty .)


state 138

    (137) statement -> WRITE LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 206


state 139

    (138) statement -> USES ID SEMICOLON .

    SEMICOLON       reduce using rule 138 (statement -> USES ID SEMICOLON .)
    END             reduce using rule 138 (statement -> USES ID SEMICOLON .)
    ELSE            reduce using rule 138 (statement -> USES ID SEMICOLON .)


state 140

    (98) procedure_call -> ID LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 207


state 141

    (94) variable -> ID LBRACKET index_list . RBRACKET
    (96) index_list -> index_list . COMMA expression

    RBRACKET        shift and go to state 208
    COMMA           shift and go to state 209


state 142

    (95) index_list -> expression .
    (117) expression -> expression . PLUS expression
    (118) expression -> expression . MINUS expression
    (119) expression -> expression . TIMES expression
    (120) expression -> expression . DIVIDE expression
    (121) expression -> expression . MOD expression
    (146) expression -> expression . AND expression
    (147) expression -> expression . OR expression

    RBRACKET        reduce using rule 95 (index_list -> expression .)
    COMMA           reduce using rule 95 (index_list -> expression .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 145
    TIMES           shift and go to state 146
    DIVIDE          shift and go to state 147
    MOD             shift and go to state 148
    AND             shift and go to state 149
    OR              shift and go to state 150


state 143

    (88) if_statement -> IF expression THEN . statement ELSE statement
    (89) if_statement -> IF expression THEN . statement
    (81) statement -> . if_statement
    (82) statement -> . assignment_statement
    (83) statement -> . while_statement
    (84) statement -> . procedure_call
    (85) statement -> . compound_statement
    (86) statement -> . for_statement
    (87) statement -> . empty
    (133) statement -> . READLN
    (134) statement -> . READLN LPAREN variable RPAREN
    (135) statement -> . READLN LBRACKET variable RBRACKET
    (136) statement -> . WRITELN LPAREN expression_list RPAREN
    (137) statement -> . WRITE LPAREN expression_list RPAREN
    (138) statement -> . USES ID SEMICOLON
    (88) if_statement -> . IF expression THEN statement ELSE statement
    (89) if_statement -> . IF expression THEN statement
    (92) assignment_statement -> . variable COLON_EQUAL expression
    (97) while_statement -> . WHILE expression DO statement
    (98) procedure_call -> . ID LPAREN expression_list RPAREN
    (99) procedure_call -> . ID
    (76) compound_statement -> . BEGIN statement_list END
    (77) compound_statement -> . BEGIN statement_list END SEMICOLON
    (90) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (91) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (132) empty -> .
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    READLN          shift and go to state 49
    WRITELN         shift and go to state 51
    WRITE           shift and go to state 52
    USES            shift and go to state 53
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    ID              shift and go to state 54
    BEGIN           shift and go to state 24
    FOR             shift and go to state 57
    ELSE            reduce using rule 132 (empty -> .)
    SEMICOLON       reduce using rule 132 (empty -> .)
    END             reduce using rule 132 (empty -> .)

    statement                      shift and go to state 210
    if_statement                   shift and go to state 42
    assignment_statement           shift and go to state 43
    while_statement                shift and go to state 44
    procedure_call                 shift and go to state 45
    compound_statement             shift and go to state 46
    for_statement                  shift and go to state 47
    empty                          shift and go to state 48
    variable                       shift and go to state 50

state 144

    (117) expression -> expression PLUS . expression
    (104) expression -> . simple_expression relop simple_expression
    (105) expression -> . simple_expression
    (117) expression -> . expression PLUS expression
    (118) expression -> . expression MINUS expression
    (119) expression -> . expression TIMES expression
    (120) expression -> . expression DIVIDE expression
    (121) expression -> . expression MOD expression
    (146) expression -> . expression AND expression
    (147) expression -> . expression OR expression
    (148) expression -> . NOT expression
    (106) simple_expression -> . term simple_expression_tail
    (111) term -> . factor term_tail
    (70) factor -> . function_call
    (122) factor -> . LPAREN expression RPAREN
    (123) factor -> . variable
    (124) factor -> . NUMBER
    (125) factor -> . STRING_LITERAL
    (69) function_call -> . ID LPAREN expression_list RPAREN
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 211
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 145

    (118) expression -> expression MINUS . expression
    (104) expression -> . simple_expression relop simple_expression
    (105) expression -> . simple_expression
    (117) expression -> . expression PLUS expression
    (118) expression -> . expression MINUS expression
    (119) expression -> . expression TIMES expression
    (120) expression -> . expression DIVIDE expression
    (121) expression -> . expression MOD expression
    (146) expression -> . expression AND expression
    (147) expression -> . expression OR expression
    (148) expression -> . NOT expression
    (106) simple_expression -> . term simple_expression_tail
    (111) term -> . factor term_tail
    (70) factor -> . function_call
    (122) factor -> . LPAREN expression RPAREN
    (123) factor -> . variable
    (124) factor -> . NUMBER
    (125) factor -> . STRING_LITERAL
    (69) function_call -> . ID LPAREN expression_list RPAREN
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 212
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 146

    (119) expression -> expression TIMES . expression
    (104) expression -> . simple_expression relop simple_expression
    (105) expression -> . simple_expression
    (117) expression -> . expression PLUS expression
    (118) expression -> . expression MINUS expression
    (119) expression -> . expression TIMES expression
    (120) expression -> . expression DIVIDE expression
    (121) expression -> . expression MOD expression
    (146) expression -> . expression AND expression
    (147) expression -> . expression OR expression
    (148) expression -> . NOT expression
    (106) simple_expression -> . term simple_expression_tail
    (111) term -> . factor term_tail
    (70) factor -> . function_call
    (122) factor -> . LPAREN expression RPAREN
    (123) factor -> . variable
    (124) factor -> . NUMBER
    (125) factor -> . STRING_LITERAL
    (69) function_call -> . ID LPAREN expression_list RPAREN
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 213
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 147

    (120) expression -> expression DIVIDE . expression
    (104) expression -> . simple_expression relop simple_expression
    (105) expression -> . simple_expression
    (117) expression -> . expression PLUS expression
    (118) expression -> . expression MINUS expression
    (119) expression -> . expression TIMES expression
    (120) expression -> . expression DIVIDE expression
    (121) expression -> . expression MOD expression
    (146) expression -> . expression AND expression
    (147) expression -> . expression OR expression
    (148) expression -> . NOT expression
    (106) simple_expression -> . term simple_expression_tail
    (111) term -> . factor term_tail
    (70) factor -> . function_call
    (122) factor -> . LPAREN expression RPAREN
    (123) factor -> . variable
    (124) factor -> . NUMBER
    (125) factor -> . STRING_LITERAL
    (69) function_call -> . ID LPAREN expression_list RPAREN
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 214
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 148

    (121) expression -> expression MOD . expression
    (104) expression -> . simple_expression relop simple_expression
    (105) expression -> . simple_expression
    (117) expression -> . expression PLUS expression
    (118) expression -> . expression MINUS expression
    (119) expression -> . expression TIMES expression
    (120) expression -> . expression DIVIDE expression
    (121) expression -> . expression MOD expression
    (146) expression -> . expression AND expression
    (147) expression -> . expression OR expression
    (148) expression -> . NOT expression
    (106) simple_expression -> . term simple_expression_tail
    (111) term -> . factor term_tail
    (70) factor -> . function_call
    (122) factor -> . LPAREN expression RPAREN
    (123) factor -> . variable
    (124) factor -> . NUMBER
    (125) factor -> . STRING_LITERAL
    (69) function_call -> . ID LPAREN expression_list RPAREN
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 215
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 149

    (146) expression -> expression AND . expression
    (104) expression -> . simple_expression relop simple_expression
    (105) expression -> . simple_expression
    (117) expression -> . expression PLUS expression
    (118) expression -> . expression MINUS expression
    (119) expression -> . expression TIMES expression
    (120) expression -> . expression DIVIDE expression
    (121) expression -> . expression MOD expression
    (146) expression -> . expression AND expression
    (147) expression -> . expression OR expression
    (148) expression -> . NOT expression
    (106) simple_expression -> . term simple_expression_tail
    (111) term -> . factor term_tail
    (70) factor -> . function_call
    (122) factor -> . LPAREN expression RPAREN
    (123) factor -> . variable
    (124) factor -> . NUMBER
    (125) factor -> . STRING_LITERAL
    (69) function_call -> . ID LPAREN expression_list RPAREN
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 216
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 150

    (147) expression -> expression OR . expression
    (104) expression -> . simple_expression relop simple_expression
    (105) expression -> . simple_expression
    (117) expression -> . expression PLUS expression
    (118) expression -> . expression MINUS expression
    (119) expression -> . expression TIMES expression
    (120) expression -> . expression DIVIDE expression
    (121) expression -> . expression MOD expression
    (146) expression -> . expression AND expression
    (147) expression -> . expression OR expression
    (148) expression -> . NOT expression
    (106) simple_expression -> . term simple_expression_tail
    (111) term -> . factor term_tail
    (70) factor -> . function_call
    (122) factor -> . LPAREN expression RPAREN
    (123) factor -> . variable
    (124) factor -> . NUMBER
    (125) factor -> . STRING_LITERAL
    (69) function_call -> . ID LPAREN expression_list RPAREN
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 217
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 151

    (104) expression -> simple_expression relop . simple_expression
    (106) simple_expression -> . term simple_expression_tail
    (111) term -> . factor term_tail
    (70) factor -> . function_call
    (122) factor -> . LPAREN expression RPAREN
    (123) factor -> . variable
    (124) factor -> . NUMBER
    (125) factor -> . STRING_LITERAL
    (69) function_call -> . ID LPAREN expression_list RPAREN
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    simple_expression              shift and go to state 218
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 152

    (126) relop -> LESS .

    LPAREN          reduce using rule 126 (relop -> LESS .)
    NUMBER          reduce using rule 126 (relop -> LESS .)
    STRING_LITERAL  reduce using rule 126 (relop -> LESS .)
    ID              reduce using rule 126 (relop -> LESS .)


state 153

    (127) relop -> LESS_EQUAL .

    LPAREN          reduce using rule 127 (relop -> LESS_EQUAL .)
    NUMBER          reduce using rule 127 (relop -> LESS_EQUAL .)
    STRING_LITERAL  reduce using rule 127 (relop -> LESS_EQUAL .)
    ID              reduce using rule 127 (relop -> LESS_EQUAL .)


state 154

    (128) relop -> GREAT .

    LPAREN          reduce using rule 128 (relop -> GREAT .)
    NUMBER          reduce using rule 128 (relop -> GREAT .)
    STRING_LITERAL  reduce using rule 128 (relop -> GREAT .)
    ID              reduce using rule 128 (relop -> GREAT .)


state 155

    (129) relop -> GREAT_EQUAL .

    LPAREN          reduce using rule 129 (relop -> GREAT_EQUAL .)
    NUMBER          reduce using rule 129 (relop -> GREAT_EQUAL .)
    STRING_LITERAL  reduce using rule 129 (relop -> GREAT_EQUAL .)
    ID              reduce using rule 129 (relop -> GREAT_EQUAL .)


state 156

    (130) relop -> EQUAL .

    LPAREN          reduce using rule 130 (relop -> EQUAL .)
    NUMBER          reduce using rule 130 (relop -> EQUAL .)
    STRING_LITERAL  reduce using rule 130 (relop -> EQUAL .)
    ID              reduce using rule 130 (relop -> EQUAL .)


state 157

    (131) relop -> DIFFERENT .

    LPAREN          reduce using rule 131 (relop -> DIFFERENT .)
    NUMBER          reduce using rule 131 (relop -> DIFFERENT .)
    STRING_LITERAL  reduce using rule 131 (relop -> DIFFERENT .)
    ID              reduce using rule 131 (relop -> DIFFERENT .)


state 158

    (148) expression -> NOT expression .
    (117) expression -> expression . PLUS expression
    (118) expression -> expression . MINUS expression
    (119) expression -> expression . TIMES expression
    (120) expression -> expression . DIVIDE expression
    (121) expression -> expression . MOD expression
    (146) expression -> expression . AND expression
    (147) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 148 (expression -> NOT expression .)
    DO              reduce using rule 148 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 148 (expression -> NOT expression .)
    END             reduce using rule 148 (expression -> NOT expression .)
    ELSE            reduce using rule 148 (expression -> NOT expression .)
    COMMA           reduce using rule 148 (expression -> NOT expression .)
    RPAREN          reduce using rule 148 (expression -> NOT expression .)
    RBRACKET        reduce using rule 148 (expression -> NOT expression .)
    TO              reduce using rule 148 (expression -> NOT expression .)
    DOWNTO          reduce using rule 148 (expression -> NOT expression .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 145
    TIMES           shift and go to state 146
    DIVIDE          shift and go to state 147
    MOD             shift and go to state 148
    AND             shift and go to state 149
    OR              shift and go to state 150

  ! PLUS            [ reduce using rule 148 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 148 (expression -> NOT expression .) ]
  ! TIMES           [ reduce using rule 148 (expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 148 (expression -> NOT expression .) ]
  ! MOD             [ reduce using rule 148 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 148 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 148 (expression -> NOT expression .) ]


state 159

    (106) simple_expression -> term simple_expression_tail .

    LESS            reduce using rule 106 (simple_expression -> term simple_expression_tail .)
    LESS_EQUAL      reduce using rule 106 (simple_expression -> term simple_expression_tail .)
    GREAT           reduce using rule 106 (simple_expression -> term simple_expression_tail .)
    GREAT_EQUAL     reduce using rule 106 (simple_expression -> term simple_expression_tail .)
    EQUAL           reduce using rule 106 (simple_expression -> term simple_expression_tail .)
    DIFFERENT       reduce using rule 106 (simple_expression -> term simple_expression_tail .)
    THEN            reduce using rule 106 (simple_expression -> term simple_expression_tail .)
    PLUS            reduce using rule 106 (simple_expression -> term simple_expression_tail .)
    MINUS           reduce using rule 106 (simple_expression -> term simple_expression_tail .)
    TIMES           reduce using rule 106 (simple_expression -> term simple_expression_tail .)
    DIVIDE          reduce using rule 106 (simple_expression -> term simple_expression_tail .)
    MOD             reduce using rule 106 (simple_expression -> term simple_expression_tail .)
    AND             reduce using rule 106 (simple_expression -> term simple_expression_tail .)
    OR              reduce using rule 106 (simple_expression -> term simple_expression_tail .)
    DO              reduce using rule 106 (simple_expression -> term simple_expression_tail .)
    SEMICOLON       reduce using rule 106 (simple_expression -> term simple_expression_tail .)
    END             reduce using rule 106 (simple_expression -> term simple_expression_tail .)
    ELSE            reduce using rule 106 (simple_expression -> term simple_expression_tail .)
    COMMA           reduce using rule 106 (simple_expression -> term simple_expression_tail .)
    RPAREN          reduce using rule 106 (simple_expression -> term simple_expression_tail .)
    RBRACKET        reduce using rule 106 (simple_expression -> term simple_expression_tail .)
    TO              reduce using rule 106 (simple_expression -> term simple_expression_tail .)
    DOWNTO          reduce using rule 106 (simple_expression -> term simple_expression_tail .)


state 160

    (107) simple_expression_tail -> addop . term
    (111) term -> . factor term_tail
    (70) factor -> . function_call
    (122) factor -> . LPAREN expression RPAREN
    (123) factor -> . variable
    (124) factor -> . NUMBER
    (125) factor -> . STRING_LITERAL
    (69) function_call -> . ID LPAREN expression_list RPAREN
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    term                           shift and go to state 219
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 161

    (108) simple_expression_tail -> empty .

    LESS            reduce using rule 108 (simple_expression_tail -> empty .)
    LESS_EQUAL      reduce using rule 108 (simple_expression_tail -> empty .)
    GREAT           reduce using rule 108 (simple_expression_tail -> empty .)
    GREAT_EQUAL     reduce using rule 108 (simple_expression_tail -> empty .)
    EQUAL           reduce using rule 108 (simple_expression_tail -> empty .)
    DIFFERENT       reduce using rule 108 (simple_expression_tail -> empty .)
    THEN            reduce using rule 108 (simple_expression_tail -> empty .)
    PLUS            reduce using rule 108 (simple_expression_tail -> empty .)
    MINUS           reduce using rule 108 (simple_expression_tail -> empty .)
    TIMES           reduce using rule 108 (simple_expression_tail -> empty .)
    DIVIDE          reduce using rule 108 (simple_expression_tail -> empty .)
    MOD             reduce using rule 108 (simple_expression_tail -> empty .)
    AND             reduce using rule 108 (simple_expression_tail -> empty .)
    OR              reduce using rule 108 (simple_expression_tail -> empty .)
    DO              reduce using rule 108 (simple_expression_tail -> empty .)
    SEMICOLON       reduce using rule 108 (simple_expression_tail -> empty .)
    END             reduce using rule 108 (simple_expression_tail -> empty .)
    ELSE            reduce using rule 108 (simple_expression_tail -> empty .)
    COMMA           reduce using rule 108 (simple_expression_tail -> empty .)
    RPAREN          reduce using rule 108 (simple_expression_tail -> empty .)
    RBRACKET        reduce using rule 108 (simple_expression_tail -> empty .)
    TO              reduce using rule 108 (simple_expression_tail -> empty .)
    DOWNTO          reduce using rule 108 (simple_expression_tail -> empty .)


state 162

    (109) addop -> PLUS .

    LPAREN          reduce using rule 109 (addop -> PLUS .)
    NUMBER          reduce using rule 109 (addop -> PLUS .)
    STRING_LITERAL  reduce using rule 109 (addop -> PLUS .)
    ID              reduce using rule 109 (addop -> PLUS .)


state 163

    (110) addop -> MINUS .

    LPAREN          reduce using rule 110 (addop -> MINUS .)
    NUMBER          reduce using rule 110 (addop -> MINUS .)
    STRING_LITERAL  reduce using rule 110 (addop -> MINUS .)
    ID              reduce using rule 110 (addop -> MINUS .)


state 164

    (111) term -> factor term_tail .

    PLUS            reduce using rule 111 (term -> factor term_tail .)
    MINUS           reduce using rule 111 (term -> factor term_tail .)
    LESS            reduce using rule 111 (term -> factor term_tail .)
    LESS_EQUAL      reduce using rule 111 (term -> factor term_tail .)
    GREAT           reduce using rule 111 (term -> factor term_tail .)
    GREAT_EQUAL     reduce using rule 111 (term -> factor term_tail .)
    EQUAL           reduce using rule 111 (term -> factor term_tail .)
    DIFFERENT       reduce using rule 111 (term -> factor term_tail .)
    THEN            reduce using rule 111 (term -> factor term_tail .)
    TIMES           reduce using rule 111 (term -> factor term_tail .)
    DIVIDE          reduce using rule 111 (term -> factor term_tail .)
    MOD             reduce using rule 111 (term -> factor term_tail .)
    AND             reduce using rule 111 (term -> factor term_tail .)
    OR              reduce using rule 111 (term -> factor term_tail .)
    DO              reduce using rule 111 (term -> factor term_tail .)
    SEMICOLON       reduce using rule 111 (term -> factor term_tail .)
    END             reduce using rule 111 (term -> factor term_tail .)
    ELSE            reduce using rule 111 (term -> factor term_tail .)
    COMMA           reduce using rule 111 (term -> factor term_tail .)
    RPAREN          reduce using rule 111 (term -> factor term_tail .)
    RBRACKET        reduce using rule 111 (term -> factor term_tail .)
    TO              reduce using rule 111 (term -> factor term_tail .)
    DOWNTO          reduce using rule 111 (term -> factor term_tail .)


state 165

    (112) term_tail -> mulop . factor
    (70) factor -> . function_call
    (122) factor -> . LPAREN expression RPAREN
    (123) factor -> . variable
    (124) factor -> . NUMBER
    (125) factor -> . STRING_LITERAL
    (69) function_call -> . ID LPAREN expression_list RPAREN
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    factor                         shift and go to state 220
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 166

    (113) term_tail -> empty .

    PLUS            reduce using rule 113 (term_tail -> empty .)
    MINUS           reduce using rule 113 (term_tail -> empty .)
    LESS            reduce using rule 113 (term_tail -> empty .)
    LESS_EQUAL      reduce using rule 113 (term_tail -> empty .)
    GREAT           reduce using rule 113 (term_tail -> empty .)
    GREAT_EQUAL     reduce using rule 113 (term_tail -> empty .)
    EQUAL           reduce using rule 113 (term_tail -> empty .)
    DIFFERENT       reduce using rule 113 (term_tail -> empty .)
    THEN            reduce using rule 113 (term_tail -> empty .)
    TIMES           reduce using rule 113 (term_tail -> empty .)
    DIVIDE          reduce using rule 113 (term_tail -> empty .)
    MOD             reduce using rule 113 (term_tail -> empty .)
    AND             reduce using rule 113 (term_tail -> empty .)
    OR              reduce using rule 113 (term_tail -> empty .)
    DO              reduce using rule 113 (term_tail -> empty .)
    SEMICOLON       reduce using rule 113 (term_tail -> empty .)
    END             reduce using rule 113 (term_tail -> empty .)
    ELSE            reduce using rule 113 (term_tail -> empty .)
    COMMA           reduce using rule 113 (term_tail -> empty .)
    RPAREN          reduce using rule 113 (term_tail -> empty .)
    RBRACKET        reduce using rule 113 (term_tail -> empty .)
    TO              reduce using rule 113 (term_tail -> empty .)
    DOWNTO          reduce using rule 113 (term_tail -> empty .)


state 167

    (114) mulop -> TIMES .

    LPAREN          reduce using rule 114 (mulop -> TIMES .)
    NUMBER          reduce using rule 114 (mulop -> TIMES .)
    STRING_LITERAL  reduce using rule 114 (mulop -> TIMES .)
    ID              reduce using rule 114 (mulop -> TIMES .)


state 168

    (115) mulop -> DIVIDE .

    LPAREN          reduce using rule 115 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 115 (mulop -> DIVIDE .)
    STRING_LITERAL  reduce using rule 115 (mulop -> DIVIDE .)
    ID              reduce using rule 115 (mulop -> DIVIDE .)


state 169

    (116) mulop -> DIV .

    LPAREN          reduce using rule 116 (mulop -> DIV .)
    NUMBER          reduce using rule 116 (mulop -> DIV .)
    STRING_LITERAL  reduce using rule 116 (mulop -> DIV .)
    ID              reduce using rule 116 (mulop -> DIV .)


state 170

    (122) factor -> LPAREN expression . RPAREN
    (117) expression -> expression . PLUS expression
    (118) expression -> expression . MINUS expression
    (119) expression -> expression . TIMES expression
    (120) expression -> expression . DIVIDE expression
    (121) expression -> expression . MOD expression
    (146) expression -> expression . AND expression
    (147) expression -> expression . OR expression

    RPAREN          shift and go to state 221
    PLUS            shift and go to state 144
    MINUS           shift and go to state 145
    TIMES           shift and go to state 146
    DIVIDE          shift and go to state 147
    MOD             shift and go to state 148
    AND             shift and go to state 149
    OR              shift and go to state 150


state 171

    (69) function_call -> ID LPAREN . expression_list RPAREN
    (100) expression_list -> . expression expression_list_tail
    (103) expression_list -> . empty
    (104) expression -> . simple_expression relop simple_expression
    (105) expression -> . simple_expression
    (117) expression -> . expression PLUS expression
    (118) expression -> . expression MINUS expression
    (119) expression -> . expression TIMES expression
    (120) expression -> . expression DIVIDE expression
    (121) expression -> . expression MOD expression
    (146) expression -> . expression AND expression
    (147) expression -> . expression OR expression
    (148) expression -> . NOT expression
    (132) empty -> .
    (106) simple_expression -> . term simple_expression_tail
    (111) term -> . factor term_tail
    (70) factor -> . function_call
    (122) factor -> . LPAREN expression RPAREN
    (123) factor -> . variable
    (124) factor -> . NUMBER
    (125) factor -> . STRING_LITERAL
    (69) function_call -> . ID LPAREN expression_list RPAREN
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    RPAREN          reduce using rule 132 (empty -> .)
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression_list                shift and go to state 222
    expression                     shift and go to state 136
    empty                          shift and go to state 137
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 172

    (97) while_statement -> WHILE expression DO . statement
    (81) statement -> . if_statement
    (82) statement -> . assignment_statement
    (83) statement -> . while_statement
    (84) statement -> . procedure_call
    (85) statement -> . compound_statement
    (86) statement -> . for_statement
    (87) statement -> . empty
    (133) statement -> . READLN
    (134) statement -> . READLN LPAREN variable RPAREN
    (135) statement -> . READLN LBRACKET variable RBRACKET
    (136) statement -> . WRITELN LPAREN expression_list RPAREN
    (137) statement -> . WRITE LPAREN expression_list RPAREN
    (138) statement -> . USES ID SEMICOLON
    (88) if_statement -> . IF expression THEN statement ELSE statement
    (89) if_statement -> . IF expression THEN statement
    (92) assignment_statement -> . variable COLON_EQUAL expression
    (97) while_statement -> . WHILE expression DO statement
    (98) procedure_call -> . ID LPAREN expression_list RPAREN
    (99) procedure_call -> . ID
    (76) compound_statement -> . BEGIN statement_list END
    (77) compound_statement -> . BEGIN statement_list END SEMICOLON
    (90) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (91) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (132) empty -> .
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    READLN          shift and go to state 49
    WRITELN         shift and go to state 51
    WRITE           shift and go to state 52
    USES            shift and go to state 53
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    ID              shift and go to state 54
    BEGIN           shift and go to state 24
    FOR             shift and go to state 57
    ELSE            reduce using rule 132 (empty -> .)
    SEMICOLON       reduce using rule 132 (empty -> .)
    END             reduce using rule 132 (empty -> .)

    statement                      shift and go to state 223
    if_statement                   shift and go to state 42
    assignment_statement           shift and go to state 43
    while_statement                shift and go to state 44
    procedure_call                 shift and go to state 45
    compound_statement             shift and go to state 46
    for_statement                  shift and go to state 47
    empty                          shift and go to state 48
    variable                       shift and go to state 50

state 173

    (90) for_statement -> FOR ID COLON_EQUAL . expression TO expression DO statement
    (91) for_statement -> FOR ID COLON_EQUAL . expression DOWNTO expression DO statement
    (104) expression -> . simple_expression relop simple_expression
    (105) expression -> . simple_expression
    (117) expression -> . expression PLUS expression
    (118) expression -> . expression MINUS expression
    (119) expression -> . expression TIMES expression
    (120) expression -> . expression DIVIDE expression
    (121) expression -> . expression MOD expression
    (146) expression -> . expression AND expression
    (147) expression -> . expression OR expression
    (148) expression -> . NOT expression
    (106) simple_expression -> . term simple_expression_tail
    (111) term -> . factor term_tail
    (70) factor -> . function_call
    (122) factor -> . LPAREN expression RPAREN
    (123) factor -> . variable
    (124) factor -> . NUMBER
    (125) factor -> . STRING_LITERAL
    (69) function_call -> . ID LPAREN expression_list RPAREN
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 224
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 174

    (142) constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .

    ID              reduce using rule 142 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    USES            reduce using rule 142 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    CONST           reduce using rule 142 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    TYPE            reduce using rule 142 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    VAR             reduce using rule 142 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    FUNCTION        reduce using rule 142 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    PROCEDURE       reduce using rule 142 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    BEGIN           reduce using rule 142 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)


state 175

    (143) constant -> ID EQUAL NUMBER SEMICOLON .

    ID              reduce using rule 143 (constant -> ID EQUAL NUMBER SEMICOLON .)
    USES            reduce using rule 143 (constant -> ID EQUAL NUMBER SEMICOLON .)
    CONST           reduce using rule 143 (constant -> ID EQUAL NUMBER SEMICOLON .)
    TYPE            reduce using rule 143 (constant -> ID EQUAL NUMBER SEMICOLON .)
    VAR             reduce using rule 143 (constant -> ID EQUAL NUMBER SEMICOLON .)
    FUNCTION        reduce using rule 143 (constant -> ID EQUAL NUMBER SEMICOLON .)
    PROCEDURE       reduce using rule 143 (constant -> ID EQUAL NUMBER SEMICOLON .)
    BEGIN           reduce using rule 143 (constant -> ID EQUAL NUMBER SEMICOLON .)


state 176

    (144) constant -> ID EQUAL STRING_LITERAL SEMICOLON .

    ID              reduce using rule 144 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    USES            reduce using rule 144 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    CONST           reduce using rule 144 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    TYPE            reduce using rule 144 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    VAR             reduce using rule 144 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    FUNCTION        reduce using rule 144 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    PROCEDURE       reduce using rule 144 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    BEGIN           reduce using rule 144 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)


state 177

    (145) constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .

    ID              reduce using rule 145 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    USES            reduce using rule 145 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    CONST           reduce using rule 145 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    TYPE            reduce using rule 145 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    VAR             reduce using rule 145 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    FUNCTION        reduce using rule 145 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    PROCEDURE       reduce using rule 145 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    BEGIN           reduce using rule 145 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)


state 178

    (21) type_definition -> ID EQUAL type_specifier SEMICOLON .

    ID              reduce using rule 21 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    USES            reduce using rule 21 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    CONST           reduce using rule 21 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    TYPE            reduce using rule 21 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    VAR             reduce using rule 21 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 21 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 21 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    BEGIN           reduce using rule 21 (type_definition -> ID EQUAL type_specifier SEMICOLON .)


state 179

    (22) type_specifier -> ARRAY LBRACKET . type_expression RBRACKET OF type_specifier
    (36) type_expression -> . type_expression COMMA subrange
    (37) type_expression -> . subrange
    (38) subrange -> . NUMBER DOTDOT NUMBER

    NUMBER          shift and go to state 113

    type_expression                shift and go to state 225
    subrange                       shift and go to state 226

state 180

    (24) type_specifier -> FILE OF . type_specifier
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING
    (34) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (35) type_specifier -> . ID
    (58) type_specifier -> . LONGINT
    (38) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 101
    FILE            shift and go to state 103
    SET             shift and go to state 104
    RECORD          shift and go to state 105
    OBJECT          shift and go to state 106
    LPAREN          shift and go to state 107
    BOOLEAN_LITERAL shift and go to state 108
    INTEGER         shift and go to state 109
    BYTE            shift and go to state 110
    CHAR            shift and go to state 111
    STRING          shift and go to state 112
    ID              shift and go to state 99
    LONGINT         shift and go to state 114
    NUMBER          shift and go to state 113

    type_specifier                 shift and go to state 227
    subrange                       shift and go to state 102

state 181

    (25) type_specifier -> SET OF . type_specifier
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING
    (34) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (35) type_specifier -> . ID
    (58) type_specifier -> . LONGINT
    (38) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 101
    FILE            shift and go to state 103
    SET             shift and go to state 104
    RECORD          shift and go to state 105
    OBJECT          shift and go to state 106
    LPAREN          shift and go to state 107
    BOOLEAN_LITERAL shift and go to state 108
    INTEGER         shift and go to state 109
    BYTE            shift and go to state 110
    CHAR            shift and go to state 111
    STRING          shift and go to state 112
    ID              shift and go to state 99
    LONGINT         shift and go to state 114
    NUMBER          shift and go to state 113

    type_specifier                 shift and go to state 228
    subrange                       shift and go to state 102

state 182

    (26) type_specifier -> RECORD field_list . case_part END
    (39) field_list -> field_list . field
    (46) case_part -> . CASE ID COLON type_specifier OF case_list SEMICOLON
    (47) case_part -> . empty
    (42) field -> . id_list COLON type_specifier
    (43) field -> . id_list COLON type_specifier SEMICOLON
    (44) field -> . VAR id_list COLON type_specifier
    (45) field -> . VAR id_list COLON type_specifier SEMICOLON
    (132) empty -> .
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    CASE            shift and go to state 230
    VAR             shift and go to state 126
    END             reduce using rule 132 (empty -> .)
    ID              shift and go to state 28

    case_part                      shift and go to state 229
    field                          shift and go to state 193
    empty                          shift and go to state 231
    id_list                        shift and go to state 125

state 183

    (27) type_specifier -> OBJECT field_list . method_list END
    (39) field_list -> field_list . field
    (51) method_list -> . method_list method
    (52) method_list -> . method
    (53) method_list -> . empty
    (42) field -> . id_list COLON type_specifier
    (43) field -> . id_list COLON type_specifier SEMICOLON
    (44) field -> . VAR id_list COLON type_specifier
    (45) field -> . VAR id_list COLON type_specifier SEMICOLON
    (54) method -> . CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON
    (55) method -> . PROCEDURE ID LPAREN field_list RPAREN SEMICOLON
    (56) method -> . FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON
    (57) method -> . DESTRUCTOR ID SEMICOLON
    (132) empty -> .
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for PROCEDURE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DESTRUCTOR resolved as shift
    VAR             shift and go to state 126
    CONSTRUCTOR     shift and go to state 235
    PROCEDURE       shift and go to state 236
    FUNCTION        shift and go to state 237
    DESTRUCTOR      shift and go to state 238
    END             reduce using rule 132 (empty -> .)
    ID              shift and go to state 28

  ! CONSTRUCTOR     [ reduce using rule 132 (empty -> .) ]
  ! PROCEDURE       [ reduce using rule 132 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 132 (empty -> .) ]
  ! DESTRUCTOR      [ reduce using rule 132 (empty -> .) ]

    method_list                    shift and go to state 232
    field                          shift and go to state 193
    method                         shift and go to state 233
    empty                          shift and go to state 234
    id_list                        shift and go to state 125

state 184

    (28) type_specifier -> LPAREN id_list . RPAREN
    (12) id_list -> id_list . COMMA ID

    RPAREN          shift and go to state 239
    COMMA           shift and go to state 59


state 185

    (34) type_specifier -> STRING LBRACKET . NUMBER RBRACKET

    NUMBER          shift and go to state 240


state 186

    (38) subrange -> NUMBER DOTDOT . NUMBER

    NUMBER          shift and go to state 241


state 187

    (16) declaration -> id_list COLON type_specifier SEMICOLON .

    ID              reduce using rule 16 (declaration -> id_list COLON type_specifier SEMICOLON .)
    USES            reduce using rule 16 (declaration -> id_list COLON type_specifier SEMICOLON .)
    CONST           reduce using rule 16 (declaration -> id_list COLON type_specifier SEMICOLON .)
    TYPE            reduce using rule 16 (declaration -> id_list COLON type_specifier SEMICOLON .)
    VAR             reduce using rule 16 (declaration -> id_list COLON type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 16 (declaration -> id_list COLON type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 16 (declaration -> id_list COLON type_specifier SEMICOLON .)
    BEGIN           reduce using rule 16 (declaration -> id_list COLON type_specifier SEMICOLON .)


state 188

    (67) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN . COLON type_specifier SEMICOLON block SEMICOLON
    (68) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN . COLON type_specifier SEMICOLON FORWARD SEMICOLON

    COLON           shift and go to state 242


state 189

    (72) parameter_list -> parameter_list SEMICOLON . parameter
    (74) parameter -> . id_list COLON type_specifier
    (75) parameter -> . VAR id_list COLON type_specifier
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    VAR             shift and go to state 120
    ID              shift and go to state 28

    parameter                      shift and go to state 243
    id_list                        shift and go to state 119

state 190

    (74) parameter -> id_list COLON . type_specifier
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING
    (34) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (35) type_specifier -> . ID
    (58) type_specifier -> . LONGINT
    (38) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 101
    FILE            shift and go to state 103
    SET             shift and go to state 104
    RECORD          shift and go to state 105
    OBJECT          shift and go to state 106
    LPAREN          shift and go to state 107
    BOOLEAN_LITERAL shift and go to state 108
    INTEGER         shift and go to state 109
    BYTE            shift and go to state 110
    CHAR            shift and go to state 111
    STRING          shift and go to state 112
    ID              shift and go to state 99
    LONGINT         shift and go to state 114
    NUMBER          shift and go to state 113

    type_specifier                 shift and go to state 244
    subrange                       shift and go to state 102

state 191

    (75) parameter -> VAR id_list . COLON type_specifier
    (12) id_list -> id_list . COMMA ID

    COLON           shift and go to state 245
    COMMA           shift and go to state 59


state 192

    (61) procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN . SEMICOLON
    (64) procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN . SEMICOLON FORWARD SEMICOLON

    SEMICOLON       shift and go to state 246


state 193

    (39) field_list -> field_list field .

    RPAREN          reduce using rule 39 (field_list -> field_list field .)
    VAR             reduce using rule 39 (field_list -> field_list field .)
    ID              reduce using rule 39 (field_list -> field_list field .)
    CASE            reduce using rule 39 (field_list -> field_list field .)
    END             reduce using rule 39 (field_list -> field_list field .)
    CONSTRUCTOR     reduce using rule 39 (field_list -> field_list field .)
    PROCEDURE       reduce using rule 39 (field_list -> field_list field .)
    FUNCTION        reduce using rule 39 (field_list -> field_list field .)
    DESTRUCTOR      reduce using rule 39 (field_list -> field_list field .)


state 194

    (62) procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON . block SEMICOLON
    (65) procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON . FORWARD SEMICOLON
    (17) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (132) empty -> .

    FORWARD         shift and go to state 248
    BEGIN           reduce using rule 132 (empty -> .)
    USES            reduce using rule 132 (empty -> .)
    CONST           reduce using rule 132 (empty -> .)
    TYPE            reduce using rule 132 (empty -> .)
    VAR             reduce using rule 132 (empty -> .)
    FUNCTION        reduce using rule 132 (empty -> .)
    PROCEDURE       reduce using rule 132 (empty -> .)

    block                          shift and go to state 247
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 195

    (42) field -> id_list COLON . type_specifier
    (43) field -> id_list COLON . type_specifier SEMICOLON
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING
    (34) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (35) type_specifier -> . ID
    (58) type_specifier -> . LONGINT
    (38) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 101
    FILE            shift and go to state 103
    SET             shift and go to state 104
    RECORD          shift and go to state 105
    OBJECT          shift and go to state 106
    LPAREN          shift and go to state 107
    BOOLEAN_LITERAL shift and go to state 108
    INTEGER         shift and go to state 109
    BYTE            shift and go to state 110
    CHAR            shift and go to state 111
    STRING          shift and go to state 112
    ID              shift and go to state 99
    LONGINT         shift and go to state 114
    NUMBER          shift and go to state 113

    type_specifier                 shift and go to state 249
    subrange                       shift and go to state 102

state 196

    (44) field -> VAR id_list . COLON type_specifier
    (45) field -> VAR id_list . COLON type_specifier SEMICOLON
    (12) id_list -> id_list . COMMA ID

    COLON           shift and go to state 250
    COMMA           shift and go to state 59


state 197

    (63) procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .

    PROCEDURE       reduce using rule 63 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    USES            reduce using rule 63 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    CONST           reduce using rule 63 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    TYPE            reduce using rule 63 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    VAR             reduce using rule 63 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 63 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    BEGIN           reduce using rule 63 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)


state 198

    (66) procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .

    PROCEDURE       reduce using rule 66 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)
    USES            reduce using rule 66 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)
    CONST           reduce using rule 66 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)
    TYPE            reduce using rule 66 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)
    VAR             reduce using rule 66 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)
    FUNCTION        reduce using rule 66 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)
    BEGIN           reduce using rule 66 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)


state 199

    (79) statement_list_tail -> SEMICOLON statement statement_list_tail .

    END             reduce using rule 79 (statement_list_tail -> SEMICOLON statement statement_list_tail .)


state 200

    (134) statement -> READLN LPAREN variable RPAREN .

    SEMICOLON       reduce using rule 134 (statement -> READLN LPAREN variable RPAREN .)
    END             reduce using rule 134 (statement -> READLN LPAREN variable RPAREN .)
    ELSE            reduce using rule 134 (statement -> READLN LPAREN variable RPAREN .)


state 201

    (135) statement -> READLN LBRACKET variable RBRACKET .

    SEMICOLON       reduce using rule 135 (statement -> READLN LBRACKET variable RBRACKET .)
    END             reduce using rule 135 (statement -> READLN LBRACKET variable RBRACKET .)
    ELSE            reduce using rule 135 (statement -> READLN LBRACKET variable RBRACKET .)


state 202

    (136) statement -> WRITELN LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 136 (statement -> WRITELN LPAREN expression_list RPAREN .)
    END             reduce using rule 136 (statement -> WRITELN LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 136 (statement -> WRITELN LPAREN expression_list RPAREN .)


state 203

    (100) expression_list -> expression expression_list_tail .

    RPAREN          reduce using rule 100 (expression_list -> expression expression_list_tail .)


state 204

    (101) expression_list_tail -> COMMA . expression expression_list_tail
    (104) expression -> . simple_expression relop simple_expression
    (105) expression -> . simple_expression
    (117) expression -> . expression PLUS expression
    (118) expression -> . expression MINUS expression
    (119) expression -> . expression TIMES expression
    (120) expression -> . expression DIVIDE expression
    (121) expression -> . expression MOD expression
    (146) expression -> . expression AND expression
    (147) expression -> . expression OR expression
    (148) expression -> . NOT expression
    (106) simple_expression -> . term simple_expression_tail
    (111) term -> . factor term_tail
    (70) factor -> . function_call
    (122) factor -> . LPAREN expression RPAREN
    (123) factor -> . variable
    (124) factor -> . NUMBER
    (125) factor -> . STRING_LITERAL
    (69) function_call -> . ID LPAREN expression_list RPAREN
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 251
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 205

    (102) expression_list_tail -> empty .

    RPAREN          reduce using rule 102 (expression_list_tail -> empty .)


state 206

    (137) statement -> WRITE LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 137 (statement -> WRITE LPAREN expression_list RPAREN .)
    END             reduce using rule 137 (statement -> WRITE LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 137 (statement -> WRITE LPAREN expression_list RPAREN .)


state 207

    (98) procedure_call -> ID LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 98 (procedure_call -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 98 (procedure_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 98 (procedure_call -> ID LPAREN expression_list RPAREN .)


state 208

    (94) variable -> ID LBRACKET index_list RBRACKET .

    COLON_EQUAL     reduce using rule 94 (variable -> ID LBRACKET index_list RBRACKET .)
    TIMES           reduce using rule 94 (variable -> ID LBRACKET index_list RBRACKET .)
    DIVIDE          reduce using rule 94 (variable -> ID LBRACKET index_list RBRACKET .)
    DIV             reduce using rule 94 (variable -> ID LBRACKET index_list RBRACKET .)
    PLUS            reduce using rule 94 (variable -> ID LBRACKET index_list RBRACKET .)
    MINUS           reduce using rule 94 (variable -> ID LBRACKET index_list RBRACKET .)
    LESS            reduce using rule 94 (variable -> ID LBRACKET index_list RBRACKET .)
    LESS_EQUAL      reduce using rule 94 (variable -> ID LBRACKET index_list RBRACKET .)
    GREAT           reduce using rule 94 (variable -> ID LBRACKET index_list RBRACKET .)
    GREAT_EQUAL     reduce using rule 94 (variable -> ID LBRACKET index_list RBRACKET .)
    EQUAL           reduce using rule 94 (variable -> ID LBRACKET index_list RBRACKET .)
    DIFFERENT       reduce using rule 94 (variable -> ID LBRACKET index_list RBRACKET .)
    THEN            reduce using rule 94 (variable -> ID LBRACKET index_list RBRACKET .)
    MOD             reduce using rule 94 (variable -> ID LBRACKET index_list RBRACKET .)
    AND             reduce using rule 94 (variable -> ID LBRACKET index_list RBRACKET .)
    OR              reduce using rule 94 (variable -> ID LBRACKET index_list RBRACKET .)
    DO              reduce using rule 94 (variable -> ID LBRACKET index_list RBRACKET .)
    RPAREN          reduce using rule 94 (variable -> ID LBRACKET index_list RBRACKET .)
    RBRACKET        reduce using rule 94 (variable -> ID LBRACKET index_list RBRACKET .)
    SEMICOLON       reduce using rule 94 (variable -> ID LBRACKET index_list RBRACKET .)
    END             reduce using rule 94 (variable -> ID LBRACKET index_list RBRACKET .)
    ELSE            reduce using rule 94 (variable -> ID LBRACKET index_list RBRACKET .)
    COMMA           reduce using rule 94 (variable -> ID LBRACKET index_list RBRACKET .)
    TO              reduce using rule 94 (variable -> ID LBRACKET index_list RBRACKET .)
    DOWNTO          reduce using rule 94 (variable -> ID LBRACKET index_list RBRACKET .)


state 209

    (96) index_list -> index_list COMMA . expression
    (104) expression -> . simple_expression relop simple_expression
    (105) expression -> . simple_expression
    (117) expression -> . expression PLUS expression
    (118) expression -> . expression MINUS expression
    (119) expression -> . expression TIMES expression
    (120) expression -> . expression DIVIDE expression
    (121) expression -> . expression MOD expression
    (146) expression -> . expression AND expression
    (147) expression -> . expression OR expression
    (148) expression -> . NOT expression
    (106) simple_expression -> . term simple_expression_tail
    (111) term -> . factor term_tail
    (70) factor -> . function_call
    (122) factor -> . LPAREN expression RPAREN
    (123) factor -> . variable
    (124) factor -> . NUMBER
    (125) factor -> . STRING_LITERAL
    (69) function_call -> . ID LPAREN expression_list RPAREN
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 252
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 210

    (88) if_statement -> IF expression THEN statement . ELSE statement
    (89) if_statement -> IF expression THEN statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 253
    SEMICOLON       reduce using rule 89 (if_statement -> IF expression THEN statement .)
    END             reduce using rule 89 (if_statement -> IF expression THEN statement .)

  ! ELSE            [ reduce using rule 89 (if_statement -> IF expression THEN statement .) ]


state 211

    (117) expression -> expression PLUS expression .
    (117) expression -> expression . PLUS expression
    (118) expression -> expression . MINUS expression
    (119) expression -> expression . TIMES expression
    (120) expression -> expression . DIVIDE expression
    (121) expression -> expression . MOD expression
    (146) expression -> expression . AND expression
    (147) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 117 (expression -> expression PLUS expression .)
    DO              reduce using rule 117 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 117 (expression -> expression PLUS expression .)
    END             reduce using rule 117 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 117 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 117 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 117 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 117 (expression -> expression PLUS expression .)
    TO              reduce using rule 117 (expression -> expression PLUS expression .)
    DOWNTO          reduce using rule 117 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 145
    TIMES           shift and go to state 146
    DIVIDE          shift and go to state 147
    MOD             shift and go to state 148
    AND             shift and go to state 149
    OR              shift and go to state 150

  ! PLUS            [ reduce using rule 117 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 117 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 117 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 117 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 117 (expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 117 (expression -> expression PLUS expression .) ]
  ! OR              [ reduce using rule 117 (expression -> expression PLUS expression .) ]


state 212

    (118) expression -> expression MINUS expression .
    (117) expression -> expression . PLUS expression
    (118) expression -> expression . MINUS expression
    (119) expression -> expression . TIMES expression
    (120) expression -> expression . DIVIDE expression
    (121) expression -> expression . MOD expression
    (146) expression -> expression . AND expression
    (147) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 118 (expression -> expression MINUS expression .)
    DO              reduce using rule 118 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 118 (expression -> expression MINUS expression .)
    END             reduce using rule 118 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 118 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 118 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 118 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 118 (expression -> expression MINUS expression .)
    TO              reduce using rule 118 (expression -> expression MINUS expression .)
    DOWNTO          reduce using rule 118 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 145
    TIMES           shift and go to state 146
    DIVIDE          shift and go to state 147
    MOD             shift and go to state 148
    AND             shift and go to state 149
    OR              shift and go to state 150

  ! PLUS            [ reduce using rule 118 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 118 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 118 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 118 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 118 (expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 118 (expression -> expression MINUS expression .) ]
  ! OR              [ reduce using rule 118 (expression -> expression MINUS expression .) ]


state 213

    (119) expression -> expression TIMES expression .
    (117) expression -> expression . PLUS expression
    (118) expression -> expression . MINUS expression
    (119) expression -> expression . TIMES expression
    (120) expression -> expression . DIVIDE expression
    (121) expression -> expression . MOD expression
    (146) expression -> expression . AND expression
    (147) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 119 (expression -> expression TIMES expression .)
    DO              reduce using rule 119 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 119 (expression -> expression TIMES expression .)
    END             reduce using rule 119 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 119 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 119 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 119 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 119 (expression -> expression TIMES expression .)
    TO              reduce using rule 119 (expression -> expression TIMES expression .)
    DOWNTO          reduce using rule 119 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 145
    TIMES           shift and go to state 146
    DIVIDE          shift and go to state 147
    MOD             shift and go to state 148
    AND             shift and go to state 149
    OR              shift and go to state 150

  ! PLUS            [ reduce using rule 119 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 119 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 119 (expression -> expression TIMES expression .) ]
  ! DIVIDE          [ reduce using rule 119 (expression -> expression TIMES expression .) ]
  ! MOD             [ reduce using rule 119 (expression -> expression TIMES expression .) ]
  ! AND             [ reduce using rule 119 (expression -> expression TIMES expression .) ]
  ! OR              [ reduce using rule 119 (expression -> expression TIMES expression .) ]


state 214

    (120) expression -> expression DIVIDE expression .
    (117) expression -> expression . PLUS expression
    (118) expression -> expression . MINUS expression
    (119) expression -> expression . TIMES expression
    (120) expression -> expression . DIVIDE expression
    (121) expression -> expression . MOD expression
    (146) expression -> expression . AND expression
    (147) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 120 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 120 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 120 (expression -> expression DIVIDE expression .)
    END             reduce using rule 120 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 120 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 120 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 120 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 120 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 120 (expression -> expression DIVIDE expression .)
    DOWNTO          reduce using rule 120 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 145
    TIMES           shift and go to state 146
    DIVIDE          shift and go to state 147
    MOD             shift and go to state 148
    AND             shift and go to state 149
    OR              shift and go to state 150

  ! PLUS            [ reduce using rule 120 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 120 (expression -> expression DIVIDE expression .) ]
  ! TIMES           [ reduce using rule 120 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 120 (expression -> expression DIVIDE expression .) ]
  ! MOD             [ reduce using rule 120 (expression -> expression DIVIDE expression .) ]
  ! AND             [ reduce using rule 120 (expression -> expression DIVIDE expression .) ]
  ! OR              [ reduce using rule 120 (expression -> expression DIVIDE expression .) ]


state 215

    (121) expression -> expression MOD expression .
    (117) expression -> expression . PLUS expression
    (118) expression -> expression . MINUS expression
    (119) expression -> expression . TIMES expression
    (120) expression -> expression . DIVIDE expression
    (121) expression -> expression . MOD expression
    (146) expression -> expression . AND expression
    (147) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 121 (expression -> expression MOD expression .)
    DO              reduce using rule 121 (expression -> expression MOD expression .)
    SEMICOLON       reduce using rule 121 (expression -> expression MOD expression .)
    END             reduce using rule 121 (expression -> expression MOD expression .)
    ELSE            reduce using rule 121 (expression -> expression MOD expression .)
    COMMA           reduce using rule 121 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 121 (expression -> expression MOD expression .)
    RBRACKET        reduce using rule 121 (expression -> expression MOD expression .)
    TO              reduce using rule 121 (expression -> expression MOD expression .)
    DOWNTO          reduce using rule 121 (expression -> expression MOD expression .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 145
    TIMES           shift and go to state 146
    DIVIDE          shift and go to state 147
    MOD             shift and go to state 148
    AND             shift and go to state 149
    OR              shift and go to state 150

  ! PLUS            [ reduce using rule 121 (expression -> expression MOD expression .) ]
  ! MINUS           [ reduce using rule 121 (expression -> expression MOD expression .) ]
  ! TIMES           [ reduce using rule 121 (expression -> expression MOD expression .) ]
  ! DIVIDE          [ reduce using rule 121 (expression -> expression MOD expression .) ]
  ! MOD             [ reduce using rule 121 (expression -> expression MOD expression .) ]
  ! AND             [ reduce using rule 121 (expression -> expression MOD expression .) ]
  ! OR              [ reduce using rule 121 (expression -> expression MOD expression .) ]


state 216

    (146) expression -> expression AND expression .
    (117) expression -> expression . PLUS expression
    (118) expression -> expression . MINUS expression
    (119) expression -> expression . TIMES expression
    (120) expression -> expression . DIVIDE expression
    (121) expression -> expression . MOD expression
    (146) expression -> expression . AND expression
    (147) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 146 (expression -> expression AND expression .)
    DO              reduce using rule 146 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 146 (expression -> expression AND expression .)
    END             reduce using rule 146 (expression -> expression AND expression .)
    ELSE            reduce using rule 146 (expression -> expression AND expression .)
    COMMA           reduce using rule 146 (expression -> expression AND expression .)
    RPAREN          reduce using rule 146 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 146 (expression -> expression AND expression .)
    TO              reduce using rule 146 (expression -> expression AND expression .)
    DOWNTO          reduce using rule 146 (expression -> expression AND expression .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 145
    TIMES           shift and go to state 146
    DIVIDE          shift and go to state 147
    MOD             shift and go to state 148
    AND             shift and go to state 149
    OR              shift and go to state 150

  ! PLUS            [ reduce using rule 146 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 146 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 146 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 146 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 146 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 146 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 146 (expression -> expression AND expression .) ]


state 217

    (147) expression -> expression OR expression .
    (117) expression -> expression . PLUS expression
    (118) expression -> expression . MINUS expression
    (119) expression -> expression . TIMES expression
    (120) expression -> expression . DIVIDE expression
    (121) expression -> expression . MOD expression
    (146) expression -> expression . AND expression
    (147) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 147 (expression -> expression OR expression .)
    DO              reduce using rule 147 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 147 (expression -> expression OR expression .)
    END             reduce using rule 147 (expression -> expression OR expression .)
    ELSE            reduce using rule 147 (expression -> expression OR expression .)
    COMMA           reduce using rule 147 (expression -> expression OR expression .)
    RPAREN          reduce using rule 147 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 147 (expression -> expression OR expression .)
    TO              reduce using rule 147 (expression -> expression OR expression .)
    DOWNTO          reduce using rule 147 (expression -> expression OR expression .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 145
    TIMES           shift and go to state 146
    DIVIDE          shift and go to state 147
    MOD             shift and go to state 148
    AND             shift and go to state 149
    OR              shift and go to state 150

  ! PLUS            [ reduce using rule 147 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 147 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 147 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 147 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 147 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 147 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 147 (expression -> expression OR expression .) ]


state 218

    (104) expression -> simple_expression relop simple_expression .

    THEN            reduce using rule 104 (expression -> simple_expression relop simple_expression .)
    PLUS            reduce using rule 104 (expression -> simple_expression relop simple_expression .)
    MINUS           reduce using rule 104 (expression -> simple_expression relop simple_expression .)
    TIMES           reduce using rule 104 (expression -> simple_expression relop simple_expression .)
    DIVIDE          reduce using rule 104 (expression -> simple_expression relop simple_expression .)
    MOD             reduce using rule 104 (expression -> simple_expression relop simple_expression .)
    AND             reduce using rule 104 (expression -> simple_expression relop simple_expression .)
    OR              reduce using rule 104 (expression -> simple_expression relop simple_expression .)
    DO              reduce using rule 104 (expression -> simple_expression relop simple_expression .)
    SEMICOLON       reduce using rule 104 (expression -> simple_expression relop simple_expression .)
    END             reduce using rule 104 (expression -> simple_expression relop simple_expression .)
    ELSE            reduce using rule 104 (expression -> simple_expression relop simple_expression .)
    COMMA           reduce using rule 104 (expression -> simple_expression relop simple_expression .)
    RPAREN          reduce using rule 104 (expression -> simple_expression relop simple_expression .)
    RBRACKET        reduce using rule 104 (expression -> simple_expression relop simple_expression .)
    TO              reduce using rule 104 (expression -> simple_expression relop simple_expression .)
    DOWNTO          reduce using rule 104 (expression -> simple_expression relop simple_expression .)


state 219

    (107) simple_expression_tail -> addop term .

    LESS            reduce using rule 107 (simple_expression_tail -> addop term .)
    LESS_EQUAL      reduce using rule 107 (simple_expression_tail -> addop term .)
    GREAT           reduce using rule 107 (simple_expression_tail -> addop term .)
    GREAT_EQUAL     reduce using rule 107 (simple_expression_tail -> addop term .)
    EQUAL           reduce using rule 107 (simple_expression_tail -> addop term .)
    DIFFERENT       reduce using rule 107 (simple_expression_tail -> addop term .)
    THEN            reduce using rule 107 (simple_expression_tail -> addop term .)
    PLUS            reduce using rule 107 (simple_expression_tail -> addop term .)
    MINUS           reduce using rule 107 (simple_expression_tail -> addop term .)
    TIMES           reduce using rule 107 (simple_expression_tail -> addop term .)
    DIVIDE          reduce using rule 107 (simple_expression_tail -> addop term .)
    MOD             reduce using rule 107 (simple_expression_tail -> addop term .)
    AND             reduce using rule 107 (simple_expression_tail -> addop term .)
    OR              reduce using rule 107 (simple_expression_tail -> addop term .)
    DO              reduce using rule 107 (simple_expression_tail -> addop term .)
    SEMICOLON       reduce using rule 107 (simple_expression_tail -> addop term .)
    END             reduce using rule 107 (simple_expression_tail -> addop term .)
    ELSE            reduce using rule 107 (simple_expression_tail -> addop term .)
    COMMA           reduce using rule 107 (simple_expression_tail -> addop term .)
    RPAREN          reduce using rule 107 (simple_expression_tail -> addop term .)
    RBRACKET        reduce using rule 107 (simple_expression_tail -> addop term .)
    TO              reduce using rule 107 (simple_expression_tail -> addop term .)
    DOWNTO          reduce using rule 107 (simple_expression_tail -> addop term .)


state 220

    (112) term_tail -> mulop factor .

    PLUS            reduce using rule 112 (term_tail -> mulop factor .)
    MINUS           reduce using rule 112 (term_tail -> mulop factor .)
    LESS            reduce using rule 112 (term_tail -> mulop factor .)
    LESS_EQUAL      reduce using rule 112 (term_tail -> mulop factor .)
    GREAT           reduce using rule 112 (term_tail -> mulop factor .)
    GREAT_EQUAL     reduce using rule 112 (term_tail -> mulop factor .)
    EQUAL           reduce using rule 112 (term_tail -> mulop factor .)
    DIFFERENT       reduce using rule 112 (term_tail -> mulop factor .)
    THEN            reduce using rule 112 (term_tail -> mulop factor .)
    TIMES           reduce using rule 112 (term_tail -> mulop factor .)
    DIVIDE          reduce using rule 112 (term_tail -> mulop factor .)
    MOD             reduce using rule 112 (term_tail -> mulop factor .)
    AND             reduce using rule 112 (term_tail -> mulop factor .)
    OR              reduce using rule 112 (term_tail -> mulop factor .)
    DO              reduce using rule 112 (term_tail -> mulop factor .)
    SEMICOLON       reduce using rule 112 (term_tail -> mulop factor .)
    END             reduce using rule 112 (term_tail -> mulop factor .)
    ELSE            reduce using rule 112 (term_tail -> mulop factor .)
    COMMA           reduce using rule 112 (term_tail -> mulop factor .)
    RPAREN          reduce using rule 112 (term_tail -> mulop factor .)
    RBRACKET        reduce using rule 112 (term_tail -> mulop factor .)
    TO              reduce using rule 112 (term_tail -> mulop factor .)
    DOWNTO          reduce using rule 112 (term_tail -> mulop factor .)


state 221

    (122) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 122 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 122 (factor -> LPAREN expression RPAREN .)
    DIV             reduce using rule 122 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 122 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 122 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 122 (factor -> LPAREN expression RPAREN .)
    LESS_EQUAL      reduce using rule 122 (factor -> LPAREN expression RPAREN .)
    GREAT           reduce using rule 122 (factor -> LPAREN expression RPAREN .)
    GREAT_EQUAL     reduce using rule 122 (factor -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 122 (factor -> LPAREN expression RPAREN .)
    DIFFERENT       reduce using rule 122 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 122 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 122 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 122 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 122 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 122 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 122 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 122 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 122 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 122 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 122 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 122 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 122 (factor -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 122 (factor -> LPAREN expression RPAREN .)


state 222

    (69) function_call -> ID LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 254


state 223

    (97) while_statement -> WHILE expression DO statement .

    SEMICOLON       reduce using rule 97 (while_statement -> WHILE expression DO statement .)
    END             reduce using rule 97 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 97 (while_statement -> WHILE expression DO statement .)


state 224

    (90) for_statement -> FOR ID COLON_EQUAL expression . TO expression DO statement
    (91) for_statement -> FOR ID COLON_EQUAL expression . DOWNTO expression DO statement
    (117) expression -> expression . PLUS expression
    (118) expression -> expression . MINUS expression
    (119) expression -> expression . TIMES expression
    (120) expression -> expression . DIVIDE expression
    (121) expression -> expression . MOD expression
    (146) expression -> expression . AND expression
    (147) expression -> expression . OR expression

    TO              shift and go to state 255
    DOWNTO          shift and go to state 256
    PLUS            shift and go to state 144
    MINUS           shift and go to state 145
    TIMES           shift and go to state 146
    DIVIDE          shift and go to state 147
    MOD             shift and go to state 148
    AND             shift and go to state 149
    OR              shift and go to state 150


state 225

    (22) type_specifier -> ARRAY LBRACKET type_expression . RBRACKET OF type_specifier
    (36) type_expression -> type_expression . COMMA subrange

    RBRACKET        shift and go to state 257
    COMMA           shift and go to state 258


state 226

    (37) type_expression -> subrange .

    RBRACKET        reduce using rule 37 (type_expression -> subrange .)
    COMMA           reduce using rule 37 (type_expression -> subrange .)


state 227

    (24) type_specifier -> FILE OF type_specifier .

    SEMICOLON       reduce using rule 24 (type_specifier -> FILE OF type_specifier .)
    RPAREN          reduce using rule 24 (type_specifier -> FILE OF type_specifier .)
    VAR             reduce using rule 24 (type_specifier -> FILE OF type_specifier .)
    ID              reduce using rule 24 (type_specifier -> FILE OF type_specifier .)
    CASE            reduce using rule 24 (type_specifier -> FILE OF type_specifier .)
    END             reduce using rule 24 (type_specifier -> FILE OF type_specifier .)
    CONSTRUCTOR     reduce using rule 24 (type_specifier -> FILE OF type_specifier .)
    PROCEDURE       reduce using rule 24 (type_specifier -> FILE OF type_specifier .)
    FUNCTION        reduce using rule 24 (type_specifier -> FILE OF type_specifier .)
    DESTRUCTOR      reduce using rule 24 (type_specifier -> FILE OF type_specifier .)
    OF              reduce using rule 24 (type_specifier -> FILE OF type_specifier .)


state 228

    (25) type_specifier -> SET OF type_specifier .

    SEMICOLON       reduce using rule 25 (type_specifier -> SET OF type_specifier .)
    RPAREN          reduce using rule 25 (type_specifier -> SET OF type_specifier .)
    VAR             reduce using rule 25 (type_specifier -> SET OF type_specifier .)
    ID              reduce using rule 25 (type_specifier -> SET OF type_specifier .)
    CASE            reduce using rule 25 (type_specifier -> SET OF type_specifier .)
    END             reduce using rule 25 (type_specifier -> SET OF type_specifier .)
    CONSTRUCTOR     reduce using rule 25 (type_specifier -> SET OF type_specifier .)
    PROCEDURE       reduce using rule 25 (type_specifier -> SET OF type_specifier .)
    FUNCTION        reduce using rule 25 (type_specifier -> SET OF type_specifier .)
    DESTRUCTOR      reduce using rule 25 (type_specifier -> SET OF type_specifier .)
    OF              reduce using rule 25 (type_specifier -> SET OF type_specifier .)


state 229

    (26) type_specifier -> RECORD field_list case_part . END

    END             shift and go to state 259


state 230

    (46) case_part -> CASE . ID COLON type_specifier OF case_list SEMICOLON

    ID              shift and go to state 260


state 231

    (47) case_part -> empty .

    END             reduce using rule 47 (case_part -> empty .)


state 232

    (27) type_specifier -> OBJECT field_list method_list . END
    (51) method_list -> method_list . method
    (54) method -> . CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON
    (55) method -> . PROCEDURE ID LPAREN field_list RPAREN SEMICOLON
    (56) method -> . FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON
    (57) method -> . DESTRUCTOR ID SEMICOLON

    END             shift and go to state 261
    CONSTRUCTOR     shift and go to state 235
    PROCEDURE       shift and go to state 236
    FUNCTION        shift and go to state 237
    DESTRUCTOR      shift and go to state 238

    method                         shift and go to state 262

state 233

    (52) method_list -> method .

    END             reduce using rule 52 (method_list -> method .)
    CONSTRUCTOR     reduce using rule 52 (method_list -> method .)
    PROCEDURE       reduce using rule 52 (method_list -> method .)
    FUNCTION        reduce using rule 52 (method_list -> method .)
    DESTRUCTOR      reduce using rule 52 (method_list -> method .)


state 234

    (53) method_list -> empty .

    END             reduce using rule 53 (method_list -> empty .)
    CONSTRUCTOR     reduce using rule 53 (method_list -> empty .)
    PROCEDURE       reduce using rule 53 (method_list -> empty .)
    FUNCTION        reduce using rule 53 (method_list -> empty .)
    DESTRUCTOR      reduce using rule 53 (method_list -> empty .)


state 235

    (54) method -> CONSTRUCTOR . ID LPAREN field_list RPAREN SEMICOLON

    ID              shift and go to state 263


state 236

    (55) method -> PROCEDURE . ID LPAREN field_list RPAREN SEMICOLON

    ID              shift and go to state 264


state 237

    (56) method -> FUNCTION . ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON

    ID              shift and go to state 265


state 238

    (57) method -> DESTRUCTOR . ID SEMICOLON

    ID              shift and go to state 266


state 239

    (28) type_specifier -> LPAREN id_list RPAREN .

    SEMICOLON       reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)
    RPAREN          reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)
    VAR             reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)
    ID              reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)
    CASE            reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)
    END             reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)
    CONSTRUCTOR     reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)
    PROCEDURE       reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)
    FUNCTION        reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)
    DESTRUCTOR      reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)
    OF              reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)


state 240

    (34) type_specifier -> STRING LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 267


state 241

    (38) subrange -> NUMBER DOTDOT NUMBER .

    SEMICOLON       reduce using rule 38 (subrange -> NUMBER DOTDOT NUMBER .)
    RBRACKET        reduce using rule 38 (subrange -> NUMBER DOTDOT NUMBER .)
    COMMA           reduce using rule 38 (subrange -> NUMBER DOTDOT NUMBER .)
    RPAREN          reduce using rule 38 (subrange -> NUMBER DOTDOT NUMBER .)
    VAR             reduce using rule 38 (subrange -> NUMBER DOTDOT NUMBER .)
    ID              reduce using rule 38 (subrange -> NUMBER DOTDOT NUMBER .)
    CASE            reduce using rule 38 (subrange -> NUMBER DOTDOT NUMBER .)
    END             reduce using rule 38 (subrange -> NUMBER DOTDOT NUMBER .)
    CONSTRUCTOR     reduce using rule 38 (subrange -> NUMBER DOTDOT NUMBER .)
    PROCEDURE       reduce using rule 38 (subrange -> NUMBER DOTDOT NUMBER .)
    FUNCTION        reduce using rule 38 (subrange -> NUMBER DOTDOT NUMBER .)
    DESTRUCTOR      reduce using rule 38 (subrange -> NUMBER DOTDOT NUMBER .)
    OF              reduce using rule 38 (subrange -> NUMBER DOTDOT NUMBER .)


state 242

    (67) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON . type_specifier SEMICOLON block SEMICOLON
    (68) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON . type_specifier SEMICOLON FORWARD SEMICOLON
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING
    (34) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (35) type_specifier -> . ID
    (58) type_specifier -> . LONGINT
    (38) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 101
    FILE            shift and go to state 103
    SET             shift and go to state 104
    RECORD          shift and go to state 105
    OBJECT          shift and go to state 106
    LPAREN          shift and go to state 107
    BOOLEAN_LITERAL shift and go to state 108
    INTEGER         shift and go to state 109
    BYTE            shift and go to state 110
    CHAR            shift and go to state 111
    STRING          shift and go to state 112
    ID              shift and go to state 99
    LONGINT         shift and go to state 114
    NUMBER          shift and go to state 113

    type_specifier                 shift and go to state 268
    subrange                       shift and go to state 102

state 243

    (72) parameter_list -> parameter_list SEMICOLON parameter .

    RPAREN          reduce using rule 72 (parameter_list -> parameter_list SEMICOLON parameter .)
    SEMICOLON       reduce using rule 72 (parameter_list -> parameter_list SEMICOLON parameter .)


state 244

    (74) parameter -> id_list COLON type_specifier .

    RPAREN          reduce using rule 74 (parameter -> id_list COLON type_specifier .)
    SEMICOLON       reduce using rule 74 (parameter -> id_list COLON type_specifier .)


state 245

    (75) parameter -> VAR id_list COLON . type_specifier
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING
    (34) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (35) type_specifier -> . ID
    (58) type_specifier -> . LONGINT
    (38) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 101
    FILE            shift and go to state 103
    SET             shift and go to state 104
    RECORD          shift and go to state 105
    OBJECT          shift and go to state 106
    LPAREN          shift and go to state 107
    BOOLEAN_LITERAL shift and go to state 108
    INTEGER         shift and go to state 109
    BYTE            shift and go to state 110
    CHAR            shift and go to state 111
    STRING          shift and go to state 112
    ID              shift and go to state 99
    LONGINT         shift and go to state 114
    NUMBER          shift and go to state 113

    type_specifier                 shift and go to state 269
    subrange                       shift and go to state 102

state 246

    (61) procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .
    (64) procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON . FORWARD SEMICOLON

    PROCEDURE       reduce using rule 61 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    USES            reduce using rule 61 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    CONST           reduce using rule 61 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    TYPE            reduce using rule 61 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    VAR             reduce using rule 61 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 61 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    BEGIN           reduce using rule 61 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    FORWARD         shift and go to state 270


state 247

    (62) procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 271


state 248

    (65) procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD . SEMICOLON

    SEMICOLON       shift and go to state 272


state 249

    (42) field -> id_list COLON type_specifier .
    (43) field -> id_list COLON type_specifier . SEMICOLON

    RPAREN          reduce using rule 42 (field -> id_list COLON type_specifier .)
    VAR             reduce using rule 42 (field -> id_list COLON type_specifier .)
    ID              reduce using rule 42 (field -> id_list COLON type_specifier .)
    CASE            reduce using rule 42 (field -> id_list COLON type_specifier .)
    END             reduce using rule 42 (field -> id_list COLON type_specifier .)
    CONSTRUCTOR     reduce using rule 42 (field -> id_list COLON type_specifier .)
    PROCEDURE       reduce using rule 42 (field -> id_list COLON type_specifier .)
    FUNCTION        reduce using rule 42 (field -> id_list COLON type_specifier .)
    DESTRUCTOR      reduce using rule 42 (field -> id_list COLON type_specifier .)
    SEMICOLON       shift and go to state 273


state 250

    (44) field -> VAR id_list COLON . type_specifier
    (45) field -> VAR id_list COLON . type_specifier SEMICOLON
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING
    (34) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (35) type_specifier -> . ID
    (58) type_specifier -> . LONGINT
    (38) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 101
    FILE            shift and go to state 103
    SET             shift and go to state 104
    RECORD          shift and go to state 105
    OBJECT          shift and go to state 106
    LPAREN          shift and go to state 107
    BOOLEAN_LITERAL shift and go to state 108
    INTEGER         shift and go to state 109
    BYTE            shift and go to state 110
    CHAR            shift and go to state 111
    STRING          shift and go to state 112
    ID              shift and go to state 99
    LONGINT         shift and go to state 114
    NUMBER          shift and go to state 113

    type_specifier                 shift and go to state 274
    subrange                       shift and go to state 102

state 251

    (101) expression_list_tail -> COMMA expression . expression_list_tail
    (117) expression -> expression . PLUS expression
    (118) expression -> expression . MINUS expression
    (119) expression -> expression . TIMES expression
    (120) expression -> expression . DIVIDE expression
    (121) expression -> expression . MOD expression
    (146) expression -> expression . AND expression
    (147) expression -> expression . OR expression
    (101) expression_list_tail -> . COMMA expression expression_list_tail
    (102) expression_list_tail -> . empty
    (132) empty -> .

    PLUS            shift and go to state 144
    MINUS           shift and go to state 145
    TIMES           shift and go to state 146
    DIVIDE          shift and go to state 147
    MOD             shift and go to state 148
    AND             shift and go to state 149
    OR              shift and go to state 150
    COMMA           shift and go to state 204
    RPAREN          reduce using rule 132 (empty -> .)

    expression_list_tail           shift and go to state 275
    empty                          shift and go to state 205

state 252

    (96) index_list -> index_list COMMA expression .
    (117) expression -> expression . PLUS expression
    (118) expression -> expression . MINUS expression
    (119) expression -> expression . TIMES expression
    (120) expression -> expression . DIVIDE expression
    (121) expression -> expression . MOD expression
    (146) expression -> expression . AND expression
    (147) expression -> expression . OR expression

    RBRACKET        reduce using rule 96 (index_list -> index_list COMMA expression .)
    COMMA           reduce using rule 96 (index_list -> index_list COMMA expression .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 145
    TIMES           shift and go to state 146
    DIVIDE          shift and go to state 147
    MOD             shift and go to state 148
    AND             shift and go to state 149
    OR              shift and go to state 150


state 253

    (88) if_statement -> IF expression THEN statement ELSE . statement
    (81) statement -> . if_statement
    (82) statement -> . assignment_statement
    (83) statement -> . while_statement
    (84) statement -> . procedure_call
    (85) statement -> . compound_statement
    (86) statement -> . for_statement
    (87) statement -> . empty
    (133) statement -> . READLN
    (134) statement -> . READLN LPAREN variable RPAREN
    (135) statement -> . READLN LBRACKET variable RBRACKET
    (136) statement -> . WRITELN LPAREN expression_list RPAREN
    (137) statement -> . WRITE LPAREN expression_list RPAREN
    (138) statement -> . USES ID SEMICOLON
    (88) if_statement -> . IF expression THEN statement ELSE statement
    (89) if_statement -> . IF expression THEN statement
    (92) assignment_statement -> . variable COLON_EQUAL expression
    (97) while_statement -> . WHILE expression DO statement
    (98) procedure_call -> . ID LPAREN expression_list RPAREN
    (99) procedure_call -> . ID
    (76) compound_statement -> . BEGIN statement_list END
    (77) compound_statement -> . BEGIN statement_list END SEMICOLON
    (90) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (91) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (132) empty -> .
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    READLN          shift and go to state 49
    WRITELN         shift and go to state 51
    WRITE           shift and go to state 52
    USES            shift and go to state 53
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    ID              shift and go to state 54
    BEGIN           shift and go to state 24
    FOR             shift and go to state 57
    ELSE            reduce using rule 132 (empty -> .)
    SEMICOLON       reduce using rule 132 (empty -> .)
    END             reduce using rule 132 (empty -> .)

    statement                      shift and go to state 276
    if_statement                   shift and go to state 42
    assignment_statement           shift and go to state 43
    while_statement                shift and go to state 44
    procedure_call                 shift and go to state 45
    compound_statement             shift and go to state 46
    for_statement                  shift and go to state 47
    empty                          shift and go to state 48
    variable                       shift and go to state 50

state 254

    (69) function_call -> ID LPAREN expression_list RPAREN .

    TIMES           reduce using rule 69 (function_call -> ID LPAREN expression_list RPAREN .)
    DIVIDE          reduce using rule 69 (function_call -> ID LPAREN expression_list RPAREN .)
    DIV             reduce using rule 69 (function_call -> ID LPAREN expression_list RPAREN .)
    PLUS            reduce using rule 69 (function_call -> ID LPAREN expression_list RPAREN .)
    MINUS           reduce using rule 69 (function_call -> ID LPAREN expression_list RPAREN .)
    LESS            reduce using rule 69 (function_call -> ID LPAREN expression_list RPAREN .)
    LESS_EQUAL      reduce using rule 69 (function_call -> ID LPAREN expression_list RPAREN .)
    GREAT           reduce using rule 69 (function_call -> ID LPAREN expression_list RPAREN .)
    GREAT_EQUAL     reduce using rule 69 (function_call -> ID LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 69 (function_call -> ID LPAREN expression_list RPAREN .)
    DIFFERENT       reduce using rule 69 (function_call -> ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 69 (function_call -> ID LPAREN expression_list RPAREN .)
    MOD             reduce using rule 69 (function_call -> ID LPAREN expression_list RPAREN .)
    AND             reduce using rule 69 (function_call -> ID LPAREN expression_list RPAREN .)
    OR              reduce using rule 69 (function_call -> ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 69 (function_call -> ID LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 69 (function_call -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 69 (function_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 69 (function_call -> ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 69 (function_call -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 69 (function_call -> ID LPAREN expression_list RPAREN .)
    RBRACKET        reduce using rule 69 (function_call -> ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 69 (function_call -> ID LPAREN expression_list RPAREN .)
    DOWNTO          reduce using rule 69 (function_call -> ID LPAREN expression_list RPAREN .)


state 255

    (90) for_statement -> FOR ID COLON_EQUAL expression TO . expression DO statement
    (104) expression -> . simple_expression relop simple_expression
    (105) expression -> . simple_expression
    (117) expression -> . expression PLUS expression
    (118) expression -> . expression MINUS expression
    (119) expression -> . expression TIMES expression
    (120) expression -> . expression DIVIDE expression
    (121) expression -> . expression MOD expression
    (146) expression -> . expression AND expression
    (147) expression -> . expression OR expression
    (148) expression -> . NOT expression
    (106) simple_expression -> . term simple_expression_tail
    (111) term -> . factor term_tail
    (70) factor -> . function_call
    (122) factor -> . LPAREN expression RPAREN
    (123) factor -> . variable
    (124) factor -> . NUMBER
    (125) factor -> . STRING_LITERAL
    (69) function_call -> . ID LPAREN expression_list RPAREN
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 277
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 256

    (91) for_statement -> FOR ID COLON_EQUAL expression DOWNTO . expression DO statement
    (104) expression -> . simple_expression relop simple_expression
    (105) expression -> . simple_expression
    (117) expression -> . expression PLUS expression
    (118) expression -> . expression MINUS expression
    (119) expression -> . expression TIMES expression
    (120) expression -> . expression DIVIDE expression
    (121) expression -> . expression MOD expression
    (146) expression -> . expression AND expression
    (147) expression -> . expression OR expression
    (148) expression -> . NOT expression
    (106) simple_expression -> . term simple_expression_tail
    (111) term -> . factor term_tail
    (70) factor -> . function_call
    (122) factor -> . LPAREN expression RPAREN
    (123) factor -> . variable
    (124) factor -> . NUMBER
    (125) factor -> . STRING_LITERAL
    (69) function_call -> . ID LPAREN expression_list RPAREN
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 278
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 257

    (22) type_specifier -> ARRAY LBRACKET type_expression RBRACKET . OF type_specifier

    OF              shift and go to state 279


state 258

    (36) type_expression -> type_expression COMMA . subrange
    (38) subrange -> . NUMBER DOTDOT NUMBER

    NUMBER          shift and go to state 113

    subrange                       shift and go to state 280

state 259

    (26) type_specifier -> RECORD field_list case_part END .

    SEMICOLON       reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)
    RPAREN          reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)
    VAR             reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)
    ID              reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)
    CASE            reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)
    END             reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)
    CONSTRUCTOR     reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)
    PROCEDURE       reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)
    FUNCTION        reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)
    DESTRUCTOR      reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)
    OF              reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)


state 260

    (46) case_part -> CASE ID . COLON type_specifier OF case_list SEMICOLON

    COLON           shift and go to state 281


state 261

    (27) type_specifier -> OBJECT field_list method_list END .

    SEMICOLON       reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)
    RPAREN          reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)
    VAR             reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)
    ID              reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)
    CASE            reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)
    END             reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)
    CONSTRUCTOR     reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)
    PROCEDURE       reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)
    FUNCTION        reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)
    DESTRUCTOR      reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)
    OF              reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)


state 262

    (51) method_list -> method_list method .

    END             reduce using rule 51 (method_list -> method_list method .)
    CONSTRUCTOR     reduce using rule 51 (method_list -> method_list method .)
    PROCEDURE       reduce using rule 51 (method_list -> method_list method .)
    FUNCTION        reduce using rule 51 (method_list -> method_list method .)
    DESTRUCTOR      reduce using rule 51 (method_list -> method_list method .)


state 263

    (54) method -> CONSTRUCTOR ID . LPAREN field_list RPAREN SEMICOLON

    LPAREN          shift and go to state 282


state 264

    (55) method -> PROCEDURE ID . LPAREN field_list RPAREN SEMICOLON

    LPAREN          shift and go to state 283


state 265

    (56) method -> FUNCTION ID . LPAREN field_list RPAREN COLON type_specifier SEMICOLON

    LPAREN          shift and go to state 284


state 266

    (57) method -> DESTRUCTOR ID . SEMICOLON

    SEMICOLON       shift and go to state 285


state 267

    (34) type_specifier -> STRING LBRACKET NUMBER RBRACKET .

    SEMICOLON       reduce using rule 34 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    RPAREN          reduce using rule 34 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    VAR             reduce using rule 34 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    ID              reduce using rule 34 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    CASE            reduce using rule 34 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    END             reduce using rule 34 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    CONSTRUCTOR     reduce using rule 34 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    PROCEDURE       reduce using rule 34 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    FUNCTION        reduce using rule 34 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    DESTRUCTOR      reduce using rule 34 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    OF              reduce using rule 34 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)


state 268

    (67) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier . SEMICOLON block SEMICOLON
    (68) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier . SEMICOLON FORWARD SEMICOLON

    SEMICOLON       shift and go to state 286


state 269

    (75) parameter -> VAR id_list COLON type_specifier .

    RPAREN          reduce using rule 75 (parameter -> VAR id_list COLON type_specifier .)
    SEMICOLON       reduce using rule 75 (parameter -> VAR id_list COLON type_specifier .)


state 270

    (64) procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD . SEMICOLON

    SEMICOLON       shift and go to state 287


state 271

    (62) procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .

    PROCEDURE       reduce using rule 62 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    USES            reduce using rule 62 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    CONST           reduce using rule 62 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    TYPE            reduce using rule 62 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    VAR             reduce using rule 62 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 62 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    BEGIN           reduce using rule 62 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)


state 272

    (65) procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .

    PROCEDURE       reduce using rule 65 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)
    USES            reduce using rule 65 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)
    CONST           reduce using rule 65 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)
    TYPE            reduce using rule 65 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)
    VAR             reduce using rule 65 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)
    FUNCTION        reduce using rule 65 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)
    BEGIN           reduce using rule 65 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)


state 273

    (43) field -> id_list COLON type_specifier SEMICOLON .

    RPAREN          reduce using rule 43 (field -> id_list COLON type_specifier SEMICOLON .)
    VAR             reduce using rule 43 (field -> id_list COLON type_specifier SEMICOLON .)
    ID              reduce using rule 43 (field -> id_list COLON type_specifier SEMICOLON .)
    CASE            reduce using rule 43 (field -> id_list COLON type_specifier SEMICOLON .)
    END             reduce using rule 43 (field -> id_list COLON type_specifier SEMICOLON .)
    CONSTRUCTOR     reduce using rule 43 (field -> id_list COLON type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 43 (field -> id_list COLON type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 43 (field -> id_list COLON type_specifier SEMICOLON .)
    DESTRUCTOR      reduce using rule 43 (field -> id_list COLON type_specifier SEMICOLON .)


state 274

    (44) field -> VAR id_list COLON type_specifier .
    (45) field -> VAR id_list COLON type_specifier . SEMICOLON

    RPAREN          reduce using rule 44 (field -> VAR id_list COLON type_specifier .)
    VAR             reduce using rule 44 (field -> VAR id_list COLON type_specifier .)
    ID              reduce using rule 44 (field -> VAR id_list COLON type_specifier .)
    CASE            reduce using rule 44 (field -> VAR id_list COLON type_specifier .)
    END             reduce using rule 44 (field -> VAR id_list COLON type_specifier .)
    CONSTRUCTOR     reduce using rule 44 (field -> VAR id_list COLON type_specifier .)
    PROCEDURE       reduce using rule 44 (field -> VAR id_list COLON type_specifier .)
    FUNCTION        reduce using rule 44 (field -> VAR id_list COLON type_specifier .)
    DESTRUCTOR      reduce using rule 44 (field -> VAR id_list COLON type_specifier .)
    SEMICOLON       shift and go to state 288


state 275

    (101) expression_list_tail -> COMMA expression expression_list_tail .

    RPAREN          reduce using rule 101 (expression_list_tail -> COMMA expression expression_list_tail .)


state 276

    (88) if_statement -> IF expression THEN statement ELSE statement .

    SEMICOLON       reduce using rule 88 (if_statement -> IF expression THEN statement ELSE statement .)
    END             reduce using rule 88 (if_statement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 88 (if_statement -> IF expression THEN statement ELSE statement .)


state 277

    (90) for_statement -> FOR ID COLON_EQUAL expression TO expression . DO statement
    (117) expression -> expression . PLUS expression
    (118) expression -> expression . MINUS expression
    (119) expression -> expression . TIMES expression
    (120) expression -> expression . DIVIDE expression
    (121) expression -> expression . MOD expression
    (146) expression -> expression . AND expression
    (147) expression -> expression . OR expression

    DO              shift and go to state 289
    PLUS            shift and go to state 144
    MINUS           shift and go to state 145
    TIMES           shift and go to state 146
    DIVIDE          shift and go to state 147
    MOD             shift and go to state 148
    AND             shift and go to state 149
    OR              shift and go to state 150


state 278

    (91) for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression . DO statement
    (117) expression -> expression . PLUS expression
    (118) expression -> expression . MINUS expression
    (119) expression -> expression . TIMES expression
    (120) expression -> expression . DIVIDE expression
    (121) expression -> expression . MOD expression
    (146) expression -> expression . AND expression
    (147) expression -> expression . OR expression

    DO              shift and go to state 290
    PLUS            shift and go to state 144
    MINUS           shift and go to state 145
    TIMES           shift and go to state 146
    DIVIDE          shift and go to state 147
    MOD             shift and go to state 148
    AND             shift and go to state 149
    OR              shift and go to state 150


state 279

    (22) type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF . type_specifier
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING
    (34) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (35) type_specifier -> . ID
    (58) type_specifier -> . LONGINT
    (38) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 101
    FILE            shift and go to state 103
    SET             shift and go to state 104
    RECORD          shift and go to state 105
    OBJECT          shift and go to state 106
    LPAREN          shift and go to state 107
    BOOLEAN_LITERAL shift and go to state 108
    INTEGER         shift and go to state 109
    BYTE            shift and go to state 110
    CHAR            shift and go to state 111
    STRING          shift and go to state 112
    ID              shift and go to state 99
    LONGINT         shift and go to state 114
    NUMBER          shift and go to state 113

    type_specifier                 shift and go to state 291
    subrange                       shift and go to state 102

state 280

    (36) type_expression -> type_expression COMMA subrange .

    RBRACKET        reduce using rule 36 (type_expression -> type_expression COMMA subrange .)
    COMMA           reduce using rule 36 (type_expression -> type_expression COMMA subrange .)


state 281

    (46) case_part -> CASE ID COLON . type_specifier OF case_list SEMICOLON
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING
    (34) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (35) type_specifier -> . ID
    (58) type_specifier -> . LONGINT
    (38) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 101
    FILE            shift and go to state 103
    SET             shift and go to state 104
    RECORD          shift and go to state 105
    OBJECT          shift and go to state 106
    LPAREN          shift and go to state 107
    BOOLEAN_LITERAL shift and go to state 108
    INTEGER         shift and go to state 109
    BYTE            shift and go to state 110
    CHAR            shift and go to state 111
    STRING          shift and go to state 112
    ID              shift and go to state 99
    LONGINT         shift and go to state 114
    NUMBER          shift and go to state 113

    type_specifier                 shift and go to state 292
    subrange                       shift and go to state 102

state 282

    (54) method -> CONSTRUCTOR ID LPAREN . field_list RPAREN SEMICOLON
    (39) field_list -> . field_list field
    (40) field_list -> . field
    (41) field_list -> . empty
    (42) field -> . id_list COLON type_specifier
    (43) field -> . id_list COLON type_specifier SEMICOLON
    (44) field -> . VAR id_list COLON type_specifier
    (45) field -> . VAR id_list COLON type_specifier SEMICOLON
    (132) empty -> .
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    VAR             shift and go to state 126
    RPAREN          reduce using rule 132 (empty -> .)
    ID              shift and go to state 28

  ! VAR             [ reduce using rule 132 (empty -> .) ]
  ! ID              [ reduce using rule 132 (empty -> .) ]

    field_list                     shift and go to state 293
    field                          shift and go to state 123
    empty                          shift and go to state 124
    id_list                        shift and go to state 125

state 283

    (55) method -> PROCEDURE ID LPAREN . field_list RPAREN SEMICOLON
    (39) field_list -> . field_list field
    (40) field_list -> . field
    (41) field_list -> . empty
    (42) field -> . id_list COLON type_specifier
    (43) field -> . id_list COLON type_specifier SEMICOLON
    (44) field -> . VAR id_list COLON type_specifier
    (45) field -> . VAR id_list COLON type_specifier SEMICOLON
    (132) empty -> .
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    VAR             shift and go to state 126
    RPAREN          reduce using rule 132 (empty -> .)
    ID              shift and go to state 28

  ! VAR             [ reduce using rule 132 (empty -> .) ]
  ! ID              [ reduce using rule 132 (empty -> .) ]

    field_list                     shift and go to state 294
    field                          shift and go to state 123
    empty                          shift and go to state 124
    id_list                        shift and go to state 125

state 284

    (56) method -> FUNCTION ID LPAREN . field_list RPAREN COLON type_specifier SEMICOLON
    (39) field_list -> . field_list field
    (40) field_list -> . field
    (41) field_list -> . empty
    (42) field -> . id_list COLON type_specifier
    (43) field -> . id_list COLON type_specifier SEMICOLON
    (44) field -> . VAR id_list COLON type_specifier
    (45) field -> . VAR id_list COLON type_specifier SEMICOLON
    (132) empty -> .
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    VAR             shift and go to state 126
    RPAREN          reduce using rule 132 (empty -> .)
    ID              shift and go to state 28

  ! VAR             [ reduce using rule 132 (empty -> .) ]
  ! ID              [ reduce using rule 132 (empty -> .) ]

    field_list                     shift and go to state 295
    field                          shift and go to state 123
    empty                          shift and go to state 124
    id_list                        shift and go to state 125

state 285

    (57) method -> DESTRUCTOR ID SEMICOLON .

    END             reduce using rule 57 (method -> DESTRUCTOR ID SEMICOLON .)
    CONSTRUCTOR     reduce using rule 57 (method -> DESTRUCTOR ID SEMICOLON .)
    PROCEDURE       reduce using rule 57 (method -> DESTRUCTOR ID SEMICOLON .)
    FUNCTION        reduce using rule 57 (method -> DESTRUCTOR ID SEMICOLON .)
    DESTRUCTOR      reduce using rule 57 (method -> DESTRUCTOR ID SEMICOLON .)


state 286

    (67) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON . block SEMICOLON
    (68) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON . FORWARD SEMICOLON
    (17) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (132) empty -> .

    FORWARD         shift and go to state 297
    BEGIN           reduce using rule 132 (empty -> .)
    USES            reduce using rule 132 (empty -> .)
    CONST           reduce using rule 132 (empty -> .)
    TYPE            reduce using rule 132 (empty -> .)
    VAR             reduce using rule 132 (empty -> .)
    FUNCTION        reduce using rule 132 (empty -> .)
    PROCEDURE       reduce using rule 132 (empty -> .)

    block                          shift and go to state 296
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 287

    (64) procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON .

    PROCEDURE       reduce using rule 64 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON .)
    USES            reduce using rule 64 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON .)
    CONST           reduce using rule 64 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON .)
    TYPE            reduce using rule 64 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON .)
    VAR             reduce using rule 64 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON .)
    FUNCTION        reduce using rule 64 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON .)
    BEGIN           reduce using rule 64 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON .)


state 288

    (45) field -> VAR id_list COLON type_specifier SEMICOLON .

    RPAREN          reduce using rule 45 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    VAR             reduce using rule 45 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    ID              reduce using rule 45 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    CASE            reduce using rule 45 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    END             reduce using rule 45 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    CONSTRUCTOR     reduce using rule 45 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 45 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 45 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    DESTRUCTOR      reduce using rule 45 (field -> VAR id_list COLON type_specifier SEMICOLON .)


state 289

    (90) for_statement -> FOR ID COLON_EQUAL expression TO expression DO . statement
    (81) statement -> . if_statement
    (82) statement -> . assignment_statement
    (83) statement -> . while_statement
    (84) statement -> . procedure_call
    (85) statement -> . compound_statement
    (86) statement -> . for_statement
    (87) statement -> . empty
    (133) statement -> . READLN
    (134) statement -> . READLN LPAREN variable RPAREN
    (135) statement -> . READLN LBRACKET variable RBRACKET
    (136) statement -> . WRITELN LPAREN expression_list RPAREN
    (137) statement -> . WRITE LPAREN expression_list RPAREN
    (138) statement -> . USES ID SEMICOLON
    (88) if_statement -> . IF expression THEN statement ELSE statement
    (89) if_statement -> . IF expression THEN statement
    (92) assignment_statement -> . variable COLON_EQUAL expression
    (97) while_statement -> . WHILE expression DO statement
    (98) procedure_call -> . ID LPAREN expression_list RPAREN
    (99) procedure_call -> . ID
    (76) compound_statement -> . BEGIN statement_list END
    (77) compound_statement -> . BEGIN statement_list END SEMICOLON
    (90) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (91) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (132) empty -> .
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    READLN          shift and go to state 49
    WRITELN         shift and go to state 51
    WRITE           shift and go to state 52
    USES            shift and go to state 53
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    ID              shift and go to state 54
    BEGIN           shift and go to state 24
    FOR             shift and go to state 57
    ELSE            reduce using rule 132 (empty -> .)
    SEMICOLON       reduce using rule 132 (empty -> .)
    END             reduce using rule 132 (empty -> .)

    statement                      shift and go to state 298
    if_statement                   shift and go to state 42
    assignment_statement           shift and go to state 43
    while_statement                shift and go to state 44
    procedure_call                 shift and go to state 45
    compound_statement             shift and go to state 46
    for_statement                  shift and go to state 47
    empty                          shift and go to state 48
    variable                       shift and go to state 50

state 290

    (91) for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO . statement
    (81) statement -> . if_statement
    (82) statement -> . assignment_statement
    (83) statement -> . while_statement
    (84) statement -> . procedure_call
    (85) statement -> . compound_statement
    (86) statement -> . for_statement
    (87) statement -> . empty
    (133) statement -> . READLN
    (134) statement -> . READLN LPAREN variable RPAREN
    (135) statement -> . READLN LBRACKET variable RBRACKET
    (136) statement -> . WRITELN LPAREN expression_list RPAREN
    (137) statement -> . WRITE LPAREN expression_list RPAREN
    (138) statement -> . USES ID SEMICOLON
    (88) if_statement -> . IF expression THEN statement ELSE statement
    (89) if_statement -> . IF expression THEN statement
    (92) assignment_statement -> . variable COLON_EQUAL expression
    (97) while_statement -> . WHILE expression DO statement
    (98) procedure_call -> . ID LPAREN expression_list RPAREN
    (99) procedure_call -> . ID
    (76) compound_statement -> . BEGIN statement_list END
    (77) compound_statement -> . BEGIN statement_list END SEMICOLON
    (90) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (91) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (132) empty -> .
    (93) variable -> . ID
    (94) variable -> . ID LBRACKET index_list RBRACKET

    READLN          shift and go to state 49
    WRITELN         shift and go to state 51
    WRITE           shift and go to state 52
    USES            shift and go to state 53
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    ID              shift and go to state 54
    BEGIN           shift and go to state 24
    FOR             shift and go to state 57
    ELSE            reduce using rule 132 (empty -> .)
    SEMICOLON       reduce using rule 132 (empty -> .)
    END             reduce using rule 132 (empty -> .)

    statement                      shift and go to state 299
    if_statement                   shift and go to state 42
    assignment_statement           shift and go to state 43
    while_statement                shift and go to state 44
    procedure_call                 shift and go to state 45
    compound_statement             shift and go to state 46
    for_statement                  shift and go to state 47
    empty                          shift and go to state 48
    variable                       shift and go to state 50

state 291

    (22) type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .

    SEMICOLON       reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    RPAREN          reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    VAR             reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    ID              reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    CASE            reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    END             reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    CONSTRUCTOR     reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    PROCEDURE       reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    FUNCTION        reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    DESTRUCTOR      reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    OF              reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)


state 292

    (46) case_part -> CASE ID COLON type_specifier . OF case_list SEMICOLON

    OF              shift and go to state 300


state 293

    (54) method -> CONSTRUCTOR ID LPAREN field_list . RPAREN SEMICOLON
    (39) field_list -> field_list . field
    (42) field -> . id_list COLON type_specifier
    (43) field -> . id_list COLON type_specifier SEMICOLON
    (44) field -> . VAR id_list COLON type_specifier
    (45) field -> . VAR id_list COLON type_specifier SEMICOLON
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 301
    VAR             shift and go to state 126
    ID              shift and go to state 28

    field                          shift and go to state 193
    id_list                        shift and go to state 125

state 294

    (55) method -> PROCEDURE ID LPAREN field_list . RPAREN SEMICOLON
    (39) field_list -> field_list . field
    (42) field -> . id_list COLON type_specifier
    (43) field -> . id_list COLON type_specifier SEMICOLON
    (44) field -> . VAR id_list COLON type_specifier
    (45) field -> . VAR id_list COLON type_specifier SEMICOLON
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 302
    VAR             shift and go to state 126
    ID              shift and go to state 28

    field                          shift and go to state 193
    id_list                        shift and go to state 125

state 295

    (56) method -> FUNCTION ID LPAREN field_list . RPAREN COLON type_specifier SEMICOLON
    (39) field_list -> field_list . field
    (42) field -> . id_list COLON type_specifier
    (43) field -> . id_list COLON type_specifier SEMICOLON
    (44) field -> . VAR id_list COLON type_specifier
    (45) field -> . VAR id_list COLON type_specifier SEMICOLON
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 303
    VAR             shift and go to state 126
    ID              shift and go to state 28

    field                          shift and go to state 193
    id_list                        shift and go to state 125

state 296

    (67) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 304


state 297

    (68) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD . SEMICOLON

    SEMICOLON       shift and go to state 305


state 298

    (90) for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement .

    SEMICOLON       reduce using rule 90 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement .)
    END             reduce using rule 90 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement .)
    ELSE            reduce using rule 90 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement .)


state 299

    (91) for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement .

    SEMICOLON       reduce using rule 91 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement .)
    END             reduce using rule 91 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement .)
    ELSE            reduce using rule 91 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement .)


state 300

    (46) case_part -> CASE ID COLON type_specifier OF . case_list SEMICOLON
    (48) case_list -> . case_list SEMICOLON case_element
    (49) case_list -> . case_element
    (50) case_element -> . NUMBER COLON LPAREN field_list RPAREN

    NUMBER          shift and go to state 308

    case_list                      shift and go to state 306
    case_element                   shift and go to state 307

state 301

    (54) method -> CONSTRUCTOR ID LPAREN field_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 309


state 302

    (55) method -> PROCEDURE ID LPAREN field_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 310


state 303

    (56) method -> FUNCTION ID LPAREN field_list RPAREN . COLON type_specifier SEMICOLON

    COLON           shift and go to state 311


state 304

    (67) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .

    USES            reduce using rule 67 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    CONST           reduce using rule 67 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    TYPE            reduce using rule 67 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    VAR             reduce using rule 67 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 67 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    PROCEDURE       reduce using rule 67 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    BEGIN           reduce using rule 67 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)


state 305

    (68) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .

    USES            reduce using rule 68 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    CONST           reduce using rule 68 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    TYPE            reduce using rule 68 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    VAR             reduce using rule 68 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    FUNCTION        reduce using rule 68 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    PROCEDURE       reduce using rule 68 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    BEGIN           reduce using rule 68 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)


state 306

    (46) case_part -> CASE ID COLON type_specifier OF case_list . SEMICOLON
    (48) case_list -> case_list . SEMICOLON case_element

    SEMICOLON       shift and go to state 312


state 307

    (49) case_list -> case_element .

    SEMICOLON       reduce using rule 49 (case_list -> case_element .)


state 308

    (50) case_element -> NUMBER . COLON LPAREN field_list RPAREN

    COLON           shift and go to state 313


state 309

    (54) method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .

    END             reduce using rule 54 (method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .)
    CONSTRUCTOR     reduce using rule 54 (method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .)
    PROCEDURE       reduce using rule 54 (method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 54 (method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .)
    DESTRUCTOR      reduce using rule 54 (method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .)


state 310

    (55) method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .

    END             reduce using rule 55 (method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    CONSTRUCTOR     reduce using rule 55 (method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    PROCEDURE       reduce using rule 55 (method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 55 (method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    DESTRUCTOR      reduce using rule 55 (method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)


state 311

    (56) method -> FUNCTION ID LPAREN field_list RPAREN COLON . type_specifier SEMICOLON
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING
    (34) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (35) type_specifier -> . ID
    (58) type_specifier -> . LONGINT
    (38) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 101
    FILE            shift and go to state 103
    SET             shift and go to state 104
    RECORD          shift and go to state 105
    OBJECT          shift and go to state 106
    LPAREN          shift and go to state 107
    BOOLEAN_LITERAL shift and go to state 108
    INTEGER         shift and go to state 109
    BYTE            shift and go to state 110
    CHAR            shift and go to state 111
    STRING          shift and go to state 112
    ID              shift and go to state 99
    LONGINT         shift and go to state 114
    NUMBER          shift and go to state 113

    type_specifier                 shift and go to state 314
    subrange                       shift and go to state 102

state 312

    (46) case_part -> CASE ID COLON type_specifier OF case_list SEMICOLON .
    (48) case_list -> case_list SEMICOLON . case_element
    (50) case_element -> . NUMBER COLON LPAREN field_list RPAREN

    END             reduce using rule 46 (case_part -> CASE ID COLON type_specifier OF case_list SEMICOLON .)
    NUMBER          shift and go to state 308

    case_element                   shift and go to state 315

state 313

    (50) case_element -> NUMBER COLON . LPAREN field_list RPAREN

    LPAREN          shift and go to state 316


state 314

    (56) method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier . SEMICOLON

    SEMICOLON       shift and go to state 317


state 315

    (48) case_list -> case_list SEMICOLON case_element .

    SEMICOLON       reduce using rule 48 (case_list -> case_list SEMICOLON case_element .)


state 316

    (50) case_element -> NUMBER COLON LPAREN . field_list RPAREN
    (39) field_list -> . field_list field
    (40) field_list -> . field
    (41) field_list -> . empty
    (42) field -> . id_list COLON type_specifier
    (43) field -> . id_list COLON type_specifier SEMICOLON
    (44) field -> . VAR id_list COLON type_specifier
    (45) field -> . VAR id_list COLON type_specifier SEMICOLON
    (132) empty -> .
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    VAR             shift and go to state 126
    RPAREN          reduce using rule 132 (empty -> .)
    ID              shift and go to state 28

  ! VAR             [ reduce using rule 132 (empty -> .) ]
  ! ID              [ reduce using rule 132 (empty -> .) ]

    field_list                     shift and go to state 318
    field                          shift and go to state 123
    empty                          shift and go to state 124
    id_list                        shift and go to state 125

state 317

    (56) method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .

    END             reduce using rule 56 (method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .)
    CONSTRUCTOR     reduce using rule 56 (method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 56 (method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 56 (method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .)
    DESTRUCTOR      reduce using rule 56 (method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .)


state 318

    (50) case_element -> NUMBER COLON LPAREN field_list . RPAREN
    (39) field_list -> field_list . field
    (42) field -> . id_list COLON type_specifier
    (43) field -> . id_list COLON type_specifier SEMICOLON
    (44) field -> . VAR id_list COLON type_specifier
    (45) field -> . VAR id_list COLON type_specifier SEMICOLON
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 319
    VAR             shift and go to state 126
    ID              shift and go to state 28

    field                          shift and go to state 193
    id_list                        shift and go to state 125

state 319

    (50) case_element -> NUMBER COLON LPAREN field_list RPAREN .

    SEMICOLON       reduce using rule 50 (case_element -> NUMBER COLON LPAREN field_list RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for USES in state 5 resolved as shift
WARNING: shift/reduce conflict for CONST in state 5 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 5 resolved as shift
WARNING: shift/reduce conflict for VAR in state 5 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 5 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 5 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 14 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 67 resolved as shift
WARNING: shift/reduce conflict for VAR in state 67 resolved as shift
WARNING: shift/reduce conflict for ID in state 67 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 69 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 84 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 84 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 85 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 85 resolved as shift
WARNING: shift/reduce conflict for VAR in state 105 resolved as shift
WARNING: shift/reduce conflict for ID in state 105 resolved as shift
WARNING: shift/reduce conflict for VAR in state 106 resolved as shift
WARNING: shift/reduce conflict for ID in state 106 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 158 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 158 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 158 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 158 resolved as shift
WARNING: shift/reduce conflict for MOD in state 158 resolved as shift
WARNING: shift/reduce conflict for AND in state 158 resolved as shift
WARNING: shift/reduce conflict for OR in state 158 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 183 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 183 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 183 resolved as shift
WARNING: shift/reduce conflict for DESTRUCTOR in state 183 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 210 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 211 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 211 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 211 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 211 resolved as shift
WARNING: shift/reduce conflict for MOD in state 211 resolved as shift
WARNING: shift/reduce conflict for AND in state 211 resolved as shift
WARNING: shift/reduce conflict for OR in state 211 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 212 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 212 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 212 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 212 resolved as shift
WARNING: shift/reduce conflict for MOD in state 212 resolved as shift
WARNING: shift/reduce conflict for AND in state 212 resolved as shift
WARNING: shift/reduce conflict for OR in state 212 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 213 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 213 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 213 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 213 resolved as shift
WARNING: shift/reduce conflict for MOD in state 213 resolved as shift
WARNING: shift/reduce conflict for AND in state 213 resolved as shift
WARNING: shift/reduce conflict for OR in state 213 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 214 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 214 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 214 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 214 resolved as shift
WARNING: shift/reduce conflict for MOD in state 214 resolved as shift
WARNING: shift/reduce conflict for AND in state 214 resolved as shift
WARNING: shift/reduce conflict for OR in state 214 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 215 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 215 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 215 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 215 resolved as shift
WARNING: shift/reduce conflict for MOD in state 215 resolved as shift
WARNING: shift/reduce conflict for AND in state 215 resolved as shift
WARNING: shift/reduce conflict for OR in state 215 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 216 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 216 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 216 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 216 resolved as shift
WARNING: shift/reduce conflict for MOD in state 216 resolved as shift
WARNING: shift/reduce conflict for AND in state 216 resolved as shift
WARNING: shift/reduce conflict for OR in state 216 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 217 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 217 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 217 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 217 resolved as shift
WARNING: shift/reduce conflict for MOD in state 217 resolved as shift
WARNING: shift/reduce conflict for AND in state 217 resolved as shift
WARNING: shift/reduce conflict for OR in state 217 resolved as shift
WARNING: shift/reduce conflict for VAR in state 282 resolved as shift
WARNING: shift/reduce conflict for ID in state 282 resolved as shift
WARNING: shift/reduce conflict for VAR in state 283 resolved as shift
WARNING: shift/reduce conflict for ID in state 283 resolved as shift
WARNING: shift/reduce conflict for VAR in state 284 resolved as shift
WARNING: shift/reduce conflict for ID in state 284 resolved as shift
WARNING: shift/reduce conflict for VAR in state 316 resolved as shift
WARNING: shift/reduce conflict for ID in state 316 resolved as shift
