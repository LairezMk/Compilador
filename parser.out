Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    FALSE
    GOTO
    LABEL
    LBLOCK
    NIL
    PACKED
    RBLOCK
    READLINE
    SUBRANGE
    TRUE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON declaration_sections block DOT
Rule 2     declaration_sections -> declaration_sections declaration_section
Rule 3     declaration_sections -> empty
Rule 4     declaration_section -> uses_opt
Rule 5     declaration_section -> constant_declaration
Rule 6     declaration_section -> type_declaration
Rule 7     declaration_section -> var_declaration
Rule 8     declaration_section -> procedure_declarations
Rule 9     declaration_section -> function_declaration
Rule 10    declaration_section -> constructor_declaration
Rule 11    declaration_section -> method_declaration
Rule 12    method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block
Rule 13    method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block
Rule 14    method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block
Rule 15    method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block
Rule 16    constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block
Rule 17    constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block
Rule 18    uses_opt -> USES id_list SEMICOLON
Rule 19    id_list -> ID
Rule 20    id_list -> id_list COMMA ID
Rule 21    var_declaration -> VAR declaration_list
Rule 22    declaration_list -> declaration
Rule 23    declaration_list -> declaration_list declaration
Rule 24    declaration -> id_list COLON type_specifier SEMICOLON
Rule 25    block -> declaration_sections compound_statement
Rule 26    type_declaration -> TYPE type_list
Rule 27    type_list -> type_definition
Rule 28    type_list -> type_list type_definition
Rule 29    type_definition -> ID EQUAL type_specifier SEMICOLON
Rule 30    type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier
Rule 31    type_specifier -> subrange
Rule 32    type_specifier -> FILE OF type_specifier
Rule 33    type_specifier -> SET OF type_specifier
Rule 34    type_specifier -> RECORD field_list case_part END
Rule 35    type_specifier -> OBJECT field_list method_list END
Rule 36    type_specifier -> LPAREN id_list RPAREN
Rule 37    type_specifier -> BOOLEAN_LITERAL
Rule 38    type_specifier -> INTEGER
Rule 39    type_specifier -> BYTE
Rule 40    type_specifier -> CHAR
Rule 41    type_specifier -> STRING
Rule 42    type_specifier -> STRING LBRACKET NUMBER RBRACKET
Rule 43    type_specifier -> ID
Rule 44    type_expression -> type_expression COMMA subrange
Rule 45    type_expression -> subrange
Rule 46    subrange -> NUMBER DOTDOT NUMBER
Rule 47    subrange -> NUMBER DOTDOT ID
Rule 48    field_list -> field_list field
Rule 49    field_list -> field
Rule 50    field_list -> empty
Rule 51    field -> id_list COLON type_specifier
Rule 52    field -> id_list COLON type_specifier SEMICOLON
Rule 53    field -> VAR id_list COLON type_specifier
Rule 54    field -> VAR id_list COLON type_specifier SEMICOLON
Rule 55    field -> id_list LPAREN STRING_LITERAL RPAREN
Rule 56    field -> if_statement
Rule 57    field -> case_statement
Rule 58    field -> assignment_statement
Rule 59    case_part -> CASE ID COLON type_specifier OF case_list SEMICOLON
Rule 60    case_part -> empty
Rule 61    case_list -> case_list SEMICOLON case_element
Rule 62    case_list -> case_element
Rule 63    case_element -> NUMBER COLON LPAREN field_list RPAREN
Rule 64    case_element -> NUMBER COLON field_list
Rule 65    method_list -> method_list method
Rule 66    method_list -> method
Rule 67    method_list -> empty
Rule 68    method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON
Rule 69    method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON
Rule 70    method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON
Rule 71    method -> DESTRUCTOR ID SEMICOLON
Rule 72    case_statement -> CASE expression OF case_list END SEMICOLON
Rule 73    case_statement -> CASE expression OF case_list ELSE statement_list END SEMICOLON
Rule 74    case_statement -> CASE expression OF case_list END
Rule 75    type_specifier -> LONGINT
Rule 76    procedure_declarations -> procedure_declaration
Rule 77    procedure_declarations -> procedure_declarations procedure_declaration
Rule 78    procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
Rule 79    procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON
Rule 80    procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON
Rule 81    procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON FORWARD SEMICOLON
Rule 82    procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON
Rule 83    procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON
Rule 84    function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
Rule 85    function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
Rule 86    function_call -> ID LPAREN expression_list RPAREN
Rule 87    factor -> function_call
Rule 88    parameter_list -> parameter
Rule 89    parameter_list -> parameter_list SEMICOLON parameter
Rule 90    parameter_list -> empty
Rule 91    parameter -> ID COLON type_specifier
Rule 92    compound_statement -> BEGIN statement_list END
Rule 93    statement_list -> statement SEMICOLON
Rule 94    statement_list -> statement_list statement SEMICOLON
Rule 95    statement -> if_statement
Rule 96    statement -> assignment_statement
Rule 97    statement -> while_statement
Rule 98    statement -> procedure_call
Rule 99    statement -> compound_statement
Rule 100   statement -> for_statement
Rule 101   statement -> case_statement
Rule 102   statement -> with_statement
Rule 103   statement -> repeat_statement
Rule 104   statement -> empty
Rule 105   with_statement -> WITH variable DO statement
Rule 106   if_statement -> IF expression THEN statement ELSE statement
Rule 107   if_statement -> IF expression THEN statement
Rule 108   if_statement -> IF expression IN statement THEN statement ELSE statement
Rule 109   if_statement -> IF expression IN statement THEN statement
Rule 110   for_statement -> FOR ID COLON_EQUAL expression TO expression DO block
Rule 111   for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block
Rule 112   assignment_statement -> variable COLON_EQUAL expression
Rule 113   assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
Rule 114   assignment_statement -> variable PLUS COLON_EQUAL expression
Rule 115   assignment_statement -> variable MINUS COLON_EQUAL expression
Rule 116   assignment_statement -> variable TIMES COLON_EQUAL expression
Rule 117   assignment_statement -> variable DIVIDE COLON_EQUAL expression
Rule 118   assignment_statement -> ID COLON_EQUAL expression
Rule 119   variable -> ID
Rule 120   variable -> variable LBRACKET expression RBRACKET
Rule 121   variable -> variable DOT ID
Rule 122   variable -> ID LBRACKET index_list RBRACKET
Rule 123   index_list -> expression
Rule 124   index_list -> index_list COMMA expression
Rule 125   while_statement -> WHILE expression DO statement
Rule 126   procedure_call -> ID LPAREN expression_list RPAREN
Rule 127   procedure_call -> ID
Rule 128   expression_list -> expression expression_list_tail
Rule 129   expression_list_tail -> COMMA expression expression_list_tail
Rule 130   expression_list_tail -> empty
Rule 131   expression_list -> empty
Rule 132   expression -> simple_expression relop simple_expression
Rule 133   expression -> simple_expression
Rule 134   simple_expression -> term simple_expression_tail
Rule 135   simple_expression_tail -> addop term
Rule 136   simple_expression_tail -> empty
Rule 137   addop -> PLUS
Rule 138   addop -> MINUS
Rule 139   term -> factor term_tail
Rule 140   term_tail -> mulop factor
Rule 141   term_tail -> empty
Rule 142   mulop -> TIMES
Rule 143   mulop -> DIVIDE
Rule 144   mulop -> DIV
Rule 145   expression -> expression PLUS expression
Rule 146   expression -> expression MINUS expression
Rule 147   expression -> expression TIMES expression
Rule 148   expression -> expression DIVIDE expression
Rule 149   expression -> expression MOD expression
Rule 150   factor -> LPAREN expression RPAREN
Rule 151   factor -> variable
Rule 152   factor -> NUMBER
Rule 153   factor -> STRING_LITERAL
Rule 154   relop -> LESS
Rule 155   relop -> LESS_EQUAL
Rule 156   relop -> GREAT
Rule 157   relop -> GREAT_EQUAL
Rule 158   relop -> EQUAL
Rule 159   relop -> DIFFERENT
Rule 160   empty -> <empty>
Rule 161   statement -> READLN
Rule 162   statement -> READLN LPAREN variable RPAREN
Rule 163   statement -> READLN LBRACKET variable RBRACKET
Rule 164   statement -> WRITE LPAREN expression_list RPAREN
Rule 165   statement -> WRITELN LPAREN write_arguments RPAREN
Rule 166   write_arguments -> write_argument
Rule 167   write_arguments -> write_arguments COMMA write_argument
Rule 168   write_argument -> expression
Rule 169   write_argument -> expression COLON expression
Rule 170   write_argument -> expression COLON expression COLON expression
Rule 171   statement -> USES ID SEMICOLON
Rule 172   constant_declaration -> CONST constant_list
Rule 173   repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON
Rule 174   constant_list -> constant
Rule 175   constant_list -> constant_list constant
Rule 176   constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON
Rule 177   constant -> ID EQUAL NUMBER SEMICOLON
Rule 178   constant -> ID EQUAL STRING_LITERAL SEMICOLON
Rule 179   constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON
Rule 180   expression -> expression AND expression
Rule 181   expression -> expression OR expression
Rule 182   expression -> NOT expression

Terminals, with rules where they appear

AND                  : 180
ARRAY                : 30
BEGIN                : 92
BOOLEAN_LITERAL      : 37 113 179
BYTE                 : 39
CASE                 : 59 72 73 74
CHAR                 : 40
CHARACTER_LITERAL    : 176
COLON                : 14 24 51 52 53 54 59 63 64 70 84 85 91 169 170 170
COLON_EQUAL          : 110 111 112 113 114 115 116 117 118
COMMA                : 20 44 124 129 167
CONST                : 172
CONSTRUCTOR          : 12 16 17 68
DESTRUCTOR           : 15 71
DIFFERENT            : 159
DIV                  : 144
DIVIDE               : 117 143 148
DO                   : 105 110 111 125
DOT                  : 1 12 13 14 15 121
DOTDOT               : 46 47
DOWNTO               : 111
ELSE                 : 73 106 108
END                  : 34 35 72 73 74 92
EQUAL                : 29 158 176 177 178 179
FALSE                : 
FILE                 : 32
FOR                  : 110 111
FORWARD              : 81 82 83 85
FUNCTION             : 14 70 84 85
GOTO                 : 
GREAT                : 156
GREAT_EQUAL          : 157
ID                   : 1 12 12 13 13 14 14 15 15 16 17 19 20 29 43 47 59 68 69 70 71 78 79 80 81 82 83 84 85 86 91 110 111 118 119 121 122 126 127 171 176 177 178 179
IF                   : 106 107 108 109
IN                   : 108 109
INTEGER              : 38
LABEL                : 
LBLOCK               : 
LBRACKET             : 30 42 120 122 163
LESS                 : 154
LESS_EQUAL           : 155
LONGINT              : 75
LPAREN               : 12 13 14 16 17 36 55 63 68 69 70 78 79 81 82 84 85 86 126 150 162 164 165
MINUS                : 115 138 146
MOD                  : 149
NIL                  : 
NOT                  : 182
NUMBER               : 42 46 46 47 63 64 152 177
OBJECT               : 35
OF                   : 30 32 33 59 72 73 74
OR                   : 181
PACKED               : 
PLUS                 : 114 137 145
PROCEDURE            : 13 69 78 79 80 81 82 83
PROGRAM              : 1
RBLOCK               : 
RBRACKET             : 30 42 120 122 163
READLINE             : 
READLN               : 161 162 163
RECORD               : 34
REPEAT               : 173
RPAREN               : 12 13 14 16 17 36 55 63 68 69 70 78 79 81 82 84 85 86 126 150 162 164 165
SEMICOLON            : 1 12 13 14 15 16 17 18 24 29 52 54 59 61 68 69 70 71 72 73 78 78 79 79 80 80 81 81 82 82 83 83 84 84 85 85 89 93 94 113 171 173 176 177 178 179
SET                  : 33
STRING               : 41 42
STRING_LITERAL       : 55 153 178
SUBRANGE             : 
THEN                 : 106 107 108 109
TIMES                : 116 142 147
TO                   : 110
TRUE                 : 
TYPE                 : 26
UNTIL                : 173
USES                 : 18 171
VAR                  : 21 53 54
WHILE                : 125
WITH                 : 105
WRITE                : 164
WRITELN              : 165
error                : 

Nonterminals, with rules where they appear

addop                : 135
assignment_statement : 58 96
block                : 1 12 13 14 15 16 17 78 79 80 84 110 111
case_element         : 61 62
case_list            : 59 61 72 73 74
case_part            : 34
case_statement       : 57 101
compound_statement   : 25 99
constant             : 174 175
constant_declaration : 5
constant_list        : 172 175
constructor_declaration : 10
declaration          : 22 23
declaration_list     : 21 23
declaration_section  : 2
declaration_sections : 1 2 25
empty                : 3 50 60 67 90 104 130 131 136 141
expression           : 72 73 74 106 107 108 109 110 110 111 111 112 114 115 116 117 118 120 123 124 125 128 129 145 145 146 146 147 147 148 148 149 149 150 168 169 169 170 170 170 173 180 180 181 181 182
expression_list      : 86 126 164
expression_list_tail : 128 129
factor               : 139 140
field                : 48 49
field_list           : 16 34 35 48 63 64 68 69 70
for_statement        : 100
function_call        : 87
function_declaration : 9
id_list              : 18 20 24 36 51 52 53 54 55
if_statement         : 56 95
index_list           : 122 124
method               : 65 66
method_declaration   : 11
method_list          : 35 65
mulop                : 140
parameter            : 88 89
parameter_list       : 12 13 14 78 81 84 85 89
procedure_call       : 98
procedure_declaration : 76 77
procedure_declarations : 8 77
program              : 0
relop                : 132
repeat_statement     : 103
simple_expression    : 132 132 133
simple_expression_tail : 134
statement            : 93 94 105 106 106 107 108 108 108 109 109 125
statement_list       : 73 92 94 173
subrange             : 31 44 45
term                 : 134 135
term_tail            : 139
type_declaration     : 6
type_definition      : 27 28
type_expression      : 30 44
type_list            : 26 28
type_specifier       : 14 24 29 30 32 33 51 52 53 54 59 70 84 85 91
uses_opt             : 4
var_declaration      : 7
variable             : 105 112 113 114 115 116 117 120 121 151 162 163
while_statement      : 97
with_statement       : 102
write_argument       : 166 167
write_arguments      : 165 167

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON declaration_sections block DOT

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON declaration_sections block DOT

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON declaration_sections block DOT

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . declaration_sections block DOT
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (160) empty -> .

    USES            reduce using rule 160 (empty -> .)
    CONST           reduce using rule 160 (empty -> .)
    TYPE            reduce using rule 160 (empty -> .)
    VAR             reduce using rule 160 (empty -> .)
    FUNCTION        reduce using rule 160 (empty -> .)
    CONSTRUCTOR     reduce using rule 160 (empty -> .)
    PROCEDURE       reduce using rule 160 (empty -> .)
    DESTRUCTOR      reduce using rule 160 (empty -> .)
    BEGIN           reduce using rule 160 (empty -> .)

    declaration_sections           shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) program -> PROGRAM ID SEMICOLON declaration_sections . block DOT
    (2) declaration_sections -> declaration_sections . declaration_section
    (25) block -> . declaration_sections compound_statement
    (4) declaration_section -> . uses_opt
    (5) declaration_section -> . constant_declaration
    (6) declaration_section -> . type_declaration
    (7) declaration_section -> . var_declaration
    (8) declaration_section -> . procedure_declarations
    (9) declaration_section -> . function_declaration
    (10) declaration_section -> . constructor_declaration
    (11) declaration_section -> . method_declaration
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (18) uses_opt -> . USES id_list SEMICOLON
    (172) constant_declaration -> . CONST constant_list
    (26) type_declaration -> . TYPE type_list
    (21) var_declaration -> . VAR declaration_list
    (76) procedure_declarations -> . procedure_declaration
    (77) procedure_declarations -> . procedure_declarations procedure_declaration
    (84) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (85) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (16) constructor_declaration -> . CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block
    (17) constructor_declaration -> . CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block
    (12) method_declaration -> . CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block
    (13) method_declaration -> . PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block
    (14) method_declaration -> . FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block
    (15) method_declaration -> . DESTRUCTOR ID DOT ID SEMICOLON block
    (160) empty -> .
    (78) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (79) procedure_declaration -> . PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON
    (80) procedure_declaration -> . PROCEDURE ID SEMICOLON block SEMICOLON
    (81) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON FORWARD SEMICOLON
    (82) procedure_declaration -> . PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON
    (83) procedure_declaration -> . PROCEDURE ID SEMICOLON FORWARD SEMICOLON

  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for PROCEDURE resolved as shift
  ! shift/reduce conflict for DESTRUCTOR resolved as shift
    USES            shift and go to state 18
    CONST           shift and go to state 19
    TYPE            shift and go to state 20
    VAR             shift and go to state 21
    FUNCTION        shift and go to state 23
    CONSTRUCTOR     shift and go to state 24
    PROCEDURE       shift and go to state 25
    DESTRUCTOR      shift and go to state 26
    BEGIN           reduce using rule 160 (empty -> .)

  ! USES            [ reduce using rule 160 (empty -> .) ]
  ! CONST           [ reduce using rule 160 (empty -> .) ]
  ! TYPE            [ reduce using rule 160 (empty -> .) ]
  ! VAR             [ reduce using rule 160 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 160 (empty -> .) ]
  ! CONSTRUCTOR     [ reduce using rule 160 (empty -> .) ]
  ! PROCEDURE       [ reduce using rule 160 (empty -> .) ]
  ! DESTRUCTOR      [ reduce using rule 160 (empty -> .) ]

    declaration_sections           shift and go to state 7
    block                          shift and go to state 8
    declaration_section            shift and go to state 9
    uses_opt                       shift and go to state 10
    constant_declaration           shift and go to state 11
    type_declaration               shift and go to state 12
    var_declaration                shift and go to state 13
    procedure_declarations         shift and go to state 14
    function_declaration           shift and go to state 15
    constructor_declaration        shift and go to state 16
    method_declaration             shift and go to state 17
    empty                          shift and go to state 6
    procedure_declaration          shift and go to state 22

state 6

    (3) declaration_sections -> empty .

    USES            reduce using rule 3 (declaration_sections -> empty .)
    CONST           reduce using rule 3 (declaration_sections -> empty .)
    TYPE            reduce using rule 3 (declaration_sections -> empty .)
    VAR             reduce using rule 3 (declaration_sections -> empty .)
    FUNCTION        reduce using rule 3 (declaration_sections -> empty .)
    CONSTRUCTOR     reduce using rule 3 (declaration_sections -> empty .)
    PROCEDURE       reduce using rule 3 (declaration_sections -> empty .)
    DESTRUCTOR      reduce using rule 3 (declaration_sections -> empty .)
    BEGIN           reduce using rule 3 (declaration_sections -> empty .)


state 7

    (25) block -> declaration_sections . compound_statement
    (2) declaration_sections -> declaration_sections . declaration_section
    (92) compound_statement -> . BEGIN statement_list END
    (4) declaration_section -> . uses_opt
    (5) declaration_section -> . constant_declaration
    (6) declaration_section -> . type_declaration
    (7) declaration_section -> . var_declaration
    (8) declaration_section -> . procedure_declarations
    (9) declaration_section -> . function_declaration
    (10) declaration_section -> . constructor_declaration
    (11) declaration_section -> . method_declaration
    (18) uses_opt -> . USES id_list SEMICOLON
    (172) constant_declaration -> . CONST constant_list
    (26) type_declaration -> . TYPE type_list
    (21) var_declaration -> . VAR declaration_list
    (76) procedure_declarations -> . procedure_declaration
    (77) procedure_declarations -> . procedure_declarations procedure_declaration
    (84) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (85) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (16) constructor_declaration -> . CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block
    (17) constructor_declaration -> . CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block
    (12) method_declaration -> . CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block
    (13) method_declaration -> . PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block
    (14) method_declaration -> . FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block
    (15) method_declaration -> . DESTRUCTOR ID DOT ID SEMICOLON block
    (78) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (79) procedure_declaration -> . PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON
    (80) procedure_declaration -> . PROCEDURE ID SEMICOLON block SEMICOLON
    (81) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON FORWARD SEMICOLON
    (82) procedure_declaration -> . PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON
    (83) procedure_declaration -> . PROCEDURE ID SEMICOLON FORWARD SEMICOLON

    BEGIN           shift and go to state 28
    USES            shift and go to state 18
    CONST           shift and go to state 19
    TYPE            shift and go to state 20
    VAR             shift and go to state 21
    FUNCTION        shift and go to state 23
    CONSTRUCTOR     shift and go to state 24
    PROCEDURE       shift and go to state 25
    DESTRUCTOR      shift and go to state 26

    compound_statement             shift and go to state 27
    declaration_section            shift and go to state 9
    uses_opt                       shift and go to state 10
    constant_declaration           shift and go to state 11
    type_declaration               shift and go to state 12
    var_declaration                shift and go to state 13
    procedure_declarations         shift and go to state 14
    function_declaration           shift and go to state 15
    constructor_declaration        shift and go to state 16
    method_declaration             shift and go to state 17
    procedure_declaration          shift and go to state 22

state 8

    (1) program -> PROGRAM ID SEMICOLON declaration_sections block . DOT

    DOT             shift and go to state 29


state 9

    (2) declaration_sections -> declaration_sections declaration_section .

    USES            reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    CONST           reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    TYPE            reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    VAR             reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    FUNCTION        reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    CONSTRUCTOR     reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    PROCEDURE       reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    DESTRUCTOR      reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    BEGIN           reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)


state 10

    (4) declaration_section -> uses_opt .

    USES            reduce using rule 4 (declaration_section -> uses_opt .)
    CONST           reduce using rule 4 (declaration_section -> uses_opt .)
    TYPE            reduce using rule 4 (declaration_section -> uses_opt .)
    VAR             reduce using rule 4 (declaration_section -> uses_opt .)
    FUNCTION        reduce using rule 4 (declaration_section -> uses_opt .)
    CONSTRUCTOR     reduce using rule 4 (declaration_section -> uses_opt .)
    PROCEDURE       reduce using rule 4 (declaration_section -> uses_opt .)
    DESTRUCTOR      reduce using rule 4 (declaration_section -> uses_opt .)
    BEGIN           reduce using rule 4 (declaration_section -> uses_opt .)


state 11

    (5) declaration_section -> constant_declaration .

    USES            reduce using rule 5 (declaration_section -> constant_declaration .)
    CONST           reduce using rule 5 (declaration_section -> constant_declaration .)
    TYPE            reduce using rule 5 (declaration_section -> constant_declaration .)
    VAR             reduce using rule 5 (declaration_section -> constant_declaration .)
    FUNCTION        reduce using rule 5 (declaration_section -> constant_declaration .)
    CONSTRUCTOR     reduce using rule 5 (declaration_section -> constant_declaration .)
    PROCEDURE       reduce using rule 5 (declaration_section -> constant_declaration .)
    DESTRUCTOR      reduce using rule 5 (declaration_section -> constant_declaration .)
    BEGIN           reduce using rule 5 (declaration_section -> constant_declaration .)


state 12

    (6) declaration_section -> type_declaration .

    USES            reduce using rule 6 (declaration_section -> type_declaration .)
    CONST           reduce using rule 6 (declaration_section -> type_declaration .)
    TYPE            reduce using rule 6 (declaration_section -> type_declaration .)
    VAR             reduce using rule 6 (declaration_section -> type_declaration .)
    FUNCTION        reduce using rule 6 (declaration_section -> type_declaration .)
    CONSTRUCTOR     reduce using rule 6 (declaration_section -> type_declaration .)
    PROCEDURE       reduce using rule 6 (declaration_section -> type_declaration .)
    DESTRUCTOR      reduce using rule 6 (declaration_section -> type_declaration .)
    BEGIN           reduce using rule 6 (declaration_section -> type_declaration .)


state 13

    (7) declaration_section -> var_declaration .

    USES            reduce using rule 7 (declaration_section -> var_declaration .)
    CONST           reduce using rule 7 (declaration_section -> var_declaration .)
    TYPE            reduce using rule 7 (declaration_section -> var_declaration .)
    VAR             reduce using rule 7 (declaration_section -> var_declaration .)
    FUNCTION        reduce using rule 7 (declaration_section -> var_declaration .)
    CONSTRUCTOR     reduce using rule 7 (declaration_section -> var_declaration .)
    PROCEDURE       reduce using rule 7 (declaration_section -> var_declaration .)
    DESTRUCTOR      reduce using rule 7 (declaration_section -> var_declaration .)
    BEGIN           reduce using rule 7 (declaration_section -> var_declaration .)


state 14

    (8) declaration_section -> procedure_declarations .
    (77) procedure_declarations -> procedure_declarations . procedure_declaration
    (78) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (79) procedure_declaration -> . PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON
    (80) procedure_declaration -> . PROCEDURE ID SEMICOLON block SEMICOLON
    (81) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON FORWARD SEMICOLON
    (82) procedure_declaration -> . PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON
    (83) procedure_declaration -> . PROCEDURE ID SEMICOLON FORWARD SEMICOLON

  ! shift/reduce conflict for PROCEDURE resolved as shift
    USES            reduce using rule 8 (declaration_section -> procedure_declarations .)
    CONST           reduce using rule 8 (declaration_section -> procedure_declarations .)
    TYPE            reduce using rule 8 (declaration_section -> procedure_declarations .)
    VAR             reduce using rule 8 (declaration_section -> procedure_declarations .)
    FUNCTION        reduce using rule 8 (declaration_section -> procedure_declarations .)
    CONSTRUCTOR     reduce using rule 8 (declaration_section -> procedure_declarations .)
    DESTRUCTOR      reduce using rule 8 (declaration_section -> procedure_declarations .)
    BEGIN           reduce using rule 8 (declaration_section -> procedure_declarations .)
    PROCEDURE       shift and go to state 31

  ! PROCEDURE       [ reduce using rule 8 (declaration_section -> procedure_declarations .) ]

    procedure_declaration          shift and go to state 30

state 15

    (9) declaration_section -> function_declaration .

    USES            reduce using rule 9 (declaration_section -> function_declaration .)
    CONST           reduce using rule 9 (declaration_section -> function_declaration .)
    TYPE            reduce using rule 9 (declaration_section -> function_declaration .)
    VAR             reduce using rule 9 (declaration_section -> function_declaration .)
    FUNCTION        reduce using rule 9 (declaration_section -> function_declaration .)
    CONSTRUCTOR     reduce using rule 9 (declaration_section -> function_declaration .)
    PROCEDURE       reduce using rule 9 (declaration_section -> function_declaration .)
    DESTRUCTOR      reduce using rule 9 (declaration_section -> function_declaration .)
    BEGIN           reduce using rule 9 (declaration_section -> function_declaration .)


state 16

    (10) declaration_section -> constructor_declaration .

    USES            reduce using rule 10 (declaration_section -> constructor_declaration .)
    CONST           reduce using rule 10 (declaration_section -> constructor_declaration .)
    TYPE            reduce using rule 10 (declaration_section -> constructor_declaration .)
    VAR             reduce using rule 10 (declaration_section -> constructor_declaration .)
    FUNCTION        reduce using rule 10 (declaration_section -> constructor_declaration .)
    CONSTRUCTOR     reduce using rule 10 (declaration_section -> constructor_declaration .)
    PROCEDURE       reduce using rule 10 (declaration_section -> constructor_declaration .)
    DESTRUCTOR      reduce using rule 10 (declaration_section -> constructor_declaration .)
    BEGIN           reduce using rule 10 (declaration_section -> constructor_declaration .)


state 17

    (11) declaration_section -> method_declaration .

    USES            reduce using rule 11 (declaration_section -> method_declaration .)
    CONST           reduce using rule 11 (declaration_section -> method_declaration .)
    TYPE            reduce using rule 11 (declaration_section -> method_declaration .)
    VAR             reduce using rule 11 (declaration_section -> method_declaration .)
    FUNCTION        reduce using rule 11 (declaration_section -> method_declaration .)
    CONSTRUCTOR     reduce using rule 11 (declaration_section -> method_declaration .)
    PROCEDURE       reduce using rule 11 (declaration_section -> method_declaration .)
    DESTRUCTOR      reduce using rule 11 (declaration_section -> method_declaration .)
    BEGIN           reduce using rule 11 (declaration_section -> method_declaration .)


state 18

    (18) uses_opt -> USES . id_list SEMICOLON
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

    ID              shift and go to state 33

    id_list                        shift and go to state 32

state 19

    (172) constant_declaration -> CONST . constant_list
    (174) constant_list -> . constant
    (175) constant_list -> . constant_list constant
    (176) constant -> . ID EQUAL CHARACTER_LITERAL SEMICOLON
    (177) constant -> . ID EQUAL NUMBER SEMICOLON
    (178) constant -> . ID EQUAL STRING_LITERAL SEMICOLON
    (179) constant -> . ID EQUAL BOOLEAN_LITERAL SEMICOLON

    ID              shift and go to state 36

    constant_list                  shift and go to state 34
    constant                       shift and go to state 35

state 20

    (26) type_declaration -> TYPE . type_list
    (27) type_list -> . type_definition
    (28) type_list -> . type_list type_definition
    (29) type_definition -> . ID EQUAL type_specifier SEMICOLON

    ID              shift and go to state 39

    type_list                      shift and go to state 37
    type_definition                shift and go to state 38

state 21

    (21) var_declaration -> VAR . declaration_list
    (22) declaration_list -> . declaration
    (23) declaration_list -> . declaration_list declaration
    (24) declaration -> . id_list COLON type_specifier SEMICOLON
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

    ID              shift and go to state 33

    declaration_list               shift and go to state 40
    declaration                    shift and go to state 41
    id_list                        shift and go to state 42

state 22

    (76) procedure_declarations -> procedure_declaration .

    PROCEDURE       reduce using rule 76 (procedure_declarations -> procedure_declaration .)
    USES            reduce using rule 76 (procedure_declarations -> procedure_declaration .)
    CONST           reduce using rule 76 (procedure_declarations -> procedure_declaration .)
    TYPE            reduce using rule 76 (procedure_declarations -> procedure_declaration .)
    VAR             reduce using rule 76 (procedure_declarations -> procedure_declaration .)
    FUNCTION        reduce using rule 76 (procedure_declarations -> procedure_declaration .)
    CONSTRUCTOR     reduce using rule 76 (procedure_declarations -> procedure_declaration .)
    DESTRUCTOR      reduce using rule 76 (procedure_declarations -> procedure_declaration .)
    BEGIN           reduce using rule 76 (procedure_declarations -> procedure_declaration .)


state 23

    (84) function_declaration -> FUNCTION . ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (85) function_declaration -> FUNCTION . ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (14) method_declaration -> FUNCTION . ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block

    ID              shift and go to state 43


state 24

    (16) constructor_declaration -> CONSTRUCTOR . ID LPAREN field_list RPAREN SEMICOLON block
    (17) constructor_declaration -> CONSTRUCTOR . ID LPAREN RPAREN SEMICOLON block
    (12) method_declaration -> CONSTRUCTOR . ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block

    ID              shift and go to state 44


state 25

    (13) method_declaration -> PROCEDURE . ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block
    (78) procedure_declaration -> PROCEDURE . ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (79) procedure_declaration -> PROCEDURE . ID LPAREN RPAREN SEMICOLON block SEMICOLON
    (80) procedure_declaration -> PROCEDURE . ID SEMICOLON block SEMICOLON
    (81) procedure_declaration -> PROCEDURE . ID LPAREN parameter_list RPAREN SEMICOLON FORWARD SEMICOLON
    (82) procedure_declaration -> PROCEDURE . ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON
    (83) procedure_declaration -> PROCEDURE . ID SEMICOLON FORWARD SEMICOLON

    ID              shift and go to state 45


state 26

    (15) method_declaration -> DESTRUCTOR . ID DOT ID SEMICOLON block

    ID              shift and go to state 46


state 27

    (25) block -> declaration_sections compound_statement .

    DOT             reduce using rule 25 (block -> declaration_sections compound_statement .)
    SEMICOLON       reduce using rule 25 (block -> declaration_sections compound_statement .)
    USES            reduce using rule 25 (block -> declaration_sections compound_statement .)
    CONST           reduce using rule 25 (block -> declaration_sections compound_statement .)
    TYPE            reduce using rule 25 (block -> declaration_sections compound_statement .)
    VAR             reduce using rule 25 (block -> declaration_sections compound_statement .)
    FUNCTION        reduce using rule 25 (block -> declaration_sections compound_statement .)
    CONSTRUCTOR     reduce using rule 25 (block -> declaration_sections compound_statement .)
    PROCEDURE       reduce using rule 25 (block -> declaration_sections compound_statement .)
    DESTRUCTOR      reduce using rule 25 (block -> declaration_sections compound_statement .)
    BEGIN           reduce using rule 25 (block -> declaration_sections compound_statement .)
    ELSE            reduce using rule 25 (block -> declaration_sections compound_statement .)
    RPAREN          reduce using rule 25 (block -> declaration_sections compound_statement .)
    ID              reduce using rule 25 (block -> declaration_sections compound_statement .)
    IF              reduce using rule 25 (block -> declaration_sections compound_statement .)
    CASE            reduce using rule 25 (block -> declaration_sections compound_statement .)
    END             reduce using rule 25 (block -> declaration_sections compound_statement .)
    THEN            reduce using rule 25 (block -> declaration_sections compound_statement .)


state 28

    (92) compound_statement -> BEGIN . statement_list END
    (93) statement_list -> . statement SEMICOLON
    (94) statement_list -> . statement_list statement SEMICOLON
    (95) statement -> . if_statement
    (96) statement -> . assignment_statement
    (97) statement -> . while_statement
    (98) statement -> . procedure_call
    (99) statement -> . compound_statement
    (100) statement -> . for_statement
    (101) statement -> . case_statement
    (102) statement -> . with_statement
    (103) statement -> . repeat_statement
    (104) statement -> . empty
    (161) statement -> . READLN
    (162) statement -> . READLN LPAREN variable RPAREN
    (163) statement -> . READLN LBRACKET variable RBRACKET
    (164) statement -> . WRITE LPAREN expression_list RPAREN
    (165) statement -> . WRITELN LPAREN write_arguments RPAREN
    (171) statement -> . USES ID SEMICOLON
    (106) if_statement -> . IF expression THEN statement ELSE statement
    (107) if_statement -> . IF expression THEN statement
    (108) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (109) if_statement -> . IF expression IN statement THEN statement
    (112) assignment_statement -> . variable COLON_EQUAL expression
    (113) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (114) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (115) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (116) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (117) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (118) assignment_statement -> . ID COLON_EQUAL expression
    (125) while_statement -> . WHILE expression DO statement
    (126) procedure_call -> . ID LPAREN expression_list RPAREN
    (127) procedure_call -> . ID
    (92) compound_statement -> . BEGIN statement_list END
    (110) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (111) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (72) case_statement -> . CASE expression OF case_list END SEMICOLON
    (73) case_statement -> . CASE expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> . CASE expression OF case_list END
    (105) with_statement -> . WITH variable DO statement
    (173) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (160) empty -> .
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    READLN          shift and go to state 59
    WRITE           shift and go to state 61
    WRITELN         shift and go to state 62
    USES            shift and go to state 63
    IF              shift and go to state 65
    ID              shift and go to state 64
    WHILE           shift and go to state 66
    BEGIN           shift and go to state 28
    FOR             shift and go to state 67
    CASE            shift and go to state 68
    WITH            shift and go to state 69
    REPEAT          shift and go to state 70
    SEMICOLON       reduce using rule 160 (empty -> .)

    statement_list                 shift and go to state 47
    statement                      shift and go to state 48
    if_statement                   shift and go to state 49
    assignment_statement           shift and go to state 50
    while_statement                shift and go to state 51
    procedure_call                 shift and go to state 52
    compound_statement             shift and go to state 53
    for_statement                  shift and go to state 54
    case_statement                 shift and go to state 55
    with_statement                 shift and go to state 56
    repeat_statement               shift and go to state 57
    empty                          shift and go to state 58
    variable                       shift and go to state 60

state 29

    (1) program -> PROGRAM ID SEMICOLON declaration_sections block DOT .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON declaration_sections block DOT .)


state 30

    (77) procedure_declarations -> procedure_declarations procedure_declaration .

    PROCEDURE       reduce using rule 77 (procedure_declarations -> procedure_declarations procedure_declaration .)
    USES            reduce using rule 77 (procedure_declarations -> procedure_declarations procedure_declaration .)
    CONST           reduce using rule 77 (procedure_declarations -> procedure_declarations procedure_declaration .)
    TYPE            reduce using rule 77 (procedure_declarations -> procedure_declarations procedure_declaration .)
    VAR             reduce using rule 77 (procedure_declarations -> procedure_declarations procedure_declaration .)
    FUNCTION        reduce using rule 77 (procedure_declarations -> procedure_declarations procedure_declaration .)
    CONSTRUCTOR     reduce using rule 77 (procedure_declarations -> procedure_declarations procedure_declaration .)
    DESTRUCTOR      reduce using rule 77 (procedure_declarations -> procedure_declarations procedure_declaration .)
    BEGIN           reduce using rule 77 (procedure_declarations -> procedure_declarations procedure_declaration .)


state 31

    (78) procedure_declaration -> PROCEDURE . ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (79) procedure_declaration -> PROCEDURE . ID LPAREN RPAREN SEMICOLON block SEMICOLON
    (80) procedure_declaration -> PROCEDURE . ID SEMICOLON block SEMICOLON
    (81) procedure_declaration -> PROCEDURE . ID LPAREN parameter_list RPAREN SEMICOLON FORWARD SEMICOLON
    (82) procedure_declaration -> PROCEDURE . ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON
    (83) procedure_declaration -> PROCEDURE . ID SEMICOLON FORWARD SEMICOLON

    ID              shift and go to state 71


state 32

    (18) uses_opt -> USES id_list . SEMICOLON
    (20) id_list -> id_list . COMMA ID

    SEMICOLON       shift and go to state 72
    COMMA           shift and go to state 73


state 33

    (19) id_list -> ID .

    SEMICOLON       reduce using rule 19 (id_list -> ID .)
    COMMA           reduce using rule 19 (id_list -> ID .)
    COLON           reduce using rule 19 (id_list -> ID .)
    RPAREN          reduce using rule 19 (id_list -> ID .)


state 34

    (172) constant_declaration -> CONST constant_list .
    (175) constant_list -> constant_list . constant
    (176) constant -> . ID EQUAL CHARACTER_LITERAL SEMICOLON
    (177) constant -> . ID EQUAL NUMBER SEMICOLON
    (178) constant -> . ID EQUAL STRING_LITERAL SEMICOLON
    (179) constant -> . ID EQUAL BOOLEAN_LITERAL SEMICOLON

    USES            reduce using rule 172 (constant_declaration -> CONST constant_list .)
    CONST           reduce using rule 172 (constant_declaration -> CONST constant_list .)
    TYPE            reduce using rule 172 (constant_declaration -> CONST constant_list .)
    VAR             reduce using rule 172 (constant_declaration -> CONST constant_list .)
    FUNCTION        reduce using rule 172 (constant_declaration -> CONST constant_list .)
    CONSTRUCTOR     reduce using rule 172 (constant_declaration -> CONST constant_list .)
    PROCEDURE       reduce using rule 172 (constant_declaration -> CONST constant_list .)
    DESTRUCTOR      reduce using rule 172 (constant_declaration -> CONST constant_list .)
    BEGIN           reduce using rule 172 (constant_declaration -> CONST constant_list .)
    ID              shift and go to state 36

    constant                       shift and go to state 74

state 35

    (174) constant_list -> constant .

    ID              reduce using rule 174 (constant_list -> constant .)
    USES            reduce using rule 174 (constant_list -> constant .)
    CONST           reduce using rule 174 (constant_list -> constant .)
    TYPE            reduce using rule 174 (constant_list -> constant .)
    VAR             reduce using rule 174 (constant_list -> constant .)
    FUNCTION        reduce using rule 174 (constant_list -> constant .)
    CONSTRUCTOR     reduce using rule 174 (constant_list -> constant .)
    PROCEDURE       reduce using rule 174 (constant_list -> constant .)
    DESTRUCTOR      reduce using rule 174 (constant_list -> constant .)
    BEGIN           reduce using rule 174 (constant_list -> constant .)


state 36

    (176) constant -> ID . EQUAL CHARACTER_LITERAL SEMICOLON
    (177) constant -> ID . EQUAL NUMBER SEMICOLON
    (178) constant -> ID . EQUAL STRING_LITERAL SEMICOLON
    (179) constant -> ID . EQUAL BOOLEAN_LITERAL SEMICOLON

    EQUAL           shift and go to state 75


state 37

    (26) type_declaration -> TYPE type_list .
    (28) type_list -> type_list . type_definition
    (29) type_definition -> . ID EQUAL type_specifier SEMICOLON

    USES            reduce using rule 26 (type_declaration -> TYPE type_list .)
    CONST           reduce using rule 26 (type_declaration -> TYPE type_list .)
    TYPE            reduce using rule 26 (type_declaration -> TYPE type_list .)
    VAR             reduce using rule 26 (type_declaration -> TYPE type_list .)
    FUNCTION        reduce using rule 26 (type_declaration -> TYPE type_list .)
    CONSTRUCTOR     reduce using rule 26 (type_declaration -> TYPE type_list .)
    PROCEDURE       reduce using rule 26 (type_declaration -> TYPE type_list .)
    DESTRUCTOR      reduce using rule 26 (type_declaration -> TYPE type_list .)
    BEGIN           reduce using rule 26 (type_declaration -> TYPE type_list .)
    ID              shift and go to state 39

    type_definition                shift and go to state 76

state 38

    (27) type_list -> type_definition .

    ID              reduce using rule 27 (type_list -> type_definition .)
    USES            reduce using rule 27 (type_list -> type_definition .)
    CONST           reduce using rule 27 (type_list -> type_definition .)
    TYPE            reduce using rule 27 (type_list -> type_definition .)
    VAR             reduce using rule 27 (type_list -> type_definition .)
    FUNCTION        reduce using rule 27 (type_list -> type_definition .)
    CONSTRUCTOR     reduce using rule 27 (type_list -> type_definition .)
    PROCEDURE       reduce using rule 27 (type_list -> type_definition .)
    DESTRUCTOR      reduce using rule 27 (type_list -> type_definition .)
    BEGIN           reduce using rule 27 (type_list -> type_definition .)


state 39

    (29) type_definition -> ID . EQUAL type_specifier SEMICOLON

    EQUAL           shift and go to state 77


state 40

    (21) var_declaration -> VAR declaration_list .
    (23) declaration_list -> declaration_list . declaration
    (24) declaration -> . id_list COLON type_specifier SEMICOLON
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

    USES            reduce using rule 21 (var_declaration -> VAR declaration_list .)
    CONST           reduce using rule 21 (var_declaration -> VAR declaration_list .)
    TYPE            reduce using rule 21 (var_declaration -> VAR declaration_list .)
    VAR             reduce using rule 21 (var_declaration -> VAR declaration_list .)
    FUNCTION        reduce using rule 21 (var_declaration -> VAR declaration_list .)
    CONSTRUCTOR     reduce using rule 21 (var_declaration -> VAR declaration_list .)
    PROCEDURE       reduce using rule 21 (var_declaration -> VAR declaration_list .)
    DESTRUCTOR      reduce using rule 21 (var_declaration -> VAR declaration_list .)
    BEGIN           reduce using rule 21 (var_declaration -> VAR declaration_list .)
    ID              shift and go to state 33

    declaration                    shift and go to state 78
    id_list                        shift and go to state 42

state 41

    (22) declaration_list -> declaration .

    ID              reduce using rule 22 (declaration_list -> declaration .)
    USES            reduce using rule 22 (declaration_list -> declaration .)
    CONST           reduce using rule 22 (declaration_list -> declaration .)
    TYPE            reduce using rule 22 (declaration_list -> declaration .)
    VAR             reduce using rule 22 (declaration_list -> declaration .)
    FUNCTION        reduce using rule 22 (declaration_list -> declaration .)
    CONSTRUCTOR     reduce using rule 22 (declaration_list -> declaration .)
    PROCEDURE       reduce using rule 22 (declaration_list -> declaration .)
    DESTRUCTOR      reduce using rule 22 (declaration_list -> declaration .)
    BEGIN           reduce using rule 22 (declaration_list -> declaration .)


state 42

    (24) declaration -> id_list . COLON type_specifier SEMICOLON
    (20) id_list -> id_list . COMMA ID

    COLON           shift and go to state 79
    COMMA           shift and go to state 73


state 43

    (84) function_declaration -> FUNCTION ID . LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (85) function_declaration -> FUNCTION ID . LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (14) method_declaration -> FUNCTION ID . DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block

    LPAREN          shift and go to state 80
    DOT             shift and go to state 81


state 44

    (16) constructor_declaration -> CONSTRUCTOR ID . LPAREN field_list RPAREN SEMICOLON block
    (17) constructor_declaration -> CONSTRUCTOR ID . LPAREN RPAREN SEMICOLON block
    (12) method_declaration -> CONSTRUCTOR ID . DOT ID LPAREN parameter_list RPAREN SEMICOLON block

    LPAREN          shift and go to state 82
    DOT             shift and go to state 83


state 45

    (13) method_declaration -> PROCEDURE ID . DOT ID LPAREN parameter_list RPAREN SEMICOLON block
    (78) procedure_declaration -> PROCEDURE ID . LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (79) procedure_declaration -> PROCEDURE ID . LPAREN RPAREN SEMICOLON block SEMICOLON
    (80) procedure_declaration -> PROCEDURE ID . SEMICOLON block SEMICOLON
    (81) procedure_declaration -> PROCEDURE ID . LPAREN parameter_list RPAREN SEMICOLON FORWARD SEMICOLON
    (82) procedure_declaration -> PROCEDURE ID . LPAREN RPAREN SEMICOLON FORWARD SEMICOLON
    (83) procedure_declaration -> PROCEDURE ID . SEMICOLON FORWARD SEMICOLON

    DOT             shift and go to state 84
    LPAREN          shift and go to state 85
    SEMICOLON       shift and go to state 86


state 46

    (15) method_declaration -> DESTRUCTOR ID . DOT ID SEMICOLON block

    DOT             shift and go to state 87


state 47

    (92) compound_statement -> BEGIN statement_list . END
    (94) statement_list -> statement_list . statement SEMICOLON
    (95) statement -> . if_statement
    (96) statement -> . assignment_statement
    (97) statement -> . while_statement
    (98) statement -> . procedure_call
    (99) statement -> . compound_statement
    (100) statement -> . for_statement
    (101) statement -> . case_statement
    (102) statement -> . with_statement
    (103) statement -> . repeat_statement
    (104) statement -> . empty
    (161) statement -> . READLN
    (162) statement -> . READLN LPAREN variable RPAREN
    (163) statement -> . READLN LBRACKET variable RBRACKET
    (164) statement -> . WRITE LPAREN expression_list RPAREN
    (165) statement -> . WRITELN LPAREN write_arguments RPAREN
    (171) statement -> . USES ID SEMICOLON
    (106) if_statement -> . IF expression THEN statement ELSE statement
    (107) if_statement -> . IF expression THEN statement
    (108) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (109) if_statement -> . IF expression IN statement THEN statement
    (112) assignment_statement -> . variable COLON_EQUAL expression
    (113) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (114) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (115) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (116) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (117) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (118) assignment_statement -> . ID COLON_EQUAL expression
    (125) while_statement -> . WHILE expression DO statement
    (126) procedure_call -> . ID LPAREN expression_list RPAREN
    (127) procedure_call -> . ID
    (92) compound_statement -> . BEGIN statement_list END
    (110) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (111) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (72) case_statement -> . CASE expression OF case_list END SEMICOLON
    (73) case_statement -> . CASE expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> . CASE expression OF case_list END
    (105) with_statement -> . WITH variable DO statement
    (173) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (160) empty -> .
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    END             shift and go to state 88
    READLN          shift and go to state 59
    WRITE           shift and go to state 61
    WRITELN         shift and go to state 62
    USES            shift and go to state 63
    IF              shift and go to state 65
    ID              shift and go to state 64
    WHILE           shift and go to state 66
    BEGIN           shift and go to state 28
    FOR             shift and go to state 67
    CASE            shift and go to state 68
    WITH            shift and go to state 69
    REPEAT          shift and go to state 70
    SEMICOLON       reduce using rule 160 (empty -> .)

    statement                      shift and go to state 89
    if_statement                   shift and go to state 49
    assignment_statement           shift and go to state 50
    while_statement                shift and go to state 51
    procedure_call                 shift and go to state 52
    compound_statement             shift and go to state 53
    for_statement                  shift and go to state 54
    case_statement                 shift and go to state 55
    with_statement                 shift and go to state 56
    repeat_statement               shift and go to state 57
    empty                          shift and go to state 58
    variable                       shift and go to state 60

state 48

    (93) statement_list -> statement . SEMICOLON

    SEMICOLON       shift and go to state 90


state 49

    (95) statement -> if_statement .

    SEMICOLON       reduce using rule 95 (statement -> if_statement .)
    ELSE            reduce using rule 95 (statement -> if_statement .)
    RPAREN          reduce using rule 95 (statement -> if_statement .)
    VAR             reduce using rule 95 (statement -> if_statement .)
    ID              reduce using rule 95 (statement -> if_statement .)
    IF              reduce using rule 95 (statement -> if_statement .)
    CASE            reduce using rule 95 (statement -> if_statement .)
    END             reduce using rule 95 (statement -> if_statement .)
    CONSTRUCTOR     reduce using rule 95 (statement -> if_statement .)
    PROCEDURE       reduce using rule 95 (statement -> if_statement .)
    FUNCTION        reduce using rule 95 (statement -> if_statement .)
    DESTRUCTOR      reduce using rule 95 (statement -> if_statement .)
    THEN            reduce using rule 95 (statement -> if_statement .)


state 50

    (96) statement -> assignment_statement .

    SEMICOLON       reduce using rule 96 (statement -> assignment_statement .)
    ELSE            reduce using rule 96 (statement -> assignment_statement .)
    RPAREN          reduce using rule 96 (statement -> assignment_statement .)
    VAR             reduce using rule 96 (statement -> assignment_statement .)
    ID              reduce using rule 96 (statement -> assignment_statement .)
    IF              reduce using rule 96 (statement -> assignment_statement .)
    CASE            reduce using rule 96 (statement -> assignment_statement .)
    END             reduce using rule 96 (statement -> assignment_statement .)
    CONSTRUCTOR     reduce using rule 96 (statement -> assignment_statement .)
    PROCEDURE       reduce using rule 96 (statement -> assignment_statement .)
    FUNCTION        reduce using rule 96 (statement -> assignment_statement .)
    DESTRUCTOR      reduce using rule 96 (statement -> assignment_statement .)
    THEN            reduce using rule 96 (statement -> assignment_statement .)


state 51

    (97) statement -> while_statement .

    SEMICOLON       reduce using rule 97 (statement -> while_statement .)
    ELSE            reduce using rule 97 (statement -> while_statement .)
    RPAREN          reduce using rule 97 (statement -> while_statement .)
    VAR             reduce using rule 97 (statement -> while_statement .)
    ID              reduce using rule 97 (statement -> while_statement .)
    IF              reduce using rule 97 (statement -> while_statement .)
    CASE            reduce using rule 97 (statement -> while_statement .)
    END             reduce using rule 97 (statement -> while_statement .)
    CONSTRUCTOR     reduce using rule 97 (statement -> while_statement .)
    PROCEDURE       reduce using rule 97 (statement -> while_statement .)
    FUNCTION        reduce using rule 97 (statement -> while_statement .)
    DESTRUCTOR      reduce using rule 97 (statement -> while_statement .)
    THEN            reduce using rule 97 (statement -> while_statement .)


state 52

    (98) statement -> procedure_call .

    SEMICOLON       reduce using rule 98 (statement -> procedure_call .)
    ELSE            reduce using rule 98 (statement -> procedure_call .)
    RPAREN          reduce using rule 98 (statement -> procedure_call .)
    VAR             reduce using rule 98 (statement -> procedure_call .)
    ID              reduce using rule 98 (statement -> procedure_call .)
    IF              reduce using rule 98 (statement -> procedure_call .)
    CASE            reduce using rule 98 (statement -> procedure_call .)
    END             reduce using rule 98 (statement -> procedure_call .)
    CONSTRUCTOR     reduce using rule 98 (statement -> procedure_call .)
    PROCEDURE       reduce using rule 98 (statement -> procedure_call .)
    FUNCTION        reduce using rule 98 (statement -> procedure_call .)
    DESTRUCTOR      reduce using rule 98 (statement -> procedure_call .)
    THEN            reduce using rule 98 (statement -> procedure_call .)


state 53

    (99) statement -> compound_statement .

    SEMICOLON       reduce using rule 99 (statement -> compound_statement .)
    ELSE            reduce using rule 99 (statement -> compound_statement .)
    RPAREN          reduce using rule 99 (statement -> compound_statement .)
    VAR             reduce using rule 99 (statement -> compound_statement .)
    ID              reduce using rule 99 (statement -> compound_statement .)
    IF              reduce using rule 99 (statement -> compound_statement .)
    CASE            reduce using rule 99 (statement -> compound_statement .)
    END             reduce using rule 99 (statement -> compound_statement .)
    CONSTRUCTOR     reduce using rule 99 (statement -> compound_statement .)
    PROCEDURE       reduce using rule 99 (statement -> compound_statement .)
    FUNCTION        reduce using rule 99 (statement -> compound_statement .)
    DESTRUCTOR      reduce using rule 99 (statement -> compound_statement .)
    THEN            reduce using rule 99 (statement -> compound_statement .)


state 54

    (100) statement -> for_statement .

    SEMICOLON       reduce using rule 100 (statement -> for_statement .)
    ELSE            reduce using rule 100 (statement -> for_statement .)
    RPAREN          reduce using rule 100 (statement -> for_statement .)
    VAR             reduce using rule 100 (statement -> for_statement .)
    ID              reduce using rule 100 (statement -> for_statement .)
    IF              reduce using rule 100 (statement -> for_statement .)
    CASE            reduce using rule 100 (statement -> for_statement .)
    END             reduce using rule 100 (statement -> for_statement .)
    CONSTRUCTOR     reduce using rule 100 (statement -> for_statement .)
    PROCEDURE       reduce using rule 100 (statement -> for_statement .)
    FUNCTION        reduce using rule 100 (statement -> for_statement .)
    DESTRUCTOR      reduce using rule 100 (statement -> for_statement .)
    THEN            reduce using rule 100 (statement -> for_statement .)


state 55

    (101) statement -> case_statement .

    SEMICOLON       reduce using rule 101 (statement -> case_statement .)
    ELSE            reduce using rule 101 (statement -> case_statement .)
    RPAREN          reduce using rule 101 (statement -> case_statement .)
    VAR             reduce using rule 101 (statement -> case_statement .)
    ID              reduce using rule 101 (statement -> case_statement .)
    IF              reduce using rule 101 (statement -> case_statement .)
    CASE            reduce using rule 101 (statement -> case_statement .)
    END             reduce using rule 101 (statement -> case_statement .)
    CONSTRUCTOR     reduce using rule 101 (statement -> case_statement .)
    PROCEDURE       reduce using rule 101 (statement -> case_statement .)
    FUNCTION        reduce using rule 101 (statement -> case_statement .)
    DESTRUCTOR      reduce using rule 101 (statement -> case_statement .)
    THEN            reduce using rule 101 (statement -> case_statement .)


state 56

    (102) statement -> with_statement .

    SEMICOLON       reduce using rule 102 (statement -> with_statement .)
    ELSE            reduce using rule 102 (statement -> with_statement .)
    RPAREN          reduce using rule 102 (statement -> with_statement .)
    VAR             reduce using rule 102 (statement -> with_statement .)
    ID              reduce using rule 102 (statement -> with_statement .)
    IF              reduce using rule 102 (statement -> with_statement .)
    CASE            reduce using rule 102 (statement -> with_statement .)
    END             reduce using rule 102 (statement -> with_statement .)
    CONSTRUCTOR     reduce using rule 102 (statement -> with_statement .)
    PROCEDURE       reduce using rule 102 (statement -> with_statement .)
    FUNCTION        reduce using rule 102 (statement -> with_statement .)
    DESTRUCTOR      reduce using rule 102 (statement -> with_statement .)
    THEN            reduce using rule 102 (statement -> with_statement .)


state 57

    (103) statement -> repeat_statement .

    SEMICOLON       reduce using rule 103 (statement -> repeat_statement .)
    ELSE            reduce using rule 103 (statement -> repeat_statement .)
    RPAREN          reduce using rule 103 (statement -> repeat_statement .)
    VAR             reduce using rule 103 (statement -> repeat_statement .)
    ID              reduce using rule 103 (statement -> repeat_statement .)
    IF              reduce using rule 103 (statement -> repeat_statement .)
    CASE            reduce using rule 103 (statement -> repeat_statement .)
    END             reduce using rule 103 (statement -> repeat_statement .)
    CONSTRUCTOR     reduce using rule 103 (statement -> repeat_statement .)
    PROCEDURE       reduce using rule 103 (statement -> repeat_statement .)
    FUNCTION        reduce using rule 103 (statement -> repeat_statement .)
    DESTRUCTOR      reduce using rule 103 (statement -> repeat_statement .)
    THEN            reduce using rule 103 (statement -> repeat_statement .)


state 58

    (104) statement -> empty .

    SEMICOLON       reduce using rule 104 (statement -> empty .)
    ELSE            reduce using rule 104 (statement -> empty .)
    RPAREN          reduce using rule 104 (statement -> empty .)
    VAR             reduce using rule 104 (statement -> empty .)
    ID              reduce using rule 104 (statement -> empty .)
    IF              reduce using rule 104 (statement -> empty .)
    CASE            reduce using rule 104 (statement -> empty .)
    END             reduce using rule 104 (statement -> empty .)
    CONSTRUCTOR     reduce using rule 104 (statement -> empty .)
    PROCEDURE       reduce using rule 104 (statement -> empty .)
    FUNCTION        reduce using rule 104 (statement -> empty .)
    DESTRUCTOR      reduce using rule 104 (statement -> empty .)
    THEN            reduce using rule 104 (statement -> empty .)


state 59

    (161) statement -> READLN .
    (162) statement -> READLN . LPAREN variable RPAREN
    (163) statement -> READLN . LBRACKET variable RBRACKET

    SEMICOLON       reduce using rule 161 (statement -> READLN .)
    ELSE            reduce using rule 161 (statement -> READLN .)
    RPAREN          reduce using rule 161 (statement -> READLN .)
    VAR             reduce using rule 161 (statement -> READLN .)
    ID              reduce using rule 161 (statement -> READLN .)
    IF              reduce using rule 161 (statement -> READLN .)
    CASE            reduce using rule 161 (statement -> READLN .)
    END             reduce using rule 161 (statement -> READLN .)
    CONSTRUCTOR     reduce using rule 161 (statement -> READLN .)
    PROCEDURE       reduce using rule 161 (statement -> READLN .)
    FUNCTION        reduce using rule 161 (statement -> READLN .)
    DESTRUCTOR      reduce using rule 161 (statement -> READLN .)
    THEN            reduce using rule 161 (statement -> READLN .)
    LPAREN          shift and go to state 91
    LBRACKET        shift and go to state 92


state 60

    (112) assignment_statement -> variable . COLON_EQUAL expression
    (113) assignment_statement -> variable . COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (114) assignment_statement -> variable . PLUS COLON_EQUAL expression
    (115) assignment_statement -> variable . MINUS COLON_EQUAL expression
    (116) assignment_statement -> variable . TIMES COLON_EQUAL expression
    (117) assignment_statement -> variable . DIVIDE COLON_EQUAL expression
    (120) variable -> variable . LBRACKET expression RBRACKET
    (121) variable -> variable . DOT ID

    COLON_EQUAL     shift and go to state 93
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97
    LBRACKET        shift and go to state 98
    DOT             shift and go to state 99


state 61

    (164) statement -> WRITE . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 100


state 62

    (165) statement -> WRITELN . LPAREN write_arguments RPAREN

    LPAREN          shift and go to state 101


state 63

    (171) statement -> USES . ID SEMICOLON

    ID              shift and go to state 102


state 64

    (118) assignment_statement -> ID . COLON_EQUAL expression
    (126) procedure_call -> ID . LPAREN expression_list RPAREN
    (127) procedure_call -> ID .
    (119) variable -> ID .
    (122) variable -> ID . LBRACKET index_list RBRACKET

  ! shift/reduce conflict for COLON_EQUAL resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    COLON_EQUAL     shift and go to state 103
    LPAREN          shift and go to state 104
    SEMICOLON       reduce using rule 127 (procedure_call -> ID .)
    ELSE            reduce using rule 127 (procedure_call -> ID .)
    RPAREN          reduce using rule 127 (procedure_call -> ID .)
    VAR             reduce using rule 127 (procedure_call -> ID .)
    ID              reduce using rule 127 (procedure_call -> ID .)
    IF              reduce using rule 127 (procedure_call -> ID .)
    CASE            reduce using rule 127 (procedure_call -> ID .)
    END             reduce using rule 127 (procedure_call -> ID .)
    CONSTRUCTOR     reduce using rule 127 (procedure_call -> ID .)
    PROCEDURE       reduce using rule 127 (procedure_call -> ID .)
    FUNCTION        reduce using rule 127 (procedure_call -> ID .)
    DESTRUCTOR      reduce using rule 127 (procedure_call -> ID .)
    THEN            reduce using rule 127 (procedure_call -> ID .)
    PLUS            reduce using rule 119 (variable -> ID .)
    MINUS           reduce using rule 119 (variable -> ID .)
    TIMES           reduce using rule 119 (variable -> ID .)
    DIVIDE          reduce using rule 119 (variable -> ID .)
    DOT             reduce using rule 119 (variable -> ID .)
    LBRACKET        shift and go to state 105

  ! COLON_EQUAL     [ reduce using rule 119 (variable -> ID .) ]
  ! LBRACKET        [ reduce using rule 119 (variable -> ID .) ]


state 65

    (106) if_statement -> IF . expression THEN statement ELSE statement
    (107) if_statement -> IF . expression THEN statement
    (108) if_statement -> IF . expression IN statement THEN statement ELSE statement
    (109) if_statement -> IF . expression IN statement THEN statement
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    expression                     shift and go to state 106
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 66

    (125) while_statement -> WHILE . expression DO statement
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    expression                     shift and go to state 117
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 67

    (110) for_statement -> FOR . ID COLON_EQUAL expression TO expression DO block
    (111) for_statement -> FOR . ID COLON_EQUAL expression DOWNTO expression DO block

    ID              shift and go to state 118


state 68

    (72) case_statement -> CASE . expression OF case_list END SEMICOLON
    (73) case_statement -> CASE . expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> CASE . expression OF case_list END
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    expression                     shift and go to state 119
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 69

    (105) with_statement -> WITH . variable DO statement
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    ID              shift and go to state 121

    variable                       shift and go to state 120

state 70

    (173) repeat_statement -> REPEAT . statement_list UNTIL expression SEMICOLON
    (93) statement_list -> . statement SEMICOLON
    (94) statement_list -> . statement_list statement SEMICOLON
    (95) statement -> . if_statement
    (96) statement -> . assignment_statement
    (97) statement -> . while_statement
    (98) statement -> . procedure_call
    (99) statement -> . compound_statement
    (100) statement -> . for_statement
    (101) statement -> . case_statement
    (102) statement -> . with_statement
    (103) statement -> . repeat_statement
    (104) statement -> . empty
    (161) statement -> . READLN
    (162) statement -> . READLN LPAREN variable RPAREN
    (163) statement -> . READLN LBRACKET variable RBRACKET
    (164) statement -> . WRITE LPAREN expression_list RPAREN
    (165) statement -> . WRITELN LPAREN write_arguments RPAREN
    (171) statement -> . USES ID SEMICOLON
    (106) if_statement -> . IF expression THEN statement ELSE statement
    (107) if_statement -> . IF expression THEN statement
    (108) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (109) if_statement -> . IF expression IN statement THEN statement
    (112) assignment_statement -> . variable COLON_EQUAL expression
    (113) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (114) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (115) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (116) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (117) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (118) assignment_statement -> . ID COLON_EQUAL expression
    (125) while_statement -> . WHILE expression DO statement
    (126) procedure_call -> . ID LPAREN expression_list RPAREN
    (127) procedure_call -> . ID
    (92) compound_statement -> . BEGIN statement_list END
    (110) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (111) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (72) case_statement -> . CASE expression OF case_list END SEMICOLON
    (73) case_statement -> . CASE expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> . CASE expression OF case_list END
    (105) with_statement -> . WITH variable DO statement
    (173) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (160) empty -> .
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    READLN          shift and go to state 59
    WRITE           shift and go to state 61
    WRITELN         shift and go to state 62
    USES            shift and go to state 63
    IF              shift and go to state 65
    ID              shift and go to state 64
    WHILE           shift and go to state 66
    BEGIN           shift and go to state 28
    FOR             shift and go to state 67
    CASE            shift and go to state 68
    WITH            shift and go to state 69
    REPEAT          shift and go to state 70
    SEMICOLON       reduce using rule 160 (empty -> .)

    statement_list                 shift and go to state 122
    statement                      shift and go to state 48
    if_statement                   shift and go to state 49
    assignment_statement           shift and go to state 50
    while_statement                shift and go to state 51
    procedure_call                 shift and go to state 52
    compound_statement             shift and go to state 53
    for_statement                  shift and go to state 54
    case_statement                 shift and go to state 55
    with_statement                 shift and go to state 56
    repeat_statement               shift and go to state 57
    empty                          shift and go to state 58
    variable                       shift and go to state 60

state 71

    (78) procedure_declaration -> PROCEDURE ID . LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (79) procedure_declaration -> PROCEDURE ID . LPAREN RPAREN SEMICOLON block SEMICOLON
    (80) procedure_declaration -> PROCEDURE ID . SEMICOLON block SEMICOLON
    (81) procedure_declaration -> PROCEDURE ID . LPAREN parameter_list RPAREN SEMICOLON FORWARD SEMICOLON
    (82) procedure_declaration -> PROCEDURE ID . LPAREN RPAREN SEMICOLON FORWARD SEMICOLON
    (83) procedure_declaration -> PROCEDURE ID . SEMICOLON FORWARD SEMICOLON

    LPAREN          shift and go to state 85
    SEMICOLON       shift and go to state 86


state 72

    (18) uses_opt -> USES id_list SEMICOLON .

    USES            reduce using rule 18 (uses_opt -> USES id_list SEMICOLON .)
    CONST           reduce using rule 18 (uses_opt -> USES id_list SEMICOLON .)
    TYPE            reduce using rule 18 (uses_opt -> USES id_list SEMICOLON .)
    VAR             reduce using rule 18 (uses_opt -> USES id_list SEMICOLON .)
    FUNCTION        reduce using rule 18 (uses_opt -> USES id_list SEMICOLON .)
    CONSTRUCTOR     reduce using rule 18 (uses_opt -> USES id_list SEMICOLON .)
    PROCEDURE       reduce using rule 18 (uses_opt -> USES id_list SEMICOLON .)
    DESTRUCTOR      reduce using rule 18 (uses_opt -> USES id_list SEMICOLON .)
    BEGIN           reduce using rule 18 (uses_opt -> USES id_list SEMICOLON .)


state 73

    (20) id_list -> id_list COMMA . ID

    ID              shift and go to state 123


state 74

    (175) constant_list -> constant_list constant .

    ID              reduce using rule 175 (constant_list -> constant_list constant .)
    USES            reduce using rule 175 (constant_list -> constant_list constant .)
    CONST           reduce using rule 175 (constant_list -> constant_list constant .)
    TYPE            reduce using rule 175 (constant_list -> constant_list constant .)
    VAR             reduce using rule 175 (constant_list -> constant_list constant .)
    FUNCTION        reduce using rule 175 (constant_list -> constant_list constant .)
    CONSTRUCTOR     reduce using rule 175 (constant_list -> constant_list constant .)
    PROCEDURE       reduce using rule 175 (constant_list -> constant_list constant .)
    DESTRUCTOR      reduce using rule 175 (constant_list -> constant_list constant .)
    BEGIN           reduce using rule 175 (constant_list -> constant_list constant .)


state 75

    (176) constant -> ID EQUAL . CHARACTER_LITERAL SEMICOLON
    (177) constant -> ID EQUAL . NUMBER SEMICOLON
    (178) constant -> ID EQUAL . STRING_LITERAL SEMICOLON
    (179) constant -> ID EQUAL . BOOLEAN_LITERAL SEMICOLON

    CHARACTER_LITERAL shift and go to state 124
    NUMBER          shift and go to state 125
    STRING_LITERAL  shift and go to state 126
    BOOLEAN_LITERAL shift and go to state 127


state 76

    (28) type_list -> type_list type_definition .

    ID              reduce using rule 28 (type_list -> type_list type_definition .)
    USES            reduce using rule 28 (type_list -> type_list type_definition .)
    CONST           reduce using rule 28 (type_list -> type_list type_definition .)
    TYPE            reduce using rule 28 (type_list -> type_list type_definition .)
    VAR             reduce using rule 28 (type_list -> type_list type_definition .)
    FUNCTION        reduce using rule 28 (type_list -> type_list type_definition .)
    CONSTRUCTOR     reduce using rule 28 (type_list -> type_list type_definition .)
    PROCEDURE       reduce using rule 28 (type_list -> type_list type_definition .)
    DESTRUCTOR      reduce using rule 28 (type_list -> type_list type_definition .)
    BEGIN           reduce using rule 28 (type_list -> type_list type_definition .)


state 77

    (29) type_definition -> ID EQUAL . type_specifier SEMICOLON
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (75) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 130
    FILE            shift and go to state 132
    SET             shift and go to state 133
    RECORD          shift and go to state 134
    OBJECT          shift and go to state 135
    LPAREN          shift and go to state 136
    BOOLEAN_LITERAL shift and go to state 137
    INTEGER         shift and go to state 138
    BYTE            shift and go to state 139
    CHAR            shift and go to state 140
    STRING          shift and go to state 141
    ID              shift and go to state 128
    LONGINT         shift and go to state 143
    NUMBER          shift and go to state 142

    type_specifier                 shift and go to state 129
    subrange                       shift and go to state 131

state 78

    (23) declaration_list -> declaration_list declaration .

    ID              reduce using rule 23 (declaration_list -> declaration_list declaration .)
    USES            reduce using rule 23 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 23 (declaration_list -> declaration_list declaration .)
    TYPE            reduce using rule 23 (declaration_list -> declaration_list declaration .)
    VAR             reduce using rule 23 (declaration_list -> declaration_list declaration .)
    FUNCTION        reduce using rule 23 (declaration_list -> declaration_list declaration .)
    CONSTRUCTOR     reduce using rule 23 (declaration_list -> declaration_list declaration .)
    PROCEDURE       reduce using rule 23 (declaration_list -> declaration_list declaration .)
    DESTRUCTOR      reduce using rule 23 (declaration_list -> declaration_list declaration .)
    BEGIN           reduce using rule 23 (declaration_list -> declaration_list declaration .)


state 79

    (24) declaration -> id_list COLON . type_specifier SEMICOLON
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (75) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 130
    FILE            shift and go to state 132
    SET             shift and go to state 133
    RECORD          shift and go to state 134
    OBJECT          shift and go to state 135
    LPAREN          shift and go to state 136
    BOOLEAN_LITERAL shift and go to state 137
    INTEGER         shift and go to state 138
    BYTE            shift and go to state 139
    CHAR            shift and go to state 140
    STRING          shift and go to state 141
    ID              shift and go to state 128
    LONGINT         shift and go to state 143
    NUMBER          shift and go to state 142

    type_specifier                 shift and go to state 144
    subrange                       shift and go to state 131

state 80

    (84) function_declaration -> FUNCTION ID LPAREN . parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (85) function_declaration -> FUNCTION ID LPAREN . parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (88) parameter_list -> . parameter
    (89) parameter_list -> . parameter_list SEMICOLON parameter
    (90) parameter_list -> . empty
    (91) parameter -> . ID COLON type_specifier
    (160) empty -> .

    ID              shift and go to state 145
    RPAREN          reduce using rule 160 (empty -> .)
    SEMICOLON       reduce using rule 160 (empty -> .)

    parameter_list                 shift and go to state 146
    parameter                      shift and go to state 147
    empty                          shift and go to state 148

state 81

    (14) method_declaration -> FUNCTION ID DOT . ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block

    ID              shift and go to state 149


state 82

    (16) constructor_declaration -> CONSTRUCTOR ID LPAREN . field_list RPAREN SEMICOLON block
    (17) constructor_declaration -> CONSTRUCTOR ID LPAREN . RPAREN SEMICOLON block
    (48) field_list -> . field_list field
    (49) field_list -> . field
    (50) field_list -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . if_statement
    (57) field -> . case_statement
    (58) field -> . assignment_statement
    (160) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (106) if_statement -> . IF expression THEN statement ELSE statement
    (107) if_statement -> . IF expression THEN statement
    (108) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (109) if_statement -> . IF expression IN statement THEN statement
    (72) case_statement -> . CASE expression OF case_list END SEMICOLON
    (73) case_statement -> . CASE expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> . CASE expression OF case_list END
    (112) assignment_statement -> . variable COLON_EQUAL expression
    (113) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (114) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (115) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (116) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (117) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (118) assignment_statement -> . ID COLON_EQUAL expression
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
    RPAREN          shift and go to state 152
    VAR             shift and go to state 156
    ID              shift and go to state 150
    IF              shift and go to state 65
    CASE            shift and go to state 68

  ! RPAREN          [ reduce using rule 160 (empty -> .) ]
  ! VAR             [ reduce using rule 160 (empty -> .) ]
  ! ID              [ reduce using rule 160 (empty -> .) ]
  ! IF              [ reduce using rule 160 (empty -> .) ]
  ! CASE            [ reduce using rule 160 (empty -> .) ]

    field_list                     shift and go to state 151
    field                          shift and go to state 153
    empty                          shift and go to state 154
    id_list                        shift and go to state 155
    if_statement                   shift and go to state 157
    case_statement                 shift and go to state 158
    assignment_statement           shift and go to state 159
    variable                       shift and go to state 60

state 83

    (12) method_declaration -> CONSTRUCTOR ID DOT . ID LPAREN parameter_list RPAREN SEMICOLON block

    ID              shift and go to state 160


state 84

    (13) method_declaration -> PROCEDURE ID DOT . ID LPAREN parameter_list RPAREN SEMICOLON block

    ID              shift and go to state 161


state 85

    (78) procedure_declaration -> PROCEDURE ID LPAREN . parameter_list RPAREN SEMICOLON block SEMICOLON
    (79) procedure_declaration -> PROCEDURE ID LPAREN . RPAREN SEMICOLON block SEMICOLON
    (81) procedure_declaration -> PROCEDURE ID LPAREN . parameter_list RPAREN SEMICOLON FORWARD SEMICOLON
    (82) procedure_declaration -> PROCEDURE ID LPAREN . RPAREN SEMICOLON FORWARD SEMICOLON
    (88) parameter_list -> . parameter
    (89) parameter_list -> . parameter_list SEMICOLON parameter
    (90) parameter_list -> . empty
    (91) parameter -> . ID COLON type_specifier
    (160) empty -> .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 163
    ID              shift and go to state 145
    SEMICOLON       reduce using rule 160 (empty -> .)

  ! RPAREN          [ reduce using rule 160 (empty -> .) ]

    parameter_list                 shift and go to state 162
    parameter                      shift and go to state 147
    empty                          shift and go to state 148

state 86

    (80) procedure_declaration -> PROCEDURE ID SEMICOLON . block SEMICOLON
    (83) procedure_declaration -> PROCEDURE ID SEMICOLON . FORWARD SEMICOLON
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (160) empty -> .

    FORWARD         shift and go to state 165
    BEGIN           reduce using rule 160 (empty -> .)
    USES            reduce using rule 160 (empty -> .)
    CONST           reduce using rule 160 (empty -> .)
    TYPE            reduce using rule 160 (empty -> .)
    VAR             reduce using rule 160 (empty -> .)
    FUNCTION        reduce using rule 160 (empty -> .)
    CONSTRUCTOR     reduce using rule 160 (empty -> .)
    PROCEDURE       reduce using rule 160 (empty -> .)
    DESTRUCTOR      reduce using rule 160 (empty -> .)

    block                          shift and go to state 164
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 87

    (15) method_declaration -> DESTRUCTOR ID DOT . ID SEMICOLON block

    ID              shift and go to state 166


state 88

    (92) compound_statement -> BEGIN statement_list END .

    DOT             reduce using rule 92 (compound_statement -> BEGIN statement_list END .)
    SEMICOLON       reduce using rule 92 (compound_statement -> BEGIN statement_list END .)
    USES            reduce using rule 92 (compound_statement -> BEGIN statement_list END .)
    CONST           reduce using rule 92 (compound_statement -> BEGIN statement_list END .)
    TYPE            reduce using rule 92 (compound_statement -> BEGIN statement_list END .)
    VAR             reduce using rule 92 (compound_statement -> BEGIN statement_list END .)
    FUNCTION        reduce using rule 92 (compound_statement -> BEGIN statement_list END .)
    CONSTRUCTOR     reduce using rule 92 (compound_statement -> BEGIN statement_list END .)
    PROCEDURE       reduce using rule 92 (compound_statement -> BEGIN statement_list END .)
    DESTRUCTOR      reduce using rule 92 (compound_statement -> BEGIN statement_list END .)
    BEGIN           reduce using rule 92 (compound_statement -> BEGIN statement_list END .)
    ELSE            reduce using rule 92 (compound_statement -> BEGIN statement_list END .)
    RPAREN          reduce using rule 92 (compound_statement -> BEGIN statement_list END .)
    ID              reduce using rule 92 (compound_statement -> BEGIN statement_list END .)
    IF              reduce using rule 92 (compound_statement -> BEGIN statement_list END .)
    CASE            reduce using rule 92 (compound_statement -> BEGIN statement_list END .)
    END             reduce using rule 92 (compound_statement -> BEGIN statement_list END .)
    THEN            reduce using rule 92 (compound_statement -> BEGIN statement_list END .)


state 89

    (94) statement_list -> statement_list statement . SEMICOLON

    SEMICOLON       shift and go to state 167


state 90

    (93) statement_list -> statement SEMICOLON .

    END             reduce using rule 93 (statement_list -> statement SEMICOLON .)
    READLN          reduce using rule 93 (statement_list -> statement SEMICOLON .)
    WRITE           reduce using rule 93 (statement_list -> statement SEMICOLON .)
    WRITELN         reduce using rule 93 (statement_list -> statement SEMICOLON .)
    USES            reduce using rule 93 (statement_list -> statement SEMICOLON .)
    IF              reduce using rule 93 (statement_list -> statement SEMICOLON .)
    ID              reduce using rule 93 (statement_list -> statement SEMICOLON .)
    WHILE           reduce using rule 93 (statement_list -> statement SEMICOLON .)
    BEGIN           reduce using rule 93 (statement_list -> statement SEMICOLON .)
    FOR             reduce using rule 93 (statement_list -> statement SEMICOLON .)
    CASE            reduce using rule 93 (statement_list -> statement SEMICOLON .)
    WITH            reduce using rule 93 (statement_list -> statement SEMICOLON .)
    REPEAT          reduce using rule 93 (statement_list -> statement SEMICOLON .)
    SEMICOLON       reduce using rule 93 (statement_list -> statement SEMICOLON .)
    UNTIL           reduce using rule 93 (statement_list -> statement SEMICOLON .)


state 91

    (162) statement -> READLN LPAREN . variable RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    ID              shift and go to state 121

    variable                       shift and go to state 168

state 92

    (163) statement -> READLN LBRACKET . variable RBRACKET
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    ID              shift and go to state 121

    variable                       shift and go to state 169

state 93

    (112) assignment_statement -> variable COLON_EQUAL . expression
    (113) assignment_statement -> variable COLON_EQUAL . BOOLEAN_LITERAL SEMICOLON
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    BOOLEAN_LITERAL shift and go to state 171
    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    variable                       shift and go to state 113
    expression                     shift and go to state 170
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111

state 94

    (114) assignment_statement -> variable PLUS . COLON_EQUAL expression

    COLON_EQUAL     shift and go to state 172


state 95

    (115) assignment_statement -> variable MINUS . COLON_EQUAL expression

    COLON_EQUAL     shift and go to state 173


state 96

    (116) assignment_statement -> variable TIMES . COLON_EQUAL expression

    COLON_EQUAL     shift and go to state 174


state 97

    (117) assignment_statement -> variable DIVIDE . COLON_EQUAL expression

    COLON_EQUAL     shift and go to state 175


state 98

    (120) variable -> variable LBRACKET . expression RBRACKET
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    variable                       shift and go to state 113
    expression                     shift and go to state 176
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111

state 99

    (121) variable -> variable DOT . ID

    ID              shift and go to state 177


state 100

    (164) statement -> WRITE LPAREN . expression_list RPAREN
    (128) expression_list -> . expression expression_list_tail
    (131) expression_list -> . empty
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (160) empty -> .
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    RPAREN          reduce using rule 160 (empty -> .)
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    expression_list                shift and go to state 178
    expression                     shift and go to state 179
    empty                          shift and go to state 180
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 101

    (165) statement -> WRITELN LPAREN . write_arguments RPAREN
    (166) write_arguments -> . write_argument
    (167) write_arguments -> . write_arguments COMMA write_argument
    (168) write_argument -> . expression
    (169) write_argument -> . expression COLON expression
    (170) write_argument -> . expression COLON expression COLON expression
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    write_arguments                shift and go to state 181
    write_argument                 shift and go to state 182
    expression                     shift and go to state 183
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 102

    (171) statement -> USES ID . SEMICOLON

    SEMICOLON       shift and go to state 184


state 103

    (118) assignment_statement -> ID COLON_EQUAL . expression
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    expression                     shift and go to state 185
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 104

    (126) procedure_call -> ID LPAREN . expression_list RPAREN
    (128) expression_list -> . expression expression_list_tail
    (131) expression_list -> . empty
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (160) empty -> .
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    RPAREN          reduce using rule 160 (empty -> .)
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    expression_list                shift and go to state 186
    expression                     shift and go to state 179
    empty                          shift and go to state 180
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 105

    (122) variable -> ID LBRACKET . index_list RBRACKET
    (123) index_list -> . expression
    (124) index_list -> . index_list COMMA expression
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    index_list                     shift and go to state 187
    expression                     shift and go to state 188
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 106

    (106) if_statement -> IF expression . THEN statement ELSE statement
    (107) if_statement -> IF expression . THEN statement
    (108) if_statement -> IF expression . IN statement THEN statement ELSE statement
    (109) if_statement -> IF expression . IN statement THEN statement
    (145) expression -> expression . PLUS expression
    (146) expression -> expression . MINUS expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (180) expression -> expression . AND expression
    (181) expression -> expression . OR expression

    THEN            shift and go to state 189
    IN              shift and go to state 190
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 195
    AND             shift and go to state 196
    OR              shift and go to state 197


state 107

    (132) expression -> simple_expression . relop simple_expression
    (133) expression -> simple_expression .
    (154) relop -> . LESS
    (155) relop -> . LESS_EQUAL
    (156) relop -> . GREAT
    (157) relop -> . GREAT_EQUAL
    (158) relop -> . EQUAL
    (159) relop -> . DIFFERENT

    THEN            reduce using rule 133 (expression -> simple_expression .)
    IN              reduce using rule 133 (expression -> simple_expression .)
    PLUS            reduce using rule 133 (expression -> simple_expression .)
    MINUS           reduce using rule 133 (expression -> simple_expression .)
    TIMES           reduce using rule 133 (expression -> simple_expression .)
    DIVIDE          reduce using rule 133 (expression -> simple_expression .)
    MOD             reduce using rule 133 (expression -> simple_expression .)
    AND             reduce using rule 133 (expression -> simple_expression .)
    OR              reduce using rule 133 (expression -> simple_expression .)
    DO              reduce using rule 133 (expression -> simple_expression .)
    OF              reduce using rule 133 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 133 (expression -> simple_expression .)
    RPAREN          reduce using rule 133 (expression -> simple_expression .)
    VAR             reduce using rule 133 (expression -> simple_expression .)
    ID              reduce using rule 133 (expression -> simple_expression .)
    IF              reduce using rule 133 (expression -> simple_expression .)
    CASE            reduce using rule 133 (expression -> simple_expression .)
    END             reduce using rule 133 (expression -> simple_expression .)
    CONSTRUCTOR     reduce using rule 133 (expression -> simple_expression .)
    PROCEDURE       reduce using rule 133 (expression -> simple_expression .)
    FUNCTION        reduce using rule 133 (expression -> simple_expression .)
    DESTRUCTOR      reduce using rule 133 (expression -> simple_expression .)
    ELSE            reduce using rule 133 (expression -> simple_expression .)
    RBRACKET        reduce using rule 133 (expression -> simple_expression .)
    COMMA           reduce using rule 133 (expression -> simple_expression .)
    COLON           reduce using rule 133 (expression -> simple_expression .)
    TO              reduce using rule 133 (expression -> simple_expression .)
    DOWNTO          reduce using rule 133 (expression -> simple_expression .)
    LESS            shift and go to state 199
    LESS_EQUAL      shift and go to state 200
    GREAT           shift and go to state 201
    GREAT_EQUAL     shift and go to state 202
    EQUAL           shift and go to state 203
    DIFFERENT       shift and go to state 204

    relop                          shift and go to state 198

state 108

    (182) expression -> NOT . expression
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    expression                     shift and go to state 205
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 109

    (134) simple_expression -> term . simple_expression_tail
    (135) simple_expression_tail -> . addop term
    (136) simple_expression_tail -> . empty
    (137) addop -> . PLUS
    (138) addop -> . MINUS
    (160) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 209
    MINUS           shift and go to state 210
    LESS            reduce using rule 160 (empty -> .)
    LESS_EQUAL      reduce using rule 160 (empty -> .)
    GREAT           reduce using rule 160 (empty -> .)
    GREAT_EQUAL     reduce using rule 160 (empty -> .)
    EQUAL           reduce using rule 160 (empty -> .)
    DIFFERENT       reduce using rule 160 (empty -> .)
    THEN            reduce using rule 160 (empty -> .)
    IN              reduce using rule 160 (empty -> .)
    TIMES           reduce using rule 160 (empty -> .)
    DIVIDE          reduce using rule 160 (empty -> .)
    MOD             reduce using rule 160 (empty -> .)
    AND             reduce using rule 160 (empty -> .)
    OR              reduce using rule 160 (empty -> .)
    DO              reduce using rule 160 (empty -> .)
    OF              reduce using rule 160 (empty -> .)
    SEMICOLON       reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    VAR             reduce using rule 160 (empty -> .)
    ID              reduce using rule 160 (empty -> .)
    IF              reduce using rule 160 (empty -> .)
    CASE            reduce using rule 160 (empty -> .)
    END             reduce using rule 160 (empty -> .)
    CONSTRUCTOR     reduce using rule 160 (empty -> .)
    PROCEDURE       reduce using rule 160 (empty -> .)
    FUNCTION        reduce using rule 160 (empty -> .)
    DESTRUCTOR      reduce using rule 160 (empty -> .)
    ELSE            reduce using rule 160 (empty -> .)
    RBRACKET        reduce using rule 160 (empty -> .)
    COMMA           reduce using rule 160 (empty -> .)
    COLON           reduce using rule 160 (empty -> .)
    TO              reduce using rule 160 (empty -> .)
    DOWNTO          reduce using rule 160 (empty -> .)

  ! PLUS            [ reduce using rule 160 (empty -> .) ]
  ! MINUS           [ reduce using rule 160 (empty -> .) ]

    simple_expression_tail         shift and go to state 206
    addop                          shift and go to state 207
    empty                          shift and go to state 208

state 110

    (139) term -> factor . term_tail
    (140) term_tail -> . mulop factor
    (141) term_tail -> . empty
    (142) mulop -> . TIMES
    (143) mulop -> . DIVIDE
    (144) mulop -> . DIV
    (160) empty -> .

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    TIMES           shift and go to state 214
    DIVIDE          shift and go to state 215
    DIV             shift and go to state 216
    PLUS            reduce using rule 160 (empty -> .)
    MINUS           reduce using rule 160 (empty -> .)
    LESS            reduce using rule 160 (empty -> .)
    LESS_EQUAL      reduce using rule 160 (empty -> .)
    GREAT           reduce using rule 160 (empty -> .)
    GREAT_EQUAL     reduce using rule 160 (empty -> .)
    EQUAL           reduce using rule 160 (empty -> .)
    DIFFERENT       reduce using rule 160 (empty -> .)
    THEN            reduce using rule 160 (empty -> .)
    IN              reduce using rule 160 (empty -> .)
    MOD             reduce using rule 160 (empty -> .)
    AND             reduce using rule 160 (empty -> .)
    OR              reduce using rule 160 (empty -> .)
    DO              reduce using rule 160 (empty -> .)
    OF              reduce using rule 160 (empty -> .)
    SEMICOLON       reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    VAR             reduce using rule 160 (empty -> .)
    ID              reduce using rule 160 (empty -> .)
    IF              reduce using rule 160 (empty -> .)
    CASE            reduce using rule 160 (empty -> .)
    END             reduce using rule 160 (empty -> .)
    CONSTRUCTOR     reduce using rule 160 (empty -> .)
    PROCEDURE       reduce using rule 160 (empty -> .)
    FUNCTION        reduce using rule 160 (empty -> .)
    DESTRUCTOR      reduce using rule 160 (empty -> .)
    ELSE            reduce using rule 160 (empty -> .)
    RBRACKET        reduce using rule 160 (empty -> .)
    COMMA           reduce using rule 160 (empty -> .)
    COLON           reduce using rule 160 (empty -> .)
    TO              reduce using rule 160 (empty -> .)
    DOWNTO          reduce using rule 160 (empty -> .)

  ! TIMES           [ reduce using rule 160 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 160 (empty -> .) ]

    term_tail                      shift and go to state 211
    mulop                          shift and go to state 212
    empty                          shift and go to state 213

state 111

    (87) factor -> function_call .

    TIMES           reduce using rule 87 (factor -> function_call .)
    DIVIDE          reduce using rule 87 (factor -> function_call .)
    DIV             reduce using rule 87 (factor -> function_call .)
    PLUS            reduce using rule 87 (factor -> function_call .)
    MINUS           reduce using rule 87 (factor -> function_call .)
    LESS            reduce using rule 87 (factor -> function_call .)
    LESS_EQUAL      reduce using rule 87 (factor -> function_call .)
    GREAT           reduce using rule 87 (factor -> function_call .)
    GREAT_EQUAL     reduce using rule 87 (factor -> function_call .)
    EQUAL           reduce using rule 87 (factor -> function_call .)
    DIFFERENT       reduce using rule 87 (factor -> function_call .)
    THEN            reduce using rule 87 (factor -> function_call .)
    IN              reduce using rule 87 (factor -> function_call .)
    MOD             reduce using rule 87 (factor -> function_call .)
    AND             reduce using rule 87 (factor -> function_call .)
    OR              reduce using rule 87 (factor -> function_call .)
    DO              reduce using rule 87 (factor -> function_call .)
    OF              reduce using rule 87 (factor -> function_call .)
    SEMICOLON       reduce using rule 87 (factor -> function_call .)
    RPAREN          reduce using rule 87 (factor -> function_call .)
    VAR             reduce using rule 87 (factor -> function_call .)
    ID              reduce using rule 87 (factor -> function_call .)
    IF              reduce using rule 87 (factor -> function_call .)
    CASE            reduce using rule 87 (factor -> function_call .)
    END             reduce using rule 87 (factor -> function_call .)
    CONSTRUCTOR     reduce using rule 87 (factor -> function_call .)
    PROCEDURE       reduce using rule 87 (factor -> function_call .)
    FUNCTION        reduce using rule 87 (factor -> function_call .)
    DESTRUCTOR      reduce using rule 87 (factor -> function_call .)
    ELSE            reduce using rule 87 (factor -> function_call .)
    RBRACKET        reduce using rule 87 (factor -> function_call .)
    COMMA           reduce using rule 87 (factor -> function_call .)
    COLON           reduce using rule 87 (factor -> function_call .)
    TO              reduce using rule 87 (factor -> function_call .)
    DOWNTO          reduce using rule 87 (factor -> function_call .)


state 112

    (150) factor -> LPAREN . expression RPAREN
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    expression                     shift and go to state 217
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 113

    (151) factor -> variable .
    (120) variable -> variable . LBRACKET expression RBRACKET
    (121) variable -> variable . DOT ID

    TIMES           reduce using rule 151 (factor -> variable .)
    DIVIDE          reduce using rule 151 (factor -> variable .)
    DIV             reduce using rule 151 (factor -> variable .)
    PLUS            reduce using rule 151 (factor -> variable .)
    MINUS           reduce using rule 151 (factor -> variable .)
    LESS            reduce using rule 151 (factor -> variable .)
    LESS_EQUAL      reduce using rule 151 (factor -> variable .)
    GREAT           reduce using rule 151 (factor -> variable .)
    GREAT_EQUAL     reduce using rule 151 (factor -> variable .)
    EQUAL           reduce using rule 151 (factor -> variable .)
    DIFFERENT       reduce using rule 151 (factor -> variable .)
    THEN            reduce using rule 151 (factor -> variable .)
    IN              reduce using rule 151 (factor -> variable .)
    MOD             reduce using rule 151 (factor -> variable .)
    AND             reduce using rule 151 (factor -> variable .)
    OR              reduce using rule 151 (factor -> variable .)
    DO              reduce using rule 151 (factor -> variable .)
    OF              reduce using rule 151 (factor -> variable .)
    SEMICOLON       reduce using rule 151 (factor -> variable .)
    RPAREN          reduce using rule 151 (factor -> variable .)
    VAR             reduce using rule 151 (factor -> variable .)
    ID              reduce using rule 151 (factor -> variable .)
    IF              reduce using rule 151 (factor -> variable .)
    CASE            reduce using rule 151 (factor -> variable .)
    END             reduce using rule 151 (factor -> variable .)
    CONSTRUCTOR     reduce using rule 151 (factor -> variable .)
    PROCEDURE       reduce using rule 151 (factor -> variable .)
    FUNCTION        reduce using rule 151 (factor -> variable .)
    DESTRUCTOR      reduce using rule 151 (factor -> variable .)
    ELSE            reduce using rule 151 (factor -> variable .)
    RBRACKET        reduce using rule 151 (factor -> variable .)
    COMMA           reduce using rule 151 (factor -> variable .)
    COLON           reduce using rule 151 (factor -> variable .)
    TO              reduce using rule 151 (factor -> variable .)
    DOWNTO          reduce using rule 151 (factor -> variable .)
    LBRACKET        shift and go to state 98
    DOT             shift and go to state 99


state 114

    (152) factor -> NUMBER .

    TIMES           reduce using rule 152 (factor -> NUMBER .)
    DIVIDE          reduce using rule 152 (factor -> NUMBER .)
    DIV             reduce using rule 152 (factor -> NUMBER .)
    PLUS            reduce using rule 152 (factor -> NUMBER .)
    MINUS           reduce using rule 152 (factor -> NUMBER .)
    LESS            reduce using rule 152 (factor -> NUMBER .)
    LESS_EQUAL      reduce using rule 152 (factor -> NUMBER .)
    GREAT           reduce using rule 152 (factor -> NUMBER .)
    GREAT_EQUAL     reduce using rule 152 (factor -> NUMBER .)
    EQUAL           reduce using rule 152 (factor -> NUMBER .)
    DIFFERENT       reduce using rule 152 (factor -> NUMBER .)
    THEN            reduce using rule 152 (factor -> NUMBER .)
    IN              reduce using rule 152 (factor -> NUMBER .)
    MOD             reduce using rule 152 (factor -> NUMBER .)
    AND             reduce using rule 152 (factor -> NUMBER .)
    OR              reduce using rule 152 (factor -> NUMBER .)
    DO              reduce using rule 152 (factor -> NUMBER .)
    OF              reduce using rule 152 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 152 (factor -> NUMBER .)
    RPAREN          reduce using rule 152 (factor -> NUMBER .)
    VAR             reduce using rule 152 (factor -> NUMBER .)
    ID              reduce using rule 152 (factor -> NUMBER .)
    IF              reduce using rule 152 (factor -> NUMBER .)
    CASE            reduce using rule 152 (factor -> NUMBER .)
    END             reduce using rule 152 (factor -> NUMBER .)
    CONSTRUCTOR     reduce using rule 152 (factor -> NUMBER .)
    PROCEDURE       reduce using rule 152 (factor -> NUMBER .)
    FUNCTION        reduce using rule 152 (factor -> NUMBER .)
    DESTRUCTOR      reduce using rule 152 (factor -> NUMBER .)
    ELSE            reduce using rule 152 (factor -> NUMBER .)
    RBRACKET        reduce using rule 152 (factor -> NUMBER .)
    COMMA           reduce using rule 152 (factor -> NUMBER .)
    COLON           reduce using rule 152 (factor -> NUMBER .)
    TO              reduce using rule 152 (factor -> NUMBER .)
    DOWNTO          reduce using rule 152 (factor -> NUMBER .)


state 115

    (153) factor -> STRING_LITERAL .

    TIMES           reduce using rule 153 (factor -> STRING_LITERAL .)
    DIVIDE          reduce using rule 153 (factor -> STRING_LITERAL .)
    DIV             reduce using rule 153 (factor -> STRING_LITERAL .)
    PLUS            reduce using rule 153 (factor -> STRING_LITERAL .)
    MINUS           reduce using rule 153 (factor -> STRING_LITERAL .)
    LESS            reduce using rule 153 (factor -> STRING_LITERAL .)
    LESS_EQUAL      reduce using rule 153 (factor -> STRING_LITERAL .)
    GREAT           reduce using rule 153 (factor -> STRING_LITERAL .)
    GREAT_EQUAL     reduce using rule 153 (factor -> STRING_LITERAL .)
    EQUAL           reduce using rule 153 (factor -> STRING_LITERAL .)
    DIFFERENT       reduce using rule 153 (factor -> STRING_LITERAL .)
    THEN            reduce using rule 153 (factor -> STRING_LITERAL .)
    IN              reduce using rule 153 (factor -> STRING_LITERAL .)
    MOD             reduce using rule 153 (factor -> STRING_LITERAL .)
    AND             reduce using rule 153 (factor -> STRING_LITERAL .)
    OR              reduce using rule 153 (factor -> STRING_LITERAL .)
    DO              reduce using rule 153 (factor -> STRING_LITERAL .)
    OF              reduce using rule 153 (factor -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 153 (factor -> STRING_LITERAL .)
    RPAREN          reduce using rule 153 (factor -> STRING_LITERAL .)
    VAR             reduce using rule 153 (factor -> STRING_LITERAL .)
    ID              reduce using rule 153 (factor -> STRING_LITERAL .)
    IF              reduce using rule 153 (factor -> STRING_LITERAL .)
    CASE            reduce using rule 153 (factor -> STRING_LITERAL .)
    END             reduce using rule 153 (factor -> STRING_LITERAL .)
    CONSTRUCTOR     reduce using rule 153 (factor -> STRING_LITERAL .)
    PROCEDURE       reduce using rule 153 (factor -> STRING_LITERAL .)
    FUNCTION        reduce using rule 153 (factor -> STRING_LITERAL .)
    DESTRUCTOR      reduce using rule 153 (factor -> STRING_LITERAL .)
    ELSE            reduce using rule 153 (factor -> STRING_LITERAL .)
    RBRACKET        reduce using rule 153 (factor -> STRING_LITERAL .)
    COMMA           reduce using rule 153 (factor -> STRING_LITERAL .)
    COLON           reduce using rule 153 (factor -> STRING_LITERAL .)
    TO              reduce using rule 153 (factor -> STRING_LITERAL .)
    DOWNTO          reduce using rule 153 (factor -> STRING_LITERAL .)


state 116

    (86) function_call -> ID . LPAREN expression_list RPAREN
    (119) variable -> ID .
    (122) variable -> ID . LBRACKET index_list RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    LPAREN          shift and go to state 218
    DOT             reduce using rule 119 (variable -> ID .)
    TIMES           reduce using rule 119 (variable -> ID .)
    DIVIDE          reduce using rule 119 (variable -> ID .)
    DIV             reduce using rule 119 (variable -> ID .)
    PLUS            reduce using rule 119 (variable -> ID .)
    MINUS           reduce using rule 119 (variable -> ID .)
    LESS            reduce using rule 119 (variable -> ID .)
    LESS_EQUAL      reduce using rule 119 (variable -> ID .)
    GREAT           reduce using rule 119 (variable -> ID .)
    GREAT_EQUAL     reduce using rule 119 (variable -> ID .)
    EQUAL           reduce using rule 119 (variable -> ID .)
    DIFFERENT       reduce using rule 119 (variable -> ID .)
    THEN            reduce using rule 119 (variable -> ID .)
    IN              reduce using rule 119 (variable -> ID .)
    MOD             reduce using rule 119 (variable -> ID .)
    AND             reduce using rule 119 (variable -> ID .)
    OR              reduce using rule 119 (variable -> ID .)
    DO              reduce using rule 119 (variable -> ID .)
    OF              reduce using rule 119 (variable -> ID .)
    SEMICOLON       reduce using rule 119 (variable -> ID .)
    RPAREN          reduce using rule 119 (variable -> ID .)
    VAR             reduce using rule 119 (variable -> ID .)
    ID              reduce using rule 119 (variable -> ID .)
    IF              reduce using rule 119 (variable -> ID .)
    CASE            reduce using rule 119 (variable -> ID .)
    END             reduce using rule 119 (variable -> ID .)
    CONSTRUCTOR     reduce using rule 119 (variable -> ID .)
    PROCEDURE       reduce using rule 119 (variable -> ID .)
    FUNCTION        reduce using rule 119 (variable -> ID .)
    DESTRUCTOR      reduce using rule 119 (variable -> ID .)
    ELSE            reduce using rule 119 (variable -> ID .)
    RBRACKET        reduce using rule 119 (variable -> ID .)
    COMMA           reduce using rule 119 (variable -> ID .)
    COLON           reduce using rule 119 (variable -> ID .)
    TO              reduce using rule 119 (variable -> ID .)
    DOWNTO          reduce using rule 119 (variable -> ID .)
    LBRACKET        shift and go to state 105

  ! LBRACKET        [ reduce using rule 119 (variable -> ID .) ]


state 117

    (125) while_statement -> WHILE expression . DO statement
    (145) expression -> expression . PLUS expression
    (146) expression -> expression . MINUS expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (180) expression -> expression . AND expression
    (181) expression -> expression . OR expression

    DO              shift and go to state 219
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 195
    AND             shift and go to state 196
    OR              shift and go to state 197


state 118

    (110) for_statement -> FOR ID . COLON_EQUAL expression TO expression DO block
    (111) for_statement -> FOR ID . COLON_EQUAL expression DOWNTO expression DO block

    COLON_EQUAL     shift and go to state 220


state 119

    (72) case_statement -> CASE expression . OF case_list END SEMICOLON
    (73) case_statement -> CASE expression . OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> CASE expression . OF case_list END
    (145) expression -> expression . PLUS expression
    (146) expression -> expression . MINUS expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (180) expression -> expression . AND expression
    (181) expression -> expression . OR expression

    OF              shift and go to state 221
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 195
    AND             shift and go to state 196
    OR              shift and go to state 197


state 120

    (105) with_statement -> WITH variable . DO statement
    (120) variable -> variable . LBRACKET expression RBRACKET
    (121) variable -> variable . DOT ID

    DO              shift and go to state 222
    LBRACKET        shift and go to state 98
    DOT             shift and go to state 99


state 121

    (119) variable -> ID .
    (122) variable -> ID . LBRACKET index_list RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    DO              reduce using rule 119 (variable -> ID .)
    DOT             reduce using rule 119 (variable -> ID .)
    RPAREN          reduce using rule 119 (variable -> ID .)
    RBRACKET        reduce using rule 119 (variable -> ID .)
    LBRACKET        shift and go to state 105

  ! LBRACKET        [ reduce using rule 119 (variable -> ID .) ]


state 122

    (173) repeat_statement -> REPEAT statement_list . UNTIL expression SEMICOLON
    (94) statement_list -> statement_list . statement SEMICOLON
    (95) statement -> . if_statement
    (96) statement -> . assignment_statement
    (97) statement -> . while_statement
    (98) statement -> . procedure_call
    (99) statement -> . compound_statement
    (100) statement -> . for_statement
    (101) statement -> . case_statement
    (102) statement -> . with_statement
    (103) statement -> . repeat_statement
    (104) statement -> . empty
    (161) statement -> . READLN
    (162) statement -> . READLN LPAREN variable RPAREN
    (163) statement -> . READLN LBRACKET variable RBRACKET
    (164) statement -> . WRITE LPAREN expression_list RPAREN
    (165) statement -> . WRITELN LPAREN write_arguments RPAREN
    (171) statement -> . USES ID SEMICOLON
    (106) if_statement -> . IF expression THEN statement ELSE statement
    (107) if_statement -> . IF expression THEN statement
    (108) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (109) if_statement -> . IF expression IN statement THEN statement
    (112) assignment_statement -> . variable COLON_EQUAL expression
    (113) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (114) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (115) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (116) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (117) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (118) assignment_statement -> . ID COLON_EQUAL expression
    (125) while_statement -> . WHILE expression DO statement
    (126) procedure_call -> . ID LPAREN expression_list RPAREN
    (127) procedure_call -> . ID
    (92) compound_statement -> . BEGIN statement_list END
    (110) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (111) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (72) case_statement -> . CASE expression OF case_list END SEMICOLON
    (73) case_statement -> . CASE expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> . CASE expression OF case_list END
    (105) with_statement -> . WITH variable DO statement
    (173) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (160) empty -> .
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    UNTIL           shift and go to state 223
    READLN          shift and go to state 59
    WRITE           shift and go to state 61
    WRITELN         shift and go to state 62
    USES            shift and go to state 63
    IF              shift and go to state 65
    ID              shift and go to state 64
    WHILE           shift and go to state 66
    BEGIN           shift and go to state 28
    FOR             shift and go to state 67
    CASE            shift and go to state 68
    WITH            shift and go to state 69
    REPEAT          shift and go to state 70
    SEMICOLON       reduce using rule 160 (empty -> .)

    statement                      shift and go to state 89
    if_statement                   shift and go to state 49
    assignment_statement           shift and go to state 50
    while_statement                shift and go to state 51
    procedure_call                 shift and go to state 52
    compound_statement             shift and go to state 53
    for_statement                  shift and go to state 54
    case_statement                 shift and go to state 55
    with_statement                 shift and go to state 56
    repeat_statement               shift and go to state 57
    empty                          shift and go to state 58
    variable                       shift and go to state 60

state 123

    (20) id_list -> id_list COMMA ID .

    SEMICOLON       reduce using rule 20 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 20 (id_list -> id_list COMMA ID .)
    COLON           reduce using rule 20 (id_list -> id_list COMMA ID .)
    LPAREN          reduce using rule 20 (id_list -> id_list COMMA ID .)
    RPAREN          reduce using rule 20 (id_list -> id_list COMMA ID .)


state 124

    (176) constant -> ID EQUAL CHARACTER_LITERAL . SEMICOLON

    SEMICOLON       shift and go to state 224


state 125

    (177) constant -> ID EQUAL NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 225


state 126

    (178) constant -> ID EQUAL STRING_LITERAL . SEMICOLON

    SEMICOLON       shift and go to state 226


state 127

    (179) constant -> ID EQUAL BOOLEAN_LITERAL . SEMICOLON

    SEMICOLON       shift and go to state 227


state 128

    (43) type_specifier -> ID .

    SEMICOLON       reduce using rule 43 (type_specifier -> ID .)
    RPAREN          reduce using rule 43 (type_specifier -> ID .)
    VAR             reduce using rule 43 (type_specifier -> ID .)
    ID              reduce using rule 43 (type_specifier -> ID .)
    IF              reduce using rule 43 (type_specifier -> ID .)
    CASE            reduce using rule 43 (type_specifier -> ID .)
    END             reduce using rule 43 (type_specifier -> ID .)
    CONSTRUCTOR     reduce using rule 43 (type_specifier -> ID .)
    PROCEDURE       reduce using rule 43 (type_specifier -> ID .)
    FUNCTION        reduce using rule 43 (type_specifier -> ID .)
    DESTRUCTOR      reduce using rule 43 (type_specifier -> ID .)
    ELSE            reduce using rule 43 (type_specifier -> ID .)
    OF              reduce using rule 43 (type_specifier -> ID .)


state 129

    (29) type_definition -> ID EQUAL type_specifier . SEMICOLON

    SEMICOLON       shift and go to state 228


state 130

    (30) type_specifier -> ARRAY . LBRACKET type_expression RBRACKET OF type_specifier

    LBRACKET        shift and go to state 229


state 131

    (31) type_specifier -> subrange .

    SEMICOLON       reduce using rule 31 (type_specifier -> subrange .)
    RPAREN          reduce using rule 31 (type_specifier -> subrange .)
    VAR             reduce using rule 31 (type_specifier -> subrange .)
    ID              reduce using rule 31 (type_specifier -> subrange .)
    IF              reduce using rule 31 (type_specifier -> subrange .)
    CASE            reduce using rule 31 (type_specifier -> subrange .)
    END             reduce using rule 31 (type_specifier -> subrange .)
    CONSTRUCTOR     reduce using rule 31 (type_specifier -> subrange .)
    PROCEDURE       reduce using rule 31 (type_specifier -> subrange .)
    FUNCTION        reduce using rule 31 (type_specifier -> subrange .)
    DESTRUCTOR      reduce using rule 31 (type_specifier -> subrange .)
    ELSE            reduce using rule 31 (type_specifier -> subrange .)
    OF              reduce using rule 31 (type_specifier -> subrange .)


state 132

    (32) type_specifier -> FILE . OF type_specifier

    OF              shift and go to state 230


state 133

    (33) type_specifier -> SET . OF type_specifier

    OF              shift and go to state 231


state 134

    (34) type_specifier -> RECORD . field_list case_part END
    (48) field_list -> . field_list field
    (49) field_list -> . field
    (50) field_list -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . if_statement
    (57) field -> . case_statement
    (58) field -> . assignment_statement
    (160) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (106) if_statement -> . IF expression THEN statement ELSE statement
    (107) if_statement -> . IF expression THEN statement
    (108) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (109) if_statement -> . IF expression IN statement THEN statement
    (72) case_statement -> . CASE expression OF case_list END SEMICOLON
    (73) case_statement -> . CASE expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> . CASE expression OF case_list END
    (112) assignment_statement -> . variable COLON_EQUAL expression
    (113) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (114) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (115) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (116) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (117) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (118) assignment_statement -> . ID COLON_EQUAL expression
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
    VAR             shift and go to state 156
    END             reduce using rule 160 (empty -> .)
    ID              shift and go to state 150
    IF              shift and go to state 65
    CASE            shift and go to state 68

  ! CASE            [ reduce using rule 160 (empty -> .) ]
  ! VAR             [ reduce using rule 160 (empty -> .) ]
  ! ID              [ reduce using rule 160 (empty -> .) ]
  ! IF              [ reduce using rule 160 (empty -> .) ]

    field_list                     shift and go to state 232
    field                          shift and go to state 153
    empty                          shift and go to state 154
    id_list                        shift and go to state 155
    if_statement                   shift and go to state 157
    case_statement                 shift and go to state 158
    assignment_statement           shift and go to state 159
    variable                       shift and go to state 60

state 135

    (35) type_specifier -> OBJECT . field_list method_list END
    (48) field_list -> . field_list field
    (49) field_list -> . field
    (50) field_list -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . if_statement
    (57) field -> . case_statement
    (58) field -> . assignment_statement
    (160) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (106) if_statement -> . IF expression THEN statement ELSE statement
    (107) if_statement -> . IF expression THEN statement
    (108) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (109) if_statement -> . IF expression IN statement THEN statement
    (72) case_statement -> . CASE expression OF case_list END SEMICOLON
    (73) case_statement -> . CASE expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> . CASE expression OF case_list END
    (112) assignment_statement -> . variable COLON_EQUAL expression
    (113) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (114) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (115) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (116) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (117) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (118) assignment_statement -> . ID COLON_EQUAL expression
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
    VAR             shift and go to state 156
    CONSTRUCTOR     reduce using rule 160 (empty -> .)
    PROCEDURE       reduce using rule 160 (empty -> .)
    FUNCTION        reduce using rule 160 (empty -> .)
    DESTRUCTOR      reduce using rule 160 (empty -> .)
    END             reduce using rule 160 (empty -> .)
    ID              shift and go to state 150
    IF              shift and go to state 65
    CASE            shift and go to state 68

  ! VAR             [ reduce using rule 160 (empty -> .) ]
  ! ID              [ reduce using rule 160 (empty -> .) ]
  ! IF              [ reduce using rule 160 (empty -> .) ]
  ! CASE            [ reduce using rule 160 (empty -> .) ]

    field_list                     shift and go to state 233
    field                          shift and go to state 153
    empty                          shift and go to state 154
    id_list                        shift and go to state 155
    if_statement                   shift and go to state 157
    case_statement                 shift and go to state 158
    assignment_statement           shift and go to state 159
    variable                       shift and go to state 60

state 136

    (36) type_specifier -> LPAREN . id_list RPAREN
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

    ID              shift and go to state 33

    id_list                        shift and go to state 234

state 137

    (37) type_specifier -> BOOLEAN_LITERAL .

    SEMICOLON       reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    RPAREN          reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    VAR             reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    ID              reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    IF              reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    CASE            reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    END             reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    CONSTRUCTOR     reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    PROCEDURE       reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    FUNCTION        reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    DESTRUCTOR      reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    ELSE            reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)
    OF              reduce using rule 37 (type_specifier -> BOOLEAN_LITERAL .)


state 138

    (38) type_specifier -> INTEGER .

    SEMICOLON       reduce using rule 38 (type_specifier -> INTEGER .)
    RPAREN          reduce using rule 38 (type_specifier -> INTEGER .)
    VAR             reduce using rule 38 (type_specifier -> INTEGER .)
    ID              reduce using rule 38 (type_specifier -> INTEGER .)
    IF              reduce using rule 38 (type_specifier -> INTEGER .)
    CASE            reduce using rule 38 (type_specifier -> INTEGER .)
    END             reduce using rule 38 (type_specifier -> INTEGER .)
    CONSTRUCTOR     reduce using rule 38 (type_specifier -> INTEGER .)
    PROCEDURE       reduce using rule 38 (type_specifier -> INTEGER .)
    FUNCTION        reduce using rule 38 (type_specifier -> INTEGER .)
    DESTRUCTOR      reduce using rule 38 (type_specifier -> INTEGER .)
    ELSE            reduce using rule 38 (type_specifier -> INTEGER .)
    OF              reduce using rule 38 (type_specifier -> INTEGER .)


state 139

    (39) type_specifier -> BYTE .

    SEMICOLON       reduce using rule 39 (type_specifier -> BYTE .)
    RPAREN          reduce using rule 39 (type_specifier -> BYTE .)
    VAR             reduce using rule 39 (type_specifier -> BYTE .)
    ID              reduce using rule 39 (type_specifier -> BYTE .)
    IF              reduce using rule 39 (type_specifier -> BYTE .)
    CASE            reduce using rule 39 (type_specifier -> BYTE .)
    END             reduce using rule 39 (type_specifier -> BYTE .)
    CONSTRUCTOR     reduce using rule 39 (type_specifier -> BYTE .)
    PROCEDURE       reduce using rule 39 (type_specifier -> BYTE .)
    FUNCTION        reduce using rule 39 (type_specifier -> BYTE .)
    DESTRUCTOR      reduce using rule 39 (type_specifier -> BYTE .)
    ELSE            reduce using rule 39 (type_specifier -> BYTE .)
    OF              reduce using rule 39 (type_specifier -> BYTE .)


state 140

    (40) type_specifier -> CHAR .

    SEMICOLON       reduce using rule 40 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 40 (type_specifier -> CHAR .)
    VAR             reduce using rule 40 (type_specifier -> CHAR .)
    ID              reduce using rule 40 (type_specifier -> CHAR .)
    IF              reduce using rule 40 (type_specifier -> CHAR .)
    CASE            reduce using rule 40 (type_specifier -> CHAR .)
    END             reduce using rule 40 (type_specifier -> CHAR .)
    CONSTRUCTOR     reduce using rule 40 (type_specifier -> CHAR .)
    PROCEDURE       reduce using rule 40 (type_specifier -> CHAR .)
    FUNCTION        reduce using rule 40 (type_specifier -> CHAR .)
    DESTRUCTOR      reduce using rule 40 (type_specifier -> CHAR .)
    ELSE            reduce using rule 40 (type_specifier -> CHAR .)
    OF              reduce using rule 40 (type_specifier -> CHAR .)


state 141

    (41) type_specifier -> STRING .
    (42) type_specifier -> STRING . LBRACKET NUMBER RBRACKET

    SEMICOLON       reduce using rule 41 (type_specifier -> STRING .)
    RPAREN          reduce using rule 41 (type_specifier -> STRING .)
    VAR             reduce using rule 41 (type_specifier -> STRING .)
    ID              reduce using rule 41 (type_specifier -> STRING .)
    IF              reduce using rule 41 (type_specifier -> STRING .)
    CASE            reduce using rule 41 (type_specifier -> STRING .)
    END             reduce using rule 41 (type_specifier -> STRING .)
    CONSTRUCTOR     reduce using rule 41 (type_specifier -> STRING .)
    PROCEDURE       reduce using rule 41 (type_specifier -> STRING .)
    FUNCTION        reduce using rule 41 (type_specifier -> STRING .)
    DESTRUCTOR      reduce using rule 41 (type_specifier -> STRING .)
    ELSE            reduce using rule 41 (type_specifier -> STRING .)
    OF              reduce using rule 41 (type_specifier -> STRING .)
    LBRACKET        shift and go to state 235


state 142

    (46) subrange -> NUMBER . DOTDOT NUMBER
    (47) subrange -> NUMBER . DOTDOT ID

    DOTDOT          shift and go to state 236


state 143

    (75) type_specifier -> LONGINT .

    SEMICOLON       reduce using rule 75 (type_specifier -> LONGINT .)
    RPAREN          reduce using rule 75 (type_specifier -> LONGINT .)
    VAR             reduce using rule 75 (type_specifier -> LONGINT .)
    ID              reduce using rule 75 (type_specifier -> LONGINT .)
    IF              reduce using rule 75 (type_specifier -> LONGINT .)
    CASE            reduce using rule 75 (type_specifier -> LONGINT .)
    END             reduce using rule 75 (type_specifier -> LONGINT .)
    CONSTRUCTOR     reduce using rule 75 (type_specifier -> LONGINT .)
    PROCEDURE       reduce using rule 75 (type_specifier -> LONGINT .)
    FUNCTION        reduce using rule 75 (type_specifier -> LONGINT .)
    DESTRUCTOR      reduce using rule 75 (type_specifier -> LONGINT .)
    ELSE            reduce using rule 75 (type_specifier -> LONGINT .)
    OF              reduce using rule 75 (type_specifier -> LONGINT .)


state 144

    (24) declaration -> id_list COLON type_specifier . SEMICOLON

    SEMICOLON       shift and go to state 237


state 145

    (91) parameter -> ID . COLON type_specifier

    COLON           shift and go to state 238


state 146

    (84) function_declaration -> FUNCTION ID LPAREN parameter_list . RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (85) function_declaration -> FUNCTION ID LPAREN parameter_list . RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (89) parameter_list -> parameter_list . SEMICOLON parameter

    RPAREN          shift and go to state 239
    SEMICOLON       shift and go to state 240


state 147

    (88) parameter_list -> parameter .

    RPAREN          reduce using rule 88 (parameter_list -> parameter .)
    SEMICOLON       reduce using rule 88 (parameter_list -> parameter .)


state 148

    (90) parameter_list -> empty .

    RPAREN          reduce using rule 90 (parameter_list -> empty .)
    SEMICOLON       reduce using rule 90 (parameter_list -> empty .)


state 149

    (14) method_declaration -> FUNCTION ID DOT ID . LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block

    LPAREN          shift and go to state 241


state 150

    (19) id_list -> ID .
    (118) assignment_statement -> ID . COLON_EQUAL expression
    (119) variable -> ID .
    (122) variable -> ID . LBRACKET index_list RBRACKET

  ! shift/reduce conflict for COLON_EQUAL resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    COLON           reduce using rule 19 (id_list -> ID .)
    LPAREN          reduce using rule 19 (id_list -> ID .)
    COMMA           reduce using rule 19 (id_list -> ID .)
    COLON_EQUAL     shift and go to state 103
    PLUS            reduce using rule 119 (variable -> ID .)
    MINUS           reduce using rule 119 (variable -> ID .)
    TIMES           reduce using rule 119 (variable -> ID .)
    DIVIDE          reduce using rule 119 (variable -> ID .)
    DOT             reduce using rule 119 (variable -> ID .)
    LBRACKET        shift and go to state 105

  ! COLON_EQUAL     [ reduce using rule 119 (variable -> ID .) ]
  ! LBRACKET        [ reduce using rule 119 (variable -> ID .) ]


state 151

    (16) constructor_declaration -> CONSTRUCTOR ID LPAREN field_list . RPAREN SEMICOLON block
    (48) field_list -> field_list . field
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . if_statement
    (57) field -> . case_statement
    (58) field -> . assignment_statement
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (106) if_statement -> . IF expression THEN statement ELSE statement
    (107) if_statement -> . IF expression THEN statement
    (108) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (109) if_statement -> . IF expression IN statement THEN statement
    (72) case_statement -> . CASE expression OF case_list END SEMICOLON
    (73) case_statement -> . CASE expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> . CASE expression OF case_list END
    (112) assignment_statement -> . variable COLON_EQUAL expression
    (113) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (114) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (115) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (116) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (117) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (118) assignment_statement -> . ID COLON_EQUAL expression
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    RPAREN          shift and go to state 242
    VAR             shift and go to state 156
    ID              shift and go to state 150
    IF              shift and go to state 65
    CASE            shift and go to state 68

    field                          shift and go to state 243
    id_list                        shift and go to state 155
    if_statement                   shift and go to state 157
    case_statement                 shift and go to state 158
    assignment_statement           shift and go to state 159
    variable                       shift and go to state 60

state 152

    (17) constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN . SEMICOLON block

    SEMICOLON       shift and go to state 244


state 153

    (49) field_list -> field .

    RPAREN          reduce using rule 49 (field_list -> field .)
    VAR             reduce using rule 49 (field_list -> field .)
    ID              reduce using rule 49 (field_list -> field .)
    IF              reduce using rule 49 (field_list -> field .)
    CASE            reduce using rule 49 (field_list -> field .)
    END             reduce using rule 49 (field_list -> field .)
    CONSTRUCTOR     reduce using rule 49 (field_list -> field .)
    PROCEDURE       reduce using rule 49 (field_list -> field .)
    FUNCTION        reduce using rule 49 (field_list -> field .)
    DESTRUCTOR      reduce using rule 49 (field_list -> field .)
    ELSE            reduce using rule 49 (field_list -> field .)
    SEMICOLON       reduce using rule 49 (field_list -> field .)


state 154

    (50) field_list -> empty .

    RPAREN          reduce using rule 50 (field_list -> empty .)
    VAR             reduce using rule 50 (field_list -> empty .)
    ID              reduce using rule 50 (field_list -> empty .)
    IF              reduce using rule 50 (field_list -> empty .)
    CASE            reduce using rule 50 (field_list -> empty .)
    END             reduce using rule 50 (field_list -> empty .)
    CONSTRUCTOR     reduce using rule 50 (field_list -> empty .)
    PROCEDURE       reduce using rule 50 (field_list -> empty .)
    FUNCTION        reduce using rule 50 (field_list -> empty .)
    DESTRUCTOR      reduce using rule 50 (field_list -> empty .)
    ELSE            reduce using rule 50 (field_list -> empty .)
    SEMICOLON       reduce using rule 50 (field_list -> empty .)


state 155

    (51) field -> id_list . COLON type_specifier
    (52) field -> id_list . COLON type_specifier SEMICOLON
    (55) field -> id_list . LPAREN STRING_LITERAL RPAREN
    (20) id_list -> id_list . COMMA ID

    COLON           shift and go to state 245
    LPAREN          shift and go to state 246
    COMMA           shift and go to state 73


state 156

    (53) field -> VAR . id_list COLON type_specifier
    (54) field -> VAR . id_list COLON type_specifier SEMICOLON
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID

    ID              shift and go to state 33

    id_list                        shift and go to state 247

state 157

    (56) field -> if_statement .

    RPAREN          reduce using rule 56 (field -> if_statement .)
    VAR             reduce using rule 56 (field -> if_statement .)
    ID              reduce using rule 56 (field -> if_statement .)
    IF              reduce using rule 56 (field -> if_statement .)
    CASE            reduce using rule 56 (field -> if_statement .)
    END             reduce using rule 56 (field -> if_statement .)
    CONSTRUCTOR     reduce using rule 56 (field -> if_statement .)
    PROCEDURE       reduce using rule 56 (field -> if_statement .)
    FUNCTION        reduce using rule 56 (field -> if_statement .)
    DESTRUCTOR      reduce using rule 56 (field -> if_statement .)
    ELSE            reduce using rule 56 (field -> if_statement .)
    SEMICOLON       reduce using rule 56 (field -> if_statement .)


state 158

    (57) field -> case_statement .

    RPAREN          reduce using rule 57 (field -> case_statement .)
    VAR             reduce using rule 57 (field -> case_statement .)
    ID              reduce using rule 57 (field -> case_statement .)
    IF              reduce using rule 57 (field -> case_statement .)
    CASE            reduce using rule 57 (field -> case_statement .)
    END             reduce using rule 57 (field -> case_statement .)
    CONSTRUCTOR     reduce using rule 57 (field -> case_statement .)
    PROCEDURE       reduce using rule 57 (field -> case_statement .)
    FUNCTION        reduce using rule 57 (field -> case_statement .)
    DESTRUCTOR      reduce using rule 57 (field -> case_statement .)
    ELSE            reduce using rule 57 (field -> case_statement .)
    SEMICOLON       reduce using rule 57 (field -> case_statement .)


state 159

    (58) field -> assignment_statement .

    RPAREN          reduce using rule 58 (field -> assignment_statement .)
    VAR             reduce using rule 58 (field -> assignment_statement .)
    ID              reduce using rule 58 (field -> assignment_statement .)
    IF              reduce using rule 58 (field -> assignment_statement .)
    CASE            reduce using rule 58 (field -> assignment_statement .)
    END             reduce using rule 58 (field -> assignment_statement .)
    CONSTRUCTOR     reduce using rule 58 (field -> assignment_statement .)
    PROCEDURE       reduce using rule 58 (field -> assignment_statement .)
    FUNCTION        reduce using rule 58 (field -> assignment_statement .)
    DESTRUCTOR      reduce using rule 58 (field -> assignment_statement .)
    ELSE            reduce using rule 58 (field -> assignment_statement .)
    SEMICOLON       reduce using rule 58 (field -> assignment_statement .)


state 160

    (12) method_declaration -> CONSTRUCTOR ID DOT ID . LPAREN parameter_list RPAREN SEMICOLON block

    LPAREN          shift and go to state 248


state 161

    (13) method_declaration -> PROCEDURE ID DOT ID . LPAREN parameter_list RPAREN SEMICOLON block

    LPAREN          shift and go to state 249


state 162

    (78) procedure_declaration -> PROCEDURE ID LPAREN parameter_list . RPAREN SEMICOLON block SEMICOLON
    (81) procedure_declaration -> PROCEDURE ID LPAREN parameter_list . RPAREN SEMICOLON FORWARD SEMICOLON
    (89) parameter_list -> parameter_list . SEMICOLON parameter

    RPAREN          shift and go to state 250
    SEMICOLON       shift and go to state 240


state 163

    (79) procedure_declaration -> PROCEDURE ID LPAREN RPAREN . SEMICOLON block SEMICOLON
    (82) procedure_declaration -> PROCEDURE ID LPAREN RPAREN . SEMICOLON FORWARD SEMICOLON

    SEMICOLON       shift and go to state 251


state 164

    (80) procedure_declaration -> PROCEDURE ID SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 252


state 165

    (83) procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD . SEMICOLON

    SEMICOLON       shift and go to state 253


state 166

    (15) method_declaration -> DESTRUCTOR ID DOT ID . SEMICOLON block

    SEMICOLON       shift and go to state 254


state 167

    (94) statement_list -> statement_list statement SEMICOLON .

    END             reduce using rule 94 (statement_list -> statement_list statement SEMICOLON .)
    READLN          reduce using rule 94 (statement_list -> statement_list statement SEMICOLON .)
    WRITE           reduce using rule 94 (statement_list -> statement_list statement SEMICOLON .)
    WRITELN         reduce using rule 94 (statement_list -> statement_list statement SEMICOLON .)
    USES            reduce using rule 94 (statement_list -> statement_list statement SEMICOLON .)
    IF              reduce using rule 94 (statement_list -> statement_list statement SEMICOLON .)
    ID              reduce using rule 94 (statement_list -> statement_list statement SEMICOLON .)
    WHILE           reduce using rule 94 (statement_list -> statement_list statement SEMICOLON .)
    BEGIN           reduce using rule 94 (statement_list -> statement_list statement SEMICOLON .)
    FOR             reduce using rule 94 (statement_list -> statement_list statement SEMICOLON .)
    CASE            reduce using rule 94 (statement_list -> statement_list statement SEMICOLON .)
    WITH            reduce using rule 94 (statement_list -> statement_list statement SEMICOLON .)
    REPEAT          reduce using rule 94 (statement_list -> statement_list statement SEMICOLON .)
    SEMICOLON       reduce using rule 94 (statement_list -> statement_list statement SEMICOLON .)
    UNTIL           reduce using rule 94 (statement_list -> statement_list statement SEMICOLON .)


state 168

    (162) statement -> READLN LPAREN variable . RPAREN
    (120) variable -> variable . LBRACKET expression RBRACKET
    (121) variable -> variable . DOT ID

    RPAREN          shift and go to state 255
    LBRACKET        shift and go to state 98
    DOT             shift and go to state 99


state 169

    (163) statement -> READLN LBRACKET variable . RBRACKET
    (120) variable -> variable . LBRACKET expression RBRACKET
    (121) variable -> variable . DOT ID

    RBRACKET        shift and go to state 256
    LBRACKET        shift and go to state 98
    DOT             shift and go to state 99


state 170

    (112) assignment_statement -> variable COLON_EQUAL expression .
    (145) expression -> expression . PLUS expression
    (146) expression -> expression . MINUS expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (180) expression -> expression . AND expression
    (181) expression -> expression . OR expression

    SEMICOLON       reduce using rule 112 (assignment_statement -> variable COLON_EQUAL expression .)
    RPAREN          reduce using rule 112 (assignment_statement -> variable COLON_EQUAL expression .)
    VAR             reduce using rule 112 (assignment_statement -> variable COLON_EQUAL expression .)
    ID              reduce using rule 112 (assignment_statement -> variable COLON_EQUAL expression .)
    IF              reduce using rule 112 (assignment_statement -> variable COLON_EQUAL expression .)
    CASE            reduce using rule 112 (assignment_statement -> variable COLON_EQUAL expression .)
    END             reduce using rule 112 (assignment_statement -> variable COLON_EQUAL expression .)
    CONSTRUCTOR     reduce using rule 112 (assignment_statement -> variable COLON_EQUAL expression .)
    PROCEDURE       reduce using rule 112 (assignment_statement -> variable COLON_EQUAL expression .)
    FUNCTION        reduce using rule 112 (assignment_statement -> variable COLON_EQUAL expression .)
    DESTRUCTOR      reduce using rule 112 (assignment_statement -> variable COLON_EQUAL expression .)
    ELSE            reduce using rule 112 (assignment_statement -> variable COLON_EQUAL expression .)
    THEN            reduce using rule 112 (assignment_statement -> variable COLON_EQUAL expression .)
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 195
    AND             shift and go to state 196
    OR              shift and go to state 197


state 171

    (113) assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL . SEMICOLON

    SEMICOLON       shift and go to state 257


state 172

    (114) assignment_statement -> variable PLUS COLON_EQUAL . expression
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    variable                       shift and go to state 113
    expression                     shift and go to state 258
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111

state 173

    (115) assignment_statement -> variable MINUS COLON_EQUAL . expression
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    variable                       shift and go to state 113
    expression                     shift and go to state 259
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111

state 174

    (116) assignment_statement -> variable TIMES COLON_EQUAL . expression
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    variable                       shift and go to state 113
    expression                     shift and go to state 260
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111

state 175

    (117) assignment_statement -> variable DIVIDE COLON_EQUAL . expression
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    variable                       shift and go to state 113
    expression                     shift and go to state 261
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111

state 176

    (120) variable -> variable LBRACKET expression . RBRACKET
    (145) expression -> expression . PLUS expression
    (146) expression -> expression . MINUS expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (180) expression -> expression . AND expression
    (181) expression -> expression . OR expression

    RBRACKET        shift and go to state 262
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 195
    AND             shift and go to state 196
    OR              shift and go to state 197


state 177

    (121) variable -> variable DOT ID .

    COLON_EQUAL     reduce using rule 121 (variable -> variable DOT ID .)
    PLUS            reduce using rule 121 (variable -> variable DOT ID .)
    MINUS           reduce using rule 121 (variable -> variable DOT ID .)
    TIMES           reduce using rule 121 (variable -> variable DOT ID .)
    DIVIDE          reduce using rule 121 (variable -> variable DOT ID .)
    LBRACKET        reduce using rule 121 (variable -> variable DOT ID .)
    DOT             reduce using rule 121 (variable -> variable DOT ID .)
    DIV             reduce using rule 121 (variable -> variable DOT ID .)
    LESS            reduce using rule 121 (variable -> variable DOT ID .)
    LESS_EQUAL      reduce using rule 121 (variable -> variable DOT ID .)
    GREAT           reduce using rule 121 (variable -> variable DOT ID .)
    GREAT_EQUAL     reduce using rule 121 (variable -> variable DOT ID .)
    EQUAL           reduce using rule 121 (variable -> variable DOT ID .)
    DIFFERENT       reduce using rule 121 (variable -> variable DOT ID .)
    THEN            reduce using rule 121 (variable -> variable DOT ID .)
    IN              reduce using rule 121 (variable -> variable DOT ID .)
    MOD             reduce using rule 121 (variable -> variable DOT ID .)
    AND             reduce using rule 121 (variable -> variable DOT ID .)
    OR              reduce using rule 121 (variable -> variable DOT ID .)
    DO              reduce using rule 121 (variable -> variable DOT ID .)
    OF              reduce using rule 121 (variable -> variable DOT ID .)
    RPAREN          reduce using rule 121 (variable -> variable DOT ID .)
    RBRACKET        reduce using rule 121 (variable -> variable DOT ID .)
    SEMICOLON       reduce using rule 121 (variable -> variable DOT ID .)
    VAR             reduce using rule 121 (variable -> variable DOT ID .)
    ID              reduce using rule 121 (variable -> variable DOT ID .)
    IF              reduce using rule 121 (variable -> variable DOT ID .)
    CASE            reduce using rule 121 (variable -> variable DOT ID .)
    END             reduce using rule 121 (variable -> variable DOT ID .)
    CONSTRUCTOR     reduce using rule 121 (variable -> variable DOT ID .)
    PROCEDURE       reduce using rule 121 (variable -> variable DOT ID .)
    FUNCTION        reduce using rule 121 (variable -> variable DOT ID .)
    DESTRUCTOR      reduce using rule 121 (variable -> variable DOT ID .)
    ELSE            reduce using rule 121 (variable -> variable DOT ID .)
    COMMA           reduce using rule 121 (variable -> variable DOT ID .)
    COLON           reduce using rule 121 (variable -> variable DOT ID .)
    TO              reduce using rule 121 (variable -> variable DOT ID .)
    DOWNTO          reduce using rule 121 (variable -> variable DOT ID .)


state 178

    (164) statement -> WRITE LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 263


state 179

    (128) expression_list -> expression . expression_list_tail
    (145) expression -> expression . PLUS expression
    (146) expression -> expression . MINUS expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (180) expression -> expression . AND expression
    (181) expression -> expression . OR expression
    (129) expression_list_tail -> . COMMA expression expression_list_tail
    (130) expression_list_tail -> . empty
    (160) empty -> .

    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 195
    AND             shift and go to state 196
    OR              shift and go to state 197
    COMMA           shift and go to state 265
    RPAREN          reduce using rule 160 (empty -> .)

    expression_list_tail           shift and go to state 264
    empty                          shift and go to state 266

state 180

    (131) expression_list -> empty .

    RPAREN          reduce using rule 131 (expression_list -> empty .)


state 181

    (165) statement -> WRITELN LPAREN write_arguments . RPAREN
    (167) write_arguments -> write_arguments . COMMA write_argument

    RPAREN          shift and go to state 267
    COMMA           shift and go to state 268


state 182

    (166) write_arguments -> write_argument .

    RPAREN          reduce using rule 166 (write_arguments -> write_argument .)
    COMMA           reduce using rule 166 (write_arguments -> write_argument .)


state 183

    (168) write_argument -> expression .
    (169) write_argument -> expression . COLON expression
    (170) write_argument -> expression . COLON expression COLON expression
    (145) expression -> expression . PLUS expression
    (146) expression -> expression . MINUS expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (180) expression -> expression . AND expression
    (181) expression -> expression . OR expression

    RPAREN          reduce using rule 168 (write_argument -> expression .)
    COMMA           reduce using rule 168 (write_argument -> expression .)
    COLON           shift and go to state 269
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 195
    AND             shift and go to state 196
    OR              shift and go to state 197


state 184

    (171) statement -> USES ID SEMICOLON .

    SEMICOLON       reduce using rule 171 (statement -> USES ID SEMICOLON .)
    ELSE            reduce using rule 171 (statement -> USES ID SEMICOLON .)
    RPAREN          reduce using rule 171 (statement -> USES ID SEMICOLON .)
    VAR             reduce using rule 171 (statement -> USES ID SEMICOLON .)
    ID              reduce using rule 171 (statement -> USES ID SEMICOLON .)
    IF              reduce using rule 171 (statement -> USES ID SEMICOLON .)
    CASE            reduce using rule 171 (statement -> USES ID SEMICOLON .)
    END             reduce using rule 171 (statement -> USES ID SEMICOLON .)
    CONSTRUCTOR     reduce using rule 171 (statement -> USES ID SEMICOLON .)
    PROCEDURE       reduce using rule 171 (statement -> USES ID SEMICOLON .)
    FUNCTION        reduce using rule 171 (statement -> USES ID SEMICOLON .)
    DESTRUCTOR      reduce using rule 171 (statement -> USES ID SEMICOLON .)
    THEN            reduce using rule 171 (statement -> USES ID SEMICOLON .)


state 185

    (118) assignment_statement -> ID COLON_EQUAL expression .
    (145) expression -> expression . PLUS expression
    (146) expression -> expression . MINUS expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (180) expression -> expression . AND expression
    (181) expression -> expression . OR expression

    SEMICOLON       reduce using rule 118 (assignment_statement -> ID COLON_EQUAL expression .)
    RPAREN          reduce using rule 118 (assignment_statement -> ID COLON_EQUAL expression .)
    VAR             reduce using rule 118 (assignment_statement -> ID COLON_EQUAL expression .)
    ID              reduce using rule 118 (assignment_statement -> ID COLON_EQUAL expression .)
    IF              reduce using rule 118 (assignment_statement -> ID COLON_EQUAL expression .)
    CASE            reduce using rule 118 (assignment_statement -> ID COLON_EQUAL expression .)
    END             reduce using rule 118 (assignment_statement -> ID COLON_EQUAL expression .)
    CONSTRUCTOR     reduce using rule 118 (assignment_statement -> ID COLON_EQUAL expression .)
    PROCEDURE       reduce using rule 118 (assignment_statement -> ID COLON_EQUAL expression .)
    FUNCTION        reduce using rule 118 (assignment_statement -> ID COLON_EQUAL expression .)
    DESTRUCTOR      reduce using rule 118 (assignment_statement -> ID COLON_EQUAL expression .)
    ELSE            reduce using rule 118 (assignment_statement -> ID COLON_EQUAL expression .)
    THEN            reduce using rule 118 (assignment_statement -> ID COLON_EQUAL expression .)
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 195
    AND             shift and go to state 196
    OR              shift and go to state 197


state 186

    (126) procedure_call -> ID LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 270


state 187

    (122) variable -> ID LBRACKET index_list . RBRACKET
    (124) index_list -> index_list . COMMA expression

    RBRACKET        shift and go to state 271
    COMMA           shift and go to state 272


state 188

    (123) index_list -> expression .
    (145) expression -> expression . PLUS expression
    (146) expression -> expression . MINUS expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (180) expression -> expression . AND expression
    (181) expression -> expression . OR expression

    RBRACKET        reduce using rule 123 (index_list -> expression .)
    COMMA           reduce using rule 123 (index_list -> expression .)
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 195
    AND             shift and go to state 196
    OR              shift and go to state 197


state 189

    (106) if_statement -> IF expression THEN . statement ELSE statement
    (107) if_statement -> IF expression THEN . statement
    (95) statement -> . if_statement
    (96) statement -> . assignment_statement
    (97) statement -> . while_statement
    (98) statement -> . procedure_call
    (99) statement -> . compound_statement
    (100) statement -> . for_statement
    (101) statement -> . case_statement
    (102) statement -> . with_statement
    (103) statement -> . repeat_statement
    (104) statement -> . empty
    (161) statement -> . READLN
    (162) statement -> . READLN LPAREN variable RPAREN
    (163) statement -> . READLN LBRACKET variable RBRACKET
    (164) statement -> . WRITE LPAREN expression_list RPAREN
    (165) statement -> . WRITELN LPAREN write_arguments RPAREN
    (171) statement -> . USES ID SEMICOLON
    (106) if_statement -> . IF expression THEN statement ELSE statement
    (107) if_statement -> . IF expression THEN statement
    (108) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (109) if_statement -> . IF expression IN statement THEN statement
    (112) assignment_statement -> . variable COLON_EQUAL expression
    (113) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (114) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (115) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (116) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (117) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (118) assignment_statement -> . ID COLON_EQUAL expression
    (125) while_statement -> . WHILE expression DO statement
    (126) procedure_call -> . ID LPAREN expression_list RPAREN
    (127) procedure_call -> . ID
    (92) compound_statement -> . BEGIN statement_list END
    (110) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (111) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (72) case_statement -> . CASE expression OF case_list END SEMICOLON
    (73) case_statement -> . CASE expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> . CASE expression OF case_list END
    (105) with_statement -> . WITH variable DO statement
    (173) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (160) empty -> .
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
    READLN          shift and go to state 59
    WRITE           shift and go to state 61
    WRITELN         shift and go to state 62
    USES            shift and go to state 63
    IF              shift and go to state 65
    ID              shift and go to state 64
    WHILE           shift and go to state 66
    BEGIN           shift and go to state 28
    FOR             shift and go to state 67
    CASE            shift and go to state 68
    WITH            shift and go to state 69
    REPEAT          shift and go to state 70
    ELSE            reduce using rule 160 (empty -> .)
    SEMICOLON       reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    VAR             reduce using rule 160 (empty -> .)
    END             reduce using rule 160 (empty -> .)
    CONSTRUCTOR     reduce using rule 160 (empty -> .)
    PROCEDURE       reduce using rule 160 (empty -> .)
    FUNCTION        reduce using rule 160 (empty -> .)
    DESTRUCTOR      reduce using rule 160 (empty -> .)
    THEN            reduce using rule 160 (empty -> .)

  ! ID              [ reduce using rule 160 (empty -> .) ]
  ! IF              [ reduce using rule 160 (empty -> .) ]
  ! CASE            [ reduce using rule 160 (empty -> .) ]

    statement                      shift and go to state 273
    if_statement                   shift and go to state 49
    assignment_statement           shift and go to state 50
    while_statement                shift and go to state 51
    procedure_call                 shift and go to state 52
    compound_statement             shift and go to state 53
    for_statement                  shift and go to state 54
    case_statement                 shift and go to state 55
    with_statement                 shift and go to state 56
    repeat_statement               shift and go to state 57
    empty                          shift and go to state 58
    variable                       shift and go to state 60

state 190

    (108) if_statement -> IF expression IN . statement THEN statement ELSE statement
    (109) if_statement -> IF expression IN . statement THEN statement
    (95) statement -> . if_statement
    (96) statement -> . assignment_statement
    (97) statement -> . while_statement
    (98) statement -> . procedure_call
    (99) statement -> . compound_statement
    (100) statement -> . for_statement
    (101) statement -> . case_statement
    (102) statement -> . with_statement
    (103) statement -> . repeat_statement
    (104) statement -> . empty
    (161) statement -> . READLN
    (162) statement -> . READLN LPAREN variable RPAREN
    (163) statement -> . READLN LBRACKET variable RBRACKET
    (164) statement -> . WRITE LPAREN expression_list RPAREN
    (165) statement -> . WRITELN LPAREN write_arguments RPAREN
    (171) statement -> . USES ID SEMICOLON
    (106) if_statement -> . IF expression THEN statement ELSE statement
    (107) if_statement -> . IF expression THEN statement
    (108) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (109) if_statement -> . IF expression IN statement THEN statement
    (112) assignment_statement -> . variable COLON_EQUAL expression
    (113) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (114) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (115) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (116) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (117) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (118) assignment_statement -> . ID COLON_EQUAL expression
    (125) while_statement -> . WHILE expression DO statement
    (126) procedure_call -> . ID LPAREN expression_list RPAREN
    (127) procedure_call -> . ID
    (92) compound_statement -> . BEGIN statement_list END
    (110) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (111) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (72) case_statement -> . CASE expression OF case_list END SEMICOLON
    (73) case_statement -> . CASE expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> . CASE expression OF case_list END
    (105) with_statement -> . WITH variable DO statement
    (173) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (160) empty -> .
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    READLN          shift and go to state 59
    WRITE           shift and go to state 61
    WRITELN         shift and go to state 62
    USES            shift and go to state 63
    IF              shift and go to state 65
    ID              shift and go to state 64
    WHILE           shift and go to state 66
    BEGIN           shift and go to state 28
    FOR             shift and go to state 67
    CASE            shift and go to state 68
    WITH            shift and go to state 69
    REPEAT          shift and go to state 70
    THEN            reduce using rule 160 (empty -> .)

    statement                      shift and go to state 274
    if_statement                   shift and go to state 49
    assignment_statement           shift and go to state 50
    while_statement                shift and go to state 51
    procedure_call                 shift and go to state 52
    compound_statement             shift and go to state 53
    for_statement                  shift and go to state 54
    case_statement                 shift and go to state 55
    with_statement                 shift and go to state 56
    repeat_statement               shift and go to state 57
    empty                          shift and go to state 58
    variable                       shift and go to state 60

state 191

    (145) expression -> expression PLUS . expression
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    expression                     shift and go to state 275
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 192

    (146) expression -> expression MINUS . expression
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    expression                     shift and go to state 276
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 193

    (147) expression -> expression TIMES . expression
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    expression                     shift and go to state 277
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 194

    (148) expression -> expression DIVIDE . expression
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    expression                     shift and go to state 278
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 195

    (149) expression -> expression MOD . expression
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    expression                     shift and go to state 279
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 196

    (180) expression -> expression AND . expression
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    expression                     shift and go to state 280
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 197

    (181) expression -> expression OR . expression
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    expression                     shift and go to state 281
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 198

    (132) expression -> simple_expression relop . simple_expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    simple_expression              shift and go to state 282
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 199

    (154) relop -> LESS .

    LPAREN          reduce using rule 154 (relop -> LESS .)
    NUMBER          reduce using rule 154 (relop -> LESS .)
    STRING_LITERAL  reduce using rule 154 (relop -> LESS .)
    ID              reduce using rule 154 (relop -> LESS .)


state 200

    (155) relop -> LESS_EQUAL .

    LPAREN          reduce using rule 155 (relop -> LESS_EQUAL .)
    NUMBER          reduce using rule 155 (relop -> LESS_EQUAL .)
    STRING_LITERAL  reduce using rule 155 (relop -> LESS_EQUAL .)
    ID              reduce using rule 155 (relop -> LESS_EQUAL .)


state 201

    (156) relop -> GREAT .

    LPAREN          reduce using rule 156 (relop -> GREAT .)
    NUMBER          reduce using rule 156 (relop -> GREAT .)
    STRING_LITERAL  reduce using rule 156 (relop -> GREAT .)
    ID              reduce using rule 156 (relop -> GREAT .)


state 202

    (157) relop -> GREAT_EQUAL .

    LPAREN          reduce using rule 157 (relop -> GREAT_EQUAL .)
    NUMBER          reduce using rule 157 (relop -> GREAT_EQUAL .)
    STRING_LITERAL  reduce using rule 157 (relop -> GREAT_EQUAL .)
    ID              reduce using rule 157 (relop -> GREAT_EQUAL .)


state 203

    (158) relop -> EQUAL .

    LPAREN          reduce using rule 158 (relop -> EQUAL .)
    NUMBER          reduce using rule 158 (relop -> EQUAL .)
    STRING_LITERAL  reduce using rule 158 (relop -> EQUAL .)
    ID              reduce using rule 158 (relop -> EQUAL .)


state 204

    (159) relop -> DIFFERENT .

    LPAREN          reduce using rule 159 (relop -> DIFFERENT .)
    NUMBER          reduce using rule 159 (relop -> DIFFERENT .)
    STRING_LITERAL  reduce using rule 159 (relop -> DIFFERENT .)
    ID              reduce using rule 159 (relop -> DIFFERENT .)


state 205

    (182) expression -> NOT expression .
    (145) expression -> expression . PLUS expression
    (146) expression -> expression . MINUS expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (180) expression -> expression . AND expression
    (181) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 182 (expression -> NOT expression .)
    IN              reduce using rule 182 (expression -> NOT expression .)
    DO              reduce using rule 182 (expression -> NOT expression .)
    OF              reduce using rule 182 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 182 (expression -> NOT expression .)
    RPAREN          reduce using rule 182 (expression -> NOT expression .)
    VAR             reduce using rule 182 (expression -> NOT expression .)
    ID              reduce using rule 182 (expression -> NOT expression .)
    IF              reduce using rule 182 (expression -> NOT expression .)
    CASE            reduce using rule 182 (expression -> NOT expression .)
    END             reduce using rule 182 (expression -> NOT expression .)
    CONSTRUCTOR     reduce using rule 182 (expression -> NOT expression .)
    PROCEDURE       reduce using rule 182 (expression -> NOT expression .)
    FUNCTION        reduce using rule 182 (expression -> NOT expression .)
    DESTRUCTOR      reduce using rule 182 (expression -> NOT expression .)
    ELSE            reduce using rule 182 (expression -> NOT expression .)
    RBRACKET        reduce using rule 182 (expression -> NOT expression .)
    COMMA           reduce using rule 182 (expression -> NOT expression .)
    COLON           reduce using rule 182 (expression -> NOT expression .)
    TO              reduce using rule 182 (expression -> NOT expression .)
    DOWNTO          reduce using rule 182 (expression -> NOT expression .)
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 195
    AND             shift and go to state 196
    OR              shift and go to state 197

  ! PLUS            [ reduce using rule 182 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 182 (expression -> NOT expression .) ]
  ! TIMES           [ reduce using rule 182 (expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 182 (expression -> NOT expression .) ]
  ! MOD             [ reduce using rule 182 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 182 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 182 (expression -> NOT expression .) ]


state 206

    (134) simple_expression -> term simple_expression_tail .

    LESS            reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    LESS_EQUAL      reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    GREAT           reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    GREAT_EQUAL     reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    EQUAL           reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    DIFFERENT       reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    THEN            reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    IN              reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    PLUS            reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    MINUS           reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    TIMES           reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    DIVIDE          reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    MOD             reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    AND             reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    OR              reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    DO              reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    OF              reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    SEMICOLON       reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    RPAREN          reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    VAR             reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    ID              reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    IF              reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    CASE            reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    END             reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    CONSTRUCTOR     reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    PROCEDURE       reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    FUNCTION        reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    DESTRUCTOR      reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    ELSE            reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    RBRACKET        reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    COMMA           reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    COLON           reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    TO              reduce using rule 134 (simple_expression -> term simple_expression_tail .)
    DOWNTO          reduce using rule 134 (simple_expression -> term simple_expression_tail .)


state 207

    (135) simple_expression_tail -> addop . term
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    term                           shift and go to state 283
    factor                         shift and go to state 110
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 208

    (136) simple_expression_tail -> empty .

    LESS            reduce using rule 136 (simple_expression_tail -> empty .)
    LESS_EQUAL      reduce using rule 136 (simple_expression_tail -> empty .)
    GREAT           reduce using rule 136 (simple_expression_tail -> empty .)
    GREAT_EQUAL     reduce using rule 136 (simple_expression_tail -> empty .)
    EQUAL           reduce using rule 136 (simple_expression_tail -> empty .)
    DIFFERENT       reduce using rule 136 (simple_expression_tail -> empty .)
    THEN            reduce using rule 136 (simple_expression_tail -> empty .)
    IN              reduce using rule 136 (simple_expression_tail -> empty .)
    PLUS            reduce using rule 136 (simple_expression_tail -> empty .)
    MINUS           reduce using rule 136 (simple_expression_tail -> empty .)
    TIMES           reduce using rule 136 (simple_expression_tail -> empty .)
    DIVIDE          reduce using rule 136 (simple_expression_tail -> empty .)
    MOD             reduce using rule 136 (simple_expression_tail -> empty .)
    AND             reduce using rule 136 (simple_expression_tail -> empty .)
    OR              reduce using rule 136 (simple_expression_tail -> empty .)
    DO              reduce using rule 136 (simple_expression_tail -> empty .)
    OF              reduce using rule 136 (simple_expression_tail -> empty .)
    SEMICOLON       reduce using rule 136 (simple_expression_tail -> empty .)
    RPAREN          reduce using rule 136 (simple_expression_tail -> empty .)
    VAR             reduce using rule 136 (simple_expression_tail -> empty .)
    ID              reduce using rule 136 (simple_expression_tail -> empty .)
    IF              reduce using rule 136 (simple_expression_tail -> empty .)
    CASE            reduce using rule 136 (simple_expression_tail -> empty .)
    END             reduce using rule 136 (simple_expression_tail -> empty .)
    CONSTRUCTOR     reduce using rule 136 (simple_expression_tail -> empty .)
    PROCEDURE       reduce using rule 136 (simple_expression_tail -> empty .)
    FUNCTION        reduce using rule 136 (simple_expression_tail -> empty .)
    DESTRUCTOR      reduce using rule 136 (simple_expression_tail -> empty .)
    ELSE            reduce using rule 136 (simple_expression_tail -> empty .)
    RBRACKET        reduce using rule 136 (simple_expression_tail -> empty .)
    COMMA           reduce using rule 136 (simple_expression_tail -> empty .)
    COLON           reduce using rule 136 (simple_expression_tail -> empty .)
    TO              reduce using rule 136 (simple_expression_tail -> empty .)
    DOWNTO          reduce using rule 136 (simple_expression_tail -> empty .)


state 209

    (137) addop -> PLUS .

    LPAREN          reduce using rule 137 (addop -> PLUS .)
    NUMBER          reduce using rule 137 (addop -> PLUS .)
    STRING_LITERAL  reduce using rule 137 (addop -> PLUS .)
    ID              reduce using rule 137 (addop -> PLUS .)


state 210

    (138) addop -> MINUS .

    LPAREN          reduce using rule 138 (addop -> MINUS .)
    NUMBER          reduce using rule 138 (addop -> MINUS .)
    STRING_LITERAL  reduce using rule 138 (addop -> MINUS .)
    ID              reduce using rule 138 (addop -> MINUS .)


state 211

    (139) term -> factor term_tail .

    PLUS            reduce using rule 139 (term -> factor term_tail .)
    MINUS           reduce using rule 139 (term -> factor term_tail .)
    LESS            reduce using rule 139 (term -> factor term_tail .)
    LESS_EQUAL      reduce using rule 139 (term -> factor term_tail .)
    GREAT           reduce using rule 139 (term -> factor term_tail .)
    GREAT_EQUAL     reduce using rule 139 (term -> factor term_tail .)
    EQUAL           reduce using rule 139 (term -> factor term_tail .)
    DIFFERENT       reduce using rule 139 (term -> factor term_tail .)
    THEN            reduce using rule 139 (term -> factor term_tail .)
    IN              reduce using rule 139 (term -> factor term_tail .)
    TIMES           reduce using rule 139 (term -> factor term_tail .)
    DIVIDE          reduce using rule 139 (term -> factor term_tail .)
    MOD             reduce using rule 139 (term -> factor term_tail .)
    AND             reduce using rule 139 (term -> factor term_tail .)
    OR              reduce using rule 139 (term -> factor term_tail .)
    DO              reduce using rule 139 (term -> factor term_tail .)
    OF              reduce using rule 139 (term -> factor term_tail .)
    SEMICOLON       reduce using rule 139 (term -> factor term_tail .)
    RPAREN          reduce using rule 139 (term -> factor term_tail .)
    VAR             reduce using rule 139 (term -> factor term_tail .)
    ID              reduce using rule 139 (term -> factor term_tail .)
    IF              reduce using rule 139 (term -> factor term_tail .)
    CASE            reduce using rule 139 (term -> factor term_tail .)
    END             reduce using rule 139 (term -> factor term_tail .)
    CONSTRUCTOR     reduce using rule 139 (term -> factor term_tail .)
    PROCEDURE       reduce using rule 139 (term -> factor term_tail .)
    FUNCTION        reduce using rule 139 (term -> factor term_tail .)
    DESTRUCTOR      reduce using rule 139 (term -> factor term_tail .)
    ELSE            reduce using rule 139 (term -> factor term_tail .)
    RBRACKET        reduce using rule 139 (term -> factor term_tail .)
    COMMA           reduce using rule 139 (term -> factor term_tail .)
    COLON           reduce using rule 139 (term -> factor term_tail .)
    TO              reduce using rule 139 (term -> factor term_tail .)
    DOWNTO          reduce using rule 139 (term -> factor term_tail .)


state 212

    (140) term_tail -> mulop . factor
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    factor                         shift and go to state 284
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 213

    (141) term_tail -> empty .

    PLUS            reduce using rule 141 (term_tail -> empty .)
    MINUS           reduce using rule 141 (term_tail -> empty .)
    LESS            reduce using rule 141 (term_tail -> empty .)
    LESS_EQUAL      reduce using rule 141 (term_tail -> empty .)
    GREAT           reduce using rule 141 (term_tail -> empty .)
    GREAT_EQUAL     reduce using rule 141 (term_tail -> empty .)
    EQUAL           reduce using rule 141 (term_tail -> empty .)
    DIFFERENT       reduce using rule 141 (term_tail -> empty .)
    THEN            reduce using rule 141 (term_tail -> empty .)
    IN              reduce using rule 141 (term_tail -> empty .)
    TIMES           reduce using rule 141 (term_tail -> empty .)
    DIVIDE          reduce using rule 141 (term_tail -> empty .)
    MOD             reduce using rule 141 (term_tail -> empty .)
    AND             reduce using rule 141 (term_tail -> empty .)
    OR              reduce using rule 141 (term_tail -> empty .)
    DO              reduce using rule 141 (term_tail -> empty .)
    OF              reduce using rule 141 (term_tail -> empty .)
    SEMICOLON       reduce using rule 141 (term_tail -> empty .)
    RPAREN          reduce using rule 141 (term_tail -> empty .)
    VAR             reduce using rule 141 (term_tail -> empty .)
    ID              reduce using rule 141 (term_tail -> empty .)
    IF              reduce using rule 141 (term_tail -> empty .)
    CASE            reduce using rule 141 (term_tail -> empty .)
    END             reduce using rule 141 (term_tail -> empty .)
    CONSTRUCTOR     reduce using rule 141 (term_tail -> empty .)
    PROCEDURE       reduce using rule 141 (term_tail -> empty .)
    FUNCTION        reduce using rule 141 (term_tail -> empty .)
    DESTRUCTOR      reduce using rule 141 (term_tail -> empty .)
    ELSE            reduce using rule 141 (term_tail -> empty .)
    RBRACKET        reduce using rule 141 (term_tail -> empty .)
    COMMA           reduce using rule 141 (term_tail -> empty .)
    COLON           reduce using rule 141 (term_tail -> empty .)
    TO              reduce using rule 141 (term_tail -> empty .)
    DOWNTO          reduce using rule 141 (term_tail -> empty .)


state 214

    (142) mulop -> TIMES .

    LPAREN          reduce using rule 142 (mulop -> TIMES .)
    NUMBER          reduce using rule 142 (mulop -> TIMES .)
    STRING_LITERAL  reduce using rule 142 (mulop -> TIMES .)
    ID              reduce using rule 142 (mulop -> TIMES .)


state 215

    (143) mulop -> DIVIDE .

    LPAREN          reduce using rule 143 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 143 (mulop -> DIVIDE .)
    STRING_LITERAL  reduce using rule 143 (mulop -> DIVIDE .)
    ID              reduce using rule 143 (mulop -> DIVIDE .)


state 216

    (144) mulop -> DIV .

    LPAREN          reduce using rule 144 (mulop -> DIV .)
    NUMBER          reduce using rule 144 (mulop -> DIV .)
    STRING_LITERAL  reduce using rule 144 (mulop -> DIV .)
    ID              reduce using rule 144 (mulop -> DIV .)


state 217

    (150) factor -> LPAREN expression . RPAREN
    (145) expression -> expression . PLUS expression
    (146) expression -> expression . MINUS expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (180) expression -> expression . AND expression
    (181) expression -> expression . OR expression

    RPAREN          shift and go to state 285
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 195
    AND             shift and go to state 196
    OR              shift and go to state 197


state 218

    (86) function_call -> ID LPAREN . expression_list RPAREN
    (128) expression_list -> . expression expression_list_tail
    (131) expression_list -> . empty
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (160) empty -> .
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    RPAREN          reduce using rule 160 (empty -> .)
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    expression_list                shift and go to state 286
    expression                     shift and go to state 179
    empty                          shift and go to state 180
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 219

    (125) while_statement -> WHILE expression DO . statement
    (95) statement -> . if_statement
    (96) statement -> . assignment_statement
    (97) statement -> . while_statement
    (98) statement -> . procedure_call
    (99) statement -> . compound_statement
    (100) statement -> . for_statement
    (101) statement -> . case_statement
    (102) statement -> . with_statement
    (103) statement -> . repeat_statement
    (104) statement -> . empty
    (161) statement -> . READLN
    (162) statement -> . READLN LPAREN variable RPAREN
    (163) statement -> . READLN LBRACKET variable RBRACKET
    (164) statement -> . WRITE LPAREN expression_list RPAREN
    (165) statement -> . WRITELN LPAREN write_arguments RPAREN
    (171) statement -> . USES ID SEMICOLON
    (106) if_statement -> . IF expression THEN statement ELSE statement
    (107) if_statement -> . IF expression THEN statement
    (108) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (109) if_statement -> . IF expression IN statement THEN statement
    (112) assignment_statement -> . variable COLON_EQUAL expression
    (113) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (114) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (115) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (116) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (117) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (118) assignment_statement -> . ID COLON_EQUAL expression
    (125) while_statement -> . WHILE expression DO statement
    (126) procedure_call -> . ID LPAREN expression_list RPAREN
    (127) procedure_call -> . ID
    (92) compound_statement -> . BEGIN statement_list END
    (110) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (111) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (72) case_statement -> . CASE expression OF case_list END SEMICOLON
    (73) case_statement -> . CASE expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> . CASE expression OF case_list END
    (105) with_statement -> . WITH variable DO statement
    (173) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (160) empty -> .
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
    READLN          shift and go to state 59
    WRITE           shift and go to state 61
    WRITELN         shift and go to state 62
    USES            shift and go to state 63
    IF              shift and go to state 65
    ID              shift and go to state 64
    WHILE           shift and go to state 66
    BEGIN           shift and go to state 28
    FOR             shift and go to state 67
    CASE            shift and go to state 68
    WITH            shift and go to state 69
    REPEAT          shift and go to state 70
    ELSE            reduce using rule 160 (empty -> .)
    SEMICOLON       reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    VAR             reduce using rule 160 (empty -> .)
    END             reduce using rule 160 (empty -> .)
    CONSTRUCTOR     reduce using rule 160 (empty -> .)
    PROCEDURE       reduce using rule 160 (empty -> .)
    FUNCTION        reduce using rule 160 (empty -> .)
    DESTRUCTOR      reduce using rule 160 (empty -> .)
    THEN            reduce using rule 160 (empty -> .)

  ! ID              [ reduce using rule 160 (empty -> .) ]
  ! IF              [ reduce using rule 160 (empty -> .) ]
  ! CASE            [ reduce using rule 160 (empty -> .) ]

    statement                      shift and go to state 287
    if_statement                   shift and go to state 49
    assignment_statement           shift and go to state 50
    while_statement                shift and go to state 51
    procedure_call                 shift and go to state 52
    compound_statement             shift and go to state 53
    for_statement                  shift and go to state 54
    case_statement                 shift and go to state 55
    with_statement                 shift and go to state 56
    repeat_statement               shift and go to state 57
    empty                          shift and go to state 58
    variable                       shift and go to state 60

state 220

    (110) for_statement -> FOR ID COLON_EQUAL . expression TO expression DO block
    (111) for_statement -> FOR ID COLON_EQUAL . expression DOWNTO expression DO block
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    expression                     shift and go to state 288
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 221

    (72) case_statement -> CASE expression OF . case_list END SEMICOLON
    (73) case_statement -> CASE expression OF . case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> CASE expression OF . case_list END
    (61) case_list -> . case_list SEMICOLON case_element
    (62) case_list -> . case_element
    (63) case_element -> . NUMBER COLON LPAREN field_list RPAREN
    (64) case_element -> . NUMBER COLON field_list

    NUMBER          shift and go to state 291

    case_list                      shift and go to state 289
    case_element                   shift and go to state 290

state 222

    (105) with_statement -> WITH variable DO . statement
    (95) statement -> . if_statement
    (96) statement -> . assignment_statement
    (97) statement -> . while_statement
    (98) statement -> . procedure_call
    (99) statement -> . compound_statement
    (100) statement -> . for_statement
    (101) statement -> . case_statement
    (102) statement -> . with_statement
    (103) statement -> . repeat_statement
    (104) statement -> . empty
    (161) statement -> . READLN
    (162) statement -> . READLN LPAREN variable RPAREN
    (163) statement -> . READLN LBRACKET variable RBRACKET
    (164) statement -> . WRITE LPAREN expression_list RPAREN
    (165) statement -> . WRITELN LPAREN write_arguments RPAREN
    (171) statement -> . USES ID SEMICOLON
    (106) if_statement -> . IF expression THEN statement ELSE statement
    (107) if_statement -> . IF expression THEN statement
    (108) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (109) if_statement -> . IF expression IN statement THEN statement
    (112) assignment_statement -> . variable COLON_EQUAL expression
    (113) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (114) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (115) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (116) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (117) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (118) assignment_statement -> . ID COLON_EQUAL expression
    (125) while_statement -> . WHILE expression DO statement
    (126) procedure_call -> . ID LPAREN expression_list RPAREN
    (127) procedure_call -> . ID
    (92) compound_statement -> . BEGIN statement_list END
    (110) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (111) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (72) case_statement -> . CASE expression OF case_list END SEMICOLON
    (73) case_statement -> . CASE expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> . CASE expression OF case_list END
    (105) with_statement -> . WITH variable DO statement
    (173) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (160) empty -> .
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
    READLN          shift and go to state 59
    WRITE           shift and go to state 61
    WRITELN         shift and go to state 62
    USES            shift and go to state 63
    IF              shift and go to state 65
    ID              shift and go to state 64
    WHILE           shift and go to state 66
    BEGIN           shift and go to state 28
    FOR             shift and go to state 67
    CASE            shift and go to state 68
    WITH            shift and go to state 69
    REPEAT          shift and go to state 70
    ELSE            reduce using rule 160 (empty -> .)
    SEMICOLON       reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    VAR             reduce using rule 160 (empty -> .)
    END             reduce using rule 160 (empty -> .)
    CONSTRUCTOR     reduce using rule 160 (empty -> .)
    PROCEDURE       reduce using rule 160 (empty -> .)
    FUNCTION        reduce using rule 160 (empty -> .)
    DESTRUCTOR      reduce using rule 160 (empty -> .)
    THEN            reduce using rule 160 (empty -> .)

  ! ID              [ reduce using rule 160 (empty -> .) ]
  ! IF              [ reduce using rule 160 (empty -> .) ]
  ! CASE            [ reduce using rule 160 (empty -> .) ]

    variable                       shift and go to state 60
    statement                      shift and go to state 292
    if_statement                   shift and go to state 49
    assignment_statement           shift and go to state 50
    while_statement                shift and go to state 51
    procedure_call                 shift and go to state 52
    compound_statement             shift and go to state 53
    for_statement                  shift and go to state 54
    case_statement                 shift and go to state 55
    with_statement                 shift and go to state 56
    repeat_statement               shift and go to state 57
    empty                          shift and go to state 58

state 223

    (173) repeat_statement -> REPEAT statement_list UNTIL . expression SEMICOLON
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    expression                     shift and go to state 293
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 224

    (176) constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .

    ID              reduce using rule 176 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    USES            reduce using rule 176 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    CONST           reduce using rule 176 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    TYPE            reduce using rule 176 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    VAR             reduce using rule 176 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    FUNCTION        reduce using rule 176 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    CONSTRUCTOR     reduce using rule 176 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    PROCEDURE       reduce using rule 176 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    DESTRUCTOR      reduce using rule 176 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    BEGIN           reduce using rule 176 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)


state 225

    (177) constant -> ID EQUAL NUMBER SEMICOLON .

    ID              reduce using rule 177 (constant -> ID EQUAL NUMBER SEMICOLON .)
    USES            reduce using rule 177 (constant -> ID EQUAL NUMBER SEMICOLON .)
    CONST           reduce using rule 177 (constant -> ID EQUAL NUMBER SEMICOLON .)
    TYPE            reduce using rule 177 (constant -> ID EQUAL NUMBER SEMICOLON .)
    VAR             reduce using rule 177 (constant -> ID EQUAL NUMBER SEMICOLON .)
    FUNCTION        reduce using rule 177 (constant -> ID EQUAL NUMBER SEMICOLON .)
    CONSTRUCTOR     reduce using rule 177 (constant -> ID EQUAL NUMBER SEMICOLON .)
    PROCEDURE       reduce using rule 177 (constant -> ID EQUAL NUMBER SEMICOLON .)
    DESTRUCTOR      reduce using rule 177 (constant -> ID EQUAL NUMBER SEMICOLON .)
    BEGIN           reduce using rule 177 (constant -> ID EQUAL NUMBER SEMICOLON .)


state 226

    (178) constant -> ID EQUAL STRING_LITERAL SEMICOLON .

    ID              reduce using rule 178 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    USES            reduce using rule 178 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    CONST           reduce using rule 178 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    TYPE            reduce using rule 178 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    VAR             reduce using rule 178 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    FUNCTION        reduce using rule 178 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    CONSTRUCTOR     reduce using rule 178 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    PROCEDURE       reduce using rule 178 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    DESTRUCTOR      reduce using rule 178 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    BEGIN           reduce using rule 178 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)


state 227

    (179) constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .

    ID              reduce using rule 179 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    USES            reduce using rule 179 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    CONST           reduce using rule 179 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    TYPE            reduce using rule 179 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    VAR             reduce using rule 179 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    FUNCTION        reduce using rule 179 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    CONSTRUCTOR     reduce using rule 179 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    PROCEDURE       reduce using rule 179 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    DESTRUCTOR      reduce using rule 179 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    BEGIN           reduce using rule 179 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)


state 228

    (29) type_definition -> ID EQUAL type_specifier SEMICOLON .

    ID              reduce using rule 29 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    USES            reduce using rule 29 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    CONST           reduce using rule 29 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    TYPE            reduce using rule 29 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    VAR             reduce using rule 29 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 29 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    CONSTRUCTOR     reduce using rule 29 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 29 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    DESTRUCTOR      reduce using rule 29 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    BEGIN           reduce using rule 29 (type_definition -> ID EQUAL type_specifier SEMICOLON .)


state 229

    (30) type_specifier -> ARRAY LBRACKET . type_expression RBRACKET OF type_specifier
    (44) type_expression -> . type_expression COMMA subrange
    (45) type_expression -> . subrange
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    NUMBER          shift and go to state 142

    type_expression                shift and go to state 294
    subrange                       shift and go to state 295

state 230

    (32) type_specifier -> FILE OF . type_specifier
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (75) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 130
    FILE            shift and go to state 132
    SET             shift and go to state 133
    RECORD          shift and go to state 134
    OBJECT          shift and go to state 135
    LPAREN          shift and go to state 136
    BOOLEAN_LITERAL shift and go to state 137
    INTEGER         shift and go to state 138
    BYTE            shift and go to state 139
    CHAR            shift and go to state 140
    STRING          shift and go to state 141
    ID              shift and go to state 128
    LONGINT         shift and go to state 143
    NUMBER          shift and go to state 142

    type_specifier                 shift and go to state 296
    subrange                       shift and go to state 131

state 231

    (33) type_specifier -> SET OF . type_specifier
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (75) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 130
    FILE            shift and go to state 132
    SET             shift and go to state 133
    RECORD          shift and go to state 134
    OBJECT          shift and go to state 135
    LPAREN          shift and go to state 136
    BOOLEAN_LITERAL shift and go to state 137
    INTEGER         shift and go to state 138
    BYTE            shift and go to state 139
    CHAR            shift and go to state 140
    STRING          shift and go to state 141
    ID              shift and go to state 128
    LONGINT         shift and go to state 143
    NUMBER          shift and go to state 142

    type_specifier                 shift and go to state 297
    subrange                       shift and go to state 131

state 232

    (34) type_specifier -> RECORD field_list . case_part END
    (48) field_list -> field_list . field
    (59) case_part -> . CASE ID COLON type_specifier OF case_list SEMICOLON
    (60) case_part -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . if_statement
    (57) field -> . case_statement
    (58) field -> . assignment_statement
    (160) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (106) if_statement -> . IF expression THEN statement ELSE statement
    (107) if_statement -> . IF expression THEN statement
    (108) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (109) if_statement -> . IF expression IN statement THEN statement
    (72) case_statement -> . CASE expression OF case_list END SEMICOLON
    (73) case_statement -> . CASE expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> . CASE expression OF case_list END
    (112) assignment_statement -> . variable COLON_EQUAL expression
    (113) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (114) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (115) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (116) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (117) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (118) assignment_statement -> . ID COLON_EQUAL expression
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    CASE            shift and go to state 299
    VAR             shift and go to state 156
    END             reduce using rule 160 (empty -> .)
    ID              shift and go to state 150
    IF              shift and go to state 65

    case_part                      shift and go to state 298
    field                          shift and go to state 243
    empty                          shift and go to state 300
    id_list                        shift and go to state 155
    if_statement                   shift and go to state 157
    case_statement                 shift and go to state 158
    assignment_statement           shift and go to state 159
    variable                       shift and go to state 60

state 233

    (35) type_specifier -> OBJECT field_list . method_list END
    (48) field_list -> field_list . field
    (65) method_list -> . method_list method
    (66) method_list -> . method
    (67) method_list -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . if_statement
    (57) field -> . case_statement
    (58) field -> . assignment_statement
    (68) method -> . CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON
    (69) method -> . PROCEDURE ID LPAREN field_list RPAREN SEMICOLON
    (70) method -> . FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON
    (71) method -> . DESTRUCTOR ID SEMICOLON
    (160) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (106) if_statement -> . IF expression THEN statement ELSE statement
    (107) if_statement -> . IF expression THEN statement
    (108) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (109) if_statement -> . IF expression IN statement THEN statement
    (72) case_statement -> . CASE expression OF case_list END SEMICOLON
    (73) case_statement -> . CASE expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> . CASE expression OF case_list END
    (112) assignment_statement -> . variable COLON_EQUAL expression
    (113) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (114) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (115) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (116) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (117) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (118) assignment_statement -> . ID COLON_EQUAL expression
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for PROCEDURE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DESTRUCTOR resolved as shift
    VAR             shift and go to state 156
    CONSTRUCTOR     shift and go to state 304
    PROCEDURE       shift and go to state 305
    FUNCTION        shift and go to state 306
    DESTRUCTOR      shift and go to state 307
    END             reduce using rule 160 (empty -> .)
    ID              shift and go to state 150
    IF              shift and go to state 65
    CASE            shift and go to state 68

  ! CONSTRUCTOR     [ reduce using rule 160 (empty -> .) ]
  ! PROCEDURE       [ reduce using rule 160 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 160 (empty -> .) ]
  ! DESTRUCTOR      [ reduce using rule 160 (empty -> .) ]

    method_list                    shift and go to state 301
    field                          shift and go to state 243
    method                         shift and go to state 302
    empty                          shift and go to state 303
    id_list                        shift and go to state 155
    if_statement                   shift and go to state 157
    case_statement                 shift and go to state 158
    assignment_statement           shift and go to state 159
    variable                       shift and go to state 60

state 234

    (36) type_specifier -> LPAREN id_list . RPAREN
    (20) id_list -> id_list . COMMA ID

    RPAREN          shift and go to state 308
    COMMA           shift and go to state 73


state 235

    (42) type_specifier -> STRING LBRACKET . NUMBER RBRACKET

    NUMBER          shift and go to state 309


state 236

    (46) subrange -> NUMBER DOTDOT . NUMBER
    (47) subrange -> NUMBER DOTDOT . ID

    NUMBER          shift and go to state 310
    ID              shift and go to state 311


state 237

    (24) declaration -> id_list COLON type_specifier SEMICOLON .

    ID              reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    USES            reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    CONST           reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    TYPE            reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    VAR             reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    CONSTRUCTOR     reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    DESTRUCTOR      reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)
    BEGIN           reduce using rule 24 (declaration -> id_list COLON type_specifier SEMICOLON .)


state 238

    (91) parameter -> ID COLON . type_specifier
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (75) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 130
    FILE            shift and go to state 132
    SET             shift and go to state 133
    RECORD          shift and go to state 134
    OBJECT          shift and go to state 135
    LPAREN          shift and go to state 136
    BOOLEAN_LITERAL shift and go to state 137
    INTEGER         shift and go to state 138
    BYTE            shift and go to state 139
    CHAR            shift and go to state 140
    STRING          shift and go to state 141
    ID              shift and go to state 128
    LONGINT         shift and go to state 143
    NUMBER          shift and go to state 142

    type_specifier                 shift and go to state 312
    subrange                       shift and go to state 131

state 239

    (84) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN . COLON type_specifier SEMICOLON block SEMICOLON
    (85) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN . COLON type_specifier SEMICOLON FORWARD SEMICOLON

    COLON           shift and go to state 313


state 240

    (89) parameter_list -> parameter_list SEMICOLON . parameter
    (91) parameter -> . ID COLON type_specifier

    ID              shift and go to state 145

    parameter                      shift and go to state 314

state 241

    (14) method_declaration -> FUNCTION ID DOT ID LPAREN . parameter_list RPAREN COLON type_specifier SEMICOLON block
    (88) parameter_list -> . parameter
    (89) parameter_list -> . parameter_list SEMICOLON parameter
    (90) parameter_list -> . empty
    (91) parameter -> . ID COLON type_specifier
    (160) empty -> .

    ID              shift and go to state 145
    RPAREN          reduce using rule 160 (empty -> .)
    SEMICOLON       reduce using rule 160 (empty -> .)

    parameter_list                 shift and go to state 315
    parameter                      shift and go to state 147
    empty                          shift and go to state 148

state 242

    (16) constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN . SEMICOLON block

    SEMICOLON       shift and go to state 316


state 243

    (48) field_list -> field_list field .

    RPAREN          reduce using rule 48 (field_list -> field_list field .)
    VAR             reduce using rule 48 (field_list -> field_list field .)
    ID              reduce using rule 48 (field_list -> field_list field .)
    IF              reduce using rule 48 (field_list -> field_list field .)
    CASE            reduce using rule 48 (field_list -> field_list field .)
    END             reduce using rule 48 (field_list -> field_list field .)
    CONSTRUCTOR     reduce using rule 48 (field_list -> field_list field .)
    PROCEDURE       reduce using rule 48 (field_list -> field_list field .)
    FUNCTION        reduce using rule 48 (field_list -> field_list field .)
    DESTRUCTOR      reduce using rule 48 (field_list -> field_list field .)
    ELSE            reduce using rule 48 (field_list -> field_list field .)
    SEMICOLON       reduce using rule 48 (field_list -> field_list field .)


state 244

    (17) constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON . block
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (160) empty -> .

    BEGIN           reduce using rule 160 (empty -> .)
    USES            reduce using rule 160 (empty -> .)
    CONST           reduce using rule 160 (empty -> .)
    TYPE            reduce using rule 160 (empty -> .)
    VAR             reduce using rule 160 (empty -> .)
    FUNCTION        reduce using rule 160 (empty -> .)
    CONSTRUCTOR     reduce using rule 160 (empty -> .)
    PROCEDURE       reduce using rule 160 (empty -> .)
    DESTRUCTOR      reduce using rule 160 (empty -> .)

    block                          shift and go to state 317
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 245

    (51) field -> id_list COLON . type_specifier
    (52) field -> id_list COLON . type_specifier SEMICOLON
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (75) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 130
    FILE            shift and go to state 132
    SET             shift and go to state 133
    RECORD          shift and go to state 134
    OBJECT          shift and go to state 135
    LPAREN          shift and go to state 136
    BOOLEAN_LITERAL shift and go to state 137
    INTEGER         shift and go to state 138
    BYTE            shift and go to state 139
    CHAR            shift and go to state 140
    STRING          shift and go to state 141
    ID              shift and go to state 128
    LONGINT         shift and go to state 143
    NUMBER          shift and go to state 142

    type_specifier                 shift and go to state 318
    subrange                       shift and go to state 131

state 246

    (55) field -> id_list LPAREN . STRING_LITERAL RPAREN

    STRING_LITERAL  shift and go to state 319


state 247

    (53) field -> VAR id_list . COLON type_specifier
    (54) field -> VAR id_list . COLON type_specifier SEMICOLON
    (20) id_list -> id_list . COMMA ID

    COLON           shift and go to state 320
    COMMA           shift and go to state 73


state 248

    (12) method_declaration -> CONSTRUCTOR ID DOT ID LPAREN . parameter_list RPAREN SEMICOLON block
    (88) parameter_list -> . parameter
    (89) parameter_list -> . parameter_list SEMICOLON parameter
    (90) parameter_list -> . empty
    (91) parameter -> . ID COLON type_specifier
    (160) empty -> .

    ID              shift and go to state 145
    RPAREN          reduce using rule 160 (empty -> .)
    SEMICOLON       reduce using rule 160 (empty -> .)

    parameter_list                 shift and go to state 321
    parameter                      shift and go to state 147
    empty                          shift and go to state 148

state 249

    (13) method_declaration -> PROCEDURE ID DOT ID LPAREN . parameter_list RPAREN SEMICOLON block
    (88) parameter_list -> . parameter
    (89) parameter_list -> . parameter_list SEMICOLON parameter
    (90) parameter_list -> . empty
    (91) parameter -> . ID COLON type_specifier
    (160) empty -> .

    ID              shift and go to state 145
    RPAREN          reduce using rule 160 (empty -> .)
    SEMICOLON       reduce using rule 160 (empty -> .)

    parameter_list                 shift and go to state 322
    parameter                      shift and go to state 147
    empty                          shift and go to state 148

state 250

    (78) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN . SEMICOLON block SEMICOLON
    (81) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN . SEMICOLON FORWARD SEMICOLON

    SEMICOLON       shift and go to state 323


state 251

    (79) procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON . block SEMICOLON
    (82) procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON . FORWARD SEMICOLON
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (160) empty -> .

    FORWARD         shift and go to state 325
    BEGIN           reduce using rule 160 (empty -> .)
    USES            reduce using rule 160 (empty -> .)
    CONST           reduce using rule 160 (empty -> .)
    TYPE            reduce using rule 160 (empty -> .)
    VAR             reduce using rule 160 (empty -> .)
    FUNCTION        reduce using rule 160 (empty -> .)
    CONSTRUCTOR     reduce using rule 160 (empty -> .)
    PROCEDURE       reduce using rule 160 (empty -> .)
    DESTRUCTOR      reduce using rule 160 (empty -> .)

    block                          shift and go to state 324
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 252

    (80) procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .

    PROCEDURE       reduce using rule 80 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    USES            reduce using rule 80 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    CONST           reduce using rule 80 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    TYPE            reduce using rule 80 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    VAR             reduce using rule 80 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 80 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    CONSTRUCTOR     reduce using rule 80 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    DESTRUCTOR      reduce using rule 80 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    BEGIN           reduce using rule 80 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)


state 253

    (83) procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .

    PROCEDURE       reduce using rule 83 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)
    USES            reduce using rule 83 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)
    CONST           reduce using rule 83 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)
    TYPE            reduce using rule 83 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)
    VAR             reduce using rule 83 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)
    FUNCTION        reduce using rule 83 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)
    CONSTRUCTOR     reduce using rule 83 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)
    DESTRUCTOR      reduce using rule 83 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)
    BEGIN           reduce using rule 83 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)


state 254

    (15) method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON . block
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (160) empty -> .

    BEGIN           reduce using rule 160 (empty -> .)
    USES            reduce using rule 160 (empty -> .)
    CONST           reduce using rule 160 (empty -> .)
    TYPE            reduce using rule 160 (empty -> .)
    VAR             reduce using rule 160 (empty -> .)
    FUNCTION        reduce using rule 160 (empty -> .)
    CONSTRUCTOR     reduce using rule 160 (empty -> .)
    PROCEDURE       reduce using rule 160 (empty -> .)
    DESTRUCTOR      reduce using rule 160 (empty -> .)

    block                          shift and go to state 326
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 255

    (162) statement -> READLN LPAREN variable RPAREN .

    SEMICOLON       reduce using rule 162 (statement -> READLN LPAREN variable RPAREN .)
    ELSE            reduce using rule 162 (statement -> READLN LPAREN variable RPAREN .)
    RPAREN          reduce using rule 162 (statement -> READLN LPAREN variable RPAREN .)
    VAR             reduce using rule 162 (statement -> READLN LPAREN variable RPAREN .)
    ID              reduce using rule 162 (statement -> READLN LPAREN variable RPAREN .)
    IF              reduce using rule 162 (statement -> READLN LPAREN variable RPAREN .)
    CASE            reduce using rule 162 (statement -> READLN LPAREN variable RPAREN .)
    END             reduce using rule 162 (statement -> READLN LPAREN variable RPAREN .)
    CONSTRUCTOR     reduce using rule 162 (statement -> READLN LPAREN variable RPAREN .)
    PROCEDURE       reduce using rule 162 (statement -> READLN LPAREN variable RPAREN .)
    FUNCTION        reduce using rule 162 (statement -> READLN LPAREN variable RPAREN .)
    DESTRUCTOR      reduce using rule 162 (statement -> READLN LPAREN variable RPAREN .)
    THEN            reduce using rule 162 (statement -> READLN LPAREN variable RPAREN .)


state 256

    (163) statement -> READLN LBRACKET variable RBRACKET .

    SEMICOLON       reduce using rule 163 (statement -> READLN LBRACKET variable RBRACKET .)
    ELSE            reduce using rule 163 (statement -> READLN LBRACKET variable RBRACKET .)
    RPAREN          reduce using rule 163 (statement -> READLN LBRACKET variable RBRACKET .)
    VAR             reduce using rule 163 (statement -> READLN LBRACKET variable RBRACKET .)
    ID              reduce using rule 163 (statement -> READLN LBRACKET variable RBRACKET .)
    IF              reduce using rule 163 (statement -> READLN LBRACKET variable RBRACKET .)
    CASE            reduce using rule 163 (statement -> READLN LBRACKET variable RBRACKET .)
    END             reduce using rule 163 (statement -> READLN LBRACKET variable RBRACKET .)
    CONSTRUCTOR     reduce using rule 163 (statement -> READLN LBRACKET variable RBRACKET .)
    PROCEDURE       reduce using rule 163 (statement -> READLN LBRACKET variable RBRACKET .)
    FUNCTION        reduce using rule 163 (statement -> READLN LBRACKET variable RBRACKET .)
    DESTRUCTOR      reduce using rule 163 (statement -> READLN LBRACKET variable RBRACKET .)
    THEN            reduce using rule 163 (statement -> READLN LBRACKET variable RBRACKET .)


state 257

    (113) assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .

    SEMICOLON       reduce using rule 113 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    RPAREN          reduce using rule 113 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    VAR             reduce using rule 113 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    ID              reduce using rule 113 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    IF              reduce using rule 113 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    CASE            reduce using rule 113 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    END             reduce using rule 113 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    CONSTRUCTOR     reduce using rule 113 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    PROCEDURE       reduce using rule 113 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    FUNCTION        reduce using rule 113 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    DESTRUCTOR      reduce using rule 113 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    ELSE            reduce using rule 113 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)
    THEN            reduce using rule 113 (assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON .)


state 258

    (114) assignment_statement -> variable PLUS COLON_EQUAL expression .
    (145) expression -> expression . PLUS expression
    (146) expression -> expression . MINUS expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (180) expression -> expression . AND expression
    (181) expression -> expression . OR expression

    SEMICOLON       reduce using rule 114 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    RPAREN          reduce using rule 114 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    VAR             reduce using rule 114 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    ID              reduce using rule 114 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    IF              reduce using rule 114 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    CASE            reduce using rule 114 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    END             reduce using rule 114 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    CONSTRUCTOR     reduce using rule 114 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    PROCEDURE       reduce using rule 114 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    FUNCTION        reduce using rule 114 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    DESTRUCTOR      reduce using rule 114 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    ELSE            reduce using rule 114 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    THEN            reduce using rule 114 (assignment_statement -> variable PLUS COLON_EQUAL expression .)
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 195
    AND             shift and go to state 196
    OR              shift and go to state 197


state 259

    (115) assignment_statement -> variable MINUS COLON_EQUAL expression .
    (145) expression -> expression . PLUS expression
    (146) expression -> expression . MINUS expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (180) expression -> expression . AND expression
    (181) expression -> expression . OR expression

    SEMICOLON       reduce using rule 115 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    RPAREN          reduce using rule 115 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    VAR             reduce using rule 115 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    ID              reduce using rule 115 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    IF              reduce using rule 115 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    CASE            reduce using rule 115 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    END             reduce using rule 115 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    CONSTRUCTOR     reduce using rule 115 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    PROCEDURE       reduce using rule 115 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    FUNCTION        reduce using rule 115 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    DESTRUCTOR      reduce using rule 115 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    ELSE            reduce using rule 115 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    THEN            reduce using rule 115 (assignment_statement -> variable MINUS COLON_EQUAL expression .)
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 195
    AND             shift and go to state 196
    OR              shift and go to state 197


state 260

    (116) assignment_statement -> variable TIMES COLON_EQUAL expression .
    (145) expression -> expression . PLUS expression
    (146) expression -> expression . MINUS expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (180) expression -> expression . AND expression
    (181) expression -> expression . OR expression

    SEMICOLON       reduce using rule 116 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    RPAREN          reduce using rule 116 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    VAR             reduce using rule 116 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    ID              reduce using rule 116 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    IF              reduce using rule 116 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    CASE            reduce using rule 116 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    END             reduce using rule 116 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    CONSTRUCTOR     reduce using rule 116 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    PROCEDURE       reduce using rule 116 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    FUNCTION        reduce using rule 116 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    DESTRUCTOR      reduce using rule 116 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    ELSE            reduce using rule 116 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    THEN            reduce using rule 116 (assignment_statement -> variable TIMES COLON_EQUAL expression .)
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 195
    AND             shift and go to state 196
    OR              shift and go to state 197


state 261

    (117) assignment_statement -> variable DIVIDE COLON_EQUAL expression .
    (145) expression -> expression . PLUS expression
    (146) expression -> expression . MINUS expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (180) expression -> expression . AND expression
    (181) expression -> expression . OR expression

    SEMICOLON       reduce using rule 117 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    RPAREN          reduce using rule 117 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    VAR             reduce using rule 117 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    ID              reduce using rule 117 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    IF              reduce using rule 117 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    CASE            reduce using rule 117 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    END             reduce using rule 117 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    CONSTRUCTOR     reduce using rule 117 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    PROCEDURE       reduce using rule 117 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    FUNCTION        reduce using rule 117 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    DESTRUCTOR      reduce using rule 117 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    ELSE            reduce using rule 117 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    THEN            reduce using rule 117 (assignment_statement -> variable DIVIDE COLON_EQUAL expression .)
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 195
    AND             shift and go to state 196
    OR              shift and go to state 197


state 262

    (120) variable -> variable LBRACKET expression RBRACKET .

    COLON_EQUAL     reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    DOT             reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    DIV             reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    LESS            reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    LESS_EQUAL      reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    GREAT           reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    GREAT_EQUAL     reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    DIFFERENT       reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    THEN            reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    IN              reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    MOD             reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    AND             reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    OR              reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    DO              reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    OF              reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    VAR             reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    ID              reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    IF              reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    CASE            reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    END             reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    CONSTRUCTOR     reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    PROCEDURE       reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    FUNCTION        reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    DESTRUCTOR      reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    COLON           reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    TO              reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)
    DOWNTO          reduce using rule 120 (variable -> variable LBRACKET expression RBRACKET .)


state 263

    (164) statement -> WRITE LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 164 (statement -> WRITE LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 164 (statement -> WRITE LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 164 (statement -> WRITE LPAREN expression_list RPAREN .)
    VAR             reduce using rule 164 (statement -> WRITE LPAREN expression_list RPAREN .)
    ID              reduce using rule 164 (statement -> WRITE LPAREN expression_list RPAREN .)
    IF              reduce using rule 164 (statement -> WRITE LPAREN expression_list RPAREN .)
    CASE            reduce using rule 164 (statement -> WRITE LPAREN expression_list RPAREN .)
    END             reduce using rule 164 (statement -> WRITE LPAREN expression_list RPAREN .)
    CONSTRUCTOR     reduce using rule 164 (statement -> WRITE LPAREN expression_list RPAREN .)
    PROCEDURE       reduce using rule 164 (statement -> WRITE LPAREN expression_list RPAREN .)
    FUNCTION        reduce using rule 164 (statement -> WRITE LPAREN expression_list RPAREN .)
    DESTRUCTOR      reduce using rule 164 (statement -> WRITE LPAREN expression_list RPAREN .)
    THEN            reduce using rule 164 (statement -> WRITE LPAREN expression_list RPAREN .)


state 264

    (128) expression_list -> expression expression_list_tail .

    RPAREN          reduce using rule 128 (expression_list -> expression expression_list_tail .)


state 265

    (129) expression_list_tail -> COMMA . expression expression_list_tail
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    expression                     shift and go to state 327
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 266

    (130) expression_list_tail -> empty .

    RPAREN          reduce using rule 130 (expression_list_tail -> empty .)


state 267

    (165) statement -> WRITELN LPAREN write_arguments RPAREN .

    SEMICOLON       reduce using rule 165 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    ELSE            reduce using rule 165 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    RPAREN          reduce using rule 165 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    VAR             reduce using rule 165 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    ID              reduce using rule 165 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    IF              reduce using rule 165 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    CASE            reduce using rule 165 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    END             reduce using rule 165 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    CONSTRUCTOR     reduce using rule 165 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    PROCEDURE       reduce using rule 165 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    FUNCTION        reduce using rule 165 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    DESTRUCTOR      reduce using rule 165 (statement -> WRITELN LPAREN write_arguments RPAREN .)
    THEN            reduce using rule 165 (statement -> WRITELN LPAREN write_arguments RPAREN .)


state 268

    (167) write_arguments -> write_arguments COMMA . write_argument
    (168) write_argument -> . expression
    (169) write_argument -> . expression COLON expression
    (170) write_argument -> . expression COLON expression COLON expression
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    write_argument                 shift and go to state 328
    expression                     shift and go to state 183
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 269

    (169) write_argument -> expression COLON . expression
    (170) write_argument -> expression COLON . expression COLON expression
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    expression                     shift and go to state 329
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 270

    (126) procedure_call -> ID LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 126 (procedure_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 126 (procedure_call -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 126 (procedure_call -> ID LPAREN expression_list RPAREN .)
    VAR             reduce using rule 126 (procedure_call -> ID LPAREN expression_list RPAREN .)
    ID              reduce using rule 126 (procedure_call -> ID LPAREN expression_list RPAREN .)
    IF              reduce using rule 126 (procedure_call -> ID LPAREN expression_list RPAREN .)
    CASE            reduce using rule 126 (procedure_call -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 126 (procedure_call -> ID LPAREN expression_list RPAREN .)
    CONSTRUCTOR     reduce using rule 126 (procedure_call -> ID LPAREN expression_list RPAREN .)
    PROCEDURE       reduce using rule 126 (procedure_call -> ID LPAREN expression_list RPAREN .)
    FUNCTION        reduce using rule 126 (procedure_call -> ID LPAREN expression_list RPAREN .)
    DESTRUCTOR      reduce using rule 126 (procedure_call -> ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 126 (procedure_call -> ID LPAREN expression_list RPAREN .)


state 271

    (122) variable -> ID LBRACKET index_list RBRACKET .

    COLON_EQUAL     reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    PLUS            reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    MINUS           reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    TIMES           reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    DIVIDE          reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    LBRACKET        reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    DOT             reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    DIV             reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    LESS            reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    LESS_EQUAL      reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    GREAT           reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    GREAT_EQUAL     reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    EQUAL           reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    DIFFERENT       reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    THEN            reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    IN              reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    MOD             reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    AND             reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    OR              reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    DO              reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    OF              reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    RPAREN          reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    RBRACKET        reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    SEMICOLON       reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    VAR             reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    ID              reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    IF              reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    CASE            reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    END             reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    CONSTRUCTOR     reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    PROCEDURE       reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    FUNCTION        reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    DESTRUCTOR      reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    ELSE            reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    COMMA           reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    COLON           reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    TO              reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)
    DOWNTO          reduce using rule 122 (variable -> ID LBRACKET index_list RBRACKET .)


state 272

    (124) index_list -> index_list COMMA . expression
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    expression                     shift and go to state 330
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 273

    (106) if_statement -> IF expression THEN statement . ELSE statement
    (107) if_statement -> IF expression THEN statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 331
    SEMICOLON       reduce using rule 107 (if_statement -> IF expression THEN statement .)
    RPAREN          reduce using rule 107 (if_statement -> IF expression THEN statement .)
    VAR             reduce using rule 107 (if_statement -> IF expression THEN statement .)
    ID              reduce using rule 107 (if_statement -> IF expression THEN statement .)
    IF              reduce using rule 107 (if_statement -> IF expression THEN statement .)
    CASE            reduce using rule 107 (if_statement -> IF expression THEN statement .)
    END             reduce using rule 107 (if_statement -> IF expression THEN statement .)
    CONSTRUCTOR     reduce using rule 107 (if_statement -> IF expression THEN statement .)
    PROCEDURE       reduce using rule 107 (if_statement -> IF expression THEN statement .)
    FUNCTION        reduce using rule 107 (if_statement -> IF expression THEN statement .)
    DESTRUCTOR      reduce using rule 107 (if_statement -> IF expression THEN statement .)
    THEN            reduce using rule 107 (if_statement -> IF expression THEN statement .)

  ! ELSE            [ reduce using rule 107 (if_statement -> IF expression THEN statement .) ]


state 274

    (108) if_statement -> IF expression IN statement . THEN statement ELSE statement
    (109) if_statement -> IF expression IN statement . THEN statement

    THEN            shift and go to state 332


state 275

    (145) expression -> expression PLUS expression .
    (145) expression -> expression . PLUS expression
    (146) expression -> expression . MINUS expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (180) expression -> expression . AND expression
    (181) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 145 (expression -> expression PLUS expression .)
    IN              reduce using rule 145 (expression -> expression PLUS expression .)
    DO              reduce using rule 145 (expression -> expression PLUS expression .)
    OF              reduce using rule 145 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 145 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 145 (expression -> expression PLUS expression .)
    VAR             reduce using rule 145 (expression -> expression PLUS expression .)
    ID              reduce using rule 145 (expression -> expression PLUS expression .)
    IF              reduce using rule 145 (expression -> expression PLUS expression .)
    CASE            reduce using rule 145 (expression -> expression PLUS expression .)
    END             reduce using rule 145 (expression -> expression PLUS expression .)
    CONSTRUCTOR     reduce using rule 145 (expression -> expression PLUS expression .)
    PROCEDURE       reduce using rule 145 (expression -> expression PLUS expression .)
    FUNCTION        reduce using rule 145 (expression -> expression PLUS expression .)
    DESTRUCTOR      reduce using rule 145 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 145 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 145 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 145 (expression -> expression PLUS expression .)
    COLON           reduce using rule 145 (expression -> expression PLUS expression .)
    TO              reduce using rule 145 (expression -> expression PLUS expression .)
    DOWNTO          reduce using rule 145 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 195
    AND             shift and go to state 196
    OR              shift and go to state 197

  ! PLUS            [ reduce using rule 145 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 145 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 145 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 145 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 145 (expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 145 (expression -> expression PLUS expression .) ]
  ! OR              [ reduce using rule 145 (expression -> expression PLUS expression .) ]


state 276

    (146) expression -> expression MINUS expression .
    (145) expression -> expression . PLUS expression
    (146) expression -> expression . MINUS expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (180) expression -> expression . AND expression
    (181) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 146 (expression -> expression MINUS expression .)
    IN              reduce using rule 146 (expression -> expression MINUS expression .)
    DO              reduce using rule 146 (expression -> expression MINUS expression .)
    OF              reduce using rule 146 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 146 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 146 (expression -> expression MINUS expression .)
    VAR             reduce using rule 146 (expression -> expression MINUS expression .)
    ID              reduce using rule 146 (expression -> expression MINUS expression .)
    IF              reduce using rule 146 (expression -> expression MINUS expression .)
    CASE            reduce using rule 146 (expression -> expression MINUS expression .)
    END             reduce using rule 146 (expression -> expression MINUS expression .)
    CONSTRUCTOR     reduce using rule 146 (expression -> expression MINUS expression .)
    PROCEDURE       reduce using rule 146 (expression -> expression MINUS expression .)
    FUNCTION        reduce using rule 146 (expression -> expression MINUS expression .)
    DESTRUCTOR      reduce using rule 146 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 146 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 146 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 146 (expression -> expression MINUS expression .)
    COLON           reduce using rule 146 (expression -> expression MINUS expression .)
    TO              reduce using rule 146 (expression -> expression MINUS expression .)
    DOWNTO          reduce using rule 146 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 195
    AND             shift and go to state 196
    OR              shift and go to state 197

  ! PLUS            [ reduce using rule 146 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 146 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 146 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 146 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 146 (expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 146 (expression -> expression MINUS expression .) ]
  ! OR              [ reduce using rule 146 (expression -> expression MINUS expression .) ]


state 277

    (147) expression -> expression TIMES expression .
    (145) expression -> expression . PLUS expression
    (146) expression -> expression . MINUS expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (180) expression -> expression . AND expression
    (181) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 147 (expression -> expression TIMES expression .)
    IN              reduce using rule 147 (expression -> expression TIMES expression .)
    DO              reduce using rule 147 (expression -> expression TIMES expression .)
    OF              reduce using rule 147 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 147 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 147 (expression -> expression TIMES expression .)
    VAR             reduce using rule 147 (expression -> expression TIMES expression .)
    ID              reduce using rule 147 (expression -> expression TIMES expression .)
    IF              reduce using rule 147 (expression -> expression TIMES expression .)
    CASE            reduce using rule 147 (expression -> expression TIMES expression .)
    END             reduce using rule 147 (expression -> expression TIMES expression .)
    CONSTRUCTOR     reduce using rule 147 (expression -> expression TIMES expression .)
    PROCEDURE       reduce using rule 147 (expression -> expression TIMES expression .)
    FUNCTION        reduce using rule 147 (expression -> expression TIMES expression .)
    DESTRUCTOR      reduce using rule 147 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 147 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 147 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 147 (expression -> expression TIMES expression .)
    COLON           reduce using rule 147 (expression -> expression TIMES expression .)
    TO              reduce using rule 147 (expression -> expression TIMES expression .)
    DOWNTO          reduce using rule 147 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 195
    AND             shift and go to state 196
    OR              shift and go to state 197

  ! PLUS            [ reduce using rule 147 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 147 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 147 (expression -> expression TIMES expression .) ]
  ! DIVIDE          [ reduce using rule 147 (expression -> expression TIMES expression .) ]
  ! MOD             [ reduce using rule 147 (expression -> expression TIMES expression .) ]
  ! AND             [ reduce using rule 147 (expression -> expression TIMES expression .) ]
  ! OR              [ reduce using rule 147 (expression -> expression TIMES expression .) ]


state 278

    (148) expression -> expression DIVIDE expression .
    (145) expression -> expression . PLUS expression
    (146) expression -> expression . MINUS expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (180) expression -> expression . AND expression
    (181) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 148 (expression -> expression DIVIDE expression .)
    IN              reduce using rule 148 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 148 (expression -> expression DIVIDE expression .)
    OF              reduce using rule 148 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 148 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 148 (expression -> expression DIVIDE expression .)
    VAR             reduce using rule 148 (expression -> expression DIVIDE expression .)
    ID              reduce using rule 148 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 148 (expression -> expression DIVIDE expression .)
    CASE            reduce using rule 148 (expression -> expression DIVIDE expression .)
    END             reduce using rule 148 (expression -> expression DIVIDE expression .)
    CONSTRUCTOR     reduce using rule 148 (expression -> expression DIVIDE expression .)
    PROCEDURE       reduce using rule 148 (expression -> expression DIVIDE expression .)
    FUNCTION        reduce using rule 148 (expression -> expression DIVIDE expression .)
    DESTRUCTOR      reduce using rule 148 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 148 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 148 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 148 (expression -> expression DIVIDE expression .)
    COLON           reduce using rule 148 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 148 (expression -> expression DIVIDE expression .)
    DOWNTO          reduce using rule 148 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 195
    AND             shift and go to state 196
    OR              shift and go to state 197

  ! PLUS            [ reduce using rule 148 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 148 (expression -> expression DIVIDE expression .) ]
  ! TIMES           [ reduce using rule 148 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 148 (expression -> expression DIVIDE expression .) ]
  ! MOD             [ reduce using rule 148 (expression -> expression DIVIDE expression .) ]
  ! AND             [ reduce using rule 148 (expression -> expression DIVIDE expression .) ]
  ! OR              [ reduce using rule 148 (expression -> expression DIVIDE expression .) ]


state 279

    (149) expression -> expression MOD expression .
    (145) expression -> expression . PLUS expression
    (146) expression -> expression . MINUS expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (180) expression -> expression . AND expression
    (181) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 149 (expression -> expression MOD expression .)
    IN              reduce using rule 149 (expression -> expression MOD expression .)
    DO              reduce using rule 149 (expression -> expression MOD expression .)
    OF              reduce using rule 149 (expression -> expression MOD expression .)
    SEMICOLON       reduce using rule 149 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 149 (expression -> expression MOD expression .)
    VAR             reduce using rule 149 (expression -> expression MOD expression .)
    ID              reduce using rule 149 (expression -> expression MOD expression .)
    IF              reduce using rule 149 (expression -> expression MOD expression .)
    CASE            reduce using rule 149 (expression -> expression MOD expression .)
    END             reduce using rule 149 (expression -> expression MOD expression .)
    CONSTRUCTOR     reduce using rule 149 (expression -> expression MOD expression .)
    PROCEDURE       reduce using rule 149 (expression -> expression MOD expression .)
    FUNCTION        reduce using rule 149 (expression -> expression MOD expression .)
    DESTRUCTOR      reduce using rule 149 (expression -> expression MOD expression .)
    ELSE            reduce using rule 149 (expression -> expression MOD expression .)
    RBRACKET        reduce using rule 149 (expression -> expression MOD expression .)
    COMMA           reduce using rule 149 (expression -> expression MOD expression .)
    COLON           reduce using rule 149 (expression -> expression MOD expression .)
    TO              reduce using rule 149 (expression -> expression MOD expression .)
    DOWNTO          reduce using rule 149 (expression -> expression MOD expression .)
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 195
    AND             shift and go to state 196
    OR              shift and go to state 197

  ! PLUS            [ reduce using rule 149 (expression -> expression MOD expression .) ]
  ! MINUS           [ reduce using rule 149 (expression -> expression MOD expression .) ]
  ! TIMES           [ reduce using rule 149 (expression -> expression MOD expression .) ]
  ! DIVIDE          [ reduce using rule 149 (expression -> expression MOD expression .) ]
  ! MOD             [ reduce using rule 149 (expression -> expression MOD expression .) ]
  ! AND             [ reduce using rule 149 (expression -> expression MOD expression .) ]
  ! OR              [ reduce using rule 149 (expression -> expression MOD expression .) ]


state 280

    (180) expression -> expression AND expression .
    (145) expression -> expression . PLUS expression
    (146) expression -> expression . MINUS expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (180) expression -> expression . AND expression
    (181) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 180 (expression -> expression AND expression .)
    IN              reduce using rule 180 (expression -> expression AND expression .)
    DO              reduce using rule 180 (expression -> expression AND expression .)
    OF              reduce using rule 180 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 180 (expression -> expression AND expression .)
    RPAREN          reduce using rule 180 (expression -> expression AND expression .)
    VAR             reduce using rule 180 (expression -> expression AND expression .)
    ID              reduce using rule 180 (expression -> expression AND expression .)
    IF              reduce using rule 180 (expression -> expression AND expression .)
    CASE            reduce using rule 180 (expression -> expression AND expression .)
    END             reduce using rule 180 (expression -> expression AND expression .)
    CONSTRUCTOR     reduce using rule 180 (expression -> expression AND expression .)
    PROCEDURE       reduce using rule 180 (expression -> expression AND expression .)
    FUNCTION        reduce using rule 180 (expression -> expression AND expression .)
    DESTRUCTOR      reduce using rule 180 (expression -> expression AND expression .)
    ELSE            reduce using rule 180 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 180 (expression -> expression AND expression .)
    COMMA           reduce using rule 180 (expression -> expression AND expression .)
    COLON           reduce using rule 180 (expression -> expression AND expression .)
    TO              reduce using rule 180 (expression -> expression AND expression .)
    DOWNTO          reduce using rule 180 (expression -> expression AND expression .)
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 195
    AND             shift and go to state 196
    OR              shift and go to state 197

  ! PLUS            [ reduce using rule 180 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 180 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 180 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 180 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 180 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 180 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 180 (expression -> expression AND expression .) ]


state 281

    (181) expression -> expression OR expression .
    (145) expression -> expression . PLUS expression
    (146) expression -> expression . MINUS expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (180) expression -> expression . AND expression
    (181) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 181 (expression -> expression OR expression .)
    IN              reduce using rule 181 (expression -> expression OR expression .)
    DO              reduce using rule 181 (expression -> expression OR expression .)
    OF              reduce using rule 181 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 181 (expression -> expression OR expression .)
    RPAREN          reduce using rule 181 (expression -> expression OR expression .)
    VAR             reduce using rule 181 (expression -> expression OR expression .)
    ID              reduce using rule 181 (expression -> expression OR expression .)
    IF              reduce using rule 181 (expression -> expression OR expression .)
    CASE            reduce using rule 181 (expression -> expression OR expression .)
    END             reduce using rule 181 (expression -> expression OR expression .)
    CONSTRUCTOR     reduce using rule 181 (expression -> expression OR expression .)
    PROCEDURE       reduce using rule 181 (expression -> expression OR expression .)
    FUNCTION        reduce using rule 181 (expression -> expression OR expression .)
    DESTRUCTOR      reduce using rule 181 (expression -> expression OR expression .)
    ELSE            reduce using rule 181 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 181 (expression -> expression OR expression .)
    COMMA           reduce using rule 181 (expression -> expression OR expression .)
    COLON           reduce using rule 181 (expression -> expression OR expression .)
    TO              reduce using rule 181 (expression -> expression OR expression .)
    DOWNTO          reduce using rule 181 (expression -> expression OR expression .)
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 195
    AND             shift and go to state 196
    OR              shift and go to state 197

  ! PLUS            [ reduce using rule 181 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 181 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 181 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 181 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 181 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 181 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 181 (expression -> expression OR expression .) ]


state 282

    (132) expression -> simple_expression relop simple_expression .

    THEN            reduce using rule 132 (expression -> simple_expression relop simple_expression .)
    IN              reduce using rule 132 (expression -> simple_expression relop simple_expression .)
    PLUS            reduce using rule 132 (expression -> simple_expression relop simple_expression .)
    MINUS           reduce using rule 132 (expression -> simple_expression relop simple_expression .)
    TIMES           reduce using rule 132 (expression -> simple_expression relop simple_expression .)
    DIVIDE          reduce using rule 132 (expression -> simple_expression relop simple_expression .)
    MOD             reduce using rule 132 (expression -> simple_expression relop simple_expression .)
    AND             reduce using rule 132 (expression -> simple_expression relop simple_expression .)
    OR              reduce using rule 132 (expression -> simple_expression relop simple_expression .)
    DO              reduce using rule 132 (expression -> simple_expression relop simple_expression .)
    OF              reduce using rule 132 (expression -> simple_expression relop simple_expression .)
    SEMICOLON       reduce using rule 132 (expression -> simple_expression relop simple_expression .)
    RPAREN          reduce using rule 132 (expression -> simple_expression relop simple_expression .)
    VAR             reduce using rule 132 (expression -> simple_expression relop simple_expression .)
    ID              reduce using rule 132 (expression -> simple_expression relop simple_expression .)
    IF              reduce using rule 132 (expression -> simple_expression relop simple_expression .)
    CASE            reduce using rule 132 (expression -> simple_expression relop simple_expression .)
    END             reduce using rule 132 (expression -> simple_expression relop simple_expression .)
    CONSTRUCTOR     reduce using rule 132 (expression -> simple_expression relop simple_expression .)
    PROCEDURE       reduce using rule 132 (expression -> simple_expression relop simple_expression .)
    FUNCTION        reduce using rule 132 (expression -> simple_expression relop simple_expression .)
    DESTRUCTOR      reduce using rule 132 (expression -> simple_expression relop simple_expression .)
    ELSE            reduce using rule 132 (expression -> simple_expression relop simple_expression .)
    RBRACKET        reduce using rule 132 (expression -> simple_expression relop simple_expression .)
    COMMA           reduce using rule 132 (expression -> simple_expression relop simple_expression .)
    COLON           reduce using rule 132 (expression -> simple_expression relop simple_expression .)
    TO              reduce using rule 132 (expression -> simple_expression relop simple_expression .)
    DOWNTO          reduce using rule 132 (expression -> simple_expression relop simple_expression .)


state 283

    (135) simple_expression_tail -> addop term .

    LESS            reduce using rule 135 (simple_expression_tail -> addop term .)
    LESS_EQUAL      reduce using rule 135 (simple_expression_tail -> addop term .)
    GREAT           reduce using rule 135 (simple_expression_tail -> addop term .)
    GREAT_EQUAL     reduce using rule 135 (simple_expression_tail -> addop term .)
    EQUAL           reduce using rule 135 (simple_expression_tail -> addop term .)
    DIFFERENT       reduce using rule 135 (simple_expression_tail -> addop term .)
    THEN            reduce using rule 135 (simple_expression_tail -> addop term .)
    IN              reduce using rule 135 (simple_expression_tail -> addop term .)
    PLUS            reduce using rule 135 (simple_expression_tail -> addop term .)
    MINUS           reduce using rule 135 (simple_expression_tail -> addop term .)
    TIMES           reduce using rule 135 (simple_expression_tail -> addop term .)
    DIVIDE          reduce using rule 135 (simple_expression_tail -> addop term .)
    MOD             reduce using rule 135 (simple_expression_tail -> addop term .)
    AND             reduce using rule 135 (simple_expression_tail -> addop term .)
    OR              reduce using rule 135 (simple_expression_tail -> addop term .)
    DO              reduce using rule 135 (simple_expression_tail -> addop term .)
    OF              reduce using rule 135 (simple_expression_tail -> addop term .)
    SEMICOLON       reduce using rule 135 (simple_expression_tail -> addop term .)
    RPAREN          reduce using rule 135 (simple_expression_tail -> addop term .)
    VAR             reduce using rule 135 (simple_expression_tail -> addop term .)
    ID              reduce using rule 135 (simple_expression_tail -> addop term .)
    IF              reduce using rule 135 (simple_expression_tail -> addop term .)
    CASE            reduce using rule 135 (simple_expression_tail -> addop term .)
    END             reduce using rule 135 (simple_expression_tail -> addop term .)
    CONSTRUCTOR     reduce using rule 135 (simple_expression_tail -> addop term .)
    PROCEDURE       reduce using rule 135 (simple_expression_tail -> addop term .)
    FUNCTION        reduce using rule 135 (simple_expression_tail -> addop term .)
    DESTRUCTOR      reduce using rule 135 (simple_expression_tail -> addop term .)
    ELSE            reduce using rule 135 (simple_expression_tail -> addop term .)
    RBRACKET        reduce using rule 135 (simple_expression_tail -> addop term .)
    COMMA           reduce using rule 135 (simple_expression_tail -> addop term .)
    COLON           reduce using rule 135 (simple_expression_tail -> addop term .)
    TO              reduce using rule 135 (simple_expression_tail -> addop term .)
    DOWNTO          reduce using rule 135 (simple_expression_tail -> addop term .)


state 284

    (140) term_tail -> mulop factor .

    PLUS            reduce using rule 140 (term_tail -> mulop factor .)
    MINUS           reduce using rule 140 (term_tail -> mulop factor .)
    LESS            reduce using rule 140 (term_tail -> mulop factor .)
    LESS_EQUAL      reduce using rule 140 (term_tail -> mulop factor .)
    GREAT           reduce using rule 140 (term_tail -> mulop factor .)
    GREAT_EQUAL     reduce using rule 140 (term_tail -> mulop factor .)
    EQUAL           reduce using rule 140 (term_tail -> mulop factor .)
    DIFFERENT       reduce using rule 140 (term_tail -> mulop factor .)
    THEN            reduce using rule 140 (term_tail -> mulop factor .)
    IN              reduce using rule 140 (term_tail -> mulop factor .)
    TIMES           reduce using rule 140 (term_tail -> mulop factor .)
    DIVIDE          reduce using rule 140 (term_tail -> mulop factor .)
    MOD             reduce using rule 140 (term_tail -> mulop factor .)
    AND             reduce using rule 140 (term_tail -> mulop factor .)
    OR              reduce using rule 140 (term_tail -> mulop factor .)
    DO              reduce using rule 140 (term_tail -> mulop factor .)
    OF              reduce using rule 140 (term_tail -> mulop factor .)
    SEMICOLON       reduce using rule 140 (term_tail -> mulop factor .)
    RPAREN          reduce using rule 140 (term_tail -> mulop factor .)
    VAR             reduce using rule 140 (term_tail -> mulop factor .)
    ID              reduce using rule 140 (term_tail -> mulop factor .)
    IF              reduce using rule 140 (term_tail -> mulop factor .)
    CASE            reduce using rule 140 (term_tail -> mulop factor .)
    END             reduce using rule 140 (term_tail -> mulop factor .)
    CONSTRUCTOR     reduce using rule 140 (term_tail -> mulop factor .)
    PROCEDURE       reduce using rule 140 (term_tail -> mulop factor .)
    FUNCTION        reduce using rule 140 (term_tail -> mulop factor .)
    DESTRUCTOR      reduce using rule 140 (term_tail -> mulop factor .)
    ELSE            reduce using rule 140 (term_tail -> mulop factor .)
    RBRACKET        reduce using rule 140 (term_tail -> mulop factor .)
    COMMA           reduce using rule 140 (term_tail -> mulop factor .)
    COLON           reduce using rule 140 (term_tail -> mulop factor .)
    TO              reduce using rule 140 (term_tail -> mulop factor .)
    DOWNTO          reduce using rule 140 (term_tail -> mulop factor .)


state 285

    (150) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    DIV             reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    LESS_EQUAL      reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    GREAT           reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    GREAT_EQUAL     reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    DIFFERENT       reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    IN              reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    OF              reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    VAR             reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    ID              reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    CASE            reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    CONSTRUCTOR     reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    PROCEDURE       reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    DESTRUCTOR      reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    COLON           reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 150 (factor -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 150 (factor -> LPAREN expression RPAREN .)


state 286

    (86) function_call -> ID LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 333


state 287

    (125) while_statement -> WHILE expression DO statement .

    SEMICOLON       reduce using rule 125 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 125 (while_statement -> WHILE expression DO statement .)
    RPAREN          reduce using rule 125 (while_statement -> WHILE expression DO statement .)
    VAR             reduce using rule 125 (while_statement -> WHILE expression DO statement .)
    ID              reduce using rule 125 (while_statement -> WHILE expression DO statement .)
    IF              reduce using rule 125 (while_statement -> WHILE expression DO statement .)
    CASE            reduce using rule 125 (while_statement -> WHILE expression DO statement .)
    END             reduce using rule 125 (while_statement -> WHILE expression DO statement .)
    CONSTRUCTOR     reduce using rule 125 (while_statement -> WHILE expression DO statement .)
    PROCEDURE       reduce using rule 125 (while_statement -> WHILE expression DO statement .)
    FUNCTION        reduce using rule 125 (while_statement -> WHILE expression DO statement .)
    DESTRUCTOR      reduce using rule 125 (while_statement -> WHILE expression DO statement .)
    THEN            reduce using rule 125 (while_statement -> WHILE expression DO statement .)


state 288

    (110) for_statement -> FOR ID COLON_EQUAL expression . TO expression DO block
    (111) for_statement -> FOR ID COLON_EQUAL expression . DOWNTO expression DO block
    (145) expression -> expression . PLUS expression
    (146) expression -> expression . MINUS expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (180) expression -> expression . AND expression
    (181) expression -> expression . OR expression

    TO              shift and go to state 334
    DOWNTO          shift and go to state 335
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 195
    AND             shift and go to state 196
    OR              shift and go to state 197


state 289

    (72) case_statement -> CASE expression OF case_list . END SEMICOLON
    (73) case_statement -> CASE expression OF case_list . ELSE statement_list END SEMICOLON
    (74) case_statement -> CASE expression OF case_list . END
    (61) case_list -> case_list . SEMICOLON case_element

    END             shift and go to state 336
    ELSE            shift and go to state 338
    SEMICOLON       shift and go to state 337


state 290

    (62) case_list -> case_element .

    END             reduce using rule 62 (case_list -> case_element .)
    ELSE            reduce using rule 62 (case_list -> case_element .)
    SEMICOLON       reduce using rule 62 (case_list -> case_element .)


state 291

    (63) case_element -> NUMBER . COLON LPAREN field_list RPAREN
    (64) case_element -> NUMBER . COLON field_list

    COLON           shift and go to state 339


state 292

    (105) with_statement -> WITH variable DO statement .

    SEMICOLON       reduce using rule 105 (with_statement -> WITH variable DO statement .)
    ELSE            reduce using rule 105 (with_statement -> WITH variable DO statement .)
    RPAREN          reduce using rule 105 (with_statement -> WITH variable DO statement .)
    VAR             reduce using rule 105 (with_statement -> WITH variable DO statement .)
    ID              reduce using rule 105 (with_statement -> WITH variable DO statement .)
    IF              reduce using rule 105 (with_statement -> WITH variable DO statement .)
    CASE            reduce using rule 105 (with_statement -> WITH variable DO statement .)
    END             reduce using rule 105 (with_statement -> WITH variable DO statement .)
    CONSTRUCTOR     reduce using rule 105 (with_statement -> WITH variable DO statement .)
    PROCEDURE       reduce using rule 105 (with_statement -> WITH variable DO statement .)
    FUNCTION        reduce using rule 105 (with_statement -> WITH variable DO statement .)
    DESTRUCTOR      reduce using rule 105 (with_statement -> WITH variable DO statement .)
    THEN            reduce using rule 105 (with_statement -> WITH variable DO statement .)


state 293

    (173) repeat_statement -> REPEAT statement_list UNTIL expression . SEMICOLON
    (145) expression -> expression . PLUS expression
    (146) expression -> expression . MINUS expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (180) expression -> expression . AND expression
    (181) expression -> expression . OR expression

    SEMICOLON       shift and go to state 340
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 195
    AND             shift and go to state 196
    OR              shift and go to state 197


state 294

    (30) type_specifier -> ARRAY LBRACKET type_expression . RBRACKET OF type_specifier
    (44) type_expression -> type_expression . COMMA subrange

    RBRACKET        shift and go to state 341
    COMMA           shift and go to state 342


state 295

    (45) type_expression -> subrange .

    RBRACKET        reduce using rule 45 (type_expression -> subrange .)
    COMMA           reduce using rule 45 (type_expression -> subrange .)


state 296

    (32) type_specifier -> FILE OF type_specifier .

    SEMICOLON       reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    RPAREN          reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    VAR             reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    ID              reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    IF              reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    CASE            reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    END             reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    CONSTRUCTOR     reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    PROCEDURE       reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    FUNCTION        reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    DESTRUCTOR      reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    ELSE            reduce using rule 32 (type_specifier -> FILE OF type_specifier .)
    OF              reduce using rule 32 (type_specifier -> FILE OF type_specifier .)


state 297

    (33) type_specifier -> SET OF type_specifier .

    SEMICOLON       reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    RPAREN          reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    VAR             reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    ID              reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    IF              reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    CASE            reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    END             reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    CONSTRUCTOR     reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    PROCEDURE       reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    FUNCTION        reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    DESTRUCTOR      reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    ELSE            reduce using rule 33 (type_specifier -> SET OF type_specifier .)
    OF              reduce using rule 33 (type_specifier -> SET OF type_specifier .)


state 298

    (34) type_specifier -> RECORD field_list case_part . END

    END             shift and go to state 343


state 299

    (59) case_part -> CASE . ID COLON type_specifier OF case_list SEMICOLON
    (72) case_statement -> CASE . expression OF case_list END SEMICOLON
    (73) case_statement -> CASE . expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> CASE . expression OF case_list END
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    ID              shift and go to state 344
    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115

    expression                     shift and go to state 119
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 300

    (60) case_part -> empty .

    END             reduce using rule 60 (case_part -> empty .)


state 301

    (35) type_specifier -> OBJECT field_list method_list . END
    (65) method_list -> method_list . method
    (68) method -> . CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON
    (69) method -> . PROCEDURE ID LPAREN field_list RPAREN SEMICOLON
    (70) method -> . FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON
    (71) method -> . DESTRUCTOR ID SEMICOLON

    END             shift and go to state 345
    CONSTRUCTOR     shift and go to state 304
    PROCEDURE       shift and go to state 305
    FUNCTION        shift and go to state 306
    DESTRUCTOR      shift and go to state 307

    method                         shift and go to state 346

state 302

    (66) method_list -> method .

    END             reduce using rule 66 (method_list -> method .)
    CONSTRUCTOR     reduce using rule 66 (method_list -> method .)
    PROCEDURE       reduce using rule 66 (method_list -> method .)
    FUNCTION        reduce using rule 66 (method_list -> method .)
    DESTRUCTOR      reduce using rule 66 (method_list -> method .)


state 303

    (67) method_list -> empty .

    END             reduce using rule 67 (method_list -> empty .)
    CONSTRUCTOR     reduce using rule 67 (method_list -> empty .)
    PROCEDURE       reduce using rule 67 (method_list -> empty .)
    FUNCTION        reduce using rule 67 (method_list -> empty .)
    DESTRUCTOR      reduce using rule 67 (method_list -> empty .)


state 304

    (68) method -> CONSTRUCTOR . ID LPAREN field_list RPAREN SEMICOLON

    ID              shift and go to state 347


state 305

    (69) method -> PROCEDURE . ID LPAREN field_list RPAREN SEMICOLON

    ID              shift and go to state 348


state 306

    (70) method -> FUNCTION . ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON

    ID              shift and go to state 349


state 307

    (71) method -> DESTRUCTOR . ID SEMICOLON

    ID              shift and go to state 350


state 308

    (36) type_specifier -> LPAREN id_list RPAREN .

    SEMICOLON       reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    RPAREN          reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    VAR             reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    ID              reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    IF              reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    CASE            reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    END             reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    CONSTRUCTOR     reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    PROCEDURE       reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    FUNCTION        reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    DESTRUCTOR      reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    ELSE            reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)
    OF              reduce using rule 36 (type_specifier -> LPAREN id_list RPAREN .)


state 309

    (42) type_specifier -> STRING LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 351


state 310

    (46) subrange -> NUMBER DOTDOT NUMBER .

    SEMICOLON       reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    RBRACKET        reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    COMMA           reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    RPAREN          reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    VAR             reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    ID              reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    IF              reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    CASE            reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    END             reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    CONSTRUCTOR     reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    PROCEDURE       reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    FUNCTION        reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    DESTRUCTOR      reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    ELSE            reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)
    OF              reduce using rule 46 (subrange -> NUMBER DOTDOT NUMBER .)


state 311

    (47) subrange -> NUMBER DOTDOT ID .

    SEMICOLON       reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    RBRACKET        reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    COMMA           reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    RPAREN          reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    VAR             reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    ID              reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    IF              reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    CASE            reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    END             reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    CONSTRUCTOR     reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    PROCEDURE       reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    FUNCTION        reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    DESTRUCTOR      reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    ELSE            reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)
    OF              reduce using rule 47 (subrange -> NUMBER DOTDOT ID .)


state 312

    (91) parameter -> ID COLON type_specifier .

    RPAREN          reduce using rule 91 (parameter -> ID COLON type_specifier .)
    SEMICOLON       reduce using rule 91 (parameter -> ID COLON type_specifier .)


state 313

    (84) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON . type_specifier SEMICOLON block SEMICOLON
    (85) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON . type_specifier SEMICOLON FORWARD SEMICOLON
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (75) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 130
    FILE            shift and go to state 132
    SET             shift and go to state 133
    RECORD          shift and go to state 134
    OBJECT          shift and go to state 135
    LPAREN          shift and go to state 136
    BOOLEAN_LITERAL shift and go to state 137
    INTEGER         shift and go to state 138
    BYTE            shift and go to state 139
    CHAR            shift and go to state 140
    STRING          shift and go to state 141
    ID              shift and go to state 128
    LONGINT         shift and go to state 143
    NUMBER          shift and go to state 142

    type_specifier                 shift and go to state 352
    subrange                       shift and go to state 131

state 314

    (89) parameter_list -> parameter_list SEMICOLON parameter .

    RPAREN          reduce using rule 89 (parameter_list -> parameter_list SEMICOLON parameter .)
    SEMICOLON       reduce using rule 89 (parameter_list -> parameter_list SEMICOLON parameter .)


state 315

    (14) method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list . RPAREN COLON type_specifier SEMICOLON block
    (89) parameter_list -> parameter_list . SEMICOLON parameter

    RPAREN          shift and go to state 353
    SEMICOLON       shift and go to state 240


state 316

    (16) constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON . block
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (160) empty -> .

    BEGIN           reduce using rule 160 (empty -> .)
    USES            reduce using rule 160 (empty -> .)
    CONST           reduce using rule 160 (empty -> .)
    TYPE            reduce using rule 160 (empty -> .)
    VAR             reduce using rule 160 (empty -> .)
    FUNCTION        reduce using rule 160 (empty -> .)
    CONSTRUCTOR     reduce using rule 160 (empty -> .)
    PROCEDURE       reduce using rule 160 (empty -> .)
    DESTRUCTOR      reduce using rule 160 (empty -> .)

    block                          shift and go to state 354
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 317

    (17) constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block .

    USES            reduce using rule 17 (constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block .)
    CONST           reduce using rule 17 (constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block .)
    TYPE            reduce using rule 17 (constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block .)
    VAR             reduce using rule 17 (constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block .)
    FUNCTION        reduce using rule 17 (constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block .)
    CONSTRUCTOR     reduce using rule 17 (constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block .)
    PROCEDURE       reduce using rule 17 (constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block .)
    DESTRUCTOR      reduce using rule 17 (constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block .)
    BEGIN           reduce using rule 17 (constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block .)


state 318

    (51) field -> id_list COLON type_specifier .
    (52) field -> id_list COLON type_specifier . SEMICOLON

  ! shift/reduce conflict for SEMICOLON resolved as shift
    RPAREN          reduce using rule 51 (field -> id_list COLON type_specifier .)
    VAR             reduce using rule 51 (field -> id_list COLON type_specifier .)
    ID              reduce using rule 51 (field -> id_list COLON type_specifier .)
    IF              reduce using rule 51 (field -> id_list COLON type_specifier .)
    CASE            reduce using rule 51 (field -> id_list COLON type_specifier .)
    END             reduce using rule 51 (field -> id_list COLON type_specifier .)
    CONSTRUCTOR     reduce using rule 51 (field -> id_list COLON type_specifier .)
    PROCEDURE       reduce using rule 51 (field -> id_list COLON type_specifier .)
    FUNCTION        reduce using rule 51 (field -> id_list COLON type_specifier .)
    DESTRUCTOR      reduce using rule 51 (field -> id_list COLON type_specifier .)
    ELSE            reduce using rule 51 (field -> id_list COLON type_specifier .)
    SEMICOLON       shift and go to state 355

  ! SEMICOLON       [ reduce using rule 51 (field -> id_list COLON type_specifier .) ]


state 319

    (55) field -> id_list LPAREN STRING_LITERAL . RPAREN

    RPAREN          shift and go to state 356


state 320

    (53) field -> VAR id_list COLON . type_specifier
    (54) field -> VAR id_list COLON . type_specifier SEMICOLON
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (75) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 130
    FILE            shift and go to state 132
    SET             shift and go to state 133
    RECORD          shift and go to state 134
    OBJECT          shift and go to state 135
    LPAREN          shift and go to state 136
    BOOLEAN_LITERAL shift and go to state 137
    INTEGER         shift and go to state 138
    BYTE            shift and go to state 139
    CHAR            shift and go to state 140
    STRING          shift and go to state 141
    ID              shift and go to state 128
    LONGINT         shift and go to state 143
    NUMBER          shift and go to state 142

    type_specifier                 shift and go to state 357
    subrange                       shift and go to state 131

state 321

    (12) method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list . RPAREN SEMICOLON block
    (89) parameter_list -> parameter_list . SEMICOLON parameter

    RPAREN          shift and go to state 358
    SEMICOLON       shift and go to state 240


state 322

    (13) method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list . RPAREN SEMICOLON block
    (89) parameter_list -> parameter_list . SEMICOLON parameter

    RPAREN          shift and go to state 359
    SEMICOLON       shift and go to state 240


state 323

    (78) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON . block SEMICOLON
    (81) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON . FORWARD SEMICOLON
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (160) empty -> .

    FORWARD         shift and go to state 361
    BEGIN           reduce using rule 160 (empty -> .)
    USES            reduce using rule 160 (empty -> .)
    CONST           reduce using rule 160 (empty -> .)
    TYPE            reduce using rule 160 (empty -> .)
    VAR             reduce using rule 160 (empty -> .)
    FUNCTION        reduce using rule 160 (empty -> .)
    CONSTRUCTOR     reduce using rule 160 (empty -> .)
    PROCEDURE       reduce using rule 160 (empty -> .)
    DESTRUCTOR      reduce using rule 160 (empty -> .)

    block                          shift and go to state 360
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 324

    (79) procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 362


state 325

    (82) procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD . SEMICOLON

    SEMICOLON       shift and go to state 363


state 326

    (15) method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block .

    USES            reduce using rule 15 (method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block .)
    CONST           reduce using rule 15 (method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block .)
    TYPE            reduce using rule 15 (method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block .)
    VAR             reduce using rule 15 (method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block .)
    FUNCTION        reduce using rule 15 (method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block .)
    CONSTRUCTOR     reduce using rule 15 (method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block .)
    PROCEDURE       reduce using rule 15 (method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block .)
    DESTRUCTOR      reduce using rule 15 (method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block .)
    BEGIN           reduce using rule 15 (method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block .)


state 327

    (129) expression_list_tail -> COMMA expression . expression_list_tail
    (145) expression -> expression . PLUS expression
    (146) expression -> expression . MINUS expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (180) expression -> expression . AND expression
    (181) expression -> expression . OR expression
    (129) expression_list_tail -> . COMMA expression expression_list_tail
    (130) expression_list_tail -> . empty
    (160) empty -> .

    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 195
    AND             shift and go to state 196
    OR              shift and go to state 197
    COMMA           shift and go to state 265
    RPAREN          reduce using rule 160 (empty -> .)

    expression_list_tail           shift and go to state 364
    empty                          shift and go to state 266

state 328

    (167) write_arguments -> write_arguments COMMA write_argument .

    RPAREN          reduce using rule 167 (write_arguments -> write_arguments COMMA write_argument .)
    COMMA           reduce using rule 167 (write_arguments -> write_arguments COMMA write_argument .)


state 329

    (169) write_argument -> expression COLON expression .
    (170) write_argument -> expression COLON expression . COLON expression
    (145) expression -> expression . PLUS expression
    (146) expression -> expression . MINUS expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (180) expression -> expression . AND expression
    (181) expression -> expression . OR expression

    RPAREN          reduce using rule 169 (write_argument -> expression COLON expression .)
    COMMA           reduce using rule 169 (write_argument -> expression COLON expression .)
    COLON           shift and go to state 365
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 195
    AND             shift and go to state 196
    OR              shift and go to state 197


state 330

    (124) index_list -> index_list COMMA expression .
    (145) expression -> expression . PLUS expression
    (146) expression -> expression . MINUS expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (180) expression -> expression . AND expression
    (181) expression -> expression . OR expression

    RBRACKET        reduce using rule 124 (index_list -> index_list COMMA expression .)
    COMMA           reduce using rule 124 (index_list -> index_list COMMA expression .)
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 195
    AND             shift and go to state 196
    OR              shift and go to state 197


state 331

    (106) if_statement -> IF expression THEN statement ELSE . statement
    (95) statement -> . if_statement
    (96) statement -> . assignment_statement
    (97) statement -> . while_statement
    (98) statement -> . procedure_call
    (99) statement -> . compound_statement
    (100) statement -> . for_statement
    (101) statement -> . case_statement
    (102) statement -> . with_statement
    (103) statement -> . repeat_statement
    (104) statement -> . empty
    (161) statement -> . READLN
    (162) statement -> . READLN LPAREN variable RPAREN
    (163) statement -> . READLN LBRACKET variable RBRACKET
    (164) statement -> . WRITE LPAREN expression_list RPAREN
    (165) statement -> . WRITELN LPAREN write_arguments RPAREN
    (171) statement -> . USES ID SEMICOLON
    (106) if_statement -> . IF expression THEN statement ELSE statement
    (107) if_statement -> . IF expression THEN statement
    (108) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (109) if_statement -> . IF expression IN statement THEN statement
    (112) assignment_statement -> . variable COLON_EQUAL expression
    (113) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (114) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (115) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (116) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (117) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (118) assignment_statement -> . ID COLON_EQUAL expression
    (125) while_statement -> . WHILE expression DO statement
    (126) procedure_call -> . ID LPAREN expression_list RPAREN
    (127) procedure_call -> . ID
    (92) compound_statement -> . BEGIN statement_list END
    (110) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (111) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (72) case_statement -> . CASE expression OF case_list END SEMICOLON
    (73) case_statement -> . CASE expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> . CASE expression OF case_list END
    (105) with_statement -> . WITH variable DO statement
    (173) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (160) empty -> .
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
    READLN          shift and go to state 59
    WRITE           shift and go to state 61
    WRITELN         shift and go to state 62
    USES            shift and go to state 63
    IF              shift and go to state 65
    ID              shift and go to state 64
    WHILE           shift and go to state 66
    BEGIN           shift and go to state 28
    FOR             shift and go to state 67
    CASE            shift and go to state 68
    WITH            shift and go to state 69
    REPEAT          shift and go to state 70
    ELSE            reduce using rule 160 (empty -> .)
    SEMICOLON       reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    VAR             reduce using rule 160 (empty -> .)
    END             reduce using rule 160 (empty -> .)
    CONSTRUCTOR     reduce using rule 160 (empty -> .)
    PROCEDURE       reduce using rule 160 (empty -> .)
    FUNCTION        reduce using rule 160 (empty -> .)
    DESTRUCTOR      reduce using rule 160 (empty -> .)
    THEN            reduce using rule 160 (empty -> .)

  ! ID              [ reduce using rule 160 (empty -> .) ]
  ! IF              [ reduce using rule 160 (empty -> .) ]
  ! CASE            [ reduce using rule 160 (empty -> .) ]

    statement                      shift and go to state 366
    if_statement                   shift and go to state 49
    assignment_statement           shift and go to state 50
    while_statement                shift and go to state 51
    procedure_call                 shift and go to state 52
    compound_statement             shift and go to state 53
    for_statement                  shift and go to state 54
    case_statement                 shift and go to state 55
    with_statement                 shift and go to state 56
    repeat_statement               shift and go to state 57
    empty                          shift and go to state 58
    variable                       shift and go to state 60

state 332

    (108) if_statement -> IF expression IN statement THEN . statement ELSE statement
    (109) if_statement -> IF expression IN statement THEN . statement
    (95) statement -> . if_statement
    (96) statement -> . assignment_statement
    (97) statement -> . while_statement
    (98) statement -> . procedure_call
    (99) statement -> . compound_statement
    (100) statement -> . for_statement
    (101) statement -> . case_statement
    (102) statement -> . with_statement
    (103) statement -> . repeat_statement
    (104) statement -> . empty
    (161) statement -> . READLN
    (162) statement -> . READLN LPAREN variable RPAREN
    (163) statement -> . READLN LBRACKET variable RBRACKET
    (164) statement -> . WRITE LPAREN expression_list RPAREN
    (165) statement -> . WRITELN LPAREN write_arguments RPAREN
    (171) statement -> . USES ID SEMICOLON
    (106) if_statement -> . IF expression THEN statement ELSE statement
    (107) if_statement -> . IF expression THEN statement
    (108) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (109) if_statement -> . IF expression IN statement THEN statement
    (112) assignment_statement -> . variable COLON_EQUAL expression
    (113) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (114) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (115) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (116) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (117) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (118) assignment_statement -> . ID COLON_EQUAL expression
    (125) while_statement -> . WHILE expression DO statement
    (126) procedure_call -> . ID LPAREN expression_list RPAREN
    (127) procedure_call -> . ID
    (92) compound_statement -> . BEGIN statement_list END
    (110) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (111) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (72) case_statement -> . CASE expression OF case_list END SEMICOLON
    (73) case_statement -> . CASE expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> . CASE expression OF case_list END
    (105) with_statement -> . WITH variable DO statement
    (173) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (160) empty -> .
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
    READLN          shift and go to state 59
    WRITE           shift and go to state 61
    WRITELN         shift and go to state 62
    USES            shift and go to state 63
    IF              shift and go to state 65
    ID              shift and go to state 64
    WHILE           shift and go to state 66
    BEGIN           shift and go to state 28
    FOR             shift and go to state 67
    CASE            shift and go to state 68
    WITH            shift and go to state 69
    REPEAT          shift and go to state 70
    ELSE            reduce using rule 160 (empty -> .)
    SEMICOLON       reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    VAR             reduce using rule 160 (empty -> .)
    END             reduce using rule 160 (empty -> .)
    CONSTRUCTOR     reduce using rule 160 (empty -> .)
    PROCEDURE       reduce using rule 160 (empty -> .)
    FUNCTION        reduce using rule 160 (empty -> .)
    DESTRUCTOR      reduce using rule 160 (empty -> .)
    THEN            reduce using rule 160 (empty -> .)

  ! ID              [ reduce using rule 160 (empty -> .) ]
  ! IF              [ reduce using rule 160 (empty -> .) ]
  ! CASE            [ reduce using rule 160 (empty -> .) ]

    statement                      shift and go to state 367
    if_statement                   shift and go to state 49
    assignment_statement           shift and go to state 50
    while_statement                shift and go to state 51
    procedure_call                 shift and go to state 52
    compound_statement             shift and go to state 53
    for_statement                  shift and go to state 54
    case_statement                 shift and go to state 55
    with_statement                 shift and go to state 56
    repeat_statement               shift and go to state 57
    empty                          shift and go to state 58
    variable                       shift and go to state 60

state 333

    (86) function_call -> ID LPAREN expression_list RPAREN .

    TIMES           reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    DIVIDE          reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    DIV             reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    PLUS            reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    MINUS           reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    LESS            reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    LESS_EQUAL      reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    GREAT           reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    GREAT_EQUAL     reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    DIFFERENT       reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    IN              reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    MOD             reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    AND             reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    OR              reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    OF              reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    VAR             reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    ID              reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    IF              reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    CASE            reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    CONSTRUCTOR     reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    PROCEDURE       reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    FUNCTION        reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    DESTRUCTOR      reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    RBRACKET        reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    COLON           reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)
    DOWNTO          reduce using rule 86 (function_call -> ID LPAREN expression_list RPAREN .)


state 334

    (110) for_statement -> FOR ID COLON_EQUAL expression TO . expression DO block
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    expression                     shift and go to state 368
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 335

    (111) for_statement -> FOR ID COLON_EQUAL expression DOWNTO . expression DO block
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    expression                     shift and go to state 369
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 336

    (72) case_statement -> CASE expression OF case_list END . SEMICOLON
    (74) case_statement -> CASE expression OF case_list END .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 370
    RPAREN          reduce using rule 74 (case_statement -> CASE expression OF case_list END .)
    VAR             reduce using rule 74 (case_statement -> CASE expression OF case_list END .)
    ID              reduce using rule 74 (case_statement -> CASE expression OF case_list END .)
    IF              reduce using rule 74 (case_statement -> CASE expression OF case_list END .)
    CASE            reduce using rule 74 (case_statement -> CASE expression OF case_list END .)
    END             reduce using rule 74 (case_statement -> CASE expression OF case_list END .)
    CONSTRUCTOR     reduce using rule 74 (case_statement -> CASE expression OF case_list END .)
    PROCEDURE       reduce using rule 74 (case_statement -> CASE expression OF case_list END .)
    FUNCTION        reduce using rule 74 (case_statement -> CASE expression OF case_list END .)
    DESTRUCTOR      reduce using rule 74 (case_statement -> CASE expression OF case_list END .)
    ELSE            reduce using rule 74 (case_statement -> CASE expression OF case_list END .)
    THEN            reduce using rule 74 (case_statement -> CASE expression OF case_list END .)

  ! SEMICOLON       [ reduce using rule 74 (case_statement -> CASE expression OF case_list END .) ]


state 337

    (61) case_list -> case_list SEMICOLON . case_element
    (63) case_element -> . NUMBER COLON LPAREN field_list RPAREN
    (64) case_element -> . NUMBER COLON field_list

    NUMBER          shift and go to state 291

    case_element                   shift and go to state 371

state 338

    (73) case_statement -> CASE expression OF case_list ELSE . statement_list END SEMICOLON
    (93) statement_list -> . statement SEMICOLON
    (94) statement_list -> . statement_list statement SEMICOLON
    (95) statement -> . if_statement
    (96) statement -> . assignment_statement
    (97) statement -> . while_statement
    (98) statement -> . procedure_call
    (99) statement -> . compound_statement
    (100) statement -> . for_statement
    (101) statement -> . case_statement
    (102) statement -> . with_statement
    (103) statement -> . repeat_statement
    (104) statement -> . empty
    (161) statement -> . READLN
    (162) statement -> . READLN LPAREN variable RPAREN
    (163) statement -> . READLN LBRACKET variable RBRACKET
    (164) statement -> . WRITE LPAREN expression_list RPAREN
    (165) statement -> . WRITELN LPAREN write_arguments RPAREN
    (171) statement -> . USES ID SEMICOLON
    (106) if_statement -> . IF expression THEN statement ELSE statement
    (107) if_statement -> . IF expression THEN statement
    (108) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (109) if_statement -> . IF expression IN statement THEN statement
    (112) assignment_statement -> . variable COLON_EQUAL expression
    (113) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (114) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (115) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (116) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (117) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (118) assignment_statement -> . ID COLON_EQUAL expression
    (125) while_statement -> . WHILE expression DO statement
    (126) procedure_call -> . ID LPAREN expression_list RPAREN
    (127) procedure_call -> . ID
    (92) compound_statement -> . BEGIN statement_list END
    (110) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (111) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (72) case_statement -> . CASE expression OF case_list END SEMICOLON
    (73) case_statement -> . CASE expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> . CASE expression OF case_list END
    (105) with_statement -> . WITH variable DO statement
    (173) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (160) empty -> .
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    READLN          shift and go to state 59
    WRITE           shift and go to state 61
    WRITELN         shift and go to state 62
    USES            shift and go to state 63
    IF              shift and go to state 65
    ID              shift and go to state 64
    WHILE           shift and go to state 66
    BEGIN           shift and go to state 28
    FOR             shift and go to state 67
    CASE            shift and go to state 68
    WITH            shift and go to state 69
    REPEAT          shift and go to state 70
    SEMICOLON       reduce using rule 160 (empty -> .)

    statement_list                 shift and go to state 372
    statement                      shift and go to state 48
    if_statement                   shift and go to state 49
    assignment_statement           shift and go to state 50
    while_statement                shift and go to state 51
    procedure_call                 shift and go to state 52
    compound_statement             shift and go to state 53
    for_statement                  shift and go to state 54
    case_statement                 shift and go to state 55
    with_statement                 shift and go to state 56
    repeat_statement               shift and go to state 57
    empty                          shift and go to state 58
    variable                       shift and go to state 60

state 339

    (63) case_element -> NUMBER COLON . LPAREN field_list RPAREN
    (64) case_element -> NUMBER COLON . field_list
    (48) field_list -> . field_list field
    (49) field_list -> . field
    (50) field_list -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . if_statement
    (57) field -> . case_statement
    (58) field -> . assignment_statement
    (160) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (106) if_statement -> . IF expression THEN statement ELSE statement
    (107) if_statement -> . IF expression THEN statement
    (108) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (109) if_statement -> . IF expression IN statement THEN statement
    (72) case_statement -> . CASE expression OF case_list END SEMICOLON
    (73) case_statement -> . CASE expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> . CASE expression OF case_list END
    (112) assignment_statement -> . variable COLON_EQUAL expression
    (113) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (114) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (115) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (116) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (117) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (118) assignment_statement -> . ID COLON_EQUAL expression
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
    LPAREN          shift and go to state 373
    VAR             shift and go to state 156
    END             reduce using rule 160 (empty -> .)
    ELSE            reduce using rule 160 (empty -> .)
    SEMICOLON       reduce using rule 160 (empty -> .)
    ID              shift and go to state 150
    IF              shift and go to state 65
    CASE            shift and go to state 68

  ! VAR             [ reduce using rule 160 (empty -> .) ]
  ! ID              [ reduce using rule 160 (empty -> .) ]
  ! IF              [ reduce using rule 160 (empty -> .) ]
  ! CASE            [ reduce using rule 160 (empty -> .) ]

    field_list                     shift and go to state 374
    field                          shift and go to state 153
    empty                          shift and go to state 154
    id_list                        shift and go to state 155
    if_statement                   shift and go to state 157
    case_statement                 shift and go to state 158
    assignment_statement           shift and go to state 159
    variable                       shift and go to state 60

state 340

    (173) repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .

    SEMICOLON       reduce using rule 173 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    ELSE            reduce using rule 173 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    RPAREN          reduce using rule 173 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    VAR             reduce using rule 173 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    ID              reduce using rule 173 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    IF              reduce using rule 173 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    CASE            reduce using rule 173 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    END             reduce using rule 173 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    CONSTRUCTOR     reduce using rule 173 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    PROCEDURE       reduce using rule 173 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    FUNCTION        reduce using rule 173 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    DESTRUCTOR      reduce using rule 173 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    THEN            reduce using rule 173 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)


state 341

    (30) type_specifier -> ARRAY LBRACKET type_expression RBRACKET . OF type_specifier

    OF              shift and go to state 375


state 342

    (44) type_expression -> type_expression COMMA . subrange
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    NUMBER          shift and go to state 142

    subrange                       shift and go to state 376

state 343

    (34) type_specifier -> RECORD field_list case_part END .

    SEMICOLON       reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    RPAREN          reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    VAR             reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    ID              reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    IF              reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    CASE            reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    END             reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    CONSTRUCTOR     reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    PROCEDURE       reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    FUNCTION        reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    DESTRUCTOR      reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    ELSE            reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)
    OF              reduce using rule 34 (type_specifier -> RECORD field_list case_part END .)


state 344

    (59) case_part -> CASE ID . COLON type_specifier OF case_list SEMICOLON
    (86) function_call -> ID . LPAREN expression_list RPAREN
    (119) variable -> ID .
    (122) variable -> ID . LBRACKET index_list RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    COLON           shift and go to state 377
    LPAREN          shift and go to state 218
    DOT             reduce using rule 119 (variable -> ID .)
    TIMES           reduce using rule 119 (variable -> ID .)
    DIVIDE          reduce using rule 119 (variable -> ID .)
    DIV             reduce using rule 119 (variable -> ID .)
    PLUS            reduce using rule 119 (variable -> ID .)
    MINUS           reduce using rule 119 (variable -> ID .)
    LESS            reduce using rule 119 (variable -> ID .)
    LESS_EQUAL      reduce using rule 119 (variable -> ID .)
    GREAT           reduce using rule 119 (variable -> ID .)
    GREAT_EQUAL     reduce using rule 119 (variable -> ID .)
    EQUAL           reduce using rule 119 (variable -> ID .)
    DIFFERENT       reduce using rule 119 (variable -> ID .)
    OF              reduce using rule 119 (variable -> ID .)
    MOD             reduce using rule 119 (variable -> ID .)
    AND             reduce using rule 119 (variable -> ID .)
    OR              reduce using rule 119 (variable -> ID .)
    LBRACKET        shift and go to state 105

  ! LBRACKET        [ reduce using rule 119 (variable -> ID .) ]


state 345

    (35) type_specifier -> OBJECT field_list method_list END .

    SEMICOLON       reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    RPAREN          reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    VAR             reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    ID              reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    IF              reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    CASE            reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    END             reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    CONSTRUCTOR     reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    PROCEDURE       reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    FUNCTION        reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    DESTRUCTOR      reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    ELSE            reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)
    OF              reduce using rule 35 (type_specifier -> OBJECT field_list method_list END .)


state 346

    (65) method_list -> method_list method .

    END             reduce using rule 65 (method_list -> method_list method .)
    CONSTRUCTOR     reduce using rule 65 (method_list -> method_list method .)
    PROCEDURE       reduce using rule 65 (method_list -> method_list method .)
    FUNCTION        reduce using rule 65 (method_list -> method_list method .)
    DESTRUCTOR      reduce using rule 65 (method_list -> method_list method .)


state 347

    (68) method -> CONSTRUCTOR ID . LPAREN field_list RPAREN SEMICOLON

    LPAREN          shift and go to state 378


state 348

    (69) method -> PROCEDURE ID . LPAREN field_list RPAREN SEMICOLON

    LPAREN          shift and go to state 379


state 349

    (70) method -> FUNCTION ID . LPAREN field_list RPAREN COLON type_specifier SEMICOLON

    LPAREN          shift and go to state 380


state 350

    (71) method -> DESTRUCTOR ID . SEMICOLON

    SEMICOLON       shift and go to state 381


state 351

    (42) type_specifier -> STRING LBRACKET NUMBER RBRACKET .

    SEMICOLON       reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    RPAREN          reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    VAR             reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    ID              reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    IF              reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    CASE            reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    END             reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    CONSTRUCTOR     reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    PROCEDURE       reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    FUNCTION        reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    DESTRUCTOR      reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    ELSE            reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    OF              reduce using rule 42 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)


state 352

    (84) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier . SEMICOLON block SEMICOLON
    (85) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier . SEMICOLON FORWARD SEMICOLON

    SEMICOLON       shift and go to state 382


state 353

    (14) method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN . COLON type_specifier SEMICOLON block

    COLON           shift and go to state 383


state 354

    (16) constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block .

    USES            reduce using rule 16 (constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block .)
    CONST           reduce using rule 16 (constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block .)
    TYPE            reduce using rule 16 (constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block .)
    VAR             reduce using rule 16 (constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block .)
    FUNCTION        reduce using rule 16 (constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block .)
    CONSTRUCTOR     reduce using rule 16 (constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block .)
    PROCEDURE       reduce using rule 16 (constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block .)
    DESTRUCTOR      reduce using rule 16 (constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block .)
    BEGIN           reduce using rule 16 (constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block .)


state 355

    (52) field -> id_list COLON type_specifier SEMICOLON .

    RPAREN          reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    VAR             reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    ID              reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    IF              reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    CASE            reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    END             reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    CONSTRUCTOR     reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    DESTRUCTOR      reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    ELSE            reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)
    SEMICOLON       reduce using rule 52 (field -> id_list COLON type_specifier SEMICOLON .)


state 356

    (55) field -> id_list LPAREN STRING_LITERAL RPAREN .

    RPAREN          reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    VAR             reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    ID              reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    IF              reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    CASE            reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    END             reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    CONSTRUCTOR     reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    PROCEDURE       reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    FUNCTION        reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    DESTRUCTOR      reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    ELSE            reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)
    SEMICOLON       reduce using rule 55 (field -> id_list LPAREN STRING_LITERAL RPAREN .)


state 357

    (53) field -> VAR id_list COLON type_specifier .
    (54) field -> VAR id_list COLON type_specifier . SEMICOLON

  ! shift/reduce conflict for SEMICOLON resolved as shift
    RPAREN          reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    VAR             reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    ID              reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    IF              reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    CASE            reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    END             reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    CONSTRUCTOR     reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    PROCEDURE       reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    FUNCTION        reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    DESTRUCTOR      reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    ELSE            reduce using rule 53 (field -> VAR id_list COLON type_specifier .)
    SEMICOLON       shift and go to state 384

  ! SEMICOLON       [ reduce using rule 53 (field -> VAR id_list COLON type_specifier .) ]


state 358

    (12) method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN . SEMICOLON block

    SEMICOLON       shift and go to state 385


state 359

    (13) method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN . SEMICOLON block

    SEMICOLON       shift and go to state 386


state 360

    (78) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 387


state 361

    (81) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON FORWARD . SEMICOLON

    SEMICOLON       shift and go to state 388


state 362

    (79) procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .

    PROCEDURE       reduce using rule 79 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    USES            reduce using rule 79 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    CONST           reduce using rule 79 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    TYPE            reduce using rule 79 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    VAR             reduce using rule 79 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 79 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    CONSTRUCTOR     reduce using rule 79 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    DESTRUCTOR      reduce using rule 79 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    BEGIN           reduce using rule 79 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)


state 363

    (82) procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .

    PROCEDURE       reduce using rule 82 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)
    USES            reduce using rule 82 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)
    CONST           reduce using rule 82 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)
    TYPE            reduce using rule 82 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)
    VAR             reduce using rule 82 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)
    FUNCTION        reduce using rule 82 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)
    CONSTRUCTOR     reduce using rule 82 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)
    DESTRUCTOR      reduce using rule 82 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)
    BEGIN           reduce using rule 82 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)


state 364

    (129) expression_list_tail -> COMMA expression expression_list_tail .

    RPAREN          reduce using rule 129 (expression_list_tail -> COMMA expression expression_list_tail .)


state 365

    (170) write_argument -> expression COLON expression COLON . expression
    (132) expression -> . simple_expression relop simple_expression
    (133) expression -> . simple_expression
    (145) expression -> . expression PLUS expression
    (146) expression -> . expression MINUS expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (180) expression -> . expression AND expression
    (181) expression -> . expression OR expression
    (182) expression -> . NOT expression
    (134) simple_expression -> . term simple_expression_tail
    (139) term -> . factor term_tail
    (87) factor -> . function_call
    (150) factor -> . LPAREN expression RPAREN
    (151) factor -> . variable
    (152) factor -> . NUMBER
    (153) factor -> . STRING_LITERAL
    (86) function_call -> . ID LPAREN expression_list RPAREN
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 108
    LPAREN          shift and go to state 112
    NUMBER          shift and go to state 114
    STRING_LITERAL  shift and go to state 115
    ID              shift and go to state 116

    expression                     shift and go to state 389
    simple_expression              shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 110
    function_call                  shift and go to state 111
    variable                       shift and go to state 113

state 366

    (106) if_statement -> IF expression THEN statement ELSE statement .

    SEMICOLON       reduce using rule 106 (if_statement -> IF expression THEN statement ELSE statement .)
    RPAREN          reduce using rule 106 (if_statement -> IF expression THEN statement ELSE statement .)
    VAR             reduce using rule 106 (if_statement -> IF expression THEN statement ELSE statement .)
    ID              reduce using rule 106 (if_statement -> IF expression THEN statement ELSE statement .)
    IF              reduce using rule 106 (if_statement -> IF expression THEN statement ELSE statement .)
    CASE            reduce using rule 106 (if_statement -> IF expression THEN statement ELSE statement .)
    END             reduce using rule 106 (if_statement -> IF expression THEN statement ELSE statement .)
    CONSTRUCTOR     reduce using rule 106 (if_statement -> IF expression THEN statement ELSE statement .)
    PROCEDURE       reduce using rule 106 (if_statement -> IF expression THEN statement ELSE statement .)
    FUNCTION        reduce using rule 106 (if_statement -> IF expression THEN statement ELSE statement .)
    DESTRUCTOR      reduce using rule 106 (if_statement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 106 (if_statement -> IF expression THEN statement ELSE statement .)
    THEN            reduce using rule 106 (if_statement -> IF expression THEN statement ELSE statement .)


state 367

    (108) if_statement -> IF expression IN statement THEN statement . ELSE statement
    (109) if_statement -> IF expression IN statement THEN statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 390
    SEMICOLON       reduce using rule 109 (if_statement -> IF expression IN statement THEN statement .)
    RPAREN          reduce using rule 109 (if_statement -> IF expression IN statement THEN statement .)
    VAR             reduce using rule 109 (if_statement -> IF expression IN statement THEN statement .)
    ID              reduce using rule 109 (if_statement -> IF expression IN statement THEN statement .)
    IF              reduce using rule 109 (if_statement -> IF expression IN statement THEN statement .)
    CASE            reduce using rule 109 (if_statement -> IF expression IN statement THEN statement .)
    END             reduce using rule 109 (if_statement -> IF expression IN statement THEN statement .)
    CONSTRUCTOR     reduce using rule 109 (if_statement -> IF expression IN statement THEN statement .)
    PROCEDURE       reduce using rule 109 (if_statement -> IF expression IN statement THEN statement .)
    FUNCTION        reduce using rule 109 (if_statement -> IF expression IN statement THEN statement .)
    DESTRUCTOR      reduce using rule 109 (if_statement -> IF expression IN statement THEN statement .)
    THEN            reduce using rule 109 (if_statement -> IF expression IN statement THEN statement .)

  ! ELSE            [ reduce using rule 109 (if_statement -> IF expression IN statement THEN statement .) ]


state 368

    (110) for_statement -> FOR ID COLON_EQUAL expression TO expression . DO block
    (145) expression -> expression . PLUS expression
    (146) expression -> expression . MINUS expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (180) expression -> expression . AND expression
    (181) expression -> expression . OR expression

    DO              shift and go to state 391
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 195
    AND             shift and go to state 196
    OR              shift and go to state 197


state 369

    (111) for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression . DO block
    (145) expression -> expression . PLUS expression
    (146) expression -> expression . MINUS expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (180) expression -> expression . AND expression
    (181) expression -> expression . OR expression

    DO              shift and go to state 392
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 195
    AND             shift and go to state 196
    OR              shift and go to state 197


state 370

    (72) case_statement -> CASE expression OF case_list END SEMICOLON .

    SEMICOLON       reduce using rule 72 (case_statement -> CASE expression OF case_list END SEMICOLON .)
    RPAREN          reduce using rule 72 (case_statement -> CASE expression OF case_list END SEMICOLON .)
    VAR             reduce using rule 72 (case_statement -> CASE expression OF case_list END SEMICOLON .)
    ID              reduce using rule 72 (case_statement -> CASE expression OF case_list END SEMICOLON .)
    IF              reduce using rule 72 (case_statement -> CASE expression OF case_list END SEMICOLON .)
    CASE            reduce using rule 72 (case_statement -> CASE expression OF case_list END SEMICOLON .)
    END             reduce using rule 72 (case_statement -> CASE expression OF case_list END SEMICOLON .)
    CONSTRUCTOR     reduce using rule 72 (case_statement -> CASE expression OF case_list END SEMICOLON .)
    PROCEDURE       reduce using rule 72 (case_statement -> CASE expression OF case_list END SEMICOLON .)
    FUNCTION        reduce using rule 72 (case_statement -> CASE expression OF case_list END SEMICOLON .)
    DESTRUCTOR      reduce using rule 72 (case_statement -> CASE expression OF case_list END SEMICOLON .)
    ELSE            reduce using rule 72 (case_statement -> CASE expression OF case_list END SEMICOLON .)
    THEN            reduce using rule 72 (case_statement -> CASE expression OF case_list END SEMICOLON .)


state 371

    (61) case_list -> case_list SEMICOLON case_element .

    END             reduce using rule 61 (case_list -> case_list SEMICOLON case_element .)
    ELSE            reduce using rule 61 (case_list -> case_list SEMICOLON case_element .)
    SEMICOLON       reduce using rule 61 (case_list -> case_list SEMICOLON case_element .)


state 372

    (73) case_statement -> CASE expression OF case_list ELSE statement_list . END SEMICOLON
    (94) statement_list -> statement_list . statement SEMICOLON
    (95) statement -> . if_statement
    (96) statement -> . assignment_statement
    (97) statement -> . while_statement
    (98) statement -> . procedure_call
    (99) statement -> . compound_statement
    (100) statement -> . for_statement
    (101) statement -> . case_statement
    (102) statement -> . with_statement
    (103) statement -> . repeat_statement
    (104) statement -> . empty
    (161) statement -> . READLN
    (162) statement -> . READLN LPAREN variable RPAREN
    (163) statement -> . READLN LBRACKET variable RBRACKET
    (164) statement -> . WRITE LPAREN expression_list RPAREN
    (165) statement -> . WRITELN LPAREN write_arguments RPAREN
    (171) statement -> . USES ID SEMICOLON
    (106) if_statement -> . IF expression THEN statement ELSE statement
    (107) if_statement -> . IF expression THEN statement
    (108) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (109) if_statement -> . IF expression IN statement THEN statement
    (112) assignment_statement -> . variable COLON_EQUAL expression
    (113) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (114) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (115) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (116) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (117) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (118) assignment_statement -> . ID COLON_EQUAL expression
    (125) while_statement -> . WHILE expression DO statement
    (126) procedure_call -> . ID LPAREN expression_list RPAREN
    (127) procedure_call -> . ID
    (92) compound_statement -> . BEGIN statement_list END
    (110) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (111) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (72) case_statement -> . CASE expression OF case_list END SEMICOLON
    (73) case_statement -> . CASE expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> . CASE expression OF case_list END
    (105) with_statement -> . WITH variable DO statement
    (173) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (160) empty -> .
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    END             shift and go to state 393
    READLN          shift and go to state 59
    WRITE           shift and go to state 61
    WRITELN         shift and go to state 62
    USES            shift and go to state 63
    IF              shift and go to state 65
    ID              shift and go to state 64
    WHILE           shift and go to state 66
    BEGIN           shift and go to state 28
    FOR             shift and go to state 67
    CASE            shift and go to state 68
    WITH            shift and go to state 69
    REPEAT          shift and go to state 70
    SEMICOLON       reduce using rule 160 (empty -> .)

    statement                      shift and go to state 89
    if_statement                   shift and go to state 49
    assignment_statement           shift and go to state 50
    while_statement                shift and go to state 51
    procedure_call                 shift and go to state 52
    compound_statement             shift and go to state 53
    for_statement                  shift and go to state 54
    case_statement                 shift and go to state 55
    with_statement                 shift and go to state 56
    repeat_statement               shift and go to state 57
    empty                          shift and go to state 58
    variable                       shift and go to state 60

state 373

    (63) case_element -> NUMBER COLON LPAREN . field_list RPAREN
    (48) field_list -> . field_list field
    (49) field_list -> . field
    (50) field_list -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . if_statement
    (57) field -> . case_statement
    (58) field -> . assignment_statement
    (160) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (106) if_statement -> . IF expression THEN statement ELSE statement
    (107) if_statement -> . IF expression THEN statement
    (108) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (109) if_statement -> . IF expression IN statement THEN statement
    (72) case_statement -> . CASE expression OF case_list END SEMICOLON
    (73) case_statement -> . CASE expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> . CASE expression OF case_list END
    (112) assignment_statement -> . variable COLON_EQUAL expression
    (113) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (114) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (115) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (116) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (117) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (118) assignment_statement -> . ID COLON_EQUAL expression
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
    VAR             shift and go to state 156
    RPAREN          reduce using rule 160 (empty -> .)
    ID              shift and go to state 150
    IF              shift and go to state 65
    CASE            shift and go to state 68

  ! VAR             [ reduce using rule 160 (empty -> .) ]
  ! ID              [ reduce using rule 160 (empty -> .) ]
  ! IF              [ reduce using rule 160 (empty -> .) ]
  ! CASE            [ reduce using rule 160 (empty -> .) ]

    field_list                     shift and go to state 394
    field                          shift and go to state 153
    empty                          shift and go to state 154
    id_list                        shift and go to state 155
    if_statement                   shift and go to state 157
    case_statement                 shift and go to state 158
    assignment_statement           shift and go to state 159
    variable                       shift and go to state 60

state 374

    (64) case_element -> NUMBER COLON field_list .
    (48) field_list -> field_list . field
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . if_statement
    (57) field -> . case_statement
    (58) field -> . assignment_statement
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (106) if_statement -> . IF expression THEN statement ELSE statement
    (107) if_statement -> . IF expression THEN statement
    (108) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (109) if_statement -> . IF expression IN statement THEN statement
    (72) case_statement -> . CASE expression OF case_list END SEMICOLON
    (73) case_statement -> . CASE expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> . CASE expression OF case_list END
    (112) assignment_statement -> . variable COLON_EQUAL expression
    (113) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (114) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (115) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (116) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (117) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (118) assignment_statement -> . ID COLON_EQUAL expression
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    END             reduce using rule 64 (case_element -> NUMBER COLON field_list .)
    ELSE            reduce using rule 64 (case_element -> NUMBER COLON field_list .)
    SEMICOLON       reduce using rule 64 (case_element -> NUMBER COLON field_list .)
    VAR             shift and go to state 156
    ID              shift and go to state 150
    IF              shift and go to state 65
    CASE            shift and go to state 68

    field                          shift and go to state 243
    id_list                        shift and go to state 155
    if_statement                   shift and go to state 157
    case_statement                 shift and go to state 158
    assignment_statement           shift and go to state 159
    variable                       shift and go to state 60

state 375

    (30) type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF . type_specifier
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (75) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 130
    FILE            shift and go to state 132
    SET             shift and go to state 133
    RECORD          shift and go to state 134
    OBJECT          shift and go to state 135
    LPAREN          shift and go to state 136
    BOOLEAN_LITERAL shift and go to state 137
    INTEGER         shift and go to state 138
    BYTE            shift and go to state 139
    CHAR            shift and go to state 140
    STRING          shift and go to state 141
    ID              shift and go to state 128
    LONGINT         shift and go to state 143
    NUMBER          shift and go to state 142

    type_specifier                 shift and go to state 395
    subrange                       shift and go to state 131

state 376

    (44) type_expression -> type_expression COMMA subrange .

    RBRACKET        reduce using rule 44 (type_expression -> type_expression COMMA subrange .)
    COMMA           reduce using rule 44 (type_expression -> type_expression COMMA subrange .)


state 377

    (59) case_part -> CASE ID COLON . type_specifier OF case_list SEMICOLON
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (75) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 130
    FILE            shift and go to state 132
    SET             shift and go to state 133
    RECORD          shift and go to state 134
    OBJECT          shift and go to state 135
    LPAREN          shift and go to state 136
    BOOLEAN_LITERAL shift and go to state 137
    INTEGER         shift and go to state 138
    BYTE            shift and go to state 139
    CHAR            shift and go to state 140
    STRING          shift and go to state 141
    ID              shift and go to state 128
    LONGINT         shift and go to state 143
    NUMBER          shift and go to state 142

    type_specifier                 shift and go to state 396
    subrange                       shift and go to state 131

state 378

    (68) method -> CONSTRUCTOR ID LPAREN . field_list RPAREN SEMICOLON
    (48) field_list -> . field_list field
    (49) field_list -> . field
    (50) field_list -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . if_statement
    (57) field -> . case_statement
    (58) field -> . assignment_statement
    (160) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (106) if_statement -> . IF expression THEN statement ELSE statement
    (107) if_statement -> . IF expression THEN statement
    (108) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (109) if_statement -> . IF expression IN statement THEN statement
    (72) case_statement -> . CASE expression OF case_list END SEMICOLON
    (73) case_statement -> . CASE expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> . CASE expression OF case_list END
    (112) assignment_statement -> . variable COLON_EQUAL expression
    (113) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (114) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (115) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (116) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (117) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (118) assignment_statement -> . ID COLON_EQUAL expression
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
    VAR             shift and go to state 156
    RPAREN          reduce using rule 160 (empty -> .)
    ID              shift and go to state 150
    IF              shift and go to state 65
    CASE            shift and go to state 68

  ! VAR             [ reduce using rule 160 (empty -> .) ]
  ! ID              [ reduce using rule 160 (empty -> .) ]
  ! IF              [ reduce using rule 160 (empty -> .) ]
  ! CASE            [ reduce using rule 160 (empty -> .) ]

    field_list                     shift and go to state 397
    field                          shift and go to state 153
    empty                          shift and go to state 154
    id_list                        shift and go to state 155
    if_statement                   shift and go to state 157
    case_statement                 shift and go to state 158
    assignment_statement           shift and go to state 159
    variable                       shift and go to state 60

state 379

    (69) method -> PROCEDURE ID LPAREN . field_list RPAREN SEMICOLON
    (48) field_list -> . field_list field
    (49) field_list -> . field
    (50) field_list -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . if_statement
    (57) field -> . case_statement
    (58) field -> . assignment_statement
    (160) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (106) if_statement -> . IF expression THEN statement ELSE statement
    (107) if_statement -> . IF expression THEN statement
    (108) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (109) if_statement -> . IF expression IN statement THEN statement
    (72) case_statement -> . CASE expression OF case_list END SEMICOLON
    (73) case_statement -> . CASE expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> . CASE expression OF case_list END
    (112) assignment_statement -> . variable COLON_EQUAL expression
    (113) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (114) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (115) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (116) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (117) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (118) assignment_statement -> . ID COLON_EQUAL expression
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
    VAR             shift and go to state 156
    RPAREN          reduce using rule 160 (empty -> .)
    ID              shift and go to state 150
    IF              shift and go to state 65
    CASE            shift and go to state 68

  ! VAR             [ reduce using rule 160 (empty -> .) ]
  ! ID              [ reduce using rule 160 (empty -> .) ]
  ! IF              [ reduce using rule 160 (empty -> .) ]
  ! CASE            [ reduce using rule 160 (empty -> .) ]

    field_list                     shift and go to state 398
    field                          shift and go to state 153
    empty                          shift and go to state 154
    id_list                        shift and go to state 155
    if_statement                   shift and go to state 157
    case_statement                 shift and go to state 158
    assignment_statement           shift and go to state 159
    variable                       shift and go to state 60

state 380

    (70) method -> FUNCTION ID LPAREN . field_list RPAREN COLON type_specifier SEMICOLON
    (48) field_list -> . field_list field
    (49) field_list -> . field
    (50) field_list -> . empty
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . if_statement
    (57) field -> . case_statement
    (58) field -> . assignment_statement
    (160) empty -> .
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (106) if_statement -> . IF expression THEN statement ELSE statement
    (107) if_statement -> . IF expression THEN statement
    (108) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (109) if_statement -> . IF expression IN statement THEN statement
    (72) case_statement -> . CASE expression OF case_list END SEMICOLON
    (73) case_statement -> . CASE expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> . CASE expression OF case_list END
    (112) assignment_statement -> . variable COLON_EQUAL expression
    (113) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (114) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (115) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (116) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (117) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (118) assignment_statement -> . ID COLON_EQUAL expression
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
    VAR             shift and go to state 156
    RPAREN          reduce using rule 160 (empty -> .)
    ID              shift and go to state 150
    IF              shift and go to state 65
    CASE            shift and go to state 68

  ! VAR             [ reduce using rule 160 (empty -> .) ]
  ! ID              [ reduce using rule 160 (empty -> .) ]
  ! IF              [ reduce using rule 160 (empty -> .) ]
  ! CASE            [ reduce using rule 160 (empty -> .) ]

    field_list                     shift and go to state 399
    field                          shift and go to state 153
    empty                          shift and go to state 154
    id_list                        shift and go to state 155
    if_statement                   shift and go to state 157
    case_statement                 shift and go to state 158
    assignment_statement           shift and go to state 159
    variable                       shift and go to state 60

state 381

    (71) method -> DESTRUCTOR ID SEMICOLON .

    END             reduce using rule 71 (method -> DESTRUCTOR ID SEMICOLON .)
    CONSTRUCTOR     reduce using rule 71 (method -> DESTRUCTOR ID SEMICOLON .)
    PROCEDURE       reduce using rule 71 (method -> DESTRUCTOR ID SEMICOLON .)
    FUNCTION        reduce using rule 71 (method -> DESTRUCTOR ID SEMICOLON .)
    DESTRUCTOR      reduce using rule 71 (method -> DESTRUCTOR ID SEMICOLON .)


state 382

    (84) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON . block SEMICOLON
    (85) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON . FORWARD SEMICOLON
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (160) empty -> .

    FORWARD         shift and go to state 401
    BEGIN           reduce using rule 160 (empty -> .)
    USES            reduce using rule 160 (empty -> .)
    CONST           reduce using rule 160 (empty -> .)
    TYPE            reduce using rule 160 (empty -> .)
    VAR             reduce using rule 160 (empty -> .)
    FUNCTION        reduce using rule 160 (empty -> .)
    CONSTRUCTOR     reduce using rule 160 (empty -> .)
    PROCEDURE       reduce using rule 160 (empty -> .)
    DESTRUCTOR      reduce using rule 160 (empty -> .)

    block                          shift and go to state 400
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 383

    (14) method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON . type_specifier SEMICOLON block
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (75) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 130
    FILE            shift and go to state 132
    SET             shift and go to state 133
    RECORD          shift and go to state 134
    OBJECT          shift and go to state 135
    LPAREN          shift and go to state 136
    BOOLEAN_LITERAL shift and go to state 137
    INTEGER         shift and go to state 138
    BYTE            shift and go to state 139
    CHAR            shift and go to state 140
    STRING          shift and go to state 141
    ID              shift and go to state 128
    LONGINT         shift and go to state 143
    NUMBER          shift and go to state 142

    type_specifier                 shift and go to state 402
    subrange                       shift and go to state 131

state 384

    (54) field -> VAR id_list COLON type_specifier SEMICOLON .

    RPAREN          reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    VAR             reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    ID              reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    IF              reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    CASE            reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    END             reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    CONSTRUCTOR     reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    DESTRUCTOR      reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    ELSE            reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)
    SEMICOLON       reduce using rule 54 (field -> VAR id_list COLON type_specifier SEMICOLON .)


state 385

    (12) method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON . block
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (160) empty -> .

    BEGIN           reduce using rule 160 (empty -> .)
    USES            reduce using rule 160 (empty -> .)
    CONST           reduce using rule 160 (empty -> .)
    TYPE            reduce using rule 160 (empty -> .)
    VAR             reduce using rule 160 (empty -> .)
    FUNCTION        reduce using rule 160 (empty -> .)
    CONSTRUCTOR     reduce using rule 160 (empty -> .)
    PROCEDURE       reduce using rule 160 (empty -> .)
    DESTRUCTOR      reduce using rule 160 (empty -> .)

    block                          shift and go to state 403
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 386

    (13) method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON . block
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (160) empty -> .

    BEGIN           reduce using rule 160 (empty -> .)
    USES            reduce using rule 160 (empty -> .)
    CONST           reduce using rule 160 (empty -> .)
    TYPE            reduce using rule 160 (empty -> .)
    VAR             reduce using rule 160 (empty -> .)
    FUNCTION        reduce using rule 160 (empty -> .)
    CONSTRUCTOR     reduce using rule 160 (empty -> .)
    PROCEDURE       reduce using rule 160 (empty -> .)
    DESTRUCTOR      reduce using rule 160 (empty -> .)

    block                          shift and go to state 404
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 387

    (78) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .

    PROCEDURE       reduce using rule 78 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    USES            reduce using rule 78 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    CONST           reduce using rule 78 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    TYPE            reduce using rule 78 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    VAR             reduce using rule 78 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 78 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    CONSTRUCTOR     reduce using rule 78 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    DESTRUCTOR      reduce using rule 78 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    BEGIN           reduce using rule 78 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)


state 388

    (81) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON FORWARD SEMICOLON .

    PROCEDURE       reduce using rule 81 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON FORWARD SEMICOLON .)
    USES            reduce using rule 81 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON FORWARD SEMICOLON .)
    CONST           reduce using rule 81 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON FORWARD SEMICOLON .)
    TYPE            reduce using rule 81 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON FORWARD SEMICOLON .)
    VAR             reduce using rule 81 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON FORWARD SEMICOLON .)
    FUNCTION        reduce using rule 81 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON FORWARD SEMICOLON .)
    CONSTRUCTOR     reduce using rule 81 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON FORWARD SEMICOLON .)
    DESTRUCTOR      reduce using rule 81 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON FORWARD SEMICOLON .)
    BEGIN           reduce using rule 81 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON FORWARD SEMICOLON .)


state 389

    (170) write_argument -> expression COLON expression COLON expression .
    (145) expression -> expression . PLUS expression
    (146) expression -> expression . MINUS expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (180) expression -> expression . AND expression
    (181) expression -> expression . OR expression

    RPAREN          reduce using rule 170 (write_argument -> expression COLON expression COLON expression .)
    COMMA           reduce using rule 170 (write_argument -> expression COLON expression COLON expression .)
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 195
    AND             shift and go to state 196
    OR              shift and go to state 197


state 390

    (108) if_statement -> IF expression IN statement THEN statement ELSE . statement
    (95) statement -> . if_statement
    (96) statement -> . assignment_statement
    (97) statement -> . while_statement
    (98) statement -> . procedure_call
    (99) statement -> . compound_statement
    (100) statement -> . for_statement
    (101) statement -> . case_statement
    (102) statement -> . with_statement
    (103) statement -> . repeat_statement
    (104) statement -> . empty
    (161) statement -> . READLN
    (162) statement -> . READLN LPAREN variable RPAREN
    (163) statement -> . READLN LBRACKET variable RBRACKET
    (164) statement -> . WRITE LPAREN expression_list RPAREN
    (165) statement -> . WRITELN LPAREN write_arguments RPAREN
    (171) statement -> . USES ID SEMICOLON
    (106) if_statement -> . IF expression THEN statement ELSE statement
    (107) if_statement -> . IF expression THEN statement
    (108) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (109) if_statement -> . IF expression IN statement THEN statement
    (112) assignment_statement -> . variable COLON_EQUAL expression
    (113) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (114) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (115) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (116) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (117) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (118) assignment_statement -> . ID COLON_EQUAL expression
    (125) while_statement -> . WHILE expression DO statement
    (126) procedure_call -> . ID LPAREN expression_list RPAREN
    (127) procedure_call -> . ID
    (92) compound_statement -> . BEGIN statement_list END
    (110) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO block
    (111) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO block
    (72) case_statement -> . CASE expression OF case_list END SEMICOLON
    (73) case_statement -> . CASE expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> . CASE expression OF case_list END
    (105) with_statement -> . WITH variable DO statement
    (173) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (160) empty -> .
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
    READLN          shift and go to state 59
    WRITE           shift and go to state 61
    WRITELN         shift and go to state 62
    USES            shift and go to state 63
    IF              shift and go to state 65
    ID              shift and go to state 64
    WHILE           shift and go to state 66
    BEGIN           shift and go to state 28
    FOR             shift and go to state 67
    CASE            shift and go to state 68
    WITH            shift and go to state 69
    REPEAT          shift and go to state 70
    ELSE            reduce using rule 160 (empty -> .)
    SEMICOLON       reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    VAR             reduce using rule 160 (empty -> .)
    END             reduce using rule 160 (empty -> .)
    CONSTRUCTOR     reduce using rule 160 (empty -> .)
    PROCEDURE       reduce using rule 160 (empty -> .)
    FUNCTION        reduce using rule 160 (empty -> .)
    DESTRUCTOR      reduce using rule 160 (empty -> .)
    THEN            reduce using rule 160 (empty -> .)

  ! ID              [ reduce using rule 160 (empty -> .) ]
  ! IF              [ reduce using rule 160 (empty -> .) ]
  ! CASE            [ reduce using rule 160 (empty -> .) ]

    statement                      shift and go to state 405
    if_statement                   shift and go to state 49
    assignment_statement           shift and go to state 50
    while_statement                shift and go to state 51
    procedure_call                 shift and go to state 52
    compound_statement             shift and go to state 53
    for_statement                  shift and go to state 54
    case_statement                 shift and go to state 55
    with_statement                 shift and go to state 56
    repeat_statement               shift and go to state 57
    empty                          shift and go to state 58
    variable                       shift and go to state 60

state 391

    (110) for_statement -> FOR ID COLON_EQUAL expression TO expression DO . block
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (160) empty -> .

    BEGIN           reduce using rule 160 (empty -> .)
    USES            reduce using rule 160 (empty -> .)
    CONST           reduce using rule 160 (empty -> .)
    TYPE            reduce using rule 160 (empty -> .)
    VAR             reduce using rule 160 (empty -> .)
    FUNCTION        reduce using rule 160 (empty -> .)
    CONSTRUCTOR     reduce using rule 160 (empty -> .)
    PROCEDURE       reduce using rule 160 (empty -> .)
    DESTRUCTOR      reduce using rule 160 (empty -> .)

    block                          shift and go to state 406
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 392

    (111) for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO . block
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (160) empty -> .

    BEGIN           reduce using rule 160 (empty -> .)
    USES            reduce using rule 160 (empty -> .)
    CONST           reduce using rule 160 (empty -> .)
    TYPE            reduce using rule 160 (empty -> .)
    VAR             reduce using rule 160 (empty -> .)
    FUNCTION        reduce using rule 160 (empty -> .)
    CONSTRUCTOR     reduce using rule 160 (empty -> .)
    PROCEDURE       reduce using rule 160 (empty -> .)
    DESTRUCTOR      reduce using rule 160 (empty -> .)

    block                          shift and go to state 407
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 393

    (73) case_statement -> CASE expression OF case_list ELSE statement_list END . SEMICOLON

    SEMICOLON       shift and go to state 408


state 394

    (63) case_element -> NUMBER COLON LPAREN field_list . RPAREN
    (48) field_list -> field_list . field
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . if_statement
    (57) field -> . case_statement
    (58) field -> . assignment_statement
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (106) if_statement -> . IF expression THEN statement ELSE statement
    (107) if_statement -> . IF expression THEN statement
    (108) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (109) if_statement -> . IF expression IN statement THEN statement
    (72) case_statement -> . CASE expression OF case_list END SEMICOLON
    (73) case_statement -> . CASE expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> . CASE expression OF case_list END
    (112) assignment_statement -> . variable COLON_EQUAL expression
    (113) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (114) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (115) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (116) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (117) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (118) assignment_statement -> . ID COLON_EQUAL expression
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    RPAREN          shift and go to state 409
    VAR             shift and go to state 156
    ID              shift and go to state 150
    IF              shift and go to state 65
    CASE            shift and go to state 68

    field                          shift and go to state 243
    id_list                        shift and go to state 155
    if_statement                   shift and go to state 157
    case_statement                 shift and go to state 158
    assignment_statement           shift and go to state 159
    variable                       shift and go to state 60

state 395

    (30) type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .

    SEMICOLON       reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    RPAREN          reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    VAR             reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    ID              reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    IF              reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    CASE            reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    END             reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    CONSTRUCTOR     reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    PROCEDURE       reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    FUNCTION        reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    DESTRUCTOR      reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    ELSE            reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    OF              reduce using rule 30 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)


state 396

    (59) case_part -> CASE ID COLON type_specifier . OF case_list SEMICOLON

    OF              shift and go to state 410


state 397

    (68) method -> CONSTRUCTOR ID LPAREN field_list . RPAREN SEMICOLON
    (48) field_list -> field_list . field
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . if_statement
    (57) field -> . case_statement
    (58) field -> . assignment_statement
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (106) if_statement -> . IF expression THEN statement ELSE statement
    (107) if_statement -> . IF expression THEN statement
    (108) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (109) if_statement -> . IF expression IN statement THEN statement
    (72) case_statement -> . CASE expression OF case_list END SEMICOLON
    (73) case_statement -> . CASE expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> . CASE expression OF case_list END
    (112) assignment_statement -> . variable COLON_EQUAL expression
    (113) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (114) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (115) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (116) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (117) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (118) assignment_statement -> . ID COLON_EQUAL expression
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    RPAREN          shift and go to state 411
    VAR             shift and go to state 156
    ID              shift and go to state 150
    IF              shift and go to state 65
    CASE            shift and go to state 68

    field                          shift and go to state 243
    id_list                        shift and go to state 155
    if_statement                   shift and go to state 157
    case_statement                 shift and go to state 158
    assignment_statement           shift and go to state 159
    variable                       shift and go to state 60

state 398

    (69) method -> PROCEDURE ID LPAREN field_list . RPAREN SEMICOLON
    (48) field_list -> field_list . field
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . if_statement
    (57) field -> . case_statement
    (58) field -> . assignment_statement
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (106) if_statement -> . IF expression THEN statement ELSE statement
    (107) if_statement -> . IF expression THEN statement
    (108) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (109) if_statement -> . IF expression IN statement THEN statement
    (72) case_statement -> . CASE expression OF case_list END SEMICOLON
    (73) case_statement -> . CASE expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> . CASE expression OF case_list END
    (112) assignment_statement -> . variable COLON_EQUAL expression
    (113) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (114) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (115) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (116) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (117) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (118) assignment_statement -> . ID COLON_EQUAL expression
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    RPAREN          shift and go to state 412
    VAR             shift and go to state 156
    ID              shift and go to state 150
    IF              shift and go to state 65
    CASE            shift and go to state 68

    field                          shift and go to state 243
    id_list                        shift and go to state 155
    if_statement                   shift and go to state 157
    case_statement                 shift and go to state 158
    assignment_statement           shift and go to state 159
    variable                       shift and go to state 60

state 399

    (70) method -> FUNCTION ID LPAREN field_list . RPAREN COLON type_specifier SEMICOLON
    (48) field_list -> field_list . field
    (51) field -> . id_list COLON type_specifier
    (52) field -> . id_list COLON type_specifier SEMICOLON
    (53) field -> . VAR id_list COLON type_specifier
    (54) field -> . VAR id_list COLON type_specifier SEMICOLON
    (55) field -> . id_list LPAREN STRING_LITERAL RPAREN
    (56) field -> . if_statement
    (57) field -> . case_statement
    (58) field -> . assignment_statement
    (19) id_list -> . ID
    (20) id_list -> . id_list COMMA ID
    (106) if_statement -> . IF expression THEN statement ELSE statement
    (107) if_statement -> . IF expression THEN statement
    (108) if_statement -> . IF expression IN statement THEN statement ELSE statement
    (109) if_statement -> . IF expression IN statement THEN statement
    (72) case_statement -> . CASE expression OF case_list END SEMICOLON
    (73) case_statement -> . CASE expression OF case_list ELSE statement_list END SEMICOLON
    (74) case_statement -> . CASE expression OF case_list END
    (112) assignment_statement -> . variable COLON_EQUAL expression
    (113) assignment_statement -> . variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON
    (114) assignment_statement -> . variable PLUS COLON_EQUAL expression
    (115) assignment_statement -> . variable MINUS COLON_EQUAL expression
    (116) assignment_statement -> . variable TIMES COLON_EQUAL expression
    (117) assignment_statement -> . variable DIVIDE COLON_EQUAL expression
    (118) assignment_statement -> . ID COLON_EQUAL expression
    (119) variable -> . ID
    (120) variable -> . variable LBRACKET expression RBRACKET
    (121) variable -> . variable DOT ID
    (122) variable -> . ID LBRACKET index_list RBRACKET

    RPAREN          shift and go to state 413
    VAR             shift and go to state 156
    ID              shift and go to state 150
    IF              shift and go to state 65
    CASE            shift and go to state 68

    field                          shift and go to state 243
    id_list                        shift and go to state 155
    if_statement                   shift and go to state 157
    case_statement                 shift and go to state 158
    assignment_statement           shift and go to state 159
    variable                       shift and go to state 60

state 400

    (84) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 414


state 401

    (85) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD . SEMICOLON

    SEMICOLON       shift and go to state 415


state 402

    (14) method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier . SEMICOLON block

    SEMICOLON       shift and go to state 416


state 403

    (12) method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .

    USES            reduce using rule 12 (method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    CONST           reduce using rule 12 (method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    TYPE            reduce using rule 12 (method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    VAR             reduce using rule 12 (method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    FUNCTION        reduce using rule 12 (method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    CONSTRUCTOR     reduce using rule 12 (method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    PROCEDURE       reduce using rule 12 (method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    DESTRUCTOR      reduce using rule 12 (method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    BEGIN           reduce using rule 12 (method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)


state 404

    (13) method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .

    USES            reduce using rule 13 (method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    CONST           reduce using rule 13 (method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    TYPE            reduce using rule 13 (method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    VAR             reduce using rule 13 (method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    FUNCTION        reduce using rule 13 (method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    CONSTRUCTOR     reduce using rule 13 (method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    PROCEDURE       reduce using rule 13 (method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    DESTRUCTOR      reduce using rule 13 (method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)
    BEGIN           reduce using rule 13 (method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block .)


state 405

    (108) if_statement -> IF expression IN statement THEN statement ELSE statement .

    SEMICOLON       reduce using rule 108 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    RPAREN          reduce using rule 108 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    VAR             reduce using rule 108 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    ID              reduce using rule 108 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    IF              reduce using rule 108 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    CASE            reduce using rule 108 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    END             reduce using rule 108 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    CONSTRUCTOR     reduce using rule 108 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    PROCEDURE       reduce using rule 108 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    FUNCTION        reduce using rule 108 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    DESTRUCTOR      reduce using rule 108 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    ELSE            reduce using rule 108 (if_statement -> IF expression IN statement THEN statement ELSE statement .)
    THEN            reduce using rule 108 (if_statement -> IF expression IN statement THEN statement ELSE statement .)


state 406

    (110) for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .

    SEMICOLON       reduce using rule 110 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    ELSE            reduce using rule 110 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    RPAREN          reduce using rule 110 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    VAR             reduce using rule 110 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    ID              reduce using rule 110 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    IF              reduce using rule 110 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    CASE            reduce using rule 110 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    END             reduce using rule 110 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    CONSTRUCTOR     reduce using rule 110 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    PROCEDURE       reduce using rule 110 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    FUNCTION        reduce using rule 110 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    DESTRUCTOR      reduce using rule 110 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)
    THEN            reduce using rule 110 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO block .)


state 407

    (111) for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .

    SEMICOLON       reduce using rule 111 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    ELSE            reduce using rule 111 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    RPAREN          reduce using rule 111 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    VAR             reduce using rule 111 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    ID              reduce using rule 111 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    IF              reduce using rule 111 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    CASE            reduce using rule 111 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    END             reduce using rule 111 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    CONSTRUCTOR     reduce using rule 111 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    PROCEDURE       reduce using rule 111 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    FUNCTION        reduce using rule 111 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    DESTRUCTOR      reduce using rule 111 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)
    THEN            reduce using rule 111 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block .)


state 408

    (73) case_statement -> CASE expression OF case_list ELSE statement_list END SEMICOLON .

    SEMICOLON       reduce using rule 73 (case_statement -> CASE expression OF case_list ELSE statement_list END SEMICOLON .)
    RPAREN          reduce using rule 73 (case_statement -> CASE expression OF case_list ELSE statement_list END SEMICOLON .)
    VAR             reduce using rule 73 (case_statement -> CASE expression OF case_list ELSE statement_list END SEMICOLON .)
    ID              reduce using rule 73 (case_statement -> CASE expression OF case_list ELSE statement_list END SEMICOLON .)
    IF              reduce using rule 73 (case_statement -> CASE expression OF case_list ELSE statement_list END SEMICOLON .)
    CASE            reduce using rule 73 (case_statement -> CASE expression OF case_list ELSE statement_list END SEMICOLON .)
    END             reduce using rule 73 (case_statement -> CASE expression OF case_list ELSE statement_list END SEMICOLON .)
    CONSTRUCTOR     reduce using rule 73 (case_statement -> CASE expression OF case_list ELSE statement_list END SEMICOLON .)
    PROCEDURE       reduce using rule 73 (case_statement -> CASE expression OF case_list ELSE statement_list END SEMICOLON .)
    FUNCTION        reduce using rule 73 (case_statement -> CASE expression OF case_list ELSE statement_list END SEMICOLON .)
    DESTRUCTOR      reduce using rule 73 (case_statement -> CASE expression OF case_list ELSE statement_list END SEMICOLON .)
    ELSE            reduce using rule 73 (case_statement -> CASE expression OF case_list ELSE statement_list END SEMICOLON .)
    THEN            reduce using rule 73 (case_statement -> CASE expression OF case_list ELSE statement_list END SEMICOLON .)


state 409

    (63) case_element -> NUMBER COLON LPAREN field_list RPAREN .

    END             reduce using rule 63 (case_element -> NUMBER COLON LPAREN field_list RPAREN .)
    ELSE            reduce using rule 63 (case_element -> NUMBER COLON LPAREN field_list RPAREN .)
    SEMICOLON       reduce using rule 63 (case_element -> NUMBER COLON LPAREN field_list RPAREN .)


state 410

    (59) case_part -> CASE ID COLON type_specifier OF . case_list SEMICOLON
    (61) case_list -> . case_list SEMICOLON case_element
    (62) case_list -> . case_element
    (63) case_element -> . NUMBER COLON LPAREN field_list RPAREN
    (64) case_element -> . NUMBER COLON field_list

    NUMBER          shift and go to state 291

    case_list                      shift and go to state 417
    case_element                   shift and go to state 290

state 411

    (68) method -> CONSTRUCTOR ID LPAREN field_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 418


state 412

    (69) method -> PROCEDURE ID LPAREN field_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 419


state 413

    (70) method -> FUNCTION ID LPAREN field_list RPAREN . COLON type_specifier SEMICOLON

    COLON           shift and go to state 420


state 414

    (84) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .

    USES            reduce using rule 84 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    CONST           reduce using rule 84 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    TYPE            reduce using rule 84 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    VAR             reduce using rule 84 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 84 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    CONSTRUCTOR     reduce using rule 84 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    PROCEDURE       reduce using rule 84 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    DESTRUCTOR      reduce using rule 84 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    BEGIN           reduce using rule 84 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)


state 415

    (85) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .

    USES            reduce using rule 85 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    CONST           reduce using rule 85 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    TYPE            reduce using rule 85 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    VAR             reduce using rule 85 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    FUNCTION        reduce using rule 85 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    CONSTRUCTOR     reduce using rule 85 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    PROCEDURE       reduce using rule 85 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    DESTRUCTOR      reduce using rule 85 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    BEGIN           reduce using rule 85 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)


state 416

    (14) method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON . block
    (25) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (160) empty -> .

    BEGIN           reduce using rule 160 (empty -> .)
    USES            reduce using rule 160 (empty -> .)
    CONST           reduce using rule 160 (empty -> .)
    TYPE            reduce using rule 160 (empty -> .)
    VAR             reduce using rule 160 (empty -> .)
    FUNCTION        reduce using rule 160 (empty -> .)
    CONSTRUCTOR     reduce using rule 160 (empty -> .)
    PROCEDURE       reduce using rule 160 (empty -> .)
    DESTRUCTOR      reduce using rule 160 (empty -> .)

    block                          shift and go to state 421
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 417

    (59) case_part -> CASE ID COLON type_specifier OF case_list . SEMICOLON
    (61) case_list -> case_list . SEMICOLON case_element

    SEMICOLON       shift and go to state 422


state 418

    (68) method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .

    END             reduce using rule 68 (method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .)
    CONSTRUCTOR     reduce using rule 68 (method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .)
    PROCEDURE       reduce using rule 68 (method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 68 (method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .)
    DESTRUCTOR      reduce using rule 68 (method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .)


state 419

    (69) method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .

    END             reduce using rule 69 (method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    CONSTRUCTOR     reduce using rule 69 (method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    PROCEDURE       reduce using rule 69 (method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 69 (method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    DESTRUCTOR      reduce using rule 69 (method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)


state 420

    (70) method -> FUNCTION ID LPAREN field_list RPAREN COLON . type_specifier SEMICOLON
    (30) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (31) type_specifier -> . subrange
    (32) type_specifier -> . FILE OF type_specifier
    (33) type_specifier -> . SET OF type_specifier
    (34) type_specifier -> . RECORD field_list case_part END
    (35) type_specifier -> . OBJECT field_list method_list END
    (36) type_specifier -> . LPAREN id_list RPAREN
    (37) type_specifier -> . BOOLEAN_LITERAL
    (38) type_specifier -> . INTEGER
    (39) type_specifier -> . BYTE
    (40) type_specifier -> . CHAR
    (41) type_specifier -> . STRING
    (42) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (43) type_specifier -> . ID
    (75) type_specifier -> . LONGINT
    (46) subrange -> . NUMBER DOTDOT NUMBER
    (47) subrange -> . NUMBER DOTDOT ID

    ARRAY           shift and go to state 130
    FILE            shift and go to state 132
    SET             shift and go to state 133
    RECORD          shift and go to state 134
    OBJECT          shift and go to state 135
    LPAREN          shift and go to state 136
    BOOLEAN_LITERAL shift and go to state 137
    INTEGER         shift and go to state 138
    BYTE            shift and go to state 139
    CHAR            shift and go to state 140
    STRING          shift and go to state 141
    ID              shift and go to state 128
    LONGINT         shift and go to state 143
    NUMBER          shift and go to state 142

    type_specifier                 shift and go to state 423
    subrange                       shift and go to state 131

state 421

    (14) method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block .

    USES            reduce using rule 14 (method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block .)
    CONST           reduce using rule 14 (method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block .)
    TYPE            reduce using rule 14 (method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block .)
    VAR             reduce using rule 14 (method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block .)
    FUNCTION        reduce using rule 14 (method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block .)
    CONSTRUCTOR     reduce using rule 14 (method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block .)
    PROCEDURE       reduce using rule 14 (method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block .)
    DESTRUCTOR      reduce using rule 14 (method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block .)
    BEGIN           reduce using rule 14 (method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block .)


state 422

    (59) case_part -> CASE ID COLON type_specifier OF case_list SEMICOLON .
    (61) case_list -> case_list SEMICOLON . case_element
    (63) case_element -> . NUMBER COLON LPAREN field_list RPAREN
    (64) case_element -> . NUMBER COLON field_list

    END             reduce using rule 59 (case_part -> CASE ID COLON type_specifier OF case_list SEMICOLON .)
    NUMBER          shift and go to state 291

    case_element                   shift and go to state 371

state 423

    (70) method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier . SEMICOLON

    SEMICOLON       shift and go to state 424


state 424

    (70) method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .

    END             reduce using rule 70 (method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .)
    CONSTRUCTOR     reduce using rule 70 (method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 70 (method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 70 (method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .)
    DESTRUCTOR      reduce using rule 70 (method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for USES in state 5 resolved as shift
WARNING: shift/reduce conflict for CONST in state 5 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 5 resolved as shift
WARNING: shift/reduce conflict for VAR in state 5 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 5 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 5 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 5 resolved as shift
WARNING: shift/reduce conflict for DESTRUCTOR in state 5 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 14 resolved as shift
WARNING: shift/reduce conflict for COLON_EQUAL in state 64 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 64 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 82 resolved as shift
WARNING: shift/reduce conflict for VAR in state 82 resolved as shift
WARNING: shift/reduce conflict for ID in state 82 resolved as shift
WARNING: shift/reduce conflict for IF in state 82 resolved as shift
WARNING: shift/reduce conflict for CASE in state 82 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 85 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 109 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 109 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 110 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 110 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 116 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 121 resolved as shift
WARNING: shift/reduce conflict for VAR in state 134 resolved as shift
WARNING: shift/reduce conflict for ID in state 134 resolved as shift
WARNING: shift/reduce conflict for IF in state 134 resolved as shift
WARNING: shift/reduce conflict for CASE in state 134 resolved as shift
WARNING: shift/reduce conflict for VAR in state 135 resolved as shift
WARNING: shift/reduce conflict for ID in state 135 resolved as shift
WARNING: shift/reduce conflict for IF in state 135 resolved as shift
WARNING: shift/reduce conflict for CASE in state 135 resolved as shift
WARNING: shift/reduce conflict for COLON_EQUAL in state 150 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 150 resolved as shift
WARNING: shift/reduce conflict for ID in state 189 resolved as shift
WARNING: shift/reduce conflict for IF in state 189 resolved as shift
WARNING: shift/reduce conflict for CASE in state 189 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 205 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 205 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 205 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 205 resolved as shift
WARNING: shift/reduce conflict for MOD in state 205 resolved as shift
WARNING: shift/reduce conflict for AND in state 205 resolved as shift
WARNING: shift/reduce conflict for OR in state 205 resolved as shift
WARNING: shift/reduce conflict for ID in state 219 resolved as shift
WARNING: shift/reduce conflict for IF in state 219 resolved as shift
WARNING: shift/reduce conflict for CASE in state 219 resolved as shift
WARNING: shift/reduce conflict for ID in state 222 resolved as shift
WARNING: shift/reduce conflict for IF in state 222 resolved as shift
WARNING: shift/reduce conflict for CASE in state 222 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 233 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 233 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 233 resolved as shift
WARNING: shift/reduce conflict for DESTRUCTOR in state 233 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 273 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 275 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 275 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 275 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 275 resolved as shift
WARNING: shift/reduce conflict for MOD in state 275 resolved as shift
WARNING: shift/reduce conflict for AND in state 275 resolved as shift
WARNING: shift/reduce conflict for OR in state 275 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 276 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 276 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 276 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 276 resolved as shift
WARNING: shift/reduce conflict for MOD in state 276 resolved as shift
WARNING: shift/reduce conflict for AND in state 276 resolved as shift
WARNING: shift/reduce conflict for OR in state 276 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 277 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 277 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 277 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 277 resolved as shift
WARNING: shift/reduce conflict for MOD in state 277 resolved as shift
WARNING: shift/reduce conflict for AND in state 277 resolved as shift
WARNING: shift/reduce conflict for OR in state 277 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 278 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 278 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 278 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 278 resolved as shift
WARNING: shift/reduce conflict for MOD in state 278 resolved as shift
WARNING: shift/reduce conflict for AND in state 278 resolved as shift
WARNING: shift/reduce conflict for OR in state 278 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 279 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 279 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 279 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 279 resolved as shift
WARNING: shift/reduce conflict for MOD in state 279 resolved as shift
WARNING: shift/reduce conflict for AND in state 279 resolved as shift
WARNING: shift/reduce conflict for OR in state 279 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 280 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 280 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 280 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 280 resolved as shift
WARNING: shift/reduce conflict for MOD in state 280 resolved as shift
WARNING: shift/reduce conflict for AND in state 280 resolved as shift
WARNING: shift/reduce conflict for OR in state 280 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 281 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 281 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 281 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 281 resolved as shift
WARNING: shift/reduce conflict for MOD in state 281 resolved as shift
WARNING: shift/reduce conflict for AND in state 281 resolved as shift
WARNING: shift/reduce conflict for OR in state 281 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 318 resolved as shift
WARNING: shift/reduce conflict for ID in state 331 resolved as shift
WARNING: shift/reduce conflict for IF in state 331 resolved as shift
WARNING: shift/reduce conflict for CASE in state 331 resolved as shift
WARNING: shift/reduce conflict for ID in state 332 resolved as shift
WARNING: shift/reduce conflict for IF in state 332 resolved as shift
WARNING: shift/reduce conflict for CASE in state 332 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 336 resolved as shift
WARNING: shift/reduce conflict for VAR in state 339 resolved as shift
WARNING: shift/reduce conflict for ID in state 339 resolved as shift
WARNING: shift/reduce conflict for IF in state 339 resolved as shift
WARNING: shift/reduce conflict for CASE in state 339 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 344 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 357 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 367 resolved as shift
WARNING: shift/reduce conflict for VAR in state 373 resolved as shift
WARNING: shift/reduce conflict for ID in state 373 resolved as shift
WARNING: shift/reduce conflict for IF in state 373 resolved as shift
WARNING: shift/reduce conflict for CASE in state 373 resolved as shift
WARNING: shift/reduce conflict for VAR in state 378 resolved as shift
WARNING: shift/reduce conflict for ID in state 378 resolved as shift
WARNING: shift/reduce conflict for IF in state 378 resolved as shift
WARNING: shift/reduce conflict for CASE in state 378 resolved as shift
WARNING: shift/reduce conflict for VAR in state 379 resolved as shift
WARNING: shift/reduce conflict for ID in state 379 resolved as shift
WARNING: shift/reduce conflict for IF in state 379 resolved as shift
WARNING: shift/reduce conflict for CASE in state 379 resolved as shift
WARNING: shift/reduce conflict for VAR in state 380 resolved as shift
WARNING: shift/reduce conflict for ID in state 380 resolved as shift
WARNING: shift/reduce conflict for IF in state 380 resolved as shift
WARNING: shift/reduce conflict for CASE in state 380 resolved as shift
WARNING: shift/reduce conflict for ID in state 390 resolved as shift
WARNING: shift/reduce conflict for IF in state 390 resolved as shift
WARNING: shift/reduce conflict for CASE in state 390 resolved as shift
