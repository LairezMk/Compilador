Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CASE
    FALSE
    FILE
    GOTO
    IN
    LABEL
    LBLOCK
    NIL
    PACKED
    RBLOCK
    READLINE
    RECORD
    REPEAT
    SET
    STRING
    TRUE
    UNTIL
    WITH

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON declaration_sections block DOT
Rule 2     declaration_sections -> declaration_sections declaration_section
Rule 3     declaration_sections -> empty
Rule 4     declaration_section -> uses_opt
Rule 5     declaration_section -> constant_declaration
Rule 6     declaration_section -> type_declaration
Rule 7     declaration_section -> var_declaration
Rule 8     declaration_section -> procedure_declaration
Rule 9     declaration_section -> function_declaration
Rule 10    uses_opt -> USES id_list SEMICOLON
Rule 11    uses_opt -> empty
Rule 12    id_list -> ID
Rule 13    id_list -> id_list COMMA ID
Rule 14    var_declaration -> VAR declaration_list
Rule 15    declaration_list -> declaration
Rule 16    declaration_list -> declaration_list declaration
Rule 17    declaration -> id_list COLON type_specifier SEMICOLON
Rule 18    block -> declaration_sections compound_statement
Rule 19    type_declaration -> TYPE type_list
Rule 20    type_list -> type_definition
Rule 21    type_list -> type_list type_definition
Rule 22    type_specifier -> LPAREN id_list RPAREN
Rule 23    type_definition -> ID EQUAL type_specifier SEMICOLON
Rule 24    type_specifier -> ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier
Rule 25    type_specifier -> INTEGER
Rule 26    type_specifier -> BYTE
Rule 27    type_specifier -> CHAR
Rule 28    type_specifier -> ID
Rule 29    type_specifier -> BOOLEAN_LITERAL
Rule 30    type_specifier -> LONGINT
Rule 31    procedure_declarations -> procedure_declaration
Rule 32    procedure_declarations -> procedure_declarations procedure_declaration
Rule 33    procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
Rule 34    procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT
Rule 35    function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
Rule 36    function_call -> ID LPAREN expression_list RPAREN
Rule 37    factor -> function_call
Rule 38    parameter_list -> parameter
Rule 39    parameter_list -> parameter_list SEMICOLON parameter
Rule 40    parameter -> id_list COLON type_specifier
Rule 41    parameter -> VAR id_list COLON type_specifier
Rule 42    compound_statement -> BEGIN statement_list END
Rule 43    statement_list -> statement statement_list_tail
Rule 44    statement_list_tail -> SEMICOLON statement statement_list_tail
Rule 45    statement_list_tail -> empty
Rule 46    statement -> if_statement
Rule 47    statement -> assignment_statement
Rule 48    statement -> while_statement
Rule 49    statement -> procedure_call
Rule 50    statement -> compound_statement
Rule 51    statement -> for_statement
Rule 52    statement -> empty
Rule 53    if_statement -> IF expression THEN statement ELSE statement
Rule 54    if_statement -> IF expression THEN statement
Rule 55    for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement
Rule 56    for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement
Rule 57    assignment_statement -> variable COLON_EQUAL expression
Rule 58    variable -> ID
Rule 59    variable -> ID LBRACKET expression RBRACKET
Rule 60    while_statement -> WHILE expression DO statement
Rule 61    procedure_call -> ID LPAREN expression_list RPAREN
Rule 62    expression_list -> expression expression_list_tail
Rule 63    expression_list_tail -> COMMA expression expression_list_tail
Rule 64    expression_list_tail -> empty
Rule 65    expression_list -> empty
Rule 66    expression -> simple_expression relop simple_expression
Rule 67    expression -> simple_expression
Rule 68    simple_expression -> term simple_expression_tail
Rule 69    simple_expression_tail -> addop term
Rule 70    simple_expression_tail -> empty
Rule 71    addop -> PLUS
Rule 72    addop -> MINUS
Rule 73    term -> factor term_tail
Rule 74    term_tail -> mulop factor
Rule 75    term_tail -> empty
Rule 76    mulop -> TIMES
Rule 77    mulop -> DIVIDE
Rule 78    mulop -> DIV
Rule 79    expression -> expression PLUS expression
Rule 80    expression -> expression MINUS expression
Rule 81    expression -> expression TIMES expression
Rule 82    expression -> expression DIVIDE expression
Rule 83    expression -> expression MOD expression
Rule 84    factor -> LPAREN expression RPAREN
Rule 85    factor -> variable
Rule 86    factor -> NUMBER
Rule 87    factor -> STRING_LITERAL
Rule 88    relop -> LESS
Rule 89    relop -> LESS_EQUAL
Rule 90    relop -> GREAT
Rule 91    relop -> GREAT_EQUAL
Rule 92    relop -> EQUAL
Rule 93    relop -> DIFFERENT
Rule 94    empty -> <empty>
Rule 95    statement -> READLN
Rule 96    statement -> READLN LPAREN variable RPAREN
Rule 97    statement -> READLN LBRACKET variable RBRACKET
Rule 98    statement -> WRITELN LPAREN expression_list RPAREN
Rule 99    statement -> WRITE LPAREN expression_list RPAREN
Rule 100   statement -> USES ID SEMICOLON
Rule 101   constant_declaration -> CONST constant_list
Rule 102   constant_list -> constant
Rule 103   constant_list -> constant_list constant
Rule 104   constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON
Rule 105   constant -> ID EQUAL NUMBER SEMICOLON
Rule 106   constant -> ID EQUAL STRING_LITERAL SEMICOLON
Rule 107   constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON
Rule 108   expression -> expression AND expression
Rule 109   expression -> expression OR expression
Rule 110   expression -> NOT expression

Terminals, with rules where they appear

AND                  : 108
ARRAY                : 24
BEGIN                : 42
BOOLEAN_LITERAL      : 29 107
BYTE                 : 26
CASE                 : 
CHAR                 : 27
CHARACTER_LITERAL    : 104
COLON                : 17 35 40 41
COLON_EQUAL          : 55 56 57
COMMA                : 13 63
CONST                : 101
DIFFERENT            : 93
DIV                  : 78
DIVIDE               : 77 82
DO                   : 55 56 60
DOT                  : 1 34
DOTDOT               : 24
DOWNTO               : 56
ELSE                 : 53
END                  : 42
EQUAL                : 23 92 104 105 106 107
FALSE                : 
FILE                 : 
FOR                  : 55 56
FUNCTION             : 35
GOTO                 : 
GREAT                : 90
GREAT_EQUAL          : 91
ID                   : 1 12 13 23 28 33 34 35 36 55 56 58 59 61 100 104 105 106 107
IF                   : 53 54
IN                   : 
INTEGER              : 25
LABEL                : 
LBLOCK               : 
LBRACKET             : 24 59 97
LESS                 : 88
LESS_EQUAL           : 89
LONGINT              : 30
LPAREN               : 22 33 34 35 36 61 84 96 98 99
MINUS                : 72 80
MOD                  : 83
NIL                  : 
NOT                  : 110
NUMBER               : 86 105
OF                   : 24
OR                   : 109
PACKED               : 
PLUS                 : 71 79
PROCEDURE            : 33 34
PROGRAM              : 1
RBLOCK               : 
RBRACKET             : 24 59 97
READLINE             : 
READLN               : 95 96 97
RECORD               : 
REPEAT               : 
RPAREN               : 22 33 34 35 36 61 84 96 98 99
SEMICOLON            : 1 10 17 23 33 33 34 35 35 39 44 100 104 105 106 107
SET                  : 
STRING               : 
STRING_LITERAL       : 87 106
THEN                 : 53 54
TIMES                : 76 81
TO                   : 55
TRUE                 : 
TYPE                 : 19
UNTIL                : 
USES                 : 10 100
VAR                  : 14 41
WHILE                : 60
WITH                 : 
WRITE                : 99
WRITELN              : 98
error                : 

Nonterminals, with rules where they appear

addop                : 69
assignment_statement : 47
block                : 1 33 34 35
compound_statement   : 18 50
constant             : 102 103
constant_declaration : 5
constant_list        : 101 103
declaration          : 15 16
declaration_list     : 14 16
declaration_section  : 2
declaration_sections : 1 2 18
empty                : 3 11 45 52 64 65 70 75
expression           : 24 24 53 54 55 55 56 56 57 59 60 62 63 79 79 80 80 81 81 82 82 83 83 84 108 108 109 109 110
expression_list      : 36 61 98 99
expression_list_tail : 62 63
factor               : 73 74
for_statement        : 51
function_call        : 37
function_declaration : 9
id_list              : 10 13 17 22 40 41
if_statement         : 46
mulop                : 74
parameter            : 38 39
parameter_list       : 33 34 35 39
procedure_call       : 49
procedure_declaration : 8 31 32
procedure_declarations : 32
program              : 0
relop                : 66
simple_expression    : 66 66 67
simple_expression_tail : 68
statement            : 43 44 53 53 54 55 56 60
statement_list       : 42
statement_list_tail  : 43 44
term                 : 68 69
term_tail            : 73
type_declaration     : 6
type_definition      : 20 21
type_list            : 19 21
type_specifier       : 17 23 24 35 40 41
uses_opt             : 4
var_declaration      : 7
variable             : 57 85 96 97
while_statement      : 48

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON declaration_sections block DOT

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON declaration_sections block DOT

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON declaration_sections block DOT

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . declaration_sections block DOT
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (94) empty -> .

    USES            reduce using rule 94 (empty -> .)
    CONST           reduce using rule 94 (empty -> .)
    TYPE            reduce using rule 94 (empty -> .)
    VAR             reduce using rule 94 (empty -> .)
    PROCEDURE       reduce using rule 94 (empty -> .)
    FUNCTION        reduce using rule 94 (empty -> .)
    BEGIN           reduce using rule 94 (empty -> .)

    declaration_sections           shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) program -> PROGRAM ID SEMICOLON declaration_sections . block DOT
    (2) declaration_sections -> declaration_sections . declaration_section
    (18) block -> . declaration_sections compound_statement
    (4) declaration_section -> . uses_opt
    (5) declaration_section -> . constant_declaration
    (6) declaration_section -> . type_declaration
    (7) declaration_section -> . var_declaration
    (8) declaration_section -> . procedure_declaration
    (9) declaration_section -> . function_declaration
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (10) uses_opt -> . USES id_list SEMICOLON
    (11) uses_opt -> . empty
    (101) constant_declaration -> . CONST constant_list
    (19) type_declaration -> . TYPE type_list
    (14) var_declaration -> . VAR declaration_list
    (33) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (34) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT
    (35) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (94) empty -> .

  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for PROCEDURE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
    USES            shift and go to state 17
    CONST           shift and go to state 18
    TYPE            shift and go to state 19
    VAR             shift and go to state 20
    PROCEDURE       shift and go to state 21
    FUNCTION        shift and go to state 22
    BEGIN           reduce using rule 94 (empty -> .)

  ! USES            [ reduce using rule 94 (empty -> .) ]
  ! CONST           [ reduce using rule 94 (empty -> .) ]
  ! TYPE            [ reduce using rule 94 (empty -> .) ]
  ! VAR             [ reduce using rule 94 (empty -> .) ]
  ! PROCEDURE       [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]

    declaration_sections           shift and go to state 7
    block                          shift and go to state 8
    declaration_section            shift and go to state 9
    uses_opt                       shift and go to state 10
    constant_declaration           shift and go to state 11
    type_declaration               shift and go to state 12
    var_declaration                shift and go to state 13
    procedure_declaration          shift and go to state 14
    function_declaration           shift and go to state 15
    empty                          shift and go to state 16

state 6

    (3) declaration_sections -> empty .

    USES            reduce using rule 3 (declaration_sections -> empty .)
    CONST           reduce using rule 3 (declaration_sections -> empty .)
    TYPE            reduce using rule 3 (declaration_sections -> empty .)
    VAR             reduce using rule 3 (declaration_sections -> empty .)
    PROCEDURE       reduce using rule 3 (declaration_sections -> empty .)
    FUNCTION        reduce using rule 3 (declaration_sections -> empty .)
    BEGIN           reduce using rule 3 (declaration_sections -> empty .)


state 7

    (18) block -> declaration_sections . compound_statement
    (2) declaration_sections -> declaration_sections . declaration_section
    (42) compound_statement -> . BEGIN statement_list END
    (4) declaration_section -> . uses_opt
    (5) declaration_section -> . constant_declaration
    (6) declaration_section -> . type_declaration
    (7) declaration_section -> . var_declaration
    (8) declaration_section -> . procedure_declaration
    (9) declaration_section -> . function_declaration
    (10) uses_opt -> . USES id_list SEMICOLON
    (11) uses_opt -> . empty
    (101) constant_declaration -> . CONST constant_list
    (19) type_declaration -> . TYPE type_list
    (14) var_declaration -> . VAR declaration_list
    (33) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (34) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT
    (35) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (94) empty -> .

  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for PROCEDURE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
    BEGIN           shift and go to state 24
    USES            shift and go to state 17
    CONST           shift and go to state 18
    TYPE            shift and go to state 19
    VAR             shift and go to state 20
    PROCEDURE       shift and go to state 21
    FUNCTION        shift and go to state 22

  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USES            [ reduce using rule 94 (empty -> .) ]
  ! CONST           [ reduce using rule 94 (empty -> .) ]
  ! TYPE            [ reduce using rule 94 (empty -> .) ]
  ! VAR             [ reduce using rule 94 (empty -> .) ]
  ! PROCEDURE       [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]

    compound_statement             shift and go to state 23
    declaration_section            shift and go to state 9
    uses_opt                       shift and go to state 10
    constant_declaration           shift and go to state 11
    type_declaration               shift and go to state 12
    var_declaration                shift and go to state 13
    procedure_declaration          shift and go to state 14
    function_declaration           shift and go to state 15
    empty                          shift and go to state 25

state 8

    (1) program -> PROGRAM ID SEMICOLON declaration_sections block . DOT

    DOT             shift and go to state 26


state 9

    (2) declaration_sections -> declaration_sections declaration_section .

    USES            reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    CONST           reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    TYPE            reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    VAR             reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    PROCEDURE       reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    FUNCTION        reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    BEGIN           reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)


state 10

    (4) declaration_section -> uses_opt .

    USES            reduce using rule 4 (declaration_section -> uses_opt .)
    CONST           reduce using rule 4 (declaration_section -> uses_opt .)
    TYPE            reduce using rule 4 (declaration_section -> uses_opt .)
    VAR             reduce using rule 4 (declaration_section -> uses_opt .)
    PROCEDURE       reduce using rule 4 (declaration_section -> uses_opt .)
    FUNCTION        reduce using rule 4 (declaration_section -> uses_opt .)
    BEGIN           reduce using rule 4 (declaration_section -> uses_opt .)


state 11

    (5) declaration_section -> constant_declaration .

    USES            reduce using rule 5 (declaration_section -> constant_declaration .)
    CONST           reduce using rule 5 (declaration_section -> constant_declaration .)
    TYPE            reduce using rule 5 (declaration_section -> constant_declaration .)
    VAR             reduce using rule 5 (declaration_section -> constant_declaration .)
    PROCEDURE       reduce using rule 5 (declaration_section -> constant_declaration .)
    FUNCTION        reduce using rule 5 (declaration_section -> constant_declaration .)
    BEGIN           reduce using rule 5 (declaration_section -> constant_declaration .)


state 12

    (6) declaration_section -> type_declaration .

    USES            reduce using rule 6 (declaration_section -> type_declaration .)
    CONST           reduce using rule 6 (declaration_section -> type_declaration .)
    TYPE            reduce using rule 6 (declaration_section -> type_declaration .)
    VAR             reduce using rule 6 (declaration_section -> type_declaration .)
    PROCEDURE       reduce using rule 6 (declaration_section -> type_declaration .)
    FUNCTION        reduce using rule 6 (declaration_section -> type_declaration .)
    BEGIN           reduce using rule 6 (declaration_section -> type_declaration .)


state 13

    (7) declaration_section -> var_declaration .

    USES            reduce using rule 7 (declaration_section -> var_declaration .)
    CONST           reduce using rule 7 (declaration_section -> var_declaration .)
    TYPE            reduce using rule 7 (declaration_section -> var_declaration .)
    VAR             reduce using rule 7 (declaration_section -> var_declaration .)
    PROCEDURE       reduce using rule 7 (declaration_section -> var_declaration .)
    FUNCTION        reduce using rule 7 (declaration_section -> var_declaration .)
    BEGIN           reduce using rule 7 (declaration_section -> var_declaration .)


state 14

    (8) declaration_section -> procedure_declaration .

    USES            reduce using rule 8 (declaration_section -> procedure_declaration .)
    CONST           reduce using rule 8 (declaration_section -> procedure_declaration .)
    TYPE            reduce using rule 8 (declaration_section -> procedure_declaration .)
    VAR             reduce using rule 8 (declaration_section -> procedure_declaration .)
    PROCEDURE       reduce using rule 8 (declaration_section -> procedure_declaration .)
    FUNCTION        reduce using rule 8 (declaration_section -> procedure_declaration .)
    BEGIN           reduce using rule 8 (declaration_section -> procedure_declaration .)


state 15

    (9) declaration_section -> function_declaration .

    USES            reduce using rule 9 (declaration_section -> function_declaration .)
    CONST           reduce using rule 9 (declaration_section -> function_declaration .)
    TYPE            reduce using rule 9 (declaration_section -> function_declaration .)
    VAR             reduce using rule 9 (declaration_section -> function_declaration .)
    PROCEDURE       reduce using rule 9 (declaration_section -> function_declaration .)
    FUNCTION        reduce using rule 9 (declaration_section -> function_declaration .)
    BEGIN           reduce using rule 9 (declaration_section -> function_declaration .)


state 16

    (3) declaration_sections -> empty .
    (11) uses_opt -> empty .

  ! reduce/reduce conflict for USES resolved using rule 3 (declaration_sections -> empty .)
  ! reduce/reduce conflict for CONST resolved using rule 3 (declaration_sections -> empty .)
  ! reduce/reduce conflict for TYPE resolved using rule 3 (declaration_sections -> empty .)
  ! reduce/reduce conflict for VAR resolved using rule 3 (declaration_sections -> empty .)
  ! reduce/reduce conflict for PROCEDURE resolved using rule 3 (declaration_sections -> empty .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 3 (declaration_sections -> empty .)
  ! reduce/reduce conflict for BEGIN resolved using rule 3 (declaration_sections -> empty .)
    BEGIN           reduce using rule 3 (declaration_sections -> empty .)
    USES            reduce using rule 3 (declaration_sections -> empty .)
    CONST           reduce using rule 3 (declaration_sections -> empty .)
    TYPE            reduce using rule 3 (declaration_sections -> empty .)
    VAR             reduce using rule 3 (declaration_sections -> empty .)
    PROCEDURE       reduce using rule 3 (declaration_sections -> empty .)
    FUNCTION        reduce using rule 3 (declaration_sections -> empty .)

  ! USES            [ reduce using rule 11 (uses_opt -> empty .) ]
  ! CONST           [ reduce using rule 11 (uses_opt -> empty .) ]
  ! TYPE            [ reduce using rule 11 (uses_opt -> empty .) ]
  ! VAR             [ reduce using rule 11 (uses_opt -> empty .) ]
  ! PROCEDURE       [ reduce using rule 11 (uses_opt -> empty .) ]
  ! FUNCTION        [ reduce using rule 11 (uses_opt -> empty .) ]
  ! BEGIN           [ reduce using rule 11 (uses_opt -> empty .) ]


state 17

    (10) uses_opt -> USES . id_list SEMICOLON
    (12) id_list -> . ID
    (13) id_list -> . id_list COMMA ID

    ID              shift and go to state 28

    id_list                        shift and go to state 27

state 18

    (101) constant_declaration -> CONST . constant_list
    (102) constant_list -> . constant
    (103) constant_list -> . constant_list constant
    (104) constant -> . ID EQUAL CHARACTER_LITERAL SEMICOLON
    (105) constant -> . ID EQUAL NUMBER SEMICOLON
    (106) constant -> . ID EQUAL STRING_LITERAL SEMICOLON
    (107) constant -> . ID EQUAL BOOLEAN_LITERAL SEMICOLON

    ID              shift and go to state 31

    constant_list                  shift and go to state 29
    constant                       shift and go to state 30

state 19

    (19) type_declaration -> TYPE . type_list
    (20) type_list -> . type_definition
    (21) type_list -> . type_list type_definition
    (23) type_definition -> . ID EQUAL type_specifier SEMICOLON

    ID              shift and go to state 34

    type_list                      shift and go to state 32
    type_definition                shift and go to state 33

state 20

    (14) var_declaration -> VAR . declaration_list
    (15) declaration_list -> . declaration
    (16) declaration_list -> . declaration_list declaration
    (17) declaration -> . id_list COLON type_specifier SEMICOLON
    (12) id_list -> . ID
    (13) id_list -> . id_list COMMA ID

    ID              shift and go to state 28

    declaration_list               shift and go to state 35
    declaration                    shift and go to state 36
    id_list                        shift and go to state 37

state 21

    (33) procedure_declaration -> PROCEDURE . ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (34) procedure_declaration -> PROCEDURE . ID LPAREN parameter_list RPAREN SEMICOLON block DOT

    ID              shift and go to state 38


state 22

    (35) function_declaration -> FUNCTION . ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON

    ID              shift and go to state 39


state 23

    (18) block -> declaration_sections compound_statement .

    DOT             reduce using rule 18 (block -> declaration_sections compound_statement .)
    SEMICOLON       reduce using rule 18 (block -> declaration_sections compound_statement .)


state 24

    (42) compound_statement -> BEGIN . statement_list END
    (43) statement_list -> . statement statement_list_tail
    (46) statement -> . if_statement
    (47) statement -> . assignment_statement
    (48) statement -> . while_statement
    (49) statement -> . procedure_call
    (50) statement -> . compound_statement
    (51) statement -> . for_statement
    (52) statement -> . empty
    (95) statement -> . READLN
    (96) statement -> . READLN LPAREN variable RPAREN
    (97) statement -> . READLN LBRACKET variable RBRACKET
    (98) statement -> . WRITELN LPAREN expression_list RPAREN
    (99) statement -> . WRITE LPAREN expression_list RPAREN
    (100) statement -> . USES ID SEMICOLON
    (53) if_statement -> . IF expression THEN statement ELSE statement
    (54) if_statement -> . IF expression THEN statement
    (57) assignment_statement -> . variable COLON_EQUAL expression
    (60) while_statement -> . WHILE expression DO statement
    (61) procedure_call -> . ID LPAREN expression_list RPAREN
    (42) compound_statement -> . BEGIN statement_list END
    (55) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (56) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (94) empty -> .
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    READLN          shift and go to state 49
    WRITELN         shift and go to state 51
    WRITE           shift and go to state 52
    USES            shift and go to state 53
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    ID              shift and go to state 54
    BEGIN           shift and go to state 24
    FOR             shift and go to state 57
    SEMICOLON       reduce using rule 94 (empty -> .)
    END             reduce using rule 94 (empty -> .)

    statement_list                 shift and go to state 40
    statement                      shift and go to state 41
    if_statement                   shift and go to state 42
    assignment_statement           shift and go to state 43
    while_statement                shift and go to state 44
    procedure_call                 shift and go to state 45
    compound_statement             shift and go to state 46
    for_statement                  shift and go to state 47
    empty                          shift and go to state 48
    variable                       shift and go to state 50

state 25

    (11) uses_opt -> empty .

    BEGIN           reduce using rule 11 (uses_opt -> empty .)
    USES            reduce using rule 11 (uses_opt -> empty .)
    CONST           reduce using rule 11 (uses_opt -> empty .)
    TYPE            reduce using rule 11 (uses_opt -> empty .)
    VAR             reduce using rule 11 (uses_opt -> empty .)
    PROCEDURE       reduce using rule 11 (uses_opt -> empty .)
    FUNCTION        reduce using rule 11 (uses_opt -> empty .)


state 26

    (1) program -> PROGRAM ID SEMICOLON declaration_sections block DOT .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON declaration_sections block DOT .)


state 27

    (10) uses_opt -> USES id_list . SEMICOLON
    (13) id_list -> id_list . COMMA ID

    SEMICOLON       shift and go to state 58
    COMMA           shift and go to state 59


state 28

    (12) id_list -> ID .

    SEMICOLON       reduce using rule 12 (id_list -> ID .)
    COMMA           reduce using rule 12 (id_list -> ID .)
    COLON           reduce using rule 12 (id_list -> ID .)
    RPAREN          reduce using rule 12 (id_list -> ID .)


state 29

    (101) constant_declaration -> CONST constant_list .
    (103) constant_list -> constant_list . constant
    (104) constant -> . ID EQUAL CHARACTER_LITERAL SEMICOLON
    (105) constant -> . ID EQUAL NUMBER SEMICOLON
    (106) constant -> . ID EQUAL STRING_LITERAL SEMICOLON
    (107) constant -> . ID EQUAL BOOLEAN_LITERAL SEMICOLON

    USES            reduce using rule 101 (constant_declaration -> CONST constant_list .)
    CONST           reduce using rule 101 (constant_declaration -> CONST constant_list .)
    TYPE            reduce using rule 101 (constant_declaration -> CONST constant_list .)
    VAR             reduce using rule 101 (constant_declaration -> CONST constant_list .)
    PROCEDURE       reduce using rule 101 (constant_declaration -> CONST constant_list .)
    FUNCTION        reduce using rule 101 (constant_declaration -> CONST constant_list .)
    BEGIN           reduce using rule 101 (constant_declaration -> CONST constant_list .)
    ID              shift and go to state 31

    constant                       shift and go to state 60

state 30

    (102) constant_list -> constant .

    ID              reduce using rule 102 (constant_list -> constant .)
    USES            reduce using rule 102 (constant_list -> constant .)
    CONST           reduce using rule 102 (constant_list -> constant .)
    TYPE            reduce using rule 102 (constant_list -> constant .)
    VAR             reduce using rule 102 (constant_list -> constant .)
    PROCEDURE       reduce using rule 102 (constant_list -> constant .)
    FUNCTION        reduce using rule 102 (constant_list -> constant .)
    BEGIN           reduce using rule 102 (constant_list -> constant .)


state 31

    (104) constant -> ID . EQUAL CHARACTER_LITERAL SEMICOLON
    (105) constant -> ID . EQUAL NUMBER SEMICOLON
    (106) constant -> ID . EQUAL STRING_LITERAL SEMICOLON
    (107) constant -> ID . EQUAL BOOLEAN_LITERAL SEMICOLON

    EQUAL           shift and go to state 61


state 32

    (19) type_declaration -> TYPE type_list .
    (21) type_list -> type_list . type_definition
    (23) type_definition -> . ID EQUAL type_specifier SEMICOLON

    USES            reduce using rule 19 (type_declaration -> TYPE type_list .)
    CONST           reduce using rule 19 (type_declaration -> TYPE type_list .)
    TYPE            reduce using rule 19 (type_declaration -> TYPE type_list .)
    VAR             reduce using rule 19 (type_declaration -> TYPE type_list .)
    PROCEDURE       reduce using rule 19 (type_declaration -> TYPE type_list .)
    FUNCTION        reduce using rule 19 (type_declaration -> TYPE type_list .)
    BEGIN           reduce using rule 19 (type_declaration -> TYPE type_list .)
    ID              shift and go to state 34

    type_definition                shift and go to state 62

state 33

    (20) type_list -> type_definition .

    ID              reduce using rule 20 (type_list -> type_definition .)
    USES            reduce using rule 20 (type_list -> type_definition .)
    CONST           reduce using rule 20 (type_list -> type_definition .)
    TYPE            reduce using rule 20 (type_list -> type_definition .)
    VAR             reduce using rule 20 (type_list -> type_definition .)
    PROCEDURE       reduce using rule 20 (type_list -> type_definition .)
    FUNCTION        reduce using rule 20 (type_list -> type_definition .)
    BEGIN           reduce using rule 20 (type_list -> type_definition .)


state 34

    (23) type_definition -> ID . EQUAL type_specifier SEMICOLON

    EQUAL           shift and go to state 63


state 35

    (14) var_declaration -> VAR declaration_list .
    (16) declaration_list -> declaration_list . declaration
    (17) declaration -> . id_list COLON type_specifier SEMICOLON
    (12) id_list -> . ID
    (13) id_list -> . id_list COMMA ID

    USES            reduce using rule 14 (var_declaration -> VAR declaration_list .)
    CONST           reduce using rule 14 (var_declaration -> VAR declaration_list .)
    TYPE            reduce using rule 14 (var_declaration -> VAR declaration_list .)
    VAR             reduce using rule 14 (var_declaration -> VAR declaration_list .)
    PROCEDURE       reduce using rule 14 (var_declaration -> VAR declaration_list .)
    FUNCTION        reduce using rule 14 (var_declaration -> VAR declaration_list .)
    BEGIN           reduce using rule 14 (var_declaration -> VAR declaration_list .)
    ID              shift and go to state 28

    declaration                    shift and go to state 64
    id_list                        shift and go to state 37

state 36

    (15) declaration_list -> declaration .

    ID              reduce using rule 15 (declaration_list -> declaration .)
    USES            reduce using rule 15 (declaration_list -> declaration .)
    CONST           reduce using rule 15 (declaration_list -> declaration .)
    TYPE            reduce using rule 15 (declaration_list -> declaration .)
    VAR             reduce using rule 15 (declaration_list -> declaration .)
    PROCEDURE       reduce using rule 15 (declaration_list -> declaration .)
    FUNCTION        reduce using rule 15 (declaration_list -> declaration .)
    BEGIN           reduce using rule 15 (declaration_list -> declaration .)


state 37

    (17) declaration -> id_list . COLON type_specifier SEMICOLON
    (13) id_list -> id_list . COMMA ID

    COLON           shift and go to state 65
    COMMA           shift and go to state 59


state 38

    (33) procedure_declaration -> PROCEDURE ID . LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (34) procedure_declaration -> PROCEDURE ID . LPAREN parameter_list RPAREN SEMICOLON block DOT

    LPAREN          shift and go to state 66


state 39

    (35) function_declaration -> FUNCTION ID . LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON

    LPAREN          shift and go to state 67


state 40

    (42) compound_statement -> BEGIN statement_list . END

    END             shift and go to state 68


state 41

    (43) statement_list -> statement . statement_list_tail
    (44) statement_list_tail -> . SEMICOLON statement statement_list_tail
    (45) statement_list_tail -> . empty
    (94) empty -> .

    SEMICOLON       shift and go to state 70
    END             reduce using rule 94 (empty -> .)

    statement_list_tail            shift and go to state 69
    empty                          shift and go to state 71

state 42

    (46) statement -> if_statement .

    SEMICOLON       reduce using rule 46 (statement -> if_statement .)
    END             reduce using rule 46 (statement -> if_statement .)
    ELSE            reduce using rule 46 (statement -> if_statement .)


state 43

    (47) statement -> assignment_statement .

    SEMICOLON       reduce using rule 47 (statement -> assignment_statement .)
    END             reduce using rule 47 (statement -> assignment_statement .)
    ELSE            reduce using rule 47 (statement -> assignment_statement .)


state 44

    (48) statement -> while_statement .

    SEMICOLON       reduce using rule 48 (statement -> while_statement .)
    END             reduce using rule 48 (statement -> while_statement .)
    ELSE            reduce using rule 48 (statement -> while_statement .)


state 45

    (49) statement -> procedure_call .

    SEMICOLON       reduce using rule 49 (statement -> procedure_call .)
    END             reduce using rule 49 (statement -> procedure_call .)
    ELSE            reduce using rule 49 (statement -> procedure_call .)


state 46

    (50) statement -> compound_statement .

    SEMICOLON       reduce using rule 50 (statement -> compound_statement .)
    END             reduce using rule 50 (statement -> compound_statement .)
    ELSE            reduce using rule 50 (statement -> compound_statement .)


state 47

    (51) statement -> for_statement .

    SEMICOLON       reduce using rule 51 (statement -> for_statement .)
    END             reduce using rule 51 (statement -> for_statement .)
    ELSE            reduce using rule 51 (statement -> for_statement .)


state 48

    (52) statement -> empty .

    SEMICOLON       reduce using rule 52 (statement -> empty .)
    END             reduce using rule 52 (statement -> empty .)
    ELSE            reduce using rule 52 (statement -> empty .)


state 49

    (95) statement -> READLN .
    (96) statement -> READLN . LPAREN variable RPAREN
    (97) statement -> READLN . LBRACKET variable RBRACKET

    SEMICOLON       reduce using rule 95 (statement -> READLN .)
    END             reduce using rule 95 (statement -> READLN .)
    ELSE            reduce using rule 95 (statement -> READLN .)
    LPAREN          shift and go to state 72
    LBRACKET        shift and go to state 73


state 50

    (57) assignment_statement -> variable . COLON_EQUAL expression

    COLON_EQUAL     shift and go to state 74


state 51

    (98) statement -> WRITELN . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 75


state 52

    (99) statement -> WRITE . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 76


state 53

    (100) statement -> USES . ID SEMICOLON

    ID              shift and go to state 77


state 54

    (61) procedure_call -> ID . LPAREN expression_list RPAREN
    (58) variable -> ID .
    (59) variable -> ID . LBRACKET expression RBRACKET

    LPAREN          shift and go to state 78
    COLON_EQUAL     reduce using rule 58 (variable -> ID .)
    LBRACKET        shift and go to state 79


state 55

    (53) if_statement -> IF . expression THEN statement ELSE statement
    (54) if_statement -> IF . expression THEN statement
    (66) expression -> . simple_expression relop simple_expression
    (67) expression -> . simple_expression
    (79) expression -> . expression PLUS expression
    (80) expression -> . expression MINUS expression
    (81) expression -> . expression TIMES expression
    (82) expression -> . expression DIVIDE expression
    (83) expression -> . expression MOD expression
    (108) expression -> . expression AND expression
    (109) expression -> . expression OR expression
    (110) expression -> . NOT expression
    (68) simple_expression -> . term simple_expression_tail
    (73) term -> . factor term_tail
    (37) factor -> . function_call
    (84) factor -> . LPAREN expression RPAREN
    (85) factor -> . variable
    (86) factor -> . NUMBER
    (87) factor -> . STRING_LITERAL
    (36) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 82
    LPAREN          shift and go to state 86
    NUMBER          shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    ID              shift and go to state 90

    expression                     shift and go to state 80
    simple_expression              shift and go to state 81
    term                           shift and go to state 83
    factor                         shift and go to state 84
    function_call                  shift and go to state 85
    variable                       shift and go to state 87

state 56

    (60) while_statement -> WHILE . expression DO statement
    (66) expression -> . simple_expression relop simple_expression
    (67) expression -> . simple_expression
    (79) expression -> . expression PLUS expression
    (80) expression -> . expression MINUS expression
    (81) expression -> . expression TIMES expression
    (82) expression -> . expression DIVIDE expression
    (83) expression -> . expression MOD expression
    (108) expression -> . expression AND expression
    (109) expression -> . expression OR expression
    (110) expression -> . NOT expression
    (68) simple_expression -> . term simple_expression_tail
    (73) term -> . factor term_tail
    (37) factor -> . function_call
    (84) factor -> . LPAREN expression RPAREN
    (85) factor -> . variable
    (86) factor -> . NUMBER
    (87) factor -> . STRING_LITERAL
    (36) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 82
    LPAREN          shift and go to state 86
    NUMBER          shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    ID              shift and go to state 90

    expression                     shift and go to state 91
    simple_expression              shift and go to state 81
    term                           shift and go to state 83
    factor                         shift and go to state 84
    function_call                  shift and go to state 85
    variable                       shift and go to state 87

state 57

    (55) for_statement -> FOR . ID COLON_EQUAL expression TO expression DO statement
    (56) for_statement -> FOR . ID COLON_EQUAL expression DOWNTO expression DO statement

    ID              shift and go to state 92


state 58

    (10) uses_opt -> USES id_list SEMICOLON .

    USES            reduce using rule 10 (uses_opt -> USES id_list SEMICOLON .)
    CONST           reduce using rule 10 (uses_opt -> USES id_list SEMICOLON .)
    TYPE            reduce using rule 10 (uses_opt -> USES id_list SEMICOLON .)
    VAR             reduce using rule 10 (uses_opt -> USES id_list SEMICOLON .)
    PROCEDURE       reduce using rule 10 (uses_opt -> USES id_list SEMICOLON .)
    FUNCTION        reduce using rule 10 (uses_opt -> USES id_list SEMICOLON .)
    BEGIN           reduce using rule 10 (uses_opt -> USES id_list SEMICOLON .)


state 59

    (13) id_list -> id_list COMMA . ID

    ID              shift and go to state 93


state 60

    (103) constant_list -> constant_list constant .

    ID              reduce using rule 103 (constant_list -> constant_list constant .)
    USES            reduce using rule 103 (constant_list -> constant_list constant .)
    CONST           reduce using rule 103 (constant_list -> constant_list constant .)
    TYPE            reduce using rule 103 (constant_list -> constant_list constant .)
    VAR             reduce using rule 103 (constant_list -> constant_list constant .)
    PROCEDURE       reduce using rule 103 (constant_list -> constant_list constant .)
    FUNCTION        reduce using rule 103 (constant_list -> constant_list constant .)
    BEGIN           reduce using rule 103 (constant_list -> constant_list constant .)


state 61

    (104) constant -> ID EQUAL . CHARACTER_LITERAL SEMICOLON
    (105) constant -> ID EQUAL . NUMBER SEMICOLON
    (106) constant -> ID EQUAL . STRING_LITERAL SEMICOLON
    (107) constant -> ID EQUAL . BOOLEAN_LITERAL SEMICOLON

    CHARACTER_LITERAL shift and go to state 94
    NUMBER          shift and go to state 95
    STRING_LITERAL  shift and go to state 96
    BOOLEAN_LITERAL shift and go to state 97


state 62

    (21) type_list -> type_list type_definition .

    ID              reduce using rule 21 (type_list -> type_list type_definition .)
    USES            reduce using rule 21 (type_list -> type_list type_definition .)
    CONST           reduce using rule 21 (type_list -> type_list type_definition .)
    TYPE            reduce using rule 21 (type_list -> type_list type_definition .)
    VAR             reduce using rule 21 (type_list -> type_list type_definition .)
    PROCEDURE       reduce using rule 21 (type_list -> type_list type_definition .)
    FUNCTION        reduce using rule 21 (type_list -> type_list type_definition .)
    BEGIN           reduce using rule 21 (type_list -> type_list type_definition .)


state 63

    (23) type_definition -> ID EQUAL . type_specifier SEMICOLON
    (22) type_specifier -> . LPAREN id_list RPAREN
    (24) type_specifier -> . ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier
    (25) type_specifier -> . INTEGER
    (26) type_specifier -> . BYTE
    (27) type_specifier -> . CHAR
    (28) type_specifier -> . ID
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . LONGINT

    LPAREN          shift and go to state 100
    ARRAY           shift and go to state 101
    INTEGER         shift and go to state 102
    BYTE            shift and go to state 103
    CHAR            shift and go to state 104
    ID              shift and go to state 98
    BOOLEAN_LITERAL shift and go to state 105
    LONGINT         shift and go to state 106

    type_specifier                 shift and go to state 99

state 64

    (16) declaration_list -> declaration_list declaration .

    ID              reduce using rule 16 (declaration_list -> declaration_list declaration .)
    USES            reduce using rule 16 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 16 (declaration_list -> declaration_list declaration .)
    TYPE            reduce using rule 16 (declaration_list -> declaration_list declaration .)
    VAR             reduce using rule 16 (declaration_list -> declaration_list declaration .)
    PROCEDURE       reduce using rule 16 (declaration_list -> declaration_list declaration .)
    FUNCTION        reduce using rule 16 (declaration_list -> declaration_list declaration .)
    BEGIN           reduce using rule 16 (declaration_list -> declaration_list declaration .)


state 65

    (17) declaration -> id_list COLON . type_specifier SEMICOLON
    (22) type_specifier -> . LPAREN id_list RPAREN
    (24) type_specifier -> . ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier
    (25) type_specifier -> . INTEGER
    (26) type_specifier -> . BYTE
    (27) type_specifier -> . CHAR
    (28) type_specifier -> . ID
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . LONGINT

    LPAREN          shift and go to state 100
    ARRAY           shift and go to state 101
    INTEGER         shift and go to state 102
    BYTE            shift and go to state 103
    CHAR            shift and go to state 104
    ID              shift and go to state 98
    BOOLEAN_LITERAL shift and go to state 105
    LONGINT         shift and go to state 106

    type_specifier                 shift and go to state 107

state 66

    (33) procedure_declaration -> PROCEDURE ID LPAREN . parameter_list RPAREN SEMICOLON block SEMICOLON
    (34) procedure_declaration -> PROCEDURE ID LPAREN . parameter_list RPAREN SEMICOLON block DOT
    (38) parameter_list -> . parameter
    (39) parameter_list -> . parameter_list SEMICOLON parameter
    (40) parameter -> . id_list COLON type_specifier
    (41) parameter -> . VAR id_list COLON type_specifier
    (12) id_list -> . ID
    (13) id_list -> . id_list COMMA ID

    VAR             shift and go to state 111
    ID              shift and go to state 28

    parameter_list                 shift and go to state 108
    parameter                      shift and go to state 109
    id_list                        shift and go to state 110

state 67

    (35) function_declaration -> FUNCTION ID LPAREN . parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (38) parameter_list -> . parameter
    (39) parameter_list -> . parameter_list SEMICOLON parameter
    (40) parameter -> . id_list COLON type_specifier
    (41) parameter -> . VAR id_list COLON type_specifier
    (12) id_list -> . ID
    (13) id_list -> . id_list COMMA ID

    VAR             shift and go to state 111
    ID              shift and go to state 28

    parameter_list                 shift and go to state 112
    parameter                      shift and go to state 109
    id_list                        shift and go to state 110

state 68

    (42) compound_statement -> BEGIN statement_list END .

    DOT             reduce using rule 42 (compound_statement -> BEGIN statement_list END .)
    SEMICOLON       reduce using rule 42 (compound_statement -> BEGIN statement_list END .)
    END             reduce using rule 42 (compound_statement -> BEGIN statement_list END .)
    ELSE            reduce using rule 42 (compound_statement -> BEGIN statement_list END .)


state 69

    (43) statement_list -> statement statement_list_tail .

    END             reduce using rule 43 (statement_list -> statement statement_list_tail .)


state 70

    (44) statement_list_tail -> SEMICOLON . statement statement_list_tail
    (46) statement -> . if_statement
    (47) statement -> . assignment_statement
    (48) statement -> . while_statement
    (49) statement -> . procedure_call
    (50) statement -> . compound_statement
    (51) statement -> . for_statement
    (52) statement -> . empty
    (95) statement -> . READLN
    (96) statement -> . READLN LPAREN variable RPAREN
    (97) statement -> . READLN LBRACKET variable RBRACKET
    (98) statement -> . WRITELN LPAREN expression_list RPAREN
    (99) statement -> . WRITE LPAREN expression_list RPAREN
    (100) statement -> . USES ID SEMICOLON
    (53) if_statement -> . IF expression THEN statement ELSE statement
    (54) if_statement -> . IF expression THEN statement
    (57) assignment_statement -> . variable COLON_EQUAL expression
    (60) while_statement -> . WHILE expression DO statement
    (61) procedure_call -> . ID LPAREN expression_list RPAREN
    (42) compound_statement -> . BEGIN statement_list END
    (55) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (56) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (94) empty -> .
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    READLN          shift and go to state 49
    WRITELN         shift and go to state 51
    WRITE           shift and go to state 52
    USES            shift and go to state 53
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    ID              shift and go to state 54
    BEGIN           shift and go to state 24
    FOR             shift and go to state 57
    SEMICOLON       reduce using rule 94 (empty -> .)
    END             reduce using rule 94 (empty -> .)

    statement                      shift and go to state 113
    if_statement                   shift and go to state 42
    assignment_statement           shift and go to state 43
    while_statement                shift and go to state 44
    procedure_call                 shift and go to state 45
    compound_statement             shift and go to state 46
    for_statement                  shift and go to state 47
    empty                          shift and go to state 48
    variable                       shift and go to state 50

state 71

    (45) statement_list_tail -> empty .

    END             reduce using rule 45 (statement_list_tail -> empty .)


state 72

    (96) statement -> READLN LPAREN . variable RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 115

    variable                       shift and go to state 114

state 73

    (97) statement -> READLN LBRACKET . variable RBRACKET
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 115

    variable                       shift and go to state 116

state 74

    (57) assignment_statement -> variable COLON_EQUAL . expression
    (66) expression -> . simple_expression relop simple_expression
    (67) expression -> . simple_expression
    (79) expression -> . expression PLUS expression
    (80) expression -> . expression MINUS expression
    (81) expression -> . expression TIMES expression
    (82) expression -> . expression DIVIDE expression
    (83) expression -> . expression MOD expression
    (108) expression -> . expression AND expression
    (109) expression -> . expression OR expression
    (110) expression -> . NOT expression
    (68) simple_expression -> . term simple_expression_tail
    (73) term -> . factor term_tail
    (37) factor -> . function_call
    (84) factor -> . LPAREN expression RPAREN
    (85) factor -> . variable
    (86) factor -> . NUMBER
    (87) factor -> . STRING_LITERAL
    (36) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 82
    LPAREN          shift and go to state 86
    NUMBER          shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    ID              shift and go to state 90

    variable                       shift and go to state 87
    expression                     shift and go to state 117
    simple_expression              shift and go to state 81
    term                           shift and go to state 83
    factor                         shift and go to state 84
    function_call                  shift and go to state 85

state 75

    (98) statement -> WRITELN LPAREN . expression_list RPAREN
    (62) expression_list -> . expression expression_list_tail
    (65) expression_list -> . empty
    (66) expression -> . simple_expression relop simple_expression
    (67) expression -> . simple_expression
    (79) expression -> . expression PLUS expression
    (80) expression -> . expression MINUS expression
    (81) expression -> . expression TIMES expression
    (82) expression -> . expression DIVIDE expression
    (83) expression -> . expression MOD expression
    (108) expression -> . expression AND expression
    (109) expression -> . expression OR expression
    (110) expression -> . NOT expression
    (94) empty -> .
    (68) simple_expression -> . term simple_expression_tail
    (73) term -> . factor term_tail
    (37) factor -> . function_call
    (84) factor -> . LPAREN expression RPAREN
    (85) factor -> . variable
    (86) factor -> . NUMBER
    (87) factor -> . STRING_LITERAL
    (36) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 82
    RPAREN          reduce using rule 94 (empty -> .)
    LPAREN          shift and go to state 86
    NUMBER          shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    ID              shift and go to state 90

    expression_list                shift and go to state 118
    expression                     shift and go to state 119
    empty                          shift and go to state 120
    simple_expression              shift and go to state 81
    term                           shift and go to state 83
    factor                         shift and go to state 84
    function_call                  shift and go to state 85
    variable                       shift and go to state 87

state 76

    (99) statement -> WRITE LPAREN . expression_list RPAREN
    (62) expression_list -> . expression expression_list_tail
    (65) expression_list -> . empty
    (66) expression -> . simple_expression relop simple_expression
    (67) expression -> . simple_expression
    (79) expression -> . expression PLUS expression
    (80) expression -> . expression MINUS expression
    (81) expression -> . expression TIMES expression
    (82) expression -> . expression DIVIDE expression
    (83) expression -> . expression MOD expression
    (108) expression -> . expression AND expression
    (109) expression -> . expression OR expression
    (110) expression -> . NOT expression
    (94) empty -> .
    (68) simple_expression -> . term simple_expression_tail
    (73) term -> . factor term_tail
    (37) factor -> . function_call
    (84) factor -> . LPAREN expression RPAREN
    (85) factor -> . variable
    (86) factor -> . NUMBER
    (87) factor -> . STRING_LITERAL
    (36) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 82
    RPAREN          reduce using rule 94 (empty -> .)
    LPAREN          shift and go to state 86
    NUMBER          shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    ID              shift and go to state 90

    expression_list                shift and go to state 121
    expression                     shift and go to state 119
    empty                          shift and go to state 120
    simple_expression              shift and go to state 81
    term                           shift and go to state 83
    factor                         shift and go to state 84
    function_call                  shift and go to state 85
    variable                       shift and go to state 87

state 77

    (100) statement -> USES ID . SEMICOLON

    SEMICOLON       shift and go to state 122


state 78

    (61) procedure_call -> ID LPAREN . expression_list RPAREN
    (62) expression_list -> . expression expression_list_tail
    (65) expression_list -> . empty
    (66) expression -> . simple_expression relop simple_expression
    (67) expression -> . simple_expression
    (79) expression -> . expression PLUS expression
    (80) expression -> . expression MINUS expression
    (81) expression -> . expression TIMES expression
    (82) expression -> . expression DIVIDE expression
    (83) expression -> . expression MOD expression
    (108) expression -> . expression AND expression
    (109) expression -> . expression OR expression
    (110) expression -> . NOT expression
    (94) empty -> .
    (68) simple_expression -> . term simple_expression_tail
    (73) term -> . factor term_tail
    (37) factor -> . function_call
    (84) factor -> . LPAREN expression RPAREN
    (85) factor -> . variable
    (86) factor -> . NUMBER
    (87) factor -> . STRING_LITERAL
    (36) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 82
    RPAREN          reduce using rule 94 (empty -> .)
    LPAREN          shift and go to state 86
    NUMBER          shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    ID              shift and go to state 90

    expression_list                shift and go to state 123
    expression                     shift and go to state 119
    empty                          shift and go to state 120
    simple_expression              shift and go to state 81
    term                           shift and go to state 83
    factor                         shift and go to state 84
    function_call                  shift and go to state 85
    variable                       shift and go to state 87

state 79

    (59) variable -> ID LBRACKET . expression RBRACKET
    (66) expression -> . simple_expression relop simple_expression
    (67) expression -> . simple_expression
    (79) expression -> . expression PLUS expression
    (80) expression -> . expression MINUS expression
    (81) expression -> . expression TIMES expression
    (82) expression -> . expression DIVIDE expression
    (83) expression -> . expression MOD expression
    (108) expression -> . expression AND expression
    (109) expression -> . expression OR expression
    (110) expression -> . NOT expression
    (68) simple_expression -> . term simple_expression_tail
    (73) term -> . factor term_tail
    (37) factor -> . function_call
    (84) factor -> . LPAREN expression RPAREN
    (85) factor -> . variable
    (86) factor -> . NUMBER
    (87) factor -> . STRING_LITERAL
    (36) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 82
    LPAREN          shift and go to state 86
    NUMBER          shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    ID              shift and go to state 90

    expression                     shift and go to state 124
    simple_expression              shift and go to state 81
    term                           shift and go to state 83
    factor                         shift and go to state 84
    function_call                  shift and go to state 85
    variable                       shift and go to state 87

state 80

    (53) if_statement -> IF expression . THEN statement ELSE statement
    (54) if_statement -> IF expression . THEN statement
    (79) expression -> expression . PLUS expression
    (80) expression -> expression . MINUS expression
    (81) expression -> expression . TIMES expression
    (82) expression -> expression . DIVIDE expression
    (83) expression -> expression . MOD expression
    (108) expression -> expression . AND expression
    (109) expression -> expression . OR expression

    THEN            shift and go to state 125
    PLUS            shift and go to state 126
    MINUS           shift and go to state 127
    TIMES           shift and go to state 128
    DIVIDE          shift and go to state 129
    MOD             shift and go to state 130
    AND             shift and go to state 131
    OR              shift and go to state 132


state 81

    (66) expression -> simple_expression . relop simple_expression
    (67) expression -> simple_expression .
    (88) relop -> . LESS
    (89) relop -> . LESS_EQUAL
    (90) relop -> . GREAT
    (91) relop -> . GREAT_EQUAL
    (92) relop -> . EQUAL
    (93) relop -> . DIFFERENT

    THEN            reduce using rule 67 (expression -> simple_expression .)
    PLUS            reduce using rule 67 (expression -> simple_expression .)
    MINUS           reduce using rule 67 (expression -> simple_expression .)
    TIMES           reduce using rule 67 (expression -> simple_expression .)
    DIVIDE          reduce using rule 67 (expression -> simple_expression .)
    MOD             reduce using rule 67 (expression -> simple_expression .)
    AND             reduce using rule 67 (expression -> simple_expression .)
    OR              reduce using rule 67 (expression -> simple_expression .)
    DO              reduce using rule 67 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 67 (expression -> simple_expression .)
    END             reduce using rule 67 (expression -> simple_expression .)
    ELSE            reduce using rule 67 (expression -> simple_expression .)
    COMMA           reduce using rule 67 (expression -> simple_expression .)
    RPAREN          reduce using rule 67 (expression -> simple_expression .)
    RBRACKET        reduce using rule 67 (expression -> simple_expression .)
    TO              reduce using rule 67 (expression -> simple_expression .)
    DOWNTO          reduce using rule 67 (expression -> simple_expression .)
    DOTDOT          reduce using rule 67 (expression -> simple_expression .)
    LESS            shift and go to state 134
    LESS_EQUAL      shift and go to state 135
    GREAT           shift and go to state 136
    GREAT_EQUAL     shift and go to state 137
    EQUAL           shift and go to state 138
    DIFFERENT       shift and go to state 139

    relop                          shift and go to state 133

state 82

    (110) expression -> NOT . expression
    (66) expression -> . simple_expression relop simple_expression
    (67) expression -> . simple_expression
    (79) expression -> . expression PLUS expression
    (80) expression -> . expression MINUS expression
    (81) expression -> . expression TIMES expression
    (82) expression -> . expression DIVIDE expression
    (83) expression -> . expression MOD expression
    (108) expression -> . expression AND expression
    (109) expression -> . expression OR expression
    (110) expression -> . NOT expression
    (68) simple_expression -> . term simple_expression_tail
    (73) term -> . factor term_tail
    (37) factor -> . function_call
    (84) factor -> . LPAREN expression RPAREN
    (85) factor -> . variable
    (86) factor -> . NUMBER
    (87) factor -> . STRING_LITERAL
    (36) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 82
    LPAREN          shift and go to state 86
    NUMBER          shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    ID              shift and go to state 90

    expression                     shift and go to state 140
    simple_expression              shift and go to state 81
    term                           shift and go to state 83
    factor                         shift and go to state 84
    function_call                  shift and go to state 85
    variable                       shift and go to state 87

state 83

    (68) simple_expression -> term . simple_expression_tail
    (69) simple_expression_tail -> . addop term
    (70) simple_expression_tail -> . empty
    (71) addop -> . PLUS
    (72) addop -> . MINUS
    (94) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 144
    MINUS           shift and go to state 145
    LESS            reduce using rule 94 (empty -> .)
    LESS_EQUAL      reduce using rule 94 (empty -> .)
    GREAT           reduce using rule 94 (empty -> .)
    GREAT_EQUAL     reduce using rule 94 (empty -> .)
    EQUAL           reduce using rule 94 (empty -> .)
    DIFFERENT       reduce using rule 94 (empty -> .)
    THEN            reduce using rule 94 (empty -> .)
    TIMES           reduce using rule 94 (empty -> .)
    DIVIDE          reduce using rule 94 (empty -> .)
    MOD             reduce using rule 94 (empty -> .)
    AND             reduce using rule 94 (empty -> .)
    OR              reduce using rule 94 (empty -> .)
    DO              reduce using rule 94 (empty -> .)
    SEMICOLON       reduce using rule 94 (empty -> .)
    END             reduce using rule 94 (empty -> .)
    ELSE            reduce using rule 94 (empty -> .)
    COMMA           reduce using rule 94 (empty -> .)
    RPAREN          reduce using rule 94 (empty -> .)
    RBRACKET        reduce using rule 94 (empty -> .)
    TO              reduce using rule 94 (empty -> .)
    DOWNTO          reduce using rule 94 (empty -> .)
    DOTDOT          reduce using rule 94 (empty -> .)

  ! PLUS            [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]

    simple_expression_tail         shift and go to state 141
    addop                          shift and go to state 142
    empty                          shift and go to state 143

state 84

    (73) term -> factor . term_tail
    (74) term_tail -> . mulop factor
    (75) term_tail -> . empty
    (76) mulop -> . TIMES
    (77) mulop -> . DIVIDE
    (78) mulop -> . DIV
    (94) empty -> .

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    TIMES           shift and go to state 149
    DIVIDE          shift and go to state 150
    DIV             shift and go to state 151
    PLUS            reduce using rule 94 (empty -> .)
    MINUS           reduce using rule 94 (empty -> .)
    LESS            reduce using rule 94 (empty -> .)
    LESS_EQUAL      reduce using rule 94 (empty -> .)
    GREAT           reduce using rule 94 (empty -> .)
    GREAT_EQUAL     reduce using rule 94 (empty -> .)
    EQUAL           reduce using rule 94 (empty -> .)
    DIFFERENT       reduce using rule 94 (empty -> .)
    THEN            reduce using rule 94 (empty -> .)
    MOD             reduce using rule 94 (empty -> .)
    AND             reduce using rule 94 (empty -> .)
    OR              reduce using rule 94 (empty -> .)
    DO              reduce using rule 94 (empty -> .)
    SEMICOLON       reduce using rule 94 (empty -> .)
    END             reduce using rule 94 (empty -> .)
    ELSE            reduce using rule 94 (empty -> .)
    COMMA           reduce using rule 94 (empty -> .)
    RPAREN          reduce using rule 94 (empty -> .)
    RBRACKET        reduce using rule 94 (empty -> .)
    TO              reduce using rule 94 (empty -> .)
    DOWNTO          reduce using rule 94 (empty -> .)
    DOTDOT          reduce using rule 94 (empty -> .)

  ! TIMES           [ reduce using rule 94 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 94 (empty -> .) ]

    term_tail                      shift and go to state 146
    mulop                          shift and go to state 147
    empty                          shift and go to state 148

state 85

    (37) factor -> function_call .

    TIMES           reduce using rule 37 (factor -> function_call .)
    DIVIDE          reduce using rule 37 (factor -> function_call .)
    DIV             reduce using rule 37 (factor -> function_call .)
    PLUS            reduce using rule 37 (factor -> function_call .)
    MINUS           reduce using rule 37 (factor -> function_call .)
    LESS            reduce using rule 37 (factor -> function_call .)
    LESS_EQUAL      reduce using rule 37 (factor -> function_call .)
    GREAT           reduce using rule 37 (factor -> function_call .)
    GREAT_EQUAL     reduce using rule 37 (factor -> function_call .)
    EQUAL           reduce using rule 37 (factor -> function_call .)
    DIFFERENT       reduce using rule 37 (factor -> function_call .)
    THEN            reduce using rule 37 (factor -> function_call .)
    MOD             reduce using rule 37 (factor -> function_call .)
    AND             reduce using rule 37 (factor -> function_call .)
    OR              reduce using rule 37 (factor -> function_call .)
    DO              reduce using rule 37 (factor -> function_call .)
    SEMICOLON       reduce using rule 37 (factor -> function_call .)
    END             reduce using rule 37 (factor -> function_call .)
    ELSE            reduce using rule 37 (factor -> function_call .)
    COMMA           reduce using rule 37 (factor -> function_call .)
    RPAREN          reduce using rule 37 (factor -> function_call .)
    RBRACKET        reduce using rule 37 (factor -> function_call .)
    TO              reduce using rule 37 (factor -> function_call .)
    DOWNTO          reduce using rule 37 (factor -> function_call .)
    DOTDOT          reduce using rule 37 (factor -> function_call .)


state 86

    (84) factor -> LPAREN . expression RPAREN
    (66) expression -> . simple_expression relop simple_expression
    (67) expression -> . simple_expression
    (79) expression -> . expression PLUS expression
    (80) expression -> . expression MINUS expression
    (81) expression -> . expression TIMES expression
    (82) expression -> . expression DIVIDE expression
    (83) expression -> . expression MOD expression
    (108) expression -> . expression AND expression
    (109) expression -> . expression OR expression
    (110) expression -> . NOT expression
    (68) simple_expression -> . term simple_expression_tail
    (73) term -> . factor term_tail
    (37) factor -> . function_call
    (84) factor -> . LPAREN expression RPAREN
    (85) factor -> . variable
    (86) factor -> . NUMBER
    (87) factor -> . STRING_LITERAL
    (36) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 82
    LPAREN          shift and go to state 86
    NUMBER          shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    ID              shift and go to state 90

    expression                     shift and go to state 152
    simple_expression              shift and go to state 81
    term                           shift and go to state 83
    factor                         shift and go to state 84
    function_call                  shift and go to state 85
    variable                       shift and go to state 87

state 87

    (85) factor -> variable .

    TIMES           reduce using rule 85 (factor -> variable .)
    DIVIDE          reduce using rule 85 (factor -> variable .)
    DIV             reduce using rule 85 (factor -> variable .)
    PLUS            reduce using rule 85 (factor -> variable .)
    MINUS           reduce using rule 85 (factor -> variable .)
    LESS            reduce using rule 85 (factor -> variable .)
    LESS_EQUAL      reduce using rule 85 (factor -> variable .)
    GREAT           reduce using rule 85 (factor -> variable .)
    GREAT_EQUAL     reduce using rule 85 (factor -> variable .)
    EQUAL           reduce using rule 85 (factor -> variable .)
    DIFFERENT       reduce using rule 85 (factor -> variable .)
    THEN            reduce using rule 85 (factor -> variable .)
    MOD             reduce using rule 85 (factor -> variable .)
    AND             reduce using rule 85 (factor -> variable .)
    OR              reduce using rule 85 (factor -> variable .)
    DO              reduce using rule 85 (factor -> variable .)
    SEMICOLON       reduce using rule 85 (factor -> variable .)
    END             reduce using rule 85 (factor -> variable .)
    ELSE            reduce using rule 85 (factor -> variable .)
    COMMA           reduce using rule 85 (factor -> variable .)
    RPAREN          reduce using rule 85 (factor -> variable .)
    RBRACKET        reduce using rule 85 (factor -> variable .)
    TO              reduce using rule 85 (factor -> variable .)
    DOWNTO          reduce using rule 85 (factor -> variable .)
    DOTDOT          reduce using rule 85 (factor -> variable .)


state 88

    (86) factor -> NUMBER .

    TIMES           reduce using rule 86 (factor -> NUMBER .)
    DIVIDE          reduce using rule 86 (factor -> NUMBER .)
    DIV             reduce using rule 86 (factor -> NUMBER .)
    PLUS            reduce using rule 86 (factor -> NUMBER .)
    MINUS           reduce using rule 86 (factor -> NUMBER .)
    LESS            reduce using rule 86 (factor -> NUMBER .)
    LESS_EQUAL      reduce using rule 86 (factor -> NUMBER .)
    GREAT           reduce using rule 86 (factor -> NUMBER .)
    GREAT_EQUAL     reduce using rule 86 (factor -> NUMBER .)
    EQUAL           reduce using rule 86 (factor -> NUMBER .)
    DIFFERENT       reduce using rule 86 (factor -> NUMBER .)
    THEN            reduce using rule 86 (factor -> NUMBER .)
    MOD             reduce using rule 86 (factor -> NUMBER .)
    AND             reduce using rule 86 (factor -> NUMBER .)
    OR              reduce using rule 86 (factor -> NUMBER .)
    DO              reduce using rule 86 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 86 (factor -> NUMBER .)
    END             reduce using rule 86 (factor -> NUMBER .)
    ELSE            reduce using rule 86 (factor -> NUMBER .)
    COMMA           reduce using rule 86 (factor -> NUMBER .)
    RPAREN          reduce using rule 86 (factor -> NUMBER .)
    RBRACKET        reduce using rule 86 (factor -> NUMBER .)
    TO              reduce using rule 86 (factor -> NUMBER .)
    DOWNTO          reduce using rule 86 (factor -> NUMBER .)
    DOTDOT          reduce using rule 86 (factor -> NUMBER .)


state 89

    (87) factor -> STRING_LITERAL .

    TIMES           reduce using rule 87 (factor -> STRING_LITERAL .)
    DIVIDE          reduce using rule 87 (factor -> STRING_LITERAL .)
    DIV             reduce using rule 87 (factor -> STRING_LITERAL .)
    PLUS            reduce using rule 87 (factor -> STRING_LITERAL .)
    MINUS           reduce using rule 87 (factor -> STRING_LITERAL .)
    LESS            reduce using rule 87 (factor -> STRING_LITERAL .)
    LESS_EQUAL      reduce using rule 87 (factor -> STRING_LITERAL .)
    GREAT           reduce using rule 87 (factor -> STRING_LITERAL .)
    GREAT_EQUAL     reduce using rule 87 (factor -> STRING_LITERAL .)
    EQUAL           reduce using rule 87 (factor -> STRING_LITERAL .)
    DIFFERENT       reduce using rule 87 (factor -> STRING_LITERAL .)
    THEN            reduce using rule 87 (factor -> STRING_LITERAL .)
    MOD             reduce using rule 87 (factor -> STRING_LITERAL .)
    AND             reduce using rule 87 (factor -> STRING_LITERAL .)
    OR              reduce using rule 87 (factor -> STRING_LITERAL .)
    DO              reduce using rule 87 (factor -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 87 (factor -> STRING_LITERAL .)
    END             reduce using rule 87 (factor -> STRING_LITERAL .)
    ELSE            reduce using rule 87 (factor -> STRING_LITERAL .)
    COMMA           reduce using rule 87 (factor -> STRING_LITERAL .)
    RPAREN          reduce using rule 87 (factor -> STRING_LITERAL .)
    RBRACKET        reduce using rule 87 (factor -> STRING_LITERAL .)
    TO              reduce using rule 87 (factor -> STRING_LITERAL .)
    DOWNTO          reduce using rule 87 (factor -> STRING_LITERAL .)
    DOTDOT          reduce using rule 87 (factor -> STRING_LITERAL .)


state 90

    (36) function_call -> ID . LPAREN expression_list RPAREN
    (58) variable -> ID .
    (59) variable -> ID . LBRACKET expression RBRACKET

    LPAREN          shift and go to state 153
    TIMES           reduce using rule 58 (variable -> ID .)
    DIVIDE          reduce using rule 58 (variable -> ID .)
    DIV             reduce using rule 58 (variable -> ID .)
    PLUS            reduce using rule 58 (variable -> ID .)
    MINUS           reduce using rule 58 (variable -> ID .)
    LESS            reduce using rule 58 (variable -> ID .)
    LESS_EQUAL      reduce using rule 58 (variable -> ID .)
    GREAT           reduce using rule 58 (variable -> ID .)
    GREAT_EQUAL     reduce using rule 58 (variable -> ID .)
    EQUAL           reduce using rule 58 (variable -> ID .)
    DIFFERENT       reduce using rule 58 (variable -> ID .)
    THEN            reduce using rule 58 (variable -> ID .)
    MOD             reduce using rule 58 (variable -> ID .)
    AND             reduce using rule 58 (variable -> ID .)
    OR              reduce using rule 58 (variable -> ID .)
    DO              reduce using rule 58 (variable -> ID .)
    SEMICOLON       reduce using rule 58 (variable -> ID .)
    END             reduce using rule 58 (variable -> ID .)
    ELSE            reduce using rule 58 (variable -> ID .)
    COMMA           reduce using rule 58 (variable -> ID .)
    RPAREN          reduce using rule 58 (variable -> ID .)
    RBRACKET        reduce using rule 58 (variable -> ID .)
    TO              reduce using rule 58 (variable -> ID .)
    DOWNTO          reduce using rule 58 (variable -> ID .)
    DOTDOT          reduce using rule 58 (variable -> ID .)
    LBRACKET        shift and go to state 79


state 91

    (60) while_statement -> WHILE expression . DO statement
    (79) expression -> expression . PLUS expression
    (80) expression -> expression . MINUS expression
    (81) expression -> expression . TIMES expression
    (82) expression -> expression . DIVIDE expression
    (83) expression -> expression . MOD expression
    (108) expression -> expression . AND expression
    (109) expression -> expression . OR expression

    DO              shift and go to state 154
    PLUS            shift and go to state 126
    MINUS           shift and go to state 127
    TIMES           shift and go to state 128
    DIVIDE          shift and go to state 129
    MOD             shift and go to state 130
    AND             shift and go to state 131
    OR              shift and go to state 132


state 92

    (55) for_statement -> FOR ID . COLON_EQUAL expression TO expression DO statement
    (56) for_statement -> FOR ID . COLON_EQUAL expression DOWNTO expression DO statement

    COLON_EQUAL     shift and go to state 155


state 93

    (13) id_list -> id_list COMMA ID .

    SEMICOLON       reduce using rule 13 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 13 (id_list -> id_list COMMA ID .)
    COLON           reduce using rule 13 (id_list -> id_list COMMA ID .)
    RPAREN          reduce using rule 13 (id_list -> id_list COMMA ID .)


state 94

    (104) constant -> ID EQUAL CHARACTER_LITERAL . SEMICOLON

    SEMICOLON       shift and go to state 156


state 95

    (105) constant -> ID EQUAL NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 157


state 96

    (106) constant -> ID EQUAL STRING_LITERAL . SEMICOLON

    SEMICOLON       shift and go to state 158


state 97

    (107) constant -> ID EQUAL BOOLEAN_LITERAL . SEMICOLON

    SEMICOLON       shift and go to state 159


state 98

    (28) type_specifier -> ID .

    SEMICOLON       reduce using rule 28 (type_specifier -> ID .)
    RPAREN          reduce using rule 28 (type_specifier -> ID .)


state 99

    (23) type_definition -> ID EQUAL type_specifier . SEMICOLON

    SEMICOLON       shift and go to state 160


state 100

    (22) type_specifier -> LPAREN . id_list RPAREN
    (12) id_list -> . ID
    (13) id_list -> . id_list COMMA ID

    ID              shift and go to state 28

    id_list                        shift and go to state 161

state 101

    (24) type_specifier -> ARRAY . LBRACKET expression DOTDOT expression RBRACKET OF type_specifier

    LBRACKET        shift and go to state 162


state 102

    (25) type_specifier -> INTEGER .

    SEMICOLON       reduce using rule 25 (type_specifier -> INTEGER .)
    RPAREN          reduce using rule 25 (type_specifier -> INTEGER .)


state 103

    (26) type_specifier -> BYTE .

    SEMICOLON       reduce using rule 26 (type_specifier -> BYTE .)
    RPAREN          reduce using rule 26 (type_specifier -> BYTE .)


state 104

    (27) type_specifier -> CHAR .

    SEMICOLON       reduce using rule 27 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 27 (type_specifier -> CHAR .)


state 105

    (29) type_specifier -> BOOLEAN_LITERAL .

    SEMICOLON       reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)
    RPAREN          reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)


state 106

    (30) type_specifier -> LONGINT .

    SEMICOLON       reduce using rule 30 (type_specifier -> LONGINT .)
    RPAREN          reduce using rule 30 (type_specifier -> LONGINT .)


state 107

    (17) declaration -> id_list COLON type_specifier . SEMICOLON

    SEMICOLON       shift and go to state 163


state 108

    (33) procedure_declaration -> PROCEDURE ID LPAREN parameter_list . RPAREN SEMICOLON block SEMICOLON
    (34) procedure_declaration -> PROCEDURE ID LPAREN parameter_list . RPAREN SEMICOLON block DOT
    (39) parameter_list -> parameter_list . SEMICOLON parameter

    RPAREN          shift and go to state 164
    SEMICOLON       shift and go to state 165


state 109

    (38) parameter_list -> parameter .

    RPAREN          reduce using rule 38 (parameter_list -> parameter .)
    SEMICOLON       reduce using rule 38 (parameter_list -> parameter .)


state 110

    (40) parameter -> id_list . COLON type_specifier
    (13) id_list -> id_list . COMMA ID

    COLON           shift and go to state 166
    COMMA           shift and go to state 59


state 111

    (41) parameter -> VAR . id_list COLON type_specifier
    (12) id_list -> . ID
    (13) id_list -> . id_list COMMA ID

    ID              shift and go to state 28

    id_list                        shift and go to state 167

state 112

    (35) function_declaration -> FUNCTION ID LPAREN parameter_list . RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (39) parameter_list -> parameter_list . SEMICOLON parameter

    RPAREN          shift and go to state 168
    SEMICOLON       shift and go to state 165


state 113

    (44) statement_list_tail -> SEMICOLON statement . statement_list_tail
    (44) statement_list_tail -> . SEMICOLON statement statement_list_tail
    (45) statement_list_tail -> . empty
    (94) empty -> .

    SEMICOLON       shift and go to state 70
    END             reduce using rule 94 (empty -> .)

    statement_list_tail            shift and go to state 169
    empty                          shift and go to state 71

state 114

    (96) statement -> READLN LPAREN variable . RPAREN

    RPAREN          shift and go to state 170


state 115

    (58) variable -> ID .
    (59) variable -> ID . LBRACKET expression RBRACKET

    RPAREN          reduce using rule 58 (variable -> ID .)
    RBRACKET        reduce using rule 58 (variable -> ID .)
    LBRACKET        shift and go to state 79


state 116

    (97) statement -> READLN LBRACKET variable . RBRACKET

    RBRACKET        shift and go to state 171


state 117

    (57) assignment_statement -> variable COLON_EQUAL expression .
    (79) expression -> expression . PLUS expression
    (80) expression -> expression . MINUS expression
    (81) expression -> expression . TIMES expression
    (82) expression -> expression . DIVIDE expression
    (83) expression -> expression . MOD expression
    (108) expression -> expression . AND expression
    (109) expression -> expression . OR expression

    SEMICOLON       reduce using rule 57 (assignment_statement -> variable COLON_EQUAL expression .)
    END             reduce using rule 57 (assignment_statement -> variable COLON_EQUAL expression .)
    ELSE            reduce using rule 57 (assignment_statement -> variable COLON_EQUAL expression .)
    PLUS            shift and go to state 126
    MINUS           shift and go to state 127
    TIMES           shift and go to state 128
    DIVIDE          shift and go to state 129
    MOD             shift and go to state 130
    AND             shift and go to state 131
    OR              shift and go to state 132


state 118

    (98) statement -> WRITELN LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 172


state 119

    (62) expression_list -> expression . expression_list_tail
    (79) expression -> expression . PLUS expression
    (80) expression -> expression . MINUS expression
    (81) expression -> expression . TIMES expression
    (82) expression -> expression . DIVIDE expression
    (83) expression -> expression . MOD expression
    (108) expression -> expression . AND expression
    (109) expression -> expression . OR expression
    (63) expression_list_tail -> . COMMA expression expression_list_tail
    (64) expression_list_tail -> . empty
    (94) empty -> .

    PLUS            shift and go to state 126
    MINUS           shift and go to state 127
    TIMES           shift and go to state 128
    DIVIDE          shift and go to state 129
    MOD             shift and go to state 130
    AND             shift and go to state 131
    OR              shift and go to state 132
    COMMA           shift and go to state 174
    RPAREN          reduce using rule 94 (empty -> .)

    expression_list_tail           shift and go to state 173
    empty                          shift and go to state 175

state 120

    (65) expression_list -> empty .

    RPAREN          reduce using rule 65 (expression_list -> empty .)


state 121

    (99) statement -> WRITE LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 176


state 122

    (100) statement -> USES ID SEMICOLON .

    SEMICOLON       reduce using rule 100 (statement -> USES ID SEMICOLON .)
    END             reduce using rule 100 (statement -> USES ID SEMICOLON .)
    ELSE            reduce using rule 100 (statement -> USES ID SEMICOLON .)


state 123

    (61) procedure_call -> ID LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 177


state 124

    (59) variable -> ID LBRACKET expression . RBRACKET
    (79) expression -> expression . PLUS expression
    (80) expression -> expression . MINUS expression
    (81) expression -> expression . TIMES expression
    (82) expression -> expression . DIVIDE expression
    (83) expression -> expression . MOD expression
    (108) expression -> expression . AND expression
    (109) expression -> expression . OR expression

    RBRACKET        shift and go to state 178
    PLUS            shift and go to state 126
    MINUS           shift and go to state 127
    TIMES           shift and go to state 128
    DIVIDE          shift and go to state 129
    MOD             shift and go to state 130
    AND             shift and go to state 131
    OR              shift and go to state 132


state 125

    (53) if_statement -> IF expression THEN . statement ELSE statement
    (54) if_statement -> IF expression THEN . statement
    (46) statement -> . if_statement
    (47) statement -> . assignment_statement
    (48) statement -> . while_statement
    (49) statement -> . procedure_call
    (50) statement -> . compound_statement
    (51) statement -> . for_statement
    (52) statement -> . empty
    (95) statement -> . READLN
    (96) statement -> . READLN LPAREN variable RPAREN
    (97) statement -> . READLN LBRACKET variable RBRACKET
    (98) statement -> . WRITELN LPAREN expression_list RPAREN
    (99) statement -> . WRITE LPAREN expression_list RPAREN
    (100) statement -> . USES ID SEMICOLON
    (53) if_statement -> . IF expression THEN statement ELSE statement
    (54) if_statement -> . IF expression THEN statement
    (57) assignment_statement -> . variable COLON_EQUAL expression
    (60) while_statement -> . WHILE expression DO statement
    (61) procedure_call -> . ID LPAREN expression_list RPAREN
    (42) compound_statement -> . BEGIN statement_list END
    (55) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (56) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (94) empty -> .
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    READLN          shift and go to state 49
    WRITELN         shift and go to state 51
    WRITE           shift and go to state 52
    USES            shift and go to state 53
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    ID              shift and go to state 54
    BEGIN           shift and go to state 24
    FOR             shift and go to state 57
    ELSE            reduce using rule 94 (empty -> .)
    SEMICOLON       reduce using rule 94 (empty -> .)
    END             reduce using rule 94 (empty -> .)

    statement                      shift and go to state 179
    if_statement                   shift and go to state 42
    assignment_statement           shift and go to state 43
    while_statement                shift and go to state 44
    procedure_call                 shift and go to state 45
    compound_statement             shift and go to state 46
    for_statement                  shift and go to state 47
    empty                          shift and go to state 48
    variable                       shift and go to state 50

state 126

    (79) expression -> expression PLUS . expression
    (66) expression -> . simple_expression relop simple_expression
    (67) expression -> . simple_expression
    (79) expression -> . expression PLUS expression
    (80) expression -> . expression MINUS expression
    (81) expression -> . expression TIMES expression
    (82) expression -> . expression DIVIDE expression
    (83) expression -> . expression MOD expression
    (108) expression -> . expression AND expression
    (109) expression -> . expression OR expression
    (110) expression -> . NOT expression
    (68) simple_expression -> . term simple_expression_tail
    (73) term -> . factor term_tail
    (37) factor -> . function_call
    (84) factor -> . LPAREN expression RPAREN
    (85) factor -> . variable
    (86) factor -> . NUMBER
    (87) factor -> . STRING_LITERAL
    (36) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 82
    LPAREN          shift and go to state 86
    NUMBER          shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    ID              shift and go to state 90

    expression                     shift and go to state 180
    simple_expression              shift and go to state 81
    term                           shift and go to state 83
    factor                         shift and go to state 84
    function_call                  shift and go to state 85
    variable                       shift and go to state 87

state 127

    (80) expression -> expression MINUS . expression
    (66) expression -> . simple_expression relop simple_expression
    (67) expression -> . simple_expression
    (79) expression -> . expression PLUS expression
    (80) expression -> . expression MINUS expression
    (81) expression -> . expression TIMES expression
    (82) expression -> . expression DIVIDE expression
    (83) expression -> . expression MOD expression
    (108) expression -> . expression AND expression
    (109) expression -> . expression OR expression
    (110) expression -> . NOT expression
    (68) simple_expression -> . term simple_expression_tail
    (73) term -> . factor term_tail
    (37) factor -> . function_call
    (84) factor -> . LPAREN expression RPAREN
    (85) factor -> . variable
    (86) factor -> . NUMBER
    (87) factor -> . STRING_LITERAL
    (36) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 82
    LPAREN          shift and go to state 86
    NUMBER          shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    ID              shift and go to state 90

    expression                     shift and go to state 181
    simple_expression              shift and go to state 81
    term                           shift and go to state 83
    factor                         shift and go to state 84
    function_call                  shift and go to state 85
    variable                       shift and go to state 87

state 128

    (81) expression -> expression TIMES . expression
    (66) expression -> . simple_expression relop simple_expression
    (67) expression -> . simple_expression
    (79) expression -> . expression PLUS expression
    (80) expression -> . expression MINUS expression
    (81) expression -> . expression TIMES expression
    (82) expression -> . expression DIVIDE expression
    (83) expression -> . expression MOD expression
    (108) expression -> . expression AND expression
    (109) expression -> . expression OR expression
    (110) expression -> . NOT expression
    (68) simple_expression -> . term simple_expression_tail
    (73) term -> . factor term_tail
    (37) factor -> . function_call
    (84) factor -> . LPAREN expression RPAREN
    (85) factor -> . variable
    (86) factor -> . NUMBER
    (87) factor -> . STRING_LITERAL
    (36) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 82
    LPAREN          shift and go to state 86
    NUMBER          shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    ID              shift and go to state 90

    expression                     shift and go to state 182
    simple_expression              shift and go to state 81
    term                           shift and go to state 83
    factor                         shift and go to state 84
    function_call                  shift and go to state 85
    variable                       shift and go to state 87

state 129

    (82) expression -> expression DIVIDE . expression
    (66) expression -> . simple_expression relop simple_expression
    (67) expression -> . simple_expression
    (79) expression -> . expression PLUS expression
    (80) expression -> . expression MINUS expression
    (81) expression -> . expression TIMES expression
    (82) expression -> . expression DIVIDE expression
    (83) expression -> . expression MOD expression
    (108) expression -> . expression AND expression
    (109) expression -> . expression OR expression
    (110) expression -> . NOT expression
    (68) simple_expression -> . term simple_expression_tail
    (73) term -> . factor term_tail
    (37) factor -> . function_call
    (84) factor -> . LPAREN expression RPAREN
    (85) factor -> . variable
    (86) factor -> . NUMBER
    (87) factor -> . STRING_LITERAL
    (36) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 82
    LPAREN          shift and go to state 86
    NUMBER          shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    ID              shift and go to state 90

    expression                     shift and go to state 183
    simple_expression              shift and go to state 81
    term                           shift and go to state 83
    factor                         shift and go to state 84
    function_call                  shift and go to state 85
    variable                       shift and go to state 87

state 130

    (83) expression -> expression MOD . expression
    (66) expression -> . simple_expression relop simple_expression
    (67) expression -> . simple_expression
    (79) expression -> . expression PLUS expression
    (80) expression -> . expression MINUS expression
    (81) expression -> . expression TIMES expression
    (82) expression -> . expression DIVIDE expression
    (83) expression -> . expression MOD expression
    (108) expression -> . expression AND expression
    (109) expression -> . expression OR expression
    (110) expression -> . NOT expression
    (68) simple_expression -> . term simple_expression_tail
    (73) term -> . factor term_tail
    (37) factor -> . function_call
    (84) factor -> . LPAREN expression RPAREN
    (85) factor -> . variable
    (86) factor -> . NUMBER
    (87) factor -> . STRING_LITERAL
    (36) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 82
    LPAREN          shift and go to state 86
    NUMBER          shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    ID              shift and go to state 90

    expression                     shift and go to state 184
    simple_expression              shift and go to state 81
    term                           shift and go to state 83
    factor                         shift and go to state 84
    function_call                  shift and go to state 85
    variable                       shift and go to state 87

state 131

    (108) expression -> expression AND . expression
    (66) expression -> . simple_expression relop simple_expression
    (67) expression -> . simple_expression
    (79) expression -> . expression PLUS expression
    (80) expression -> . expression MINUS expression
    (81) expression -> . expression TIMES expression
    (82) expression -> . expression DIVIDE expression
    (83) expression -> . expression MOD expression
    (108) expression -> . expression AND expression
    (109) expression -> . expression OR expression
    (110) expression -> . NOT expression
    (68) simple_expression -> . term simple_expression_tail
    (73) term -> . factor term_tail
    (37) factor -> . function_call
    (84) factor -> . LPAREN expression RPAREN
    (85) factor -> . variable
    (86) factor -> . NUMBER
    (87) factor -> . STRING_LITERAL
    (36) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 82
    LPAREN          shift and go to state 86
    NUMBER          shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    ID              shift and go to state 90

    expression                     shift and go to state 185
    simple_expression              shift and go to state 81
    term                           shift and go to state 83
    factor                         shift and go to state 84
    function_call                  shift and go to state 85
    variable                       shift and go to state 87

state 132

    (109) expression -> expression OR . expression
    (66) expression -> . simple_expression relop simple_expression
    (67) expression -> . simple_expression
    (79) expression -> . expression PLUS expression
    (80) expression -> . expression MINUS expression
    (81) expression -> . expression TIMES expression
    (82) expression -> . expression DIVIDE expression
    (83) expression -> . expression MOD expression
    (108) expression -> . expression AND expression
    (109) expression -> . expression OR expression
    (110) expression -> . NOT expression
    (68) simple_expression -> . term simple_expression_tail
    (73) term -> . factor term_tail
    (37) factor -> . function_call
    (84) factor -> . LPAREN expression RPAREN
    (85) factor -> . variable
    (86) factor -> . NUMBER
    (87) factor -> . STRING_LITERAL
    (36) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 82
    LPAREN          shift and go to state 86
    NUMBER          shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    ID              shift and go to state 90

    expression                     shift and go to state 186
    simple_expression              shift and go to state 81
    term                           shift and go to state 83
    factor                         shift and go to state 84
    function_call                  shift and go to state 85
    variable                       shift and go to state 87

state 133

    (66) expression -> simple_expression relop . simple_expression
    (68) simple_expression -> . term simple_expression_tail
    (73) term -> . factor term_tail
    (37) factor -> . function_call
    (84) factor -> . LPAREN expression RPAREN
    (85) factor -> . variable
    (86) factor -> . NUMBER
    (87) factor -> . STRING_LITERAL
    (36) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 86
    NUMBER          shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    ID              shift and go to state 90

    simple_expression              shift and go to state 187
    term                           shift and go to state 83
    factor                         shift and go to state 84
    function_call                  shift and go to state 85
    variable                       shift and go to state 87

state 134

    (88) relop -> LESS .

    LPAREN          reduce using rule 88 (relop -> LESS .)
    NUMBER          reduce using rule 88 (relop -> LESS .)
    STRING_LITERAL  reduce using rule 88 (relop -> LESS .)
    ID              reduce using rule 88 (relop -> LESS .)


state 135

    (89) relop -> LESS_EQUAL .

    LPAREN          reduce using rule 89 (relop -> LESS_EQUAL .)
    NUMBER          reduce using rule 89 (relop -> LESS_EQUAL .)
    STRING_LITERAL  reduce using rule 89 (relop -> LESS_EQUAL .)
    ID              reduce using rule 89 (relop -> LESS_EQUAL .)


state 136

    (90) relop -> GREAT .

    LPAREN          reduce using rule 90 (relop -> GREAT .)
    NUMBER          reduce using rule 90 (relop -> GREAT .)
    STRING_LITERAL  reduce using rule 90 (relop -> GREAT .)
    ID              reduce using rule 90 (relop -> GREAT .)


state 137

    (91) relop -> GREAT_EQUAL .

    LPAREN          reduce using rule 91 (relop -> GREAT_EQUAL .)
    NUMBER          reduce using rule 91 (relop -> GREAT_EQUAL .)
    STRING_LITERAL  reduce using rule 91 (relop -> GREAT_EQUAL .)
    ID              reduce using rule 91 (relop -> GREAT_EQUAL .)


state 138

    (92) relop -> EQUAL .

    LPAREN          reduce using rule 92 (relop -> EQUAL .)
    NUMBER          reduce using rule 92 (relop -> EQUAL .)
    STRING_LITERAL  reduce using rule 92 (relop -> EQUAL .)
    ID              reduce using rule 92 (relop -> EQUAL .)


state 139

    (93) relop -> DIFFERENT .

    LPAREN          reduce using rule 93 (relop -> DIFFERENT .)
    NUMBER          reduce using rule 93 (relop -> DIFFERENT .)
    STRING_LITERAL  reduce using rule 93 (relop -> DIFFERENT .)
    ID              reduce using rule 93 (relop -> DIFFERENT .)


state 140

    (110) expression -> NOT expression .
    (79) expression -> expression . PLUS expression
    (80) expression -> expression . MINUS expression
    (81) expression -> expression . TIMES expression
    (82) expression -> expression . DIVIDE expression
    (83) expression -> expression . MOD expression
    (108) expression -> expression . AND expression
    (109) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 110 (expression -> NOT expression .)
    DO              reduce using rule 110 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 110 (expression -> NOT expression .)
    END             reduce using rule 110 (expression -> NOT expression .)
    ELSE            reduce using rule 110 (expression -> NOT expression .)
    COMMA           reduce using rule 110 (expression -> NOT expression .)
    RPAREN          reduce using rule 110 (expression -> NOT expression .)
    RBRACKET        reduce using rule 110 (expression -> NOT expression .)
    TO              reduce using rule 110 (expression -> NOT expression .)
    DOWNTO          reduce using rule 110 (expression -> NOT expression .)
    DOTDOT          reduce using rule 110 (expression -> NOT expression .)
    PLUS            shift and go to state 126
    MINUS           shift and go to state 127
    TIMES           shift and go to state 128
    DIVIDE          shift and go to state 129
    MOD             shift and go to state 130
    AND             shift and go to state 131
    OR              shift and go to state 132

  ! PLUS            [ reduce using rule 110 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 110 (expression -> NOT expression .) ]
  ! TIMES           [ reduce using rule 110 (expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 110 (expression -> NOT expression .) ]
  ! MOD             [ reduce using rule 110 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 110 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 110 (expression -> NOT expression .) ]


state 141

    (68) simple_expression -> term simple_expression_tail .

    LESS            reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    LESS_EQUAL      reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    GREAT           reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    GREAT_EQUAL     reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    EQUAL           reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    DIFFERENT       reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    THEN            reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    PLUS            reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    MINUS           reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    TIMES           reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    DIVIDE          reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    MOD             reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    AND             reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    OR              reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    DO              reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    SEMICOLON       reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    END             reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    ELSE            reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    COMMA           reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    RPAREN          reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    RBRACKET        reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    TO              reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    DOWNTO          reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    DOTDOT          reduce using rule 68 (simple_expression -> term simple_expression_tail .)


state 142

    (69) simple_expression_tail -> addop . term
    (73) term -> . factor term_tail
    (37) factor -> . function_call
    (84) factor -> . LPAREN expression RPAREN
    (85) factor -> . variable
    (86) factor -> . NUMBER
    (87) factor -> . STRING_LITERAL
    (36) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 86
    NUMBER          shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    ID              shift and go to state 90

    term                           shift and go to state 188
    factor                         shift and go to state 84
    function_call                  shift and go to state 85
    variable                       shift and go to state 87

state 143

    (70) simple_expression_tail -> empty .

    LESS            reduce using rule 70 (simple_expression_tail -> empty .)
    LESS_EQUAL      reduce using rule 70 (simple_expression_tail -> empty .)
    GREAT           reduce using rule 70 (simple_expression_tail -> empty .)
    GREAT_EQUAL     reduce using rule 70 (simple_expression_tail -> empty .)
    EQUAL           reduce using rule 70 (simple_expression_tail -> empty .)
    DIFFERENT       reduce using rule 70 (simple_expression_tail -> empty .)
    THEN            reduce using rule 70 (simple_expression_tail -> empty .)
    PLUS            reduce using rule 70 (simple_expression_tail -> empty .)
    MINUS           reduce using rule 70 (simple_expression_tail -> empty .)
    TIMES           reduce using rule 70 (simple_expression_tail -> empty .)
    DIVIDE          reduce using rule 70 (simple_expression_tail -> empty .)
    MOD             reduce using rule 70 (simple_expression_tail -> empty .)
    AND             reduce using rule 70 (simple_expression_tail -> empty .)
    OR              reduce using rule 70 (simple_expression_tail -> empty .)
    DO              reduce using rule 70 (simple_expression_tail -> empty .)
    SEMICOLON       reduce using rule 70 (simple_expression_tail -> empty .)
    END             reduce using rule 70 (simple_expression_tail -> empty .)
    ELSE            reduce using rule 70 (simple_expression_tail -> empty .)
    COMMA           reduce using rule 70 (simple_expression_tail -> empty .)
    RPAREN          reduce using rule 70 (simple_expression_tail -> empty .)
    RBRACKET        reduce using rule 70 (simple_expression_tail -> empty .)
    TO              reduce using rule 70 (simple_expression_tail -> empty .)
    DOWNTO          reduce using rule 70 (simple_expression_tail -> empty .)
    DOTDOT          reduce using rule 70 (simple_expression_tail -> empty .)


state 144

    (71) addop -> PLUS .

    LPAREN          reduce using rule 71 (addop -> PLUS .)
    NUMBER          reduce using rule 71 (addop -> PLUS .)
    STRING_LITERAL  reduce using rule 71 (addop -> PLUS .)
    ID              reduce using rule 71 (addop -> PLUS .)


state 145

    (72) addop -> MINUS .

    LPAREN          reduce using rule 72 (addop -> MINUS .)
    NUMBER          reduce using rule 72 (addop -> MINUS .)
    STRING_LITERAL  reduce using rule 72 (addop -> MINUS .)
    ID              reduce using rule 72 (addop -> MINUS .)


state 146

    (73) term -> factor term_tail .

    PLUS            reduce using rule 73 (term -> factor term_tail .)
    MINUS           reduce using rule 73 (term -> factor term_tail .)
    LESS            reduce using rule 73 (term -> factor term_tail .)
    LESS_EQUAL      reduce using rule 73 (term -> factor term_tail .)
    GREAT           reduce using rule 73 (term -> factor term_tail .)
    GREAT_EQUAL     reduce using rule 73 (term -> factor term_tail .)
    EQUAL           reduce using rule 73 (term -> factor term_tail .)
    DIFFERENT       reduce using rule 73 (term -> factor term_tail .)
    THEN            reduce using rule 73 (term -> factor term_tail .)
    TIMES           reduce using rule 73 (term -> factor term_tail .)
    DIVIDE          reduce using rule 73 (term -> factor term_tail .)
    MOD             reduce using rule 73 (term -> factor term_tail .)
    AND             reduce using rule 73 (term -> factor term_tail .)
    OR              reduce using rule 73 (term -> factor term_tail .)
    DO              reduce using rule 73 (term -> factor term_tail .)
    SEMICOLON       reduce using rule 73 (term -> factor term_tail .)
    END             reduce using rule 73 (term -> factor term_tail .)
    ELSE            reduce using rule 73 (term -> factor term_tail .)
    COMMA           reduce using rule 73 (term -> factor term_tail .)
    RPAREN          reduce using rule 73 (term -> factor term_tail .)
    RBRACKET        reduce using rule 73 (term -> factor term_tail .)
    TO              reduce using rule 73 (term -> factor term_tail .)
    DOWNTO          reduce using rule 73 (term -> factor term_tail .)
    DOTDOT          reduce using rule 73 (term -> factor term_tail .)


state 147

    (74) term_tail -> mulop . factor
    (37) factor -> . function_call
    (84) factor -> . LPAREN expression RPAREN
    (85) factor -> . variable
    (86) factor -> . NUMBER
    (87) factor -> . STRING_LITERAL
    (36) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 86
    NUMBER          shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    ID              shift and go to state 90

    factor                         shift and go to state 189
    function_call                  shift and go to state 85
    variable                       shift and go to state 87

state 148

    (75) term_tail -> empty .

    PLUS            reduce using rule 75 (term_tail -> empty .)
    MINUS           reduce using rule 75 (term_tail -> empty .)
    LESS            reduce using rule 75 (term_tail -> empty .)
    LESS_EQUAL      reduce using rule 75 (term_tail -> empty .)
    GREAT           reduce using rule 75 (term_tail -> empty .)
    GREAT_EQUAL     reduce using rule 75 (term_tail -> empty .)
    EQUAL           reduce using rule 75 (term_tail -> empty .)
    DIFFERENT       reduce using rule 75 (term_tail -> empty .)
    THEN            reduce using rule 75 (term_tail -> empty .)
    TIMES           reduce using rule 75 (term_tail -> empty .)
    DIVIDE          reduce using rule 75 (term_tail -> empty .)
    MOD             reduce using rule 75 (term_tail -> empty .)
    AND             reduce using rule 75 (term_tail -> empty .)
    OR              reduce using rule 75 (term_tail -> empty .)
    DO              reduce using rule 75 (term_tail -> empty .)
    SEMICOLON       reduce using rule 75 (term_tail -> empty .)
    END             reduce using rule 75 (term_tail -> empty .)
    ELSE            reduce using rule 75 (term_tail -> empty .)
    COMMA           reduce using rule 75 (term_tail -> empty .)
    RPAREN          reduce using rule 75 (term_tail -> empty .)
    RBRACKET        reduce using rule 75 (term_tail -> empty .)
    TO              reduce using rule 75 (term_tail -> empty .)
    DOWNTO          reduce using rule 75 (term_tail -> empty .)
    DOTDOT          reduce using rule 75 (term_tail -> empty .)


state 149

    (76) mulop -> TIMES .

    LPAREN          reduce using rule 76 (mulop -> TIMES .)
    NUMBER          reduce using rule 76 (mulop -> TIMES .)
    STRING_LITERAL  reduce using rule 76 (mulop -> TIMES .)
    ID              reduce using rule 76 (mulop -> TIMES .)


state 150

    (77) mulop -> DIVIDE .

    LPAREN          reduce using rule 77 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 77 (mulop -> DIVIDE .)
    STRING_LITERAL  reduce using rule 77 (mulop -> DIVIDE .)
    ID              reduce using rule 77 (mulop -> DIVIDE .)


state 151

    (78) mulop -> DIV .

    LPAREN          reduce using rule 78 (mulop -> DIV .)
    NUMBER          reduce using rule 78 (mulop -> DIV .)
    STRING_LITERAL  reduce using rule 78 (mulop -> DIV .)
    ID              reduce using rule 78 (mulop -> DIV .)


state 152

    (84) factor -> LPAREN expression . RPAREN
    (79) expression -> expression . PLUS expression
    (80) expression -> expression . MINUS expression
    (81) expression -> expression . TIMES expression
    (82) expression -> expression . DIVIDE expression
    (83) expression -> expression . MOD expression
    (108) expression -> expression . AND expression
    (109) expression -> expression . OR expression

    RPAREN          shift and go to state 190
    PLUS            shift and go to state 126
    MINUS           shift and go to state 127
    TIMES           shift and go to state 128
    DIVIDE          shift and go to state 129
    MOD             shift and go to state 130
    AND             shift and go to state 131
    OR              shift and go to state 132


state 153

    (36) function_call -> ID LPAREN . expression_list RPAREN
    (62) expression_list -> . expression expression_list_tail
    (65) expression_list -> . empty
    (66) expression -> . simple_expression relop simple_expression
    (67) expression -> . simple_expression
    (79) expression -> . expression PLUS expression
    (80) expression -> . expression MINUS expression
    (81) expression -> . expression TIMES expression
    (82) expression -> . expression DIVIDE expression
    (83) expression -> . expression MOD expression
    (108) expression -> . expression AND expression
    (109) expression -> . expression OR expression
    (110) expression -> . NOT expression
    (94) empty -> .
    (68) simple_expression -> . term simple_expression_tail
    (73) term -> . factor term_tail
    (37) factor -> . function_call
    (84) factor -> . LPAREN expression RPAREN
    (85) factor -> . variable
    (86) factor -> . NUMBER
    (87) factor -> . STRING_LITERAL
    (36) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 82
    RPAREN          reduce using rule 94 (empty -> .)
    LPAREN          shift and go to state 86
    NUMBER          shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    ID              shift and go to state 90

    expression_list                shift and go to state 191
    expression                     shift and go to state 119
    empty                          shift and go to state 120
    simple_expression              shift and go to state 81
    term                           shift and go to state 83
    factor                         shift and go to state 84
    function_call                  shift and go to state 85
    variable                       shift and go to state 87

state 154

    (60) while_statement -> WHILE expression DO . statement
    (46) statement -> . if_statement
    (47) statement -> . assignment_statement
    (48) statement -> . while_statement
    (49) statement -> . procedure_call
    (50) statement -> . compound_statement
    (51) statement -> . for_statement
    (52) statement -> . empty
    (95) statement -> . READLN
    (96) statement -> . READLN LPAREN variable RPAREN
    (97) statement -> . READLN LBRACKET variable RBRACKET
    (98) statement -> . WRITELN LPAREN expression_list RPAREN
    (99) statement -> . WRITE LPAREN expression_list RPAREN
    (100) statement -> . USES ID SEMICOLON
    (53) if_statement -> . IF expression THEN statement ELSE statement
    (54) if_statement -> . IF expression THEN statement
    (57) assignment_statement -> . variable COLON_EQUAL expression
    (60) while_statement -> . WHILE expression DO statement
    (61) procedure_call -> . ID LPAREN expression_list RPAREN
    (42) compound_statement -> . BEGIN statement_list END
    (55) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (56) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (94) empty -> .
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    READLN          shift and go to state 49
    WRITELN         shift and go to state 51
    WRITE           shift and go to state 52
    USES            shift and go to state 53
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    ID              shift and go to state 54
    BEGIN           shift and go to state 24
    FOR             shift and go to state 57
    ELSE            reduce using rule 94 (empty -> .)
    SEMICOLON       reduce using rule 94 (empty -> .)
    END             reduce using rule 94 (empty -> .)

    statement                      shift and go to state 192
    if_statement                   shift and go to state 42
    assignment_statement           shift and go to state 43
    while_statement                shift and go to state 44
    procedure_call                 shift and go to state 45
    compound_statement             shift and go to state 46
    for_statement                  shift and go to state 47
    empty                          shift and go to state 48
    variable                       shift and go to state 50

state 155

    (55) for_statement -> FOR ID COLON_EQUAL . expression TO expression DO statement
    (56) for_statement -> FOR ID COLON_EQUAL . expression DOWNTO expression DO statement
    (66) expression -> . simple_expression relop simple_expression
    (67) expression -> . simple_expression
    (79) expression -> . expression PLUS expression
    (80) expression -> . expression MINUS expression
    (81) expression -> . expression TIMES expression
    (82) expression -> . expression DIVIDE expression
    (83) expression -> . expression MOD expression
    (108) expression -> . expression AND expression
    (109) expression -> . expression OR expression
    (110) expression -> . NOT expression
    (68) simple_expression -> . term simple_expression_tail
    (73) term -> . factor term_tail
    (37) factor -> . function_call
    (84) factor -> . LPAREN expression RPAREN
    (85) factor -> . variable
    (86) factor -> . NUMBER
    (87) factor -> . STRING_LITERAL
    (36) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 82
    LPAREN          shift and go to state 86
    NUMBER          shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    ID              shift and go to state 90

    expression                     shift and go to state 193
    simple_expression              shift and go to state 81
    term                           shift and go to state 83
    factor                         shift and go to state 84
    function_call                  shift and go to state 85
    variable                       shift and go to state 87

state 156

    (104) constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .

    ID              reduce using rule 104 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    USES            reduce using rule 104 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    CONST           reduce using rule 104 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    TYPE            reduce using rule 104 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    VAR             reduce using rule 104 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    PROCEDURE       reduce using rule 104 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    FUNCTION        reduce using rule 104 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    BEGIN           reduce using rule 104 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)


state 157

    (105) constant -> ID EQUAL NUMBER SEMICOLON .

    ID              reduce using rule 105 (constant -> ID EQUAL NUMBER SEMICOLON .)
    USES            reduce using rule 105 (constant -> ID EQUAL NUMBER SEMICOLON .)
    CONST           reduce using rule 105 (constant -> ID EQUAL NUMBER SEMICOLON .)
    TYPE            reduce using rule 105 (constant -> ID EQUAL NUMBER SEMICOLON .)
    VAR             reduce using rule 105 (constant -> ID EQUAL NUMBER SEMICOLON .)
    PROCEDURE       reduce using rule 105 (constant -> ID EQUAL NUMBER SEMICOLON .)
    FUNCTION        reduce using rule 105 (constant -> ID EQUAL NUMBER SEMICOLON .)
    BEGIN           reduce using rule 105 (constant -> ID EQUAL NUMBER SEMICOLON .)


state 158

    (106) constant -> ID EQUAL STRING_LITERAL SEMICOLON .

    ID              reduce using rule 106 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    USES            reduce using rule 106 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    CONST           reduce using rule 106 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    TYPE            reduce using rule 106 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    VAR             reduce using rule 106 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    PROCEDURE       reduce using rule 106 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    FUNCTION        reduce using rule 106 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    BEGIN           reduce using rule 106 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)


state 159

    (107) constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .

    ID              reduce using rule 107 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    USES            reduce using rule 107 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    CONST           reduce using rule 107 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    TYPE            reduce using rule 107 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    VAR             reduce using rule 107 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    PROCEDURE       reduce using rule 107 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    FUNCTION        reduce using rule 107 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    BEGIN           reduce using rule 107 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)


state 160

    (23) type_definition -> ID EQUAL type_specifier SEMICOLON .

    ID              reduce using rule 23 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    USES            reduce using rule 23 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    CONST           reduce using rule 23 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    TYPE            reduce using rule 23 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    VAR             reduce using rule 23 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 23 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 23 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    BEGIN           reduce using rule 23 (type_definition -> ID EQUAL type_specifier SEMICOLON .)


state 161

    (22) type_specifier -> LPAREN id_list . RPAREN
    (13) id_list -> id_list . COMMA ID

    RPAREN          shift and go to state 194
    COMMA           shift and go to state 59


state 162

    (24) type_specifier -> ARRAY LBRACKET . expression DOTDOT expression RBRACKET OF type_specifier
    (66) expression -> . simple_expression relop simple_expression
    (67) expression -> . simple_expression
    (79) expression -> . expression PLUS expression
    (80) expression -> . expression MINUS expression
    (81) expression -> . expression TIMES expression
    (82) expression -> . expression DIVIDE expression
    (83) expression -> . expression MOD expression
    (108) expression -> . expression AND expression
    (109) expression -> . expression OR expression
    (110) expression -> . NOT expression
    (68) simple_expression -> . term simple_expression_tail
    (73) term -> . factor term_tail
    (37) factor -> . function_call
    (84) factor -> . LPAREN expression RPAREN
    (85) factor -> . variable
    (86) factor -> . NUMBER
    (87) factor -> . STRING_LITERAL
    (36) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 82
    LPAREN          shift and go to state 86
    NUMBER          shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    ID              shift and go to state 90

    expression                     shift and go to state 195
    simple_expression              shift and go to state 81
    term                           shift and go to state 83
    factor                         shift and go to state 84
    function_call                  shift and go to state 85
    variable                       shift and go to state 87

state 163

    (17) declaration -> id_list COLON type_specifier SEMICOLON .

    ID              reduce using rule 17 (declaration -> id_list COLON type_specifier SEMICOLON .)
    USES            reduce using rule 17 (declaration -> id_list COLON type_specifier SEMICOLON .)
    CONST           reduce using rule 17 (declaration -> id_list COLON type_specifier SEMICOLON .)
    TYPE            reduce using rule 17 (declaration -> id_list COLON type_specifier SEMICOLON .)
    VAR             reduce using rule 17 (declaration -> id_list COLON type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 17 (declaration -> id_list COLON type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 17 (declaration -> id_list COLON type_specifier SEMICOLON .)
    BEGIN           reduce using rule 17 (declaration -> id_list COLON type_specifier SEMICOLON .)


state 164

    (33) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN . SEMICOLON block SEMICOLON
    (34) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN . SEMICOLON block DOT

    SEMICOLON       shift and go to state 196


state 165

    (39) parameter_list -> parameter_list SEMICOLON . parameter
    (40) parameter -> . id_list COLON type_specifier
    (41) parameter -> . VAR id_list COLON type_specifier
    (12) id_list -> . ID
    (13) id_list -> . id_list COMMA ID

    VAR             shift and go to state 111
    ID              shift and go to state 28

    parameter                      shift and go to state 197
    id_list                        shift and go to state 110

state 166

    (40) parameter -> id_list COLON . type_specifier
    (22) type_specifier -> . LPAREN id_list RPAREN
    (24) type_specifier -> . ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier
    (25) type_specifier -> . INTEGER
    (26) type_specifier -> . BYTE
    (27) type_specifier -> . CHAR
    (28) type_specifier -> . ID
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . LONGINT

    LPAREN          shift and go to state 100
    ARRAY           shift and go to state 101
    INTEGER         shift and go to state 102
    BYTE            shift and go to state 103
    CHAR            shift and go to state 104
    ID              shift and go to state 98
    BOOLEAN_LITERAL shift and go to state 105
    LONGINT         shift and go to state 106

    type_specifier                 shift and go to state 198

state 167

    (41) parameter -> VAR id_list . COLON type_specifier
    (13) id_list -> id_list . COMMA ID

    COLON           shift and go to state 199
    COMMA           shift and go to state 59


state 168

    (35) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN . COLON type_specifier SEMICOLON block SEMICOLON

    COLON           shift and go to state 200


state 169

    (44) statement_list_tail -> SEMICOLON statement statement_list_tail .

    END             reduce using rule 44 (statement_list_tail -> SEMICOLON statement statement_list_tail .)


state 170

    (96) statement -> READLN LPAREN variable RPAREN .

    SEMICOLON       reduce using rule 96 (statement -> READLN LPAREN variable RPAREN .)
    END             reduce using rule 96 (statement -> READLN LPAREN variable RPAREN .)
    ELSE            reduce using rule 96 (statement -> READLN LPAREN variable RPAREN .)


state 171

    (97) statement -> READLN LBRACKET variable RBRACKET .

    SEMICOLON       reduce using rule 97 (statement -> READLN LBRACKET variable RBRACKET .)
    END             reduce using rule 97 (statement -> READLN LBRACKET variable RBRACKET .)
    ELSE            reduce using rule 97 (statement -> READLN LBRACKET variable RBRACKET .)


state 172

    (98) statement -> WRITELN LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 98 (statement -> WRITELN LPAREN expression_list RPAREN .)
    END             reduce using rule 98 (statement -> WRITELN LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 98 (statement -> WRITELN LPAREN expression_list RPAREN .)


state 173

    (62) expression_list -> expression expression_list_tail .

    RPAREN          reduce using rule 62 (expression_list -> expression expression_list_tail .)


state 174

    (63) expression_list_tail -> COMMA . expression expression_list_tail
    (66) expression -> . simple_expression relop simple_expression
    (67) expression -> . simple_expression
    (79) expression -> . expression PLUS expression
    (80) expression -> . expression MINUS expression
    (81) expression -> . expression TIMES expression
    (82) expression -> . expression DIVIDE expression
    (83) expression -> . expression MOD expression
    (108) expression -> . expression AND expression
    (109) expression -> . expression OR expression
    (110) expression -> . NOT expression
    (68) simple_expression -> . term simple_expression_tail
    (73) term -> . factor term_tail
    (37) factor -> . function_call
    (84) factor -> . LPAREN expression RPAREN
    (85) factor -> . variable
    (86) factor -> . NUMBER
    (87) factor -> . STRING_LITERAL
    (36) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 82
    LPAREN          shift and go to state 86
    NUMBER          shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    ID              shift and go to state 90

    expression                     shift and go to state 201
    simple_expression              shift and go to state 81
    term                           shift and go to state 83
    factor                         shift and go to state 84
    function_call                  shift and go to state 85
    variable                       shift and go to state 87

state 175

    (64) expression_list_tail -> empty .

    RPAREN          reduce using rule 64 (expression_list_tail -> empty .)


state 176

    (99) statement -> WRITE LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 99 (statement -> WRITE LPAREN expression_list RPAREN .)
    END             reduce using rule 99 (statement -> WRITE LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 99 (statement -> WRITE LPAREN expression_list RPAREN .)


state 177

    (61) procedure_call -> ID LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 61 (procedure_call -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 61 (procedure_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 61 (procedure_call -> ID LPAREN expression_list RPAREN .)


state 178

    (59) variable -> ID LBRACKET expression RBRACKET .

    COLON_EQUAL     reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    DIV             reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    LESS            reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    LESS_EQUAL      reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    GREAT           reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    GREAT_EQUAL     reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    DIFFERENT       reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    THEN            reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    MOD             reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    AND             reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    OR              reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    DO              reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    END             reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    TO              reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    DOWNTO          reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)
    DOTDOT          reduce using rule 59 (variable -> ID LBRACKET expression RBRACKET .)


state 179

    (53) if_statement -> IF expression THEN statement . ELSE statement
    (54) if_statement -> IF expression THEN statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 202
    SEMICOLON       reduce using rule 54 (if_statement -> IF expression THEN statement .)
    END             reduce using rule 54 (if_statement -> IF expression THEN statement .)

  ! ELSE            [ reduce using rule 54 (if_statement -> IF expression THEN statement .) ]


state 180

    (79) expression -> expression PLUS expression .
    (79) expression -> expression . PLUS expression
    (80) expression -> expression . MINUS expression
    (81) expression -> expression . TIMES expression
    (82) expression -> expression . DIVIDE expression
    (83) expression -> expression . MOD expression
    (108) expression -> expression . AND expression
    (109) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 79 (expression -> expression PLUS expression .)
    DO              reduce using rule 79 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 79 (expression -> expression PLUS expression .)
    END             reduce using rule 79 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 79 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 79 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 79 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 79 (expression -> expression PLUS expression .)
    TO              reduce using rule 79 (expression -> expression PLUS expression .)
    DOWNTO          reduce using rule 79 (expression -> expression PLUS expression .)
    DOTDOT          reduce using rule 79 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 126
    MINUS           shift and go to state 127
    TIMES           shift and go to state 128
    DIVIDE          shift and go to state 129
    MOD             shift and go to state 130
    AND             shift and go to state 131
    OR              shift and go to state 132

  ! PLUS            [ reduce using rule 79 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 79 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 79 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 79 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 79 (expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 79 (expression -> expression PLUS expression .) ]
  ! OR              [ reduce using rule 79 (expression -> expression PLUS expression .) ]


state 181

    (80) expression -> expression MINUS expression .
    (79) expression -> expression . PLUS expression
    (80) expression -> expression . MINUS expression
    (81) expression -> expression . TIMES expression
    (82) expression -> expression . DIVIDE expression
    (83) expression -> expression . MOD expression
    (108) expression -> expression . AND expression
    (109) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 80 (expression -> expression MINUS expression .)
    DO              reduce using rule 80 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 80 (expression -> expression MINUS expression .)
    END             reduce using rule 80 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 80 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 80 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 80 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 80 (expression -> expression MINUS expression .)
    TO              reduce using rule 80 (expression -> expression MINUS expression .)
    DOWNTO          reduce using rule 80 (expression -> expression MINUS expression .)
    DOTDOT          reduce using rule 80 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 126
    MINUS           shift and go to state 127
    TIMES           shift and go to state 128
    DIVIDE          shift and go to state 129
    MOD             shift and go to state 130
    AND             shift and go to state 131
    OR              shift and go to state 132

  ! PLUS            [ reduce using rule 80 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 80 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 80 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 80 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 80 (expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 80 (expression -> expression MINUS expression .) ]
  ! OR              [ reduce using rule 80 (expression -> expression MINUS expression .) ]


state 182

    (81) expression -> expression TIMES expression .
    (79) expression -> expression . PLUS expression
    (80) expression -> expression . MINUS expression
    (81) expression -> expression . TIMES expression
    (82) expression -> expression . DIVIDE expression
    (83) expression -> expression . MOD expression
    (108) expression -> expression . AND expression
    (109) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 81 (expression -> expression TIMES expression .)
    DO              reduce using rule 81 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 81 (expression -> expression TIMES expression .)
    END             reduce using rule 81 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 81 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 81 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 81 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 81 (expression -> expression TIMES expression .)
    TO              reduce using rule 81 (expression -> expression TIMES expression .)
    DOWNTO          reduce using rule 81 (expression -> expression TIMES expression .)
    DOTDOT          reduce using rule 81 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 126
    MINUS           shift and go to state 127
    TIMES           shift and go to state 128
    DIVIDE          shift and go to state 129
    MOD             shift and go to state 130
    AND             shift and go to state 131
    OR              shift and go to state 132

  ! PLUS            [ reduce using rule 81 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 81 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 81 (expression -> expression TIMES expression .) ]
  ! DIVIDE          [ reduce using rule 81 (expression -> expression TIMES expression .) ]
  ! MOD             [ reduce using rule 81 (expression -> expression TIMES expression .) ]
  ! AND             [ reduce using rule 81 (expression -> expression TIMES expression .) ]
  ! OR              [ reduce using rule 81 (expression -> expression TIMES expression .) ]


state 183

    (82) expression -> expression DIVIDE expression .
    (79) expression -> expression . PLUS expression
    (80) expression -> expression . MINUS expression
    (81) expression -> expression . TIMES expression
    (82) expression -> expression . DIVIDE expression
    (83) expression -> expression . MOD expression
    (108) expression -> expression . AND expression
    (109) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 82 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 82 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 82 (expression -> expression DIVIDE expression .)
    END             reduce using rule 82 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 82 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 82 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 82 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 82 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 82 (expression -> expression DIVIDE expression .)
    DOWNTO          reduce using rule 82 (expression -> expression DIVIDE expression .)
    DOTDOT          reduce using rule 82 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 126
    MINUS           shift and go to state 127
    TIMES           shift and go to state 128
    DIVIDE          shift and go to state 129
    MOD             shift and go to state 130
    AND             shift and go to state 131
    OR              shift and go to state 132

  ! PLUS            [ reduce using rule 82 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 82 (expression -> expression DIVIDE expression .) ]
  ! TIMES           [ reduce using rule 82 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 82 (expression -> expression DIVIDE expression .) ]
  ! MOD             [ reduce using rule 82 (expression -> expression DIVIDE expression .) ]
  ! AND             [ reduce using rule 82 (expression -> expression DIVIDE expression .) ]
  ! OR              [ reduce using rule 82 (expression -> expression DIVIDE expression .) ]


state 184

    (83) expression -> expression MOD expression .
    (79) expression -> expression . PLUS expression
    (80) expression -> expression . MINUS expression
    (81) expression -> expression . TIMES expression
    (82) expression -> expression . DIVIDE expression
    (83) expression -> expression . MOD expression
    (108) expression -> expression . AND expression
    (109) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 83 (expression -> expression MOD expression .)
    DO              reduce using rule 83 (expression -> expression MOD expression .)
    SEMICOLON       reduce using rule 83 (expression -> expression MOD expression .)
    END             reduce using rule 83 (expression -> expression MOD expression .)
    ELSE            reduce using rule 83 (expression -> expression MOD expression .)
    COMMA           reduce using rule 83 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 83 (expression -> expression MOD expression .)
    RBRACKET        reduce using rule 83 (expression -> expression MOD expression .)
    TO              reduce using rule 83 (expression -> expression MOD expression .)
    DOWNTO          reduce using rule 83 (expression -> expression MOD expression .)
    DOTDOT          reduce using rule 83 (expression -> expression MOD expression .)
    PLUS            shift and go to state 126
    MINUS           shift and go to state 127
    TIMES           shift and go to state 128
    DIVIDE          shift and go to state 129
    MOD             shift and go to state 130
    AND             shift and go to state 131
    OR              shift and go to state 132

  ! PLUS            [ reduce using rule 83 (expression -> expression MOD expression .) ]
  ! MINUS           [ reduce using rule 83 (expression -> expression MOD expression .) ]
  ! TIMES           [ reduce using rule 83 (expression -> expression MOD expression .) ]
  ! DIVIDE          [ reduce using rule 83 (expression -> expression MOD expression .) ]
  ! MOD             [ reduce using rule 83 (expression -> expression MOD expression .) ]
  ! AND             [ reduce using rule 83 (expression -> expression MOD expression .) ]
  ! OR              [ reduce using rule 83 (expression -> expression MOD expression .) ]


state 185

    (108) expression -> expression AND expression .
    (79) expression -> expression . PLUS expression
    (80) expression -> expression . MINUS expression
    (81) expression -> expression . TIMES expression
    (82) expression -> expression . DIVIDE expression
    (83) expression -> expression . MOD expression
    (108) expression -> expression . AND expression
    (109) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 108 (expression -> expression AND expression .)
    DO              reduce using rule 108 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 108 (expression -> expression AND expression .)
    END             reduce using rule 108 (expression -> expression AND expression .)
    ELSE            reduce using rule 108 (expression -> expression AND expression .)
    COMMA           reduce using rule 108 (expression -> expression AND expression .)
    RPAREN          reduce using rule 108 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 108 (expression -> expression AND expression .)
    TO              reduce using rule 108 (expression -> expression AND expression .)
    DOWNTO          reduce using rule 108 (expression -> expression AND expression .)
    DOTDOT          reduce using rule 108 (expression -> expression AND expression .)
    PLUS            shift and go to state 126
    MINUS           shift and go to state 127
    TIMES           shift and go to state 128
    DIVIDE          shift and go to state 129
    MOD             shift and go to state 130
    AND             shift and go to state 131
    OR              shift and go to state 132

  ! PLUS            [ reduce using rule 108 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 108 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 108 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 108 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 108 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 108 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 108 (expression -> expression AND expression .) ]


state 186

    (109) expression -> expression OR expression .
    (79) expression -> expression . PLUS expression
    (80) expression -> expression . MINUS expression
    (81) expression -> expression . TIMES expression
    (82) expression -> expression . DIVIDE expression
    (83) expression -> expression . MOD expression
    (108) expression -> expression . AND expression
    (109) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 109 (expression -> expression OR expression .)
    DO              reduce using rule 109 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 109 (expression -> expression OR expression .)
    END             reduce using rule 109 (expression -> expression OR expression .)
    ELSE            reduce using rule 109 (expression -> expression OR expression .)
    COMMA           reduce using rule 109 (expression -> expression OR expression .)
    RPAREN          reduce using rule 109 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 109 (expression -> expression OR expression .)
    TO              reduce using rule 109 (expression -> expression OR expression .)
    DOWNTO          reduce using rule 109 (expression -> expression OR expression .)
    DOTDOT          reduce using rule 109 (expression -> expression OR expression .)
    PLUS            shift and go to state 126
    MINUS           shift and go to state 127
    TIMES           shift and go to state 128
    DIVIDE          shift and go to state 129
    MOD             shift and go to state 130
    AND             shift and go to state 131
    OR              shift and go to state 132

  ! PLUS            [ reduce using rule 109 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 109 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 109 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 109 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 109 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 109 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 109 (expression -> expression OR expression .) ]


state 187

    (66) expression -> simple_expression relop simple_expression .

    THEN            reduce using rule 66 (expression -> simple_expression relop simple_expression .)
    PLUS            reduce using rule 66 (expression -> simple_expression relop simple_expression .)
    MINUS           reduce using rule 66 (expression -> simple_expression relop simple_expression .)
    TIMES           reduce using rule 66 (expression -> simple_expression relop simple_expression .)
    DIVIDE          reduce using rule 66 (expression -> simple_expression relop simple_expression .)
    MOD             reduce using rule 66 (expression -> simple_expression relop simple_expression .)
    AND             reduce using rule 66 (expression -> simple_expression relop simple_expression .)
    OR              reduce using rule 66 (expression -> simple_expression relop simple_expression .)
    DO              reduce using rule 66 (expression -> simple_expression relop simple_expression .)
    SEMICOLON       reduce using rule 66 (expression -> simple_expression relop simple_expression .)
    END             reduce using rule 66 (expression -> simple_expression relop simple_expression .)
    ELSE            reduce using rule 66 (expression -> simple_expression relop simple_expression .)
    COMMA           reduce using rule 66 (expression -> simple_expression relop simple_expression .)
    RPAREN          reduce using rule 66 (expression -> simple_expression relop simple_expression .)
    RBRACKET        reduce using rule 66 (expression -> simple_expression relop simple_expression .)
    TO              reduce using rule 66 (expression -> simple_expression relop simple_expression .)
    DOWNTO          reduce using rule 66 (expression -> simple_expression relop simple_expression .)
    DOTDOT          reduce using rule 66 (expression -> simple_expression relop simple_expression .)


state 188

    (69) simple_expression_tail -> addop term .

    LESS            reduce using rule 69 (simple_expression_tail -> addop term .)
    LESS_EQUAL      reduce using rule 69 (simple_expression_tail -> addop term .)
    GREAT           reduce using rule 69 (simple_expression_tail -> addop term .)
    GREAT_EQUAL     reduce using rule 69 (simple_expression_tail -> addop term .)
    EQUAL           reduce using rule 69 (simple_expression_tail -> addop term .)
    DIFFERENT       reduce using rule 69 (simple_expression_tail -> addop term .)
    THEN            reduce using rule 69 (simple_expression_tail -> addop term .)
    PLUS            reduce using rule 69 (simple_expression_tail -> addop term .)
    MINUS           reduce using rule 69 (simple_expression_tail -> addop term .)
    TIMES           reduce using rule 69 (simple_expression_tail -> addop term .)
    DIVIDE          reduce using rule 69 (simple_expression_tail -> addop term .)
    MOD             reduce using rule 69 (simple_expression_tail -> addop term .)
    AND             reduce using rule 69 (simple_expression_tail -> addop term .)
    OR              reduce using rule 69 (simple_expression_tail -> addop term .)
    DO              reduce using rule 69 (simple_expression_tail -> addop term .)
    SEMICOLON       reduce using rule 69 (simple_expression_tail -> addop term .)
    END             reduce using rule 69 (simple_expression_tail -> addop term .)
    ELSE            reduce using rule 69 (simple_expression_tail -> addop term .)
    COMMA           reduce using rule 69 (simple_expression_tail -> addop term .)
    RPAREN          reduce using rule 69 (simple_expression_tail -> addop term .)
    RBRACKET        reduce using rule 69 (simple_expression_tail -> addop term .)
    TO              reduce using rule 69 (simple_expression_tail -> addop term .)
    DOWNTO          reduce using rule 69 (simple_expression_tail -> addop term .)
    DOTDOT          reduce using rule 69 (simple_expression_tail -> addop term .)


state 189

    (74) term_tail -> mulop factor .

    PLUS            reduce using rule 74 (term_tail -> mulop factor .)
    MINUS           reduce using rule 74 (term_tail -> mulop factor .)
    LESS            reduce using rule 74 (term_tail -> mulop factor .)
    LESS_EQUAL      reduce using rule 74 (term_tail -> mulop factor .)
    GREAT           reduce using rule 74 (term_tail -> mulop factor .)
    GREAT_EQUAL     reduce using rule 74 (term_tail -> mulop factor .)
    EQUAL           reduce using rule 74 (term_tail -> mulop factor .)
    DIFFERENT       reduce using rule 74 (term_tail -> mulop factor .)
    THEN            reduce using rule 74 (term_tail -> mulop factor .)
    TIMES           reduce using rule 74 (term_tail -> mulop factor .)
    DIVIDE          reduce using rule 74 (term_tail -> mulop factor .)
    MOD             reduce using rule 74 (term_tail -> mulop factor .)
    AND             reduce using rule 74 (term_tail -> mulop factor .)
    OR              reduce using rule 74 (term_tail -> mulop factor .)
    DO              reduce using rule 74 (term_tail -> mulop factor .)
    SEMICOLON       reduce using rule 74 (term_tail -> mulop factor .)
    END             reduce using rule 74 (term_tail -> mulop factor .)
    ELSE            reduce using rule 74 (term_tail -> mulop factor .)
    COMMA           reduce using rule 74 (term_tail -> mulop factor .)
    RPAREN          reduce using rule 74 (term_tail -> mulop factor .)
    RBRACKET        reduce using rule 74 (term_tail -> mulop factor .)
    TO              reduce using rule 74 (term_tail -> mulop factor .)
    DOWNTO          reduce using rule 74 (term_tail -> mulop factor .)
    DOTDOT          reduce using rule 74 (term_tail -> mulop factor .)


state 190

    (84) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    DIV             reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    LESS_EQUAL      reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    GREAT           reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    GREAT_EQUAL     reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    DIFFERENT       reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    DOTDOT          reduce using rule 84 (factor -> LPAREN expression RPAREN .)


state 191

    (36) function_call -> ID LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 203


state 192

    (60) while_statement -> WHILE expression DO statement .

    SEMICOLON       reduce using rule 60 (while_statement -> WHILE expression DO statement .)
    END             reduce using rule 60 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 60 (while_statement -> WHILE expression DO statement .)


state 193

    (55) for_statement -> FOR ID COLON_EQUAL expression . TO expression DO statement
    (56) for_statement -> FOR ID COLON_EQUAL expression . DOWNTO expression DO statement
    (79) expression -> expression . PLUS expression
    (80) expression -> expression . MINUS expression
    (81) expression -> expression . TIMES expression
    (82) expression -> expression . DIVIDE expression
    (83) expression -> expression . MOD expression
    (108) expression -> expression . AND expression
    (109) expression -> expression . OR expression

    TO              shift and go to state 204
    DOWNTO          shift and go to state 205
    PLUS            shift and go to state 126
    MINUS           shift and go to state 127
    TIMES           shift and go to state 128
    DIVIDE          shift and go to state 129
    MOD             shift and go to state 130
    AND             shift and go to state 131
    OR              shift and go to state 132


state 194

    (22) type_specifier -> LPAREN id_list RPAREN .

    SEMICOLON       reduce using rule 22 (type_specifier -> LPAREN id_list RPAREN .)
    RPAREN          reduce using rule 22 (type_specifier -> LPAREN id_list RPAREN .)


state 195

    (24) type_specifier -> ARRAY LBRACKET expression . DOTDOT expression RBRACKET OF type_specifier
    (79) expression -> expression . PLUS expression
    (80) expression -> expression . MINUS expression
    (81) expression -> expression . TIMES expression
    (82) expression -> expression . DIVIDE expression
    (83) expression -> expression . MOD expression
    (108) expression -> expression . AND expression
    (109) expression -> expression . OR expression

    DOTDOT          shift and go to state 206
    PLUS            shift and go to state 126
    MINUS           shift and go to state 127
    TIMES           shift and go to state 128
    DIVIDE          shift and go to state 129
    MOD             shift and go to state 130
    AND             shift and go to state 131
    OR              shift and go to state 132


state 196

    (33) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON . block SEMICOLON
    (34) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON . block DOT
    (18) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (94) empty -> .

    BEGIN           reduce using rule 94 (empty -> .)
    USES            reduce using rule 94 (empty -> .)
    CONST           reduce using rule 94 (empty -> .)
    TYPE            reduce using rule 94 (empty -> .)
    VAR             reduce using rule 94 (empty -> .)
    PROCEDURE       reduce using rule 94 (empty -> .)
    FUNCTION        reduce using rule 94 (empty -> .)

    block                          shift and go to state 207
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 197

    (39) parameter_list -> parameter_list SEMICOLON parameter .

    RPAREN          reduce using rule 39 (parameter_list -> parameter_list SEMICOLON parameter .)
    SEMICOLON       reduce using rule 39 (parameter_list -> parameter_list SEMICOLON parameter .)


state 198

    (40) parameter -> id_list COLON type_specifier .

    RPAREN          reduce using rule 40 (parameter -> id_list COLON type_specifier .)
    SEMICOLON       reduce using rule 40 (parameter -> id_list COLON type_specifier .)


state 199

    (41) parameter -> VAR id_list COLON . type_specifier
    (22) type_specifier -> . LPAREN id_list RPAREN
    (24) type_specifier -> . ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier
    (25) type_specifier -> . INTEGER
    (26) type_specifier -> . BYTE
    (27) type_specifier -> . CHAR
    (28) type_specifier -> . ID
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . LONGINT

    LPAREN          shift and go to state 100
    ARRAY           shift and go to state 101
    INTEGER         shift and go to state 102
    BYTE            shift and go to state 103
    CHAR            shift and go to state 104
    ID              shift and go to state 98
    BOOLEAN_LITERAL shift and go to state 105
    LONGINT         shift and go to state 106

    type_specifier                 shift and go to state 208

state 200

    (35) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON . type_specifier SEMICOLON block SEMICOLON
    (22) type_specifier -> . LPAREN id_list RPAREN
    (24) type_specifier -> . ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier
    (25) type_specifier -> . INTEGER
    (26) type_specifier -> . BYTE
    (27) type_specifier -> . CHAR
    (28) type_specifier -> . ID
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . LONGINT

    LPAREN          shift and go to state 100
    ARRAY           shift and go to state 101
    INTEGER         shift and go to state 102
    BYTE            shift and go to state 103
    CHAR            shift and go to state 104
    ID              shift and go to state 98
    BOOLEAN_LITERAL shift and go to state 105
    LONGINT         shift and go to state 106

    type_specifier                 shift and go to state 209

state 201

    (63) expression_list_tail -> COMMA expression . expression_list_tail
    (79) expression -> expression . PLUS expression
    (80) expression -> expression . MINUS expression
    (81) expression -> expression . TIMES expression
    (82) expression -> expression . DIVIDE expression
    (83) expression -> expression . MOD expression
    (108) expression -> expression . AND expression
    (109) expression -> expression . OR expression
    (63) expression_list_tail -> . COMMA expression expression_list_tail
    (64) expression_list_tail -> . empty
    (94) empty -> .

    PLUS            shift and go to state 126
    MINUS           shift and go to state 127
    TIMES           shift and go to state 128
    DIVIDE          shift and go to state 129
    MOD             shift and go to state 130
    AND             shift and go to state 131
    OR              shift and go to state 132
    COMMA           shift and go to state 174
    RPAREN          reduce using rule 94 (empty -> .)

    expression_list_tail           shift and go to state 210
    empty                          shift and go to state 175

state 202

    (53) if_statement -> IF expression THEN statement ELSE . statement
    (46) statement -> . if_statement
    (47) statement -> . assignment_statement
    (48) statement -> . while_statement
    (49) statement -> . procedure_call
    (50) statement -> . compound_statement
    (51) statement -> . for_statement
    (52) statement -> . empty
    (95) statement -> . READLN
    (96) statement -> . READLN LPAREN variable RPAREN
    (97) statement -> . READLN LBRACKET variable RBRACKET
    (98) statement -> . WRITELN LPAREN expression_list RPAREN
    (99) statement -> . WRITE LPAREN expression_list RPAREN
    (100) statement -> . USES ID SEMICOLON
    (53) if_statement -> . IF expression THEN statement ELSE statement
    (54) if_statement -> . IF expression THEN statement
    (57) assignment_statement -> . variable COLON_EQUAL expression
    (60) while_statement -> . WHILE expression DO statement
    (61) procedure_call -> . ID LPAREN expression_list RPAREN
    (42) compound_statement -> . BEGIN statement_list END
    (55) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (56) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (94) empty -> .
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    READLN          shift and go to state 49
    WRITELN         shift and go to state 51
    WRITE           shift and go to state 52
    USES            shift and go to state 53
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    ID              shift and go to state 54
    BEGIN           shift and go to state 24
    FOR             shift and go to state 57
    ELSE            reduce using rule 94 (empty -> .)
    SEMICOLON       reduce using rule 94 (empty -> .)
    END             reduce using rule 94 (empty -> .)

    statement                      shift and go to state 211
    if_statement                   shift and go to state 42
    assignment_statement           shift and go to state 43
    while_statement                shift and go to state 44
    procedure_call                 shift and go to state 45
    compound_statement             shift and go to state 46
    for_statement                  shift and go to state 47
    empty                          shift and go to state 48
    variable                       shift and go to state 50

state 203

    (36) function_call -> ID LPAREN expression_list RPAREN .

    TIMES           reduce using rule 36 (function_call -> ID LPAREN expression_list RPAREN .)
    DIVIDE          reduce using rule 36 (function_call -> ID LPAREN expression_list RPAREN .)
    DIV             reduce using rule 36 (function_call -> ID LPAREN expression_list RPAREN .)
    PLUS            reduce using rule 36 (function_call -> ID LPAREN expression_list RPAREN .)
    MINUS           reduce using rule 36 (function_call -> ID LPAREN expression_list RPAREN .)
    LESS            reduce using rule 36 (function_call -> ID LPAREN expression_list RPAREN .)
    LESS_EQUAL      reduce using rule 36 (function_call -> ID LPAREN expression_list RPAREN .)
    GREAT           reduce using rule 36 (function_call -> ID LPAREN expression_list RPAREN .)
    GREAT_EQUAL     reduce using rule 36 (function_call -> ID LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 36 (function_call -> ID LPAREN expression_list RPAREN .)
    DIFFERENT       reduce using rule 36 (function_call -> ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 36 (function_call -> ID LPAREN expression_list RPAREN .)
    MOD             reduce using rule 36 (function_call -> ID LPAREN expression_list RPAREN .)
    AND             reduce using rule 36 (function_call -> ID LPAREN expression_list RPAREN .)
    OR              reduce using rule 36 (function_call -> ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 36 (function_call -> ID LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 36 (function_call -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 36 (function_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 36 (function_call -> ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 36 (function_call -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 36 (function_call -> ID LPAREN expression_list RPAREN .)
    RBRACKET        reduce using rule 36 (function_call -> ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 36 (function_call -> ID LPAREN expression_list RPAREN .)
    DOWNTO          reduce using rule 36 (function_call -> ID LPAREN expression_list RPAREN .)
    DOTDOT          reduce using rule 36 (function_call -> ID LPAREN expression_list RPAREN .)


state 204

    (55) for_statement -> FOR ID COLON_EQUAL expression TO . expression DO statement
    (66) expression -> . simple_expression relop simple_expression
    (67) expression -> . simple_expression
    (79) expression -> . expression PLUS expression
    (80) expression -> . expression MINUS expression
    (81) expression -> . expression TIMES expression
    (82) expression -> . expression DIVIDE expression
    (83) expression -> . expression MOD expression
    (108) expression -> . expression AND expression
    (109) expression -> . expression OR expression
    (110) expression -> . NOT expression
    (68) simple_expression -> . term simple_expression_tail
    (73) term -> . factor term_tail
    (37) factor -> . function_call
    (84) factor -> . LPAREN expression RPAREN
    (85) factor -> . variable
    (86) factor -> . NUMBER
    (87) factor -> . STRING_LITERAL
    (36) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 82
    LPAREN          shift and go to state 86
    NUMBER          shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    ID              shift and go to state 90

    expression                     shift and go to state 212
    simple_expression              shift and go to state 81
    term                           shift and go to state 83
    factor                         shift and go to state 84
    function_call                  shift and go to state 85
    variable                       shift and go to state 87

state 205

    (56) for_statement -> FOR ID COLON_EQUAL expression DOWNTO . expression DO statement
    (66) expression -> . simple_expression relop simple_expression
    (67) expression -> . simple_expression
    (79) expression -> . expression PLUS expression
    (80) expression -> . expression MINUS expression
    (81) expression -> . expression TIMES expression
    (82) expression -> . expression DIVIDE expression
    (83) expression -> . expression MOD expression
    (108) expression -> . expression AND expression
    (109) expression -> . expression OR expression
    (110) expression -> . NOT expression
    (68) simple_expression -> . term simple_expression_tail
    (73) term -> . factor term_tail
    (37) factor -> . function_call
    (84) factor -> . LPAREN expression RPAREN
    (85) factor -> . variable
    (86) factor -> . NUMBER
    (87) factor -> . STRING_LITERAL
    (36) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 82
    LPAREN          shift and go to state 86
    NUMBER          shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    ID              shift and go to state 90

    expression                     shift and go to state 213
    simple_expression              shift and go to state 81
    term                           shift and go to state 83
    factor                         shift and go to state 84
    function_call                  shift and go to state 85
    variable                       shift and go to state 87

state 206

    (24) type_specifier -> ARRAY LBRACKET expression DOTDOT . expression RBRACKET OF type_specifier
    (66) expression -> . simple_expression relop simple_expression
    (67) expression -> . simple_expression
    (79) expression -> . expression PLUS expression
    (80) expression -> . expression MINUS expression
    (81) expression -> . expression TIMES expression
    (82) expression -> . expression DIVIDE expression
    (83) expression -> . expression MOD expression
    (108) expression -> . expression AND expression
    (109) expression -> . expression OR expression
    (110) expression -> . NOT expression
    (68) simple_expression -> . term simple_expression_tail
    (73) term -> . factor term_tail
    (37) factor -> . function_call
    (84) factor -> . LPAREN expression RPAREN
    (85) factor -> . variable
    (86) factor -> . NUMBER
    (87) factor -> . STRING_LITERAL
    (36) function_call -> . ID LPAREN expression_list RPAREN
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 82
    LPAREN          shift and go to state 86
    NUMBER          shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    ID              shift and go to state 90

    expression                     shift and go to state 214
    simple_expression              shift and go to state 81
    term                           shift and go to state 83
    factor                         shift and go to state 84
    function_call                  shift and go to state 85
    variable                       shift and go to state 87

state 207

    (33) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block . SEMICOLON
    (34) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block . DOT

    SEMICOLON       shift and go to state 215
    DOT             shift and go to state 216


state 208

    (41) parameter -> VAR id_list COLON type_specifier .

    RPAREN          reduce using rule 41 (parameter -> VAR id_list COLON type_specifier .)
    SEMICOLON       reduce using rule 41 (parameter -> VAR id_list COLON type_specifier .)


state 209

    (35) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier . SEMICOLON block SEMICOLON

    SEMICOLON       shift and go to state 217


state 210

    (63) expression_list_tail -> COMMA expression expression_list_tail .

    RPAREN          reduce using rule 63 (expression_list_tail -> COMMA expression expression_list_tail .)


state 211

    (53) if_statement -> IF expression THEN statement ELSE statement .

    SEMICOLON       reduce using rule 53 (if_statement -> IF expression THEN statement ELSE statement .)
    END             reduce using rule 53 (if_statement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 53 (if_statement -> IF expression THEN statement ELSE statement .)


state 212

    (55) for_statement -> FOR ID COLON_EQUAL expression TO expression . DO statement
    (79) expression -> expression . PLUS expression
    (80) expression -> expression . MINUS expression
    (81) expression -> expression . TIMES expression
    (82) expression -> expression . DIVIDE expression
    (83) expression -> expression . MOD expression
    (108) expression -> expression . AND expression
    (109) expression -> expression . OR expression

    DO              shift and go to state 218
    PLUS            shift and go to state 126
    MINUS           shift and go to state 127
    TIMES           shift and go to state 128
    DIVIDE          shift and go to state 129
    MOD             shift and go to state 130
    AND             shift and go to state 131
    OR              shift and go to state 132


state 213

    (56) for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression . DO statement
    (79) expression -> expression . PLUS expression
    (80) expression -> expression . MINUS expression
    (81) expression -> expression . TIMES expression
    (82) expression -> expression . DIVIDE expression
    (83) expression -> expression . MOD expression
    (108) expression -> expression . AND expression
    (109) expression -> expression . OR expression

    DO              shift and go to state 219
    PLUS            shift and go to state 126
    MINUS           shift and go to state 127
    TIMES           shift and go to state 128
    DIVIDE          shift and go to state 129
    MOD             shift and go to state 130
    AND             shift and go to state 131
    OR              shift and go to state 132


state 214

    (24) type_specifier -> ARRAY LBRACKET expression DOTDOT expression . RBRACKET OF type_specifier
    (79) expression -> expression . PLUS expression
    (80) expression -> expression . MINUS expression
    (81) expression -> expression . TIMES expression
    (82) expression -> expression . DIVIDE expression
    (83) expression -> expression . MOD expression
    (108) expression -> expression . AND expression
    (109) expression -> expression . OR expression

    RBRACKET        shift and go to state 220
    PLUS            shift and go to state 126
    MINUS           shift and go to state 127
    TIMES           shift and go to state 128
    DIVIDE          shift and go to state 129
    MOD             shift and go to state 130
    AND             shift and go to state 131
    OR              shift and go to state 132


state 215

    (33) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .

    USES            reduce using rule 33 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    CONST           reduce using rule 33 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    TYPE            reduce using rule 33 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    VAR             reduce using rule 33 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    PROCEDURE       reduce using rule 33 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 33 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    BEGIN           reduce using rule 33 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)


state 216

    (34) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT .

    USES            reduce using rule 34 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT .)
    CONST           reduce using rule 34 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT .)
    TYPE            reduce using rule 34 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT .)
    VAR             reduce using rule 34 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT .)
    PROCEDURE       reduce using rule 34 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT .)
    FUNCTION        reduce using rule 34 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT .)
    BEGIN           reduce using rule 34 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT .)


state 217

    (35) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON . block SEMICOLON
    (18) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (94) empty -> .

    BEGIN           reduce using rule 94 (empty -> .)
    USES            reduce using rule 94 (empty -> .)
    CONST           reduce using rule 94 (empty -> .)
    TYPE            reduce using rule 94 (empty -> .)
    VAR             reduce using rule 94 (empty -> .)
    PROCEDURE       reduce using rule 94 (empty -> .)
    FUNCTION        reduce using rule 94 (empty -> .)

    block                          shift and go to state 221
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 218

    (55) for_statement -> FOR ID COLON_EQUAL expression TO expression DO . statement
    (46) statement -> . if_statement
    (47) statement -> . assignment_statement
    (48) statement -> . while_statement
    (49) statement -> . procedure_call
    (50) statement -> . compound_statement
    (51) statement -> . for_statement
    (52) statement -> . empty
    (95) statement -> . READLN
    (96) statement -> . READLN LPAREN variable RPAREN
    (97) statement -> . READLN LBRACKET variable RBRACKET
    (98) statement -> . WRITELN LPAREN expression_list RPAREN
    (99) statement -> . WRITE LPAREN expression_list RPAREN
    (100) statement -> . USES ID SEMICOLON
    (53) if_statement -> . IF expression THEN statement ELSE statement
    (54) if_statement -> . IF expression THEN statement
    (57) assignment_statement -> . variable COLON_EQUAL expression
    (60) while_statement -> . WHILE expression DO statement
    (61) procedure_call -> . ID LPAREN expression_list RPAREN
    (42) compound_statement -> . BEGIN statement_list END
    (55) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (56) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (94) empty -> .
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    READLN          shift and go to state 49
    WRITELN         shift and go to state 51
    WRITE           shift and go to state 52
    USES            shift and go to state 53
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    ID              shift and go to state 54
    BEGIN           shift and go to state 24
    FOR             shift and go to state 57
    ELSE            reduce using rule 94 (empty -> .)
    SEMICOLON       reduce using rule 94 (empty -> .)
    END             reduce using rule 94 (empty -> .)

    statement                      shift and go to state 222
    if_statement                   shift and go to state 42
    assignment_statement           shift and go to state 43
    while_statement                shift and go to state 44
    procedure_call                 shift and go to state 45
    compound_statement             shift and go to state 46
    for_statement                  shift and go to state 47
    empty                          shift and go to state 48
    variable                       shift and go to state 50

state 219

    (56) for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO . statement
    (46) statement -> . if_statement
    (47) statement -> . assignment_statement
    (48) statement -> . while_statement
    (49) statement -> . procedure_call
    (50) statement -> . compound_statement
    (51) statement -> . for_statement
    (52) statement -> . empty
    (95) statement -> . READLN
    (96) statement -> . READLN LPAREN variable RPAREN
    (97) statement -> . READLN LBRACKET variable RBRACKET
    (98) statement -> . WRITELN LPAREN expression_list RPAREN
    (99) statement -> . WRITE LPAREN expression_list RPAREN
    (100) statement -> . USES ID SEMICOLON
    (53) if_statement -> . IF expression THEN statement ELSE statement
    (54) if_statement -> . IF expression THEN statement
    (57) assignment_statement -> . variable COLON_EQUAL expression
    (60) while_statement -> . WHILE expression DO statement
    (61) procedure_call -> . ID LPAREN expression_list RPAREN
    (42) compound_statement -> . BEGIN statement_list END
    (55) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (56) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (94) empty -> .
    (58) variable -> . ID
    (59) variable -> . ID LBRACKET expression RBRACKET

    READLN          shift and go to state 49
    WRITELN         shift and go to state 51
    WRITE           shift and go to state 52
    USES            shift and go to state 53
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    ID              shift and go to state 54
    BEGIN           shift and go to state 24
    FOR             shift and go to state 57
    ELSE            reduce using rule 94 (empty -> .)
    SEMICOLON       reduce using rule 94 (empty -> .)
    END             reduce using rule 94 (empty -> .)

    statement                      shift and go to state 223
    if_statement                   shift and go to state 42
    assignment_statement           shift and go to state 43
    while_statement                shift and go to state 44
    procedure_call                 shift and go to state 45
    compound_statement             shift and go to state 46
    for_statement                  shift and go to state 47
    empty                          shift and go to state 48
    variable                       shift and go to state 50

state 220

    (24) type_specifier -> ARRAY LBRACKET expression DOTDOT expression RBRACKET . OF type_specifier

    OF              shift and go to state 224


state 221

    (35) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 225


state 222

    (55) for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement .

    SEMICOLON       reduce using rule 55 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement .)
    END             reduce using rule 55 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement .)
    ELSE            reduce using rule 55 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement .)


state 223

    (56) for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement .

    SEMICOLON       reduce using rule 56 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement .)
    END             reduce using rule 56 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement .)
    ELSE            reduce using rule 56 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement .)


state 224

    (24) type_specifier -> ARRAY LBRACKET expression DOTDOT expression RBRACKET OF . type_specifier
    (22) type_specifier -> . LPAREN id_list RPAREN
    (24) type_specifier -> . ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier
    (25) type_specifier -> . INTEGER
    (26) type_specifier -> . BYTE
    (27) type_specifier -> . CHAR
    (28) type_specifier -> . ID
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . LONGINT

    LPAREN          shift and go to state 100
    ARRAY           shift and go to state 101
    INTEGER         shift and go to state 102
    BYTE            shift and go to state 103
    CHAR            shift and go to state 104
    ID              shift and go to state 98
    BOOLEAN_LITERAL shift and go to state 105
    LONGINT         shift and go to state 106

    type_specifier                 shift and go to state 226

state 225

    (35) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .

    USES            reduce using rule 35 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    CONST           reduce using rule 35 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    TYPE            reduce using rule 35 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    VAR             reduce using rule 35 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    PROCEDURE       reduce using rule 35 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 35 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    BEGIN           reduce using rule 35 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)


state 226

    (24) type_specifier -> ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier .

    SEMICOLON       reduce using rule 24 (type_specifier -> ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier .)
    RPAREN          reduce using rule 24 (type_specifier -> ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for USES in state 5 resolved as shift
WARNING: shift/reduce conflict for CONST in state 5 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 5 resolved as shift
WARNING: shift/reduce conflict for VAR in state 5 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 5 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 5 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 7 resolved as shift
WARNING: shift/reduce conflict for USES in state 7 resolved as shift
WARNING: shift/reduce conflict for CONST in state 7 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 7 resolved as shift
WARNING: shift/reduce conflict for VAR in state 7 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 7 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 7 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 83 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 84 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 84 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 140 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 140 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 140 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 140 resolved as shift
WARNING: shift/reduce conflict for MOD in state 140 resolved as shift
WARNING: shift/reduce conflict for AND in state 140 resolved as shift
WARNING: shift/reduce conflict for OR in state 140 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 179 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 180 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 180 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 180 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 180 resolved as shift
WARNING: shift/reduce conflict for MOD in state 180 resolved as shift
WARNING: shift/reduce conflict for AND in state 180 resolved as shift
WARNING: shift/reduce conflict for OR in state 180 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 181 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 181 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 181 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 181 resolved as shift
WARNING: shift/reduce conflict for MOD in state 181 resolved as shift
WARNING: shift/reduce conflict for AND in state 181 resolved as shift
WARNING: shift/reduce conflict for OR in state 181 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 182 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 182 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 182 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 182 resolved as shift
WARNING: shift/reduce conflict for MOD in state 182 resolved as shift
WARNING: shift/reduce conflict for AND in state 182 resolved as shift
WARNING: shift/reduce conflict for OR in state 182 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 183 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 183 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 183 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 183 resolved as shift
WARNING: shift/reduce conflict for MOD in state 183 resolved as shift
WARNING: shift/reduce conflict for AND in state 183 resolved as shift
WARNING: shift/reduce conflict for OR in state 183 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 184 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 184 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 184 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 184 resolved as shift
WARNING: shift/reduce conflict for MOD in state 184 resolved as shift
WARNING: shift/reduce conflict for AND in state 184 resolved as shift
WARNING: shift/reduce conflict for OR in state 184 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 185 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 185 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 185 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 185 resolved as shift
WARNING: shift/reduce conflict for MOD in state 185 resolved as shift
WARNING: shift/reduce conflict for AND in state 185 resolved as shift
WARNING: shift/reduce conflict for OR in state 185 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 186 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 186 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 186 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 186 resolved as shift
WARNING: shift/reduce conflict for MOD in state 186 resolved as shift
WARNING: shift/reduce conflict for AND in state 186 resolved as shift
WARNING: shift/reduce conflict for OR in state 186 resolved as shift
WARNING: reduce/reduce conflict in state 16 resolved using rule (declaration_sections -> empty)
WARNING: rejected rule (uses_opt -> empty) in state 16
