Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BOOLEAN_LITERAL
    BYTE
    CASE
    CHAR
    CHARACTER_LITERAL
    CONST
    DIV
    DOWNTO
    FALSE
    FILE
    FOR
    FUNCTION
    GOTO
    IN
    LABEL
    LBLOCK
    MOD
    NIL
    NOT
    OR
    PACKED
    RBLOCK
    RECORD
    REPEAT
    SET
    STRING_LITERAL
    TO
    TRUE
    TYPE
    UNTIL
    WITH
    WRITE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON uses_opt block DOT
Rule 2     uses_opt -> USES ID SEMICOLON
Rule 3     uses_opt -> empty
Rule 4     block -> declarations compound_statement
Rule 5     declarations -> VAR declaration_list procedure_declarations
Rule 6     declarations -> VAR declaration_list
Rule 7     declarations -> procedure_declarations
Rule 8     declarations -> empty
Rule 9     declaration_list -> declaration
Rule 10    declaration_list -> declaration_list declaration
Rule 11    declaration -> id_list COLON type_specifier SEMICOLON
Rule 12    id_list -> ID
Rule 13    id_list -> id_list COMMA ID
Rule 14    type_specifier -> INTEGER
Rule 15    type_specifier -> ARRAY LBRACKET NUMBER DOTDOT NUMBER RBRACKET OF INTEGER
Rule 16    procedure_declarations -> procedure_declaration
Rule 17    procedure_declarations -> procedure_declarations procedure_declaration
Rule 18    procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
Rule 19    parameter_list -> id_list COLON type_specifier
Rule 20    compound_statement -> BEGIN statement_list END
Rule 21    statement_list -> statement statement_list_tail
Rule 22    statement_list_tail -> SEMICOLON statement statement_list_tail
Rule 23    statement_list_tail -> empty
Rule 24    statement -> assignment_statement
Rule 25    statement -> if_statement
Rule 26    statement -> while_statement
Rule 27    statement -> procedure_call
Rule 28    statement -> compound_statement
Rule 29    statement -> empty
Rule 30    assignment_statement -> variable COLON_EQUAL expression
Rule 31    variable -> ID
Rule 32    variable -> ID LBRACKET expression RBRACKET
Rule 33    if_statement -> IF expression THEN statement ELSE statement
Rule 34    while_statement -> WHILE expression DO statement
Rule 35    procedure_call -> ID LPAREN expression_list RPAREN
Rule 36    expression_list -> expression expression_list_tail
Rule 37    expression_list_tail -> COMMA expression
Rule 38    expression_list_tail -> empty
Rule 39    expression_list -> empty
Rule 40    expression -> simple_expression relop simple_expression
Rule 41    expression -> simple_expression
Rule 42    simple_expression -> term simple_expression_tail
Rule 43    simple_expression_tail -> addop term
Rule 44    simple_expression_tail -> empty
Rule 45    addop -> PLUS
Rule 46    addop -> MINUS
Rule 47    term -> factor term_tail
Rule 48    term_tail -> mulop factor
Rule 49    term_tail -> empty
Rule 50    mulop -> TIMES
Rule 51    mulop -> DIVIDE
Rule 52    factor -> LPAREN expression RPAREN
Rule 53    factor -> variable
Rule 54    factor -> NUMBER
Rule 55    factor -> STRING
Rule 56    relop -> LESS
Rule 57    relop -> LESS_EQUAL
Rule 58    relop -> GREAT
Rule 59    relop -> GREAT_EQUAL
Rule 60    relop -> EQUAL
Rule 61    relop -> DIFFERENT
Rule 62    empty -> <empty>
Rule 63    statement -> READLINE
Rule 64    statement -> WRITELN LPAREN expression_list RPAREN
Rule 65    statement -> USES ID SEMICOLON

Terminals, with rules where they appear

AND                  : 
ARRAY                : 15
BEGIN                : 20
BOOLEAN_LITERAL      : 
BYTE                 : 
CASE                 : 
CHAR                 : 
CHARACTER_LITERAL    : 
COLON                : 11 19
COLON_EQUAL          : 30
COMMA                : 13 37
CONST                : 
DIFFERENT            : 61
DIV                  : 
DIVIDE               : 51
DO                   : 34
DOT                  : 1
DOTDOT               : 15
DOWNTO               : 
ELSE                 : 33
END                  : 20
EQUAL                : 60
FALSE                : 
FILE                 : 
FOR                  : 
FUNCTION             : 
GOTO                 : 
GREAT                : 58
GREAT_EQUAL          : 59
ID                   : 1 2 12 13 18 31 32 35 65
IF                   : 33
IN                   : 
INTEGER              : 14 15
LABEL                : 
LBLOCK               : 
LBRACKET             : 15 32
LESS                 : 56
LESS_EQUAL           : 57
LPAREN               : 18 35 52 64
MINUS                : 46
MOD                  : 
NIL                  : 
NOT                  : 
NUMBER               : 15 15 54
OF                   : 15
OR                   : 
PACKED               : 
PLUS                 : 45
PROCEDURE            : 18
PROGRAM              : 1
RBLOCK               : 
RBRACKET             : 15 32
READLINE             : 63
RECORD               : 
REPEAT               : 
RPAREN               : 18 35 52 64
SEMICOLON            : 1 2 11 18 18 22 65
SET                  : 
STRING               : 55
STRING_LITERAL       : 
THEN                 : 33
TIMES                : 50
TO                   : 
TRUE                 : 
TYPE                 : 
UNTIL                : 
USES                 : 2 65
VAR                  : 5 6
WHILE                : 34
WITH                 : 
WRITE                : 
WRITELN              : 64
error                : 

Nonterminals, with rules where they appear

addop                : 43
assignment_statement : 24
block                : 1 18
compound_statement   : 4 28
declaration          : 9 10
declaration_list     : 5 6 10
declarations         : 4
empty                : 3 8 23 29 38 39 44 49
expression           : 30 32 33 34 36 37 52
expression_list      : 35 64
expression_list_tail : 36
factor               : 47 48
id_list              : 11 13 19
if_statement         : 25
mulop                : 48
parameter_list       : 18
procedure_call       : 27
procedure_declaration : 16 17
procedure_declarations : 5 7 17
program              : 0
relop                : 40
simple_expression    : 40 40 41
simple_expression_tail : 42
statement            : 21 22 33 33 34
statement_list       : 20
statement_list_tail  : 21 22
term                 : 42 43
term_tail            : 47
type_specifier       : 11 19
uses_opt             : 1
variable             : 30 53
while_statement      : 26

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON uses_opt block DOT

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON uses_opt block DOT

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON uses_opt block DOT

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . uses_opt block DOT
    (2) uses_opt -> . USES ID SEMICOLON
    (3) uses_opt -> . empty
    (62) empty -> .

    USES            shift and go to state 6
    VAR             reduce using rule 62 (empty -> .)
    PROCEDURE       reduce using rule 62 (empty -> .)
    BEGIN           reduce using rule 62 (empty -> .)

    uses_opt                       shift and go to state 5
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMICOLON uses_opt . block DOT
    (4) block -> . declarations compound_statement
    (5) declarations -> . VAR declaration_list procedure_declarations
    (6) declarations -> . VAR declaration_list
    (7) declarations -> . procedure_declarations
    (8) declarations -> . empty
    (16) procedure_declarations -> . procedure_declaration
    (17) procedure_declarations -> . procedure_declarations procedure_declaration
    (62) empty -> .
    (18) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON

    VAR             shift and go to state 10
    BEGIN           reduce using rule 62 (empty -> .)
    PROCEDURE       shift and go to state 14

    block                          shift and go to state 8
    declarations                   shift and go to state 9
    procedure_declarations         shift and go to state 11
    empty                          shift and go to state 12
    procedure_declaration          shift and go to state 13

state 6

    (2) uses_opt -> USES . ID SEMICOLON

    ID              shift and go to state 15


state 7

    (3) uses_opt -> empty .

    VAR             reduce using rule 3 (uses_opt -> empty .)
    PROCEDURE       reduce using rule 3 (uses_opt -> empty .)
    BEGIN           reduce using rule 3 (uses_opt -> empty .)


state 8

    (1) program -> PROGRAM ID SEMICOLON uses_opt block . DOT

    DOT             shift and go to state 16


state 9

    (4) block -> declarations . compound_statement
    (20) compound_statement -> . BEGIN statement_list END

    BEGIN           shift and go to state 18

    compound_statement             shift and go to state 17

state 10

    (5) declarations -> VAR . declaration_list procedure_declarations
    (6) declarations -> VAR . declaration_list
    (9) declaration_list -> . declaration
    (10) declaration_list -> . declaration_list declaration
    (11) declaration -> . id_list COLON type_specifier SEMICOLON
    (12) id_list -> . ID
    (13) id_list -> . id_list COMMA ID

    ID              shift and go to state 22

    declaration_list               shift and go to state 19
    declaration                    shift and go to state 20
    id_list                        shift and go to state 21

state 11

    (7) declarations -> procedure_declarations .
    (17) procedure_declarations -> procedure_declarations . procedure_declaration
    (18) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON

    BEGIN           reduce using rule 7 (declarations -> procedure_declarations .)
    PROCEDURE       shift and go to state 14

    procedure_declaration          shift and go to state 23

state 12

    (8) declarations -> empty .

    BEGIN           reduce using rule 8 (declarations -> empty .)


state 13

    (16) procedure_declarations -> procedure_declaration .

    PROCEDURE       reduce using rule 16 (procedure_declarations -> procedure_declaration .)
    BEGIN           reduce using rule 16 (procedure_declarations -> procedure_declaration .)


state 14

    (18) procedure_declaration -> PROCEDURE . ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON

    ID              shift and go to state 24


state 15

    (2) uses_opt -> USES ID . SEMICOLON

    SEMICOLON       shift and go to state 25


state 16

    (1) program -> PROGRAM ID SEMICOLON uses_opt block DOT .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON uses_opt block DOT .)


state 17

    (4) block -> declarations compound_statement .

    DOT             reduce using rule 4 (block -> declarations compound_statement .)
    SEMICOLON       reduce using rule 4 (block -> declarations compound_statement .)


state 18

    (20) compound_statement -> BEGIN . statement_list END
    (21) statement_list -> . statement statement_list_tail
    (24) statement -> . assignment_statement
    (25) statement -> . if_statement
    (26) statement -> . while_statement
    (27) statement -> . procedure_call
    (28) statement -> . compound_statement
    (29) statement -> . empty
    (63) statement -> . READLINE
    (64) statement -> . WRITELN LPAREN expression_list RPAREN
    (65) statement -> . USES ID SEMICOLON
    (30) assignment_statement -> . variable COLON_EQUAL expression
    (33) if_statement -> . IF expression THEN statement ELSE statement
    (34) while_statement -> . WHILE expression DO statement
    (35) procedure_call -> . ID LPAREN expression_list RPAREN
    (20) compound_statement -> . BEGIN statement_list END
    (62) empty -> .
    (31) variable -> . ID
    (32) variable -> . ID LBRACKET expression RBRACKET

    READLINE        shift and go to state 34
    WRITELN         shift and go to state 35
    USES            shift and go to state 36
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    ID              shift and go to state 37
    BEGIN           shift and go to state 18
    SEMICOLON       reduce using rule 62 (empty -> .)
    END             reduce using rule 62 (empty -> .)

    statement_list                 shift and go to state 26
    statement                      shift and go to state 27
    assignment_statement           shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 30
    procedure_call                 shift and go to state 31
    compound_statement             shift and go to state 32
    empty                          shift and go to state 33
    variable                       shift and go to state 38

state 19

    (5) declarations -> VAR declaration_list . procedure_declarations
    (6) declarations -> VAR declaration_list .
    (10) declaration_list -> declaration_list . declaration
    (16) procedure_declarations -> . procedure_declaration
    (17) procedure_declarations -> . procedure_declarations procedure_declaration
    (11) declaration -> . id_list COLON type_specifier SEMICOLON
    (18) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON
    (12) id_list -> . ID
    (13) id_list -> . id_list COMMA ID

    BEGIN           reduce using rule 6 (declarations -> VAR declaration_list .)
    PROCEDURE       shift and go to state 14
    ID              shift and go to state 22

    procedure_declarations         shift and go to state 41
    declaration                    shift and go to state 42
    procedure_declaration          shift and go to state 13
    id_list                        shift and go to state 21

state 20

    (9) declaration_list -> declaration .

    PROCEDURE       reduce using rule 9 (declaration_list -> declaration .)
    ID              reduce using rule 9 (declaration_list -> declaration .)
    BEGIN           reduce using rule 9 (declaration_list -> declaration .)


state 21

    (11) declaration -> id_list . COLON type_specifier SEMICOLON
    (13) id_list -> id_list . COMMA ID

    COLON           shift and go to state 43
    COMMA           shift and go to state 44


state 22

    (12) id_list -> ID .

    COLON           reduce using rule 12 (id_list -> ID .)
    COMMA           reduce using rule 12 (id_list -> ID .)


state 23

    (17) procedure_declarations -> procedure_declarations procedure_declaration .

    PROCEDURE       reduce using rule 17 (procedure_declarations -> procedure_declarations procedure_declaration .)
    BEGIN           reduce using rule 17 (procedure_declarations -> procedure_declarations procedure_declaration .)


state 24

    (18) procedure_declaration -> PROCEDURE ID . LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON

    LPAREN          shift and go to state 45


state 25

    (2) uses_opt -> USES ID SEMICOLON .

    VAR             reduce using rule 2 (uses_opt -> USES ID SEMICOLON .)
    PROCEDURE       reduce using rule 2 (uses_opt -> USES ID SEMICOLON .)
    BEGIN           reduce using rule 2 (uses_opt -> USES ID SEMICOLON .)


state 26

    (20) compound_statement -> BEGIN statement_list . END

    END             shift and go to state 46


state 27

    (21) statement_list -> statement . statement_list_tail
    (22) statement_list_tail -> . SEMICOLON statement statement_list_tail
    (23) statement_list_tail -> . empty
    (62) empty -> .

    SEMICOLON       shift and go to state 48
    END             reduce using rule 62 (empty -> .)

    statement_list_tail            shift and go to state 47
    empty                          shift and go to state 49

state 28

    (24) statement -> assignment_statement .

    SEMICOLON       reduce using rule 24 (statement -> assignment_statement .)
    END             reduce using rule 24 (statement -> assignment_statement .)
    ELSE            reduce using rule 24 (statement -> assignment_statement .)


state 29

    (25) statement -> if_statement .

    SEMICOLON       reduce using rule 25 (statement -> if_statement .)
    END             reduce using rule 25 (statement -> if_statement .)
    ELSE            reduce using rule 25 (statement -> if_statement .)


state 30

    (26) statement -> while_statement .

    SEMICOLON       reduce using rule 26 (statement -> while_statement .)
    END             reduce using rule 26 (statement -> while_statement .)
    ELSE            reduce using rule 26 (statement -> while_statement .)


state 31

    (27) statement -> procedure_call .

    SEMICOLON       reduce using rule 27 (statement -> procedure_call .)
    END             reduce using rule 27 (statement -> procedure_call .)
    ELSE            reduce using rule 27 (statement -> procedure_call .)


state 32

    (28) statement -> compound_statement .

    SEMICOLON       reduce using rule 28 (statement -> compound_statement .)
    END             reduce using rule 28 (statement -> compound_statement .)
    ELSE            reduce using rule 28 (statement -> compound_statement .)


state 33

    (29) statement -> empty .

    SEMICOLON       reduce using rule 29 (statement -> empty .)
    END             reduce using rule 29 (statement -> empty .)
    ELSE            reduce using rule 29 (statement -> empty .)


state 34

    (63) statement -> READLINE .

    SEMICOLON       reduce using rule 63 (statement -> READLINE .)
    END             reduce using rule 63 (statement -> READLINE .)
    ELSE            reduce using rule 63 (statement -> READLINE .)


state 35

    (64) statement -> WRITELN . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 50


state 36

    (65) statement -> USES . ID SEMICOLON

    ID              shift and go to state 51


state 37

    (35) procedure_call -> ID . LPAREN expression_list RPAREN
    (31) variable -> ID .
    (32) variable -> ID . LBRACKET expression RBRACKET

    LPAREN          shift and go to state 52
    COLON_EQUAL     reduce using rule 31 (variable -> ID .)
    LBRACKET        shift and go to state 53


state 38

    (30) assignment_statement -> variable . COLON_EQUAL expression

    COLON_EQUAL     shift and go to state 54


state 39

    (33) if_statement -> IF . expression THEN statement ELSE statement
    (40) expression -> . simple_expression relop simple_expression
    (41) expression -> . simple_expression
    (42) simple_expression -> . term simple_expression_tail
    (47) term -> . factor term_tail
    (52) factor -> . LPAREN expression RPAREN
    (53) factor -> . variable
    (54) factor -> . NUMBER
    (55) factor -> . STRING
    (31) variable -> . ID
    (32) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 59
    NUMBER          shift and go to state 61
    STRING          shift and go to state 62
    ID              shift and go to state 63

    expression                     shift and go to state 55
    simple_expression              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    variable                       shift and go to state 60

state 40

    (34) while_statement -> WHILE . expression DO statement
    (40) expression -> . simple_expression relop simple_expression
    (41) expression -> . simple_expression
    (42) simple_expression -> . term simple_expression_tail
    (47) term -> . factor term_tail
    (52) factor -> . LPAREN expression RPAREN
    (53) factor -> . variable
    (54) factor -> . NUMBER
    (55) factor -> . STRING
    (31) variable -> . ID
    (32) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 59
    NUMBER          shift and go to state 61
    STRING          shift and go to state 62
    ID              shift and go to state 63

    expression                     shift and go to state 64
    simple_expression              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    variable                       shift and go to state 60

state 41

    (5) declarations -> VAR declaration_list procedure_declarations .
    (17) procedure_declarations -> procedure_declarations . procedure_declaration
    (18) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON

    BEGIN           reduce using rule 5 (declarations -> VAR declaration_list procedure_declarations .)
    PROCEDURE       shift and go to state 14

    procedure_declaration          shift and go to state 23

state 42

    (10) declaration_list -> declaration_list declaration .

    PROCEDURE       reduce using rule 10 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 10 (declaration_list -> declaration_list declaration .)
    BEGIN           reduce using rule 10 (declaration_list -> declaration_list declaration .)


state 43

    (11) declaration -> id_list COLON . type_specifier SEMICOLON
    (14) type_specifier -> . INTEGER
    (15) type_specifier -> . ARRAY LBRACKET NUMBER DOTDOT NUMBER RBRACKET OF INTEGER

    INTEGER         shift and go to state 66
    ARRAY           shift and go to state 67

    type_specifier                 shift and go to state 65

state 44

    (13) id_list -> id_list COMMA . ID

    ID              shift and go to state 68


state 45

    (18) procedure_declaration -> PROCEDURE ID LPAREN . parameter_list RPAREN SEMICOLON block SEMICOLON
    (19) parameter_list -> . id_list COLON type_specifier
    (12) id_list -> . ID
    (13) id_list -> . id_list COMMA ID

    ID              shift and go to state 22

    parameter_list                 shift and go to state 69
    id_list                        shift and go to state 70

state 46

    (20) compound_statement -> BEGIN statement_list END .

    DOT             reduce using rule 20 (compound_statement -> BEGIN statement_list END .)
    SEMICOLON       reduce using rule 20 (compound_statement -> BEGIN statement_list END .)
    END             reduce using rule 20 (compound_statement -> BEGIN statement_list END .)
    ELSE            reduce using rule 20 (compound_statement -> BEGIN statement_list END .)


state 47

    (21) statement_list -> statement statement_list_tail .

    END             reduce using rule 21 (statement_list -> statement statement_list_tail .)


state 48

    (22) statement_list_tail -> SEMICOLON . statement statement_list_tail
    (24) statement -> . assignment_statement
    (25) statement -> . if_statement
    (26) statement -> . while_statement
    (27) statement -> . procedure_call
    (28) statement -> . compound_statement
    (29) statement -> . empty
    (63) statement -> . READLINE
    (64) statement -> . WRITELN LPAREN expression_list RPAREN
    (65) statement -> . USES ID SEMICOLON
    (30) assignment_statement -> . variable COLON_EQUAL expression
    (33) if_statement -> . IF expression THEN statement ELSE statement
    (34) while_statement -> . WHILE expression DO statement
    (35) procedure_call -> . ID LPAREN expression_list RPAREN
    (20) compound_statement -> . BEGIN statement_list END
    (62) empty -> .
    (31) variable -> . ID
    (32) variable -> . ID LBRACKET expression RBRACKET

    READLINE        shift and go to state 34
    WRITELN         shift and go to state 35
    USES            shift and go to state 36
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    ID              shift and go to state 37
    BEGIN           shift and go to state 18
    SEMICOLON       reduce using rule 62 (empty -> .)
    END             reduce using rule 62 (empty -> .)

    statement                      shift and go to state 71
    assignment_statement           shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 30
    procedure_call                 shift and go to state 31
    compound_statement             shift and go to state 32
    empty                          shift and go to state 33
    variable                       shift and go to state 38

state 49

    (23) statement_list_tail -> empty .

    END             reduce using rule 23 (statement_list_tail -> empty .)


state 50

    (64) statement -> WRITELN LPAREN . expression_list RPAREN
    (36) expression_list -> . expression expression_list_tail
    (39) expression_list -> . empty
    (40) expression -> . simple_expression relop simple_expression
    (41) expression -> . simple_expression
    (62) empty -> .
    (42) simple_expression -> . term simple_expression_tail
    (47) term -> . factor term_tail
    (52) factor -> . LPAREN expression RPAREN
    (53) factor -> . variable
    (54) factor -> . NUMBER
    (55) factor -> . STRING
    (31) variable -> . ID
    (32) variable -> . ID LBRACKET expression RBRACKET

    RPAREN          reduce using rule 62 (empty -> .)
    LPAREN          shift and go to state 59
    NUMBER          shift and go to state 61
    STRING          shift and go to state 62
    ID              shift and go to state 63

    expression_list                shift and go to state 72
    expression                     shift and go to state 73
    empty                          shift and go to state 74
    simple_expression              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    variable                       shift and go to state 60

state 51

    (65) statement -> USES ID . SEMICOLON

    SEMICOLON       shift and go to state 75


state 52

    (35) procedure_call -> ID LPAREN . expression_list RPAREN
    (36) expression_list -> . expression expression_list_tail
    (39) expression_list -> . empty
    (40) expression -> . simple_expression relop simple_expression
    (41) expression -> . simple_expression
    (62) empty -> .
    (42) simple_expression -> . term simple_expression_tail
    (47) term -> . factor term_tail
    (52) factor -> . LPAREN expression RPAREN
    (53) factor -> . variable
    (54) factor -> . NUMBER
    (55) factor -> . STRING
    (31) variable -> . ID
    (32) variable -> . ID LBRACKET expression RBRACKET

    RPAREN          reduce using rule 62 (empty -> .)
    LPAREN          shift and go to state 59
    NUMBER          shift and go to state 61
    STRING          shift and go to state 62
    ID              shift and go to state 63

    expression_list                shift and go to state 76
    expression                     shift and go to state 73
    empty                          shift and go to state 74
    simple_expression              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    variable                       shift and go to state 60

state 53

    (32) variable -> ID LBRACKET . expression RBRACKET
    (40) expression -> . simple_expression relop simple_expression
    (41) expression -> . simple_expression
    (42) simple_expression -> . term simple_expression_tail
    (47) term -> . factor term_tail
    (52) factor -> . LPAREN expression RPAREN
    (53) factor -> . variable
    (54) factor -> . NUMBER
    (55) factor -> . STRING
    (31) variable -> . ID
    (32) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 59
    NUMBER          shift and go to state 61
    STRING          shift and go to state 62
    ID              shift and go to state 63

    expression                     shift and go to state 77
    simple_expression              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    variable                       shift and go to state 60

state 54

    (30) assignment_statement -> variable COLON_EQUAL . expression
    (40) expression -> . simple_expression relop simple_expression
    (41) expression -> . simple_expression
    (42) simple_expression -> . term simple_expression_tail
    (47) term -> . factor term_tail
    (52) factor -> . LPAREN expression RPAREN
    (53) factor -> . variable
    (54) factor -> . NUMBER
    (55) factor -> . STRING
    (31) variable -> . ID
    (32) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 59
    NUMBER          shift and go to state 61
    STRING          shift and go to state 62
    ID              shift and go to state 63

    variable                       shift and go to state 60
    expression                     shift and go to state 78
    simple_expression              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58

state 55

    (33) if_statement -> IF expression . THEN statement ELSE statement

    THEN            shift and go to state 79


state 56

    (40) expression -> simple_expression . relop simple_expression
    (41) expression -> simple_expression .
    (56) relop -> . LESS
    (57) relop -> . LESS_EQUAL
    (58) relop -> . GREAT
    (59) relop -> . GREAT_EQUAL
    (60) relop -> . EQUAL
    (61) relop -> . DIFFERENT

    THEN            reduce using rule 41 (expression -> simple_expression .)
    DO              reduce using rule 41 (expression -> simple_expression .)
    COMMA           reduce using rule 41 (expression -> simple_expression .)
    RPAREN          reduce using rule 41 (expression -> simple_expression .)
    RBRACKET        reduce using rule 41 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 41 (expression -> simple_expression .)
    END             reduce using rule 41 (expression -> simple_expression .)
    ELSE            reduce using rule 41 (expression -> simple_expression .)
    LESS            shift and go to state 81
    LESS_EQUAL      shift and go to state 82
    GREAT           shift and go to state 83
    GREAT_EQUAL     shift and go to state 84
    EQUAL           shift and go to state 85
    DIFFERENT       shift and go to state 86

    relop                          shift and go to state 80

state 57

    (42) simple_expression -> term . simple_expression_tail
    (43) simple_expression_tail -> . addop term
    (44) simple_expression_tail -> . empty
    (45) addop -> . PLUS
    (46) addop -> . MINUS
    (62) empty -> .

    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    LESS            reduce using rule 62 (empty -> .)
    LESS_EQUAL      reduce using rule 62 (empty -> .)
    GREAT           reduce using rule 62 (empty -> .)
    GREAT_EQUAL     reduce using rule 62 (empty -> .)
    EQUAL           reduce using rule 62 (empty -> .)
    DIFFERENT       reduce using rule 62 (empty -> .)
    THEN            reduce using rule 62 (empty -> .)
    DO              reduce using rule 62 (empty -> .)
    COMMA           reduce using rule 62 (empty -> .)
    RPAREN          reduce using rule 62 (empty -> .)
    RBRACKET        reduce using rule 62 (empty -> .)
    SEMICOLON       reduce using rule 62 (empty -> .)
    END             reduce using rule 62 (empty -> .)
    ELSE            reduce using rule 62 (empty -> .)

    simple_expression_tail         shift and go to state 87
    addop                          shift and go to state 88
    empty                          shift and go to state 89

state 58

    (47) term -> factor . term_tail
    (48) term_tail -> . mulop factor
    (49) term_tail -> . empty
    (50) mulop -> . TIMES
    (51) mulop -> . DIVIDE
    (62) empty -> .

    TIMES           shift and go to state 95
    DIVIDE          shift and go to state 96
    PLUS            reduce using rule 62 (empty -> .)
    MINUS           reduce using rule 62 (empty -> .)
    LESS            reduce using rule 62 (empty -> .)
    LESS_EQUAL      reduce using rule 62 (empty -> .)
    GREAT           reduce using rule 62 (empty -> .)
    GREAT_EQUAL     reduce using rule 62 (empty -> .)
    EQUAL           reduce using rule 62 (empty -> .)
    DIFFERENT       reduce using rule 62 (empty -> .)
    THEN            reduce using rule 62 (empty -> .)
    DO              reduce using rule 62 (empty -> .)
    COMMA           reduce using rule 62 (empty -> .)
    RPAREN          reduce using rule 62 (empty -> .)
    RBRACKET        reduce using rule 62 (empty -> .)
    SEMICOLON       reduce using rule 62 (empty -> .)
    END             reduce using rule 62 (empty -> .)
    ELSE            reduce using rule 62 (empty -> .)

    term_tail                      shift and go to state 92
    mulop                          shift and go to state 93
    empty                          shift and go to state 94

state 59

    (52) factor -> LPAREN . expression RPAREN
    (40) expression -> . simple_expression relop simple_expression
    (41) expression -> . simple_expression
    (42) simple_expression -> . term simple_expression_tail
    (47) term -> . factor term_tail
    (52) factor -> . LPAREN expression RPAREN
    (53) factor -> . variable
    (54) factor -> . NUMBER
    (55) factor -> . STRING
    (31) variable -> . ID
    (32) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 59
    NUMBER          shift and go to state 61
    STRING          shift and go to state 62
    ID              shift and go to state 63

    expression                     shift and go to state 97
    simple_expression              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    variable                       shift and go to state 60

state 60

    (53) factor -> variable .

    TIMES           reduce using rule 53 (factor -> variable .)
    DIVIDE          reduce using rule 53 (factor -> variable .)
    PLUS            reduce using rule 53 (factor -> variable .)
    MINUS           reduce using rule 53 (factor -> variable .)
    LESS            reduce using rule 53 (factor -> variable .)
    LESS_EQUAL      reduce using rule 53 (factor -> variable .)
    GREAT           reduce using rule 53 (factor -> variable .)
    GREAT_EQUAL     reduce using rule 53 (factor -> variable .)
    EQUAL           reduce using rule 53 (factor -> variable .)
    DIFFERENT       reduce using rule 53 (factor -> variable .)
    THEN            reduce using rule 53 (factor -> variable .)
    DO              reduce using rule 53 (factor -> variable .)
    COMMA           reduce using rule 53 (factor -> variable .)
    RPAREN          reduce using rule 53 (factor -> variable .)
    RBRACKET        reduce using rule 53 (factor -> variable .)
    SEMICOLON       reduce using rule 53 (factor -> variable .)
    END             reduce using rule 53 (factor -> variable .)
    ELSE            reduce using rule 53 (factor -> variable .)


state 61

    (54) factor -> NUMBER .

    TIMES           reduce using rule 54 (factor -> NUMBER .)
    DIVIDE          reduce using rule 54 (factor -> NUMBER .)
    PLUS            reduce using rule 54 (factor -> NUMBER .)
    MINUS           reduce using rule 54 (factor -> NUMBER .)
    LESS            reduce using rule 54 (factor -> NUMBER .)
    LESS_EQUAL      reduce using rule 54 (factor -> NUMBER .)
    GREAT           reduce using rule 54 (factor -> NUMBER .)
    GREAT_EQUAL     reduce using rule 54 (factor -> NUMBER .)
    EQUAL           reduce using rule 54 (factor -> NUMBER .)
    DIFFERENT       reduce using rule 54 (factor -> NUMBER .)
    THEN            reduce using rule 54 (factor -> NUMBER .)
    DO              reduce using rule 54 (factor -> NUMBER .)
    COMMA           reduce using rule 54 (factor -> NUMBER .)
    RPAREN          reduce using rule 54 (factor -> NUMBER .)
    RBRACKET        reduce using rule 54 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 54 (factor -> NUMBER .)
    END             reduce using rule 54 (factor -> NUMBER .)
    ELSE            reduce using rule 54 (factor -> NUMBER .)


state 62

    (55) factor -> STRING .

    TIMES           reduce using rule 55 (factor -> STRING .)
    DIVIDE          reduce using rule 55 (factor -> STRING .)
    PLUS            reduce using rule 55 (factor -> STRING .)
    MINUS           reduce using rule 55 (factor -> STRING .)
    LESS            reduce using rule 55 (factor -> STRING .)
    LESS_EQUAL      reduce using rule 55 (factor -> STRING .)
    GREAT           reduce using rule 55 (factor -> STRING .)
    GREAT_EQUAL     reduce using rule 55 (factor -> STRING .)
    EQUAL           reduce using rule 55 (factor -> STRING .)
    DIFFERENT       reduce using rule 55 (factor -> STRING .)
    THEN            reduce using rule 55 (factor -> STRING .)
    DO              reduce using rule 55 (factor -> STRING .)
    COMMA           reduce using rule 55 (factor -> STRING .)
    RPAREN          reduce using rule 55 (factor -> STRING .)
    RBRACKET        reduce using rule 55 (factor -> STRING .)
    SEMICOLON       reduce using rule 55 (factor -> STRING .)
    END             reduce using rule 55 (factor -> STRING .)
    ELSE            reduce using rule 55 (factor -> STRING .)


state 63

    (31) variable -> ID .
    (32) variable -> ID . LBRACKET expression RBRACKET

    TIMES           reduce using rule 31 (variable -> ID .)
    DIVIDE          reduce using rule 31 (variable -> ID .)
    PLUS            reduce using rule 31 (variable -> ID .)
    MINUS           reduce using rule 31 (variable -> ID .)
    LESS            reduce using rule 31 (variable -> ID .)
    LESS_EQUAL      reduce using rule 31 (variable -> ID .)
    GREAT           reduce using rule 31 (variable -> ID .)
    GREAT_EQUAL     reduce using rule 31 (variable -> ID .)
    EQUAL           reduce using rule 31 (variable -> ID .)
    DIFFERENT       reduce using rule 31 (variable -> ID .)
    THEN            reduce using rule 31 (variable -> ID .)
    DO              reduce using rule 31 (variable -> ID .)
    COMMA           reduce using rule 31 (variable -> ID .)
    RPAREN          reduce using rule 31 (variable -> ID .)
    RBRACKET        reduce using rule 31 (variable -> ID .)
    SEMICOLON       reduce using rule 31 (variable -> ID .)
    END             reduce using rule 31 (variable -> ID .)
    ELSE            reduce using rule 31 (variable -> ID .)
    LBRACKET        shift and go to state 53


state 64

    (34) while_statement -> WHILE expression . DO statement

    DO              shift and go to state 98


state 65

    (11) declaration -> id_list COLON type_specifier . SEMICOLON

    SEMICOLON       shift and go to state 99


state 66

    (14) type_specifier -> INTEGER .

    SEMICOLON       reduce using rule 14 (type_specifier -> INTEGER .)
    RPAREN          reduce using rule 14 (type_specifier -> INTEGER .)


state 67

    (15) type_specifier -> ARRAY . LBRACKET NUMBER DOTDOT NUMBER RBRACKET OF INTEGER

    LBRACKET        shift and go to state 100


state 68

    (13) id_list -> id_list COMMA ID .

    COLON           reduce using rule 13 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 13 (id_list -> id_list COMMA ID .)


state 69

    (18) procedure_declaration -> PROCEDURE ID LPAREN parameter_list . RPAREN SEMICOLON block SEMICOLON

    RPAREN          shift and go to state 101


state 70

    (19) parameter_list -> id_list . COLON type_specifier
    (13) id_list -> id_list . COMMA ID

    COLON           shift and go to state 102
    COMMA           shift and go to state 44


state 71

    (22) statement_list_tail -> SEMICOLON statement . statement_list_tail
    (22) statement_list_tail -> . SEMICOLON statement statement_list_tail
    (23) statement_list_tail -> . empty
    (62) empty -> .

    SEMICOLON       shift and go to state 48
    END             reduce using rule 62 (empty -> .)

    statement_list_tail            shift and go to state 103
    empty                          shift and go to state 49

state 72

    (64) statement -> WRITELN LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 104


state 73

    (36) expression_list -> expression . expression_list_tail
    (37) expression_list_tail -> . COMMA expression
    (38) expression_list_tail -> . empty
    (62) empty -> .

    COMMA           shift and go to state 106
    RPAREN          reduce using rule 62 (empty -> .)

    expression_list_tail           shift and go to state 105
    empty                          shift and go to state 107

state 74

    (39) expression_list -> empty .

    RPAREN          reduce using rule 39 (expression_list -> empty .)


state 75

    (65) statement -> USES ID SEMICOLON .

    SEMICOLON       reduce using rule 65 (statement -> USES ID SEMICOLON .)
    END             reduce using rule 65 (statement -> USES ID SEMICOLON .)
    ELSE            reduce using rule 65 (statement -> USES ID SEMICOLON .)


state 76

    (35) procedure_call -> ID LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 108


state 77

    (32) variable -> ID LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 109


state 78

    (30) assignment_statement -> variable COLON_EQUAL expression .

    SEMICOLON       reduce using rule 30 (assignment_statement -> variable COLON_EQUAL expression .)
    END             reduce using rule 30 (assignment_statement -> variable COLON_EQUAL expression .)
    ELSE            reduce using rule 30 (assignment_statement -> variable COLON_EQUAL expression .)


state 79

    (33) if_statement -> IF expression THEN . statement ELSE statement
    (24) statement -> . assignment_statement
    (25) statement -> . if_statement
    (26) statement -> . while_statement
    (27) statement -> . procedure_call
    (28) statement -> . compound_statement
    (29) statement -> . empty
    (63) statement -> . READLINE
    (64) statement -> . WRITELN LPAREN expression_list RPAREN
    (65) statement -> . USES ID SEMICOLON
    (30) assignment_statement -> . variable COLON_EQUAL expression
    (33) if_statement -> . IF expression THEN statement ELSE statement
    (34) while_statement -> . WHILE expression DO statement
    (35) procedure_call -> . ID LPAREN expression_list RPAREN
    (20) compound_statement -> . BEGIN statement_list END
    (62) empty -> .
    (31) variable -> . ID
    (32) variable -> . ID LBRACKET expression RBRACKET

    READLINE        shift and go to state 34
    WRITELN         shift and go to state 35
    USES            shift and go to state 36
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    ID              shift and go to state 37
    BEGIN           shift and go to state 18
    ELSE            reduce using rule 62 (empty -> .)

    statement                      shift and go to state 110
    assignment_statement           shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 30
    procedure_call                 shift and go to state 31
    compound_statement             shift and go to state 32
    empty                          shift and go to state 33
    variable                       shift and go to state 38

state 80

    (40) expression -> simple_expression relop . simple_expression
    (42) simple_expression -> . term simple_expression_tail
    (47) term -> . factor term_tail
    (52) factor -> . LPAREN expression RPAREN
    (53) factor -> . variable
    (54) factor -> . NUMBER
    (55) factor -> . STRING
    (31) variable -> . ID
    (32) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 59
    NUMBER          shift and go to state 61
    STRING          shift and go to state 62
    ID              shift and go to state 63

    simple_expression              shift and go to state 111
    term                           shift and go to state 57
    factor                         shift and go to state 58
    variable                       shift and go to state 60

state 81

    (56) relop -> LESS .

    LPAREN          reduce using rule 56 (relop -> LESS .)
    NUMBER          reduce using rule 56 (relop -> LESS .)
    STRING          reduce using rule 56 (relop -> LESS .)
    ID              reduce using rule 56 (relop -> LESS .)


state 82

    (57) relop -> LESS_EQUAL .

    LPAREN          reduce using rule 57 (relop -> LESS_EQUAL .)
    NUMBER          reduce using rule 57 (relop -> LESS_EQUAL .)
    STRING          reduce using rule 57 (relop -> LESS_EQUAL .)
    ID              reduce using rule 57 (relop -> LESS_EQUAL .)


state 83

    (58) relop -> GREAT .

    LPAREN          reduce using rule 58 (relop -> GREAT .)
    NUMBER          reduce using rule 58 (relop -> GREAT .)
    STRING          reduce using rule 58 (relop -> GREAT .)
    ID              reduce using rule 58 (relop -> GREAT .)


state 84

    (59) relop -> GREAT_EQUAL .

    LPAREN          reduce using rule 59 (relop -> GREAT_EQUAL .)
    NUMBER          reduce using rule 59 (relop -> GREAT_EQUAL .)
    STRING          reduce using rule 59 (relop -> GREAT_EQUAL .)
    ID              reduce using rule 59 (relop -> GREAT_EQUAL .)


state 85

    (60) relop -> EQUAL .

    LPAREN          reduce using rule 60 (relop -> EQUAL .)
    NUMBER          reduce using rule 60 (relop -> EQUAL .)
    STRING          reduce using rule 60 (relop -> EQUAL .)
    ID              reduce using rule 60 (relop -> EQUAL .)


state 86

    (61) relop -> DIFFERENT .

    LPAREN          reduce using rule 61 (relop -> DIFFERENT .)
    NUMBER          reduce using rule 61 (relop -> DIFFERENT .)
    STRING          reduce using rule 61 (relop -> DIFFERENT .)
    ID              reduce using rule 61 (relop -> DIFFERENT .)


state 87

    (42) simple_expression -> term simple_expression_tail .

    LESS            reduce using rule 42 (simple_expression -> term simple_expression_tail .)
    LESS_EQUAL      reduce using rule 42 (simple_expression -> term simple_expression_tail .)
    GREAT           reduce using rule 42 (simple_expression -> term simple_expression_tail .)
    GREAT_EQUAL     reduce using rule 42 (simple_expression -> term simple_expression_tail .)
    EQUAL           reduce using rule 42 (simple_expression -> term simple_expression_tail .)
    DIFFERENT       reduce using rule 42 (simple_expression -> term simple_expression_tail .)
    THEN            reduce using rule 42 (simple_expression -> term simple_expression_tail .)
    DO              reduce using rule 42 (simple_expression -> term simple_expression_tail .)
    COMMA           reduce using rule 42 (simple_expression -> term simple_expression_tail .)
    RPAREN          reduce using rule 42 (simple_expression -> term simple_expression_tail .)
    RBRACKET        reduce using rule 42 (simple_expression -> term simple_expression_tail .)
    SEMICOLON       reduce using rule 42 (simple_expression -> term simple_expression_tail .)
    END             reduce using rule 42 (simple_expression -> term simple_expression_tail .)
    ELSE            reduce using rule 42 (simple_expression -> term simple_expression_tail .)


state 88

    (43) simple_expression_tail -> addop . term
    (47) term -> . factor term_tail
    (52) factor -> . LPAREN expression RPAREN
    (53) factor -> . variable
    (54) factor -> . NUMBER
    (55) factor -> . STRING
    (31) variable -> . ID
    (32) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 59
    NUMBER          shift and go to state 61
    STRING          shift and go to state 62
    ID              shift and go to state 63

    term                           shift and go to state 112
    factor                         shift and go to state 58
    variable                       shift and go to state 60

state 89

    (44) simple_expression_tail -> empty .

    LESS            reduce using rule 44 (simple_expression_tail -> empty .)
    LESS_EQUAL      reduce using rule 44 (simple_expression_tail -> empty .)
    GREAT           reduce using rule 44 (simple_expression_tail -> empty .)
    GREAT_EQUAL     reduce using rule 44 (simple_expression_tail -> empty .)
    EQUAL           reduce using rule 44 (simple_expression_tail -> empty .)
    DIFFERENT       reduce using rule 44 (simple_expression_tail -> empty .)
    THEN            reduce using rule 44 (simple_expression_tail -> empty .)
    DO              reduce using rule 44 (simple_expression_tail -> empty .)
    COMMA           reduce using rule 44 (simple_expression_tail -> empty .)
    RPAREN          reduce using rule 44 (simple_expression_tail -> empty .)
    RBRACKET        reduce using rule 44 (simple_expression_tail -> empty .)
    SEMICOLON       reduce using rule 44 (simple_expression_tail -> empty .)
    END             reduce using rule 44 (simple_expression_tail -> empty .)
    ELSE            reduce using rule 44 (simple_expression_tail -> empty .)


state 90

    (45) addop -> PLUS .

    LPAREN          reduce using rule 45 (addop -> PLUS .)
    NUMBER          reduce using rule 45 (addop -> PLUS .)
    STRING          reduce using rule 45 (addop -> PLUS .)
    ID              reduce using rule 45 (addop -> PLUS .)


state 91

    (46) addop -> MINUS .

    LPAREN          reduce using rule 46 (addop -> MINUS .)
    NUMBER          reduce using rule 46 (addop -> MINUS .)
    STRING          reduce using rule 46 (addop -> MINUS .)
    ID              reduce using rule 46 (addop -> MINUS .)


state 92

    (47) term -> factor term_tail .

    PLUS            reduce using rule 47 (term -> factor term_tail .)
    MINUS           reduce using rule 47 (term -> factor term_tail .)
    LESS            reduce using rule 47 (term -> factor term_tail .)
    LESS_EQUAL      reduce using rule 47 (term -> factor term_tail .)
    GREAT           reduce using rule 47 (term -> factor term_tail .)
    GREAT_EQUAL     reduce using rule 47 (term -> factor term_tail .)
    EQUAL           reduce using rule 47 (term -> factor term_tail .)
    DIFFERENT       reduce using rule 47 (term -> factor term_tail .)
    THEN            reduce using rule 47 (term -> factor term_tail .)
    DO              reduce using rule 47 (term -> factor term_tail .)
    COMMA           reduce using rule 47 (term -> factor term_tail .)
    RPAREN          reduce using rule 47 (term -> factor term_tail .)
    RBRACKET        reduce using rule 47 (term -> factor term_tail .)
    SEMICOLON       reduce using rule 47 (term -> factor term_tail .)
    END             reduce using rule 47 (term -> factor term_tail .)
    ELSE            reduce using rule 47 (term -> factor term_tail .)


state 93

    (48) term_tail -> mulop . factor
    (52) factor -> . LPAREN expression RPAREN
    (53) factor -> . variable
    (54) factor -> . NUMBER
    (55) factor -> . STRING
    (31) variable -> . ID
    (32) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 59
    NUMBER          shift and go to state 61
    STRING          shift and go to state 62
    ID              shift and go to state 63

    factor                         shift and go to state 113
    variable                       shift and go to state 60

state 94

    (49) term_tail -> empty .

    PLUS            reduce using rule 49 (term_tail -> empty .)
    MINUS           reduce using rule 49 (term_tail -> empty .)
    LESS            reduce using rule 49 (term_tail -> empty .)
    LESS_EQUAL      reduce using rule 49 (term_tail -> empty .)
    GREAT           reduce using rule 49 (term_tail -> empty .)
    GREAT_EQUAL     reduce using rule 49 (term_tail -> empty .)
    EQUAL           reduce using rule 49 (term_tail -> empty .)
    DIFFERENT       reduce using rule 49 (term_tail -> empty .)
    THEN            reduce using rule 49 (term_tail -> empty .)
    DO              reduce using rule 49 (term_tail -> empty .)
    COMMA           reduce using rule 49 (term_tail -> empty .)
    RPAREN          reduce using rule 49 (term_tail -> empty .)
    RBRACKET        reduce using rule 49 (term_tail -> empty .)
    SEMICOLON       reduce using rule 49 (term_tail -> empty .)
    END             reduce using rule 49 (term_tail -> empty .)
    ELSE            reduce using rule 49 (term_tail -> empty .)


state 95

    (50) mulop -> TIMES .

    LPAREN          reduce using rule 50 (mulop -> TIMES .)
    NUMBER          reduce using rule 50 (mulop -> TIMES .)
    STRING          reduce using rule 50 (mulop -> TIMES .)
    ID              reduce using rule 50 (mulop -> TIMES .)


state 96

    (51) mulop -> DIVIDE .

    LPAREN          reduce using rule 51 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 51 (mulop -> DIVIDE .)
    STRING          reduce using rule 51 (mulop -> DIVIDE .)
    ID              reduce using rule 51 (mulop -> DIVIDE .)


state 97

    (52) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 114


state 98

    (34) while_statement -> WHILE expression DO . statement
    (24) statement -> . assignment_statement
    (25) statement -> . if_statement
    (26) statement -> . while_statement
    (27) statement -> . procedure_call
    (28) statement -> . compound_statement
    (29) statement -> . empty
    (63) statement -> . READLINE
    (64) statement -> . WRITELN LPAREN expression_list RPAREN
    (65) statement -> . USES ID SEMICOLON
    (30) assignment_statement -> . variable COLON_EQUAL expression
    (33) if_statement -> . IF expression THEN statement ELSE statement
    (34) while_statement -> . WHILE expression DO statement
    (35) procedure_call -> . ID LPAREN expression_list RPAREN
    (20) compound_statement -> . BEGIN statement_list END
    (62) empty -> .
    (31) variable -> . ID
    (32) variable -> . ID LBRACKET expression RBRACKET

    READLINE        shift and go to state 34
    WRITELN         shift and go to state 35
    USES            shift and go to state 36
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    ID              shift and go to state 37
    BEGIN           shift and go to state 18
    SEMICOLON       reduce using rule 62 (empty -> .)
    END             reduce using rule 62 (empty -> .)
    ELSE            reduce using rule 62 (empty -> .)

    statement                      shift and go to state 115
    assignment_statement           shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 30
    procedure_call                 shift and go to state 31
    compound_statement             shift and go to state 32
    empty                          shift and go to state 33
    variable                       shift and go to state 38

state 99

    (11) declaration -> id_list COLON type_specifier SEMICOLON .

    PROCEDURE       reduce using rule 11 (declaration -> id_list COLON type_specifier SEMICOLON .)
    ID              reduce using rule 11 (declaration -> id_list COLON type_specifier SEMICOLON .)
    BEGIN           reduce using rule 11 (declaration -> id_list COLON type_specifier SEMICOLON .)


state 100

    (15) type_specifier -> ARRAY LBRACKET . NUMBER DOTDOT NUMBER RBRACKET OF INTEGER

    NUMBER          shift and go to state 116


state 101

    (18) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN . SEMICOLON block SEMICOLON

    SEMICOLON       shift and go to state 117


state 102

    (19) parameter_list -> id_list COLON . type_specifier
    (14) type_specifier -> . INTEGER
    (15) type_specifier -> . ARRAY LBRACKET NUMBER DOTDOT NUMBER RBRACKET OF INTEGER

    INTEGER         shift and go to state 66
    ARRAY           shift and go to state 67

    type_specifier                 shift and go to state 118

state 103

    (22) statement_list_tail -> SEMICOLON statement statement_list_tail .

    END             reduce using rule 22 (statement_list_tail -> SEMICOLON statement statement_list_tail .)


state 104

    (64) statement -> WRITELN LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 64 (statement -> WRITELN LPAREN expression_list RPAREN .)
    END             reduce using rule 64 (statement -> WRITELN LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 64 (statement -> WRITELN LPAREN expression_list RPAREN .)


state 105

    (36) expression_list -> expression expression_list_tail .

    RPAREN          reduce using rule 36 (expression_list -> expression expression_list_tail .)


state 106

    (37) expression_list_tail -> COMMA . expression
    (40) expression -> . simple_expression relop simple_expression
    (41) expression -> . simple_expression
    (42) simple_expression -> . term simple_expression_tail
    (47) term -> . factor term_tail
    (52) factor -> . LPAREN expression RPAREN
    (53) factor -> . variable
    (54) factor -> . NUMBER
    (55) factor -> . STRING
    (31) variable -> . ID
    (32) variable -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 59
    NUMBER          shift and go to state 61
    STRING          shift and go to state 62
    ID              shift and go to state 63

    expression                     shift and go to state 119
    simple_expression              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    variable                       shift and go to state 60

state 107

    (38) expression_list_tail -> empty .

    RPAREN          reduce using rule 38 (expression_list_tail -> empty .)


state 108

    (35) procedure_call -> ID LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 35 (procedure_call -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 35 (procedure_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 35 (procedure_call -> ID LPAREN expression_list RPAREN .)


state 109

    (32) variable -> ID LBRACKET expression RBRACKET .

    COLON_EQUAL     reduce using rule 32 (variable -> ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 32 (variable -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 32 (variable -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 32 (variable -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 32 (variable -> ID LBRACKET expression RBRACKET .)
    LESS            reduce using rule 32 (variable -> ID LBRACKET expression RBRACKET .)
    LESS_EQUAL      reduce using rule 32 (variable -> ID LBRACKET expression RBRACKET .)
    GREAT           reduce using rule 32 (variable -> ID LBRACKET expression RBRACKET .)
    GREAT_EQUAL     reduce using rule 32 (variable -> ID LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 32 (variable -> ID LBRACKET expression RBRACKET .)
    DIFFERENT       reduce using rule 32 (variable -> ID LBRACKET expression RBRACKET .)
    THEN            reduce using rule 32 (variable -> ID LBRACKET expression RBRACKET .)
    DO              reduce using rule 32 (variable -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 32 (variable -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 32 (variable -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 32 (variable -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 32 (variable -> ID LBRACKET expression RBRACKET .)
    END             reduce using rule 32 (variable -> ID LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 32 (variable -> ID LBRACKET expression RBRACKET .)


state 110

    (33) if_statement -> IF expression THEN statement . ELSE statement

    ELSE            shift and go to state 120


state 111

    (40) expression -> simple_expression relop simple_expression .

    THEN            reduce using rule 40 (expression -> simple_expression relop simple_expression .)
    DO              reduce using rule 40 (expression -> simple_expression relop simple_expression .)
    COMMA           reduce using rule 40 (expression -> simple_expression relop simple_expression .)
    RPAREN          reduce using rule 40 (expression -> simple_expression relop simple_expression .)
    RBRACKET        reduce using rule 40 (expression -> simple_expression relop simple_expression .)
    SEMICOLON       reduce using rule 40 (expression -> simple_expression relop simple_expression .)
    END             reduce using rule 40 (expression -> simple_expression relop simple_expression .)
    ELSE            reduce using rule 40 (expression -> simple_expression relop simple_expression .)


state 112

    (43) simple_expression_tail -> addop term .

    LESS            reduce using rule 43 (simple_expression_tail -> addop term .)
    LESS_EQUAL      reduce using rule 43 (simple_expression_tail -> addop term .)
    GREAT           reduce using rule 43 (simple_expression_tail -> addop term .)
    GREAT_EQUAL     reduce using rule 43 (simple_expression_tail -> addop term .)
    EQUAL           reduce using rule 43 (simple_expression_tail -> addop term .)
    DIFFERENT       reduce using rule 43 (simple_expression_tail -> addop term .)
    THEN            reduce using rule 43 (simple_expression_tail -> addop term .)
    DO              reduce using rule 43 (simple_expression_tail -> addop term .)
    COMMA           reduce using rule 43 (simple_expression_tail -> addop term .)
    RPAREN          reduce using rule 43 (simple_expression_tail -> addop term .)
    RBRACKET        reduce using rule 43 (simple_expression_tail -> addop term .)
    SEMICOLON       reduce using rule 43 (simple_expression_tail -> addop term .)
    END             reduce using rule 43 (simple_expression_tail -> addop term .)
    ELSE            reduce using rule 43 (simple_expression_tail -> addop term .)


state 113

    (48) term_tail -> mulop factor .

    PLUS            reduce using rule 48 (term_tail -> mulop factor .)
    MINUS           reduce using rule 48 (term_tail -> mulop factor .)
    LESS            reduce using rule 48 (term_tail -> mulop factor .)
    LESS_EQUAL      reduce using rule 48 (term_tail -> mulop factor .)
    GREAT           reduce using rule 48 (term_tail -> mulop factor .)
    GREAT_EQUAL     reduce using rule 48 (term_tail -> mulop factor .)
    EQUAL           reduce using rule 48 (term_tail -> mulop factor .)
    DIFFERENT       reduce using rule 48 (term_tail -> mulop factor .)
    THEN            reduce using rule 48 (term_tail -> mulop factor .)
    DO              reduce using rule 48 (term_tail -> mulop factor .)
    COMMA           reduce using rule 48 (term_tail -> mulop factor .)
    RPAREN          reduce using rule 48 (term_tail -> mulop factor .)
    RBRACKET        reduce using rule 48 (term_tail -> mulop factor .)
    SEMICOLON       reduce using rule 48 (term_tail -> mulop factor .)
    END             reduce using rule 48 (term_tail -> mulop factor .)
    ELSE            reduce using rule 48 (term_tail -> mulop factor .)


state 114

    (52) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    LESS_EQUAL      reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    GREAT           reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    GREAT_EQUAL     reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    DIFFERENT       reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 52 (factor -> LPAREN expression RPAREN .)


state 115

    (34) while_statement -> WHILE expression DO statement .

    SEMICOLON       reduce using rule 34 (while_statement -> WHILE expression DO statement .)
    END             reduce using rule 34 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 34 (while_statement -> WHILE expression DO statement .)


state 116

    (15) type_specifier -> ARRAY LBRACKET NUMBER . DOTDOT NUMBER RBRACKET OF INTEGER

    DOTDOT          shift and go to state 121


state 117

    (18) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON . block SEMICOLON
    (4) block -> . declarations compound_statement
    (5) declarations -> . VAR declaration_list procedure_declarations
    (6) declarations -> . VAR declaration_list
    (7) declarations -> . procedure_declarations
    (8) declarations -> . empty
    (16) procedure_declarations -> . procedure_declaration
    (17) procedure_declarations -> . procedure_declarations procedure_declaration
    (62) empty -> .
    (18) procedure_declaration -> . PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON

    VAR             shift and go to state 10
    BEGIN           reduce using rule 62 (empty -> .)
    PROCEDURE       shift and go to state 14

    block                          shift and go to state 122
    declarations                   shift and go to state 9
    procedure_declarations         shift and go to state 11
    empty                          shift and go to state 12
    procedure_declaration          shift and go to state 13

state 118

    (19) parameter_list -> id_list COLON type_specifier .

    RPAREN          reduce using rule 19 (parameter_list -> id_list COLON type_specifier .)


state 119

    (37) expression_list_tail -> COMMA expression .

    RPAREN          reduce using rule 37 (expression_list_tail -> COMMA expression .)


state 120

    (33) if_statement -> IF expression THEN statement ELSE . statement
    (24) statement -> . assignment_statement
    (25) statement -> . if_statement
    (26) statement -> . while_statement
    (27) statement -> . procedure_call
    (28) statement -> . compound_statement
    (29) statement -> . empty
    (63) statement -> . READLINE
    (64) statement -> . WRITELN LPAREN expression_list RPAREN
    (65) statement -> . USES ID SEMICOLON
    (30) assignment_statement -> . variable COLON_EQUAL expression
    (33) if_statement -> . IF expression THEN statement ELSE statement
    (34) while_statement -> . WHILE expression DO statement
    (35) procedure_call -> . ID LPAREN expression_list RPAREN
    (20) compound_statement -> . BEGIN statement_list END
    (62) empty -> .
    (31) variable -> . ID
    (32) variable -> . ID LBRACKET expression RBRACKET

    READLINE        shift and go to state 34
    WRITELN         shift and go to state 35
    USES            shift and go to state 36
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    ID              shift and go to state 37
    BEGIN           shift and go to state 18
    SEMICOLON       reduce using rule 62 (empty -> .)
    END             reduce using rule 62 (empty -> .)
    ELSE            reduce using rule 62 (empty -> .)

    statement                      shift and go to state 123
    assignment_statement           shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 30
    procedure_call                 shift and go to state 31
    compound_statement             shift and go to state 32
    empty                          shift and go to state 33
    variable                       shift and go to state 38

state 121

    (15) type_specifier -> ARRAY LBRACKET NUMBER DOTDOT . NUMBER RBRACKET OF INTEGER

    NUMBER          shift and go to state 124


state 122

    (18) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 125


state 123

    (33) if_statement -> IF expression THEN statement ELSE statement .

    SEMICOLON       reduce using rule 33 (if_statement -> IF expression THEN statement ELSE statement .)
    END             reduce using rule 33 (if_statement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 33 (if_statement -> IF expression THEN statement ELSE statement .)


state 124

    (15) type_specifier -> ARRAY LBRACKET NUMBER DOTDOT NUMBER . RBRACKET OF INTEGER

    RBRACKET        shift and go to state 126


state 125

    (18) procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .

    PROCEDURE       reduce using rule 18 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)
    BEGIN           reduce using rule 18 (procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON .)


state 126

    (15) type_specifier -> ARRAY LBRACKET NUMBER DOTDOT NUMBER RBRACKET . OF INTEGER

    OF              shift and go to state 127


state 127

    (15) type_specifier -> ARRAY LBRACKET NUMBER DOTDOT NUMBER RBRACKET OF . INTEGER

    INTEGER         shift and go to state 128


state 128

    (15) type_specifier -> ARRAY LBRACKET NUMBER DOTDOT NUMBER RBRACKET OF INTEGER .

    SEMICOLON       reduce using rule 15 (type_specifier -> ARRAY LBRACKET NUMBER DOTDOT NUMBER RBRACKET OF INTEGER .)
    RPAREN          reduce using rule 15 (type_specifier -> ARRAY LBRACKET NUMBER DOTDOT NUMBER RBRACKET OF INTEGER .)

