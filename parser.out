Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    FALSE
    GOTO
    IN
    LABEL
    LBLOCK
    NIL
    PACKED
    RBLOCK
    READLINE
    REPEAT
    SUBRANGE
    TRUE
    UNTIL
    WITH

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON declaration_sections block DOT
Rule 2     declaration_sections -> declaration_sections declaration_section
Rule 3     declaration_sections -> empty
Rule 4     declaration_section -> uses_opt
Rule 5     declaration_section -> constant_declaration
Rule 6     declaration_section -> type_declaration
Rule 7     declaration_section -> var_declaration
Rule 8     declaration_section -> procedure_declarations
Rule 9     declaration_section -> function_declaration
Rule 10    uses_opt -> USES id_list SEMICOLON
Rule 11    id_list -> ID
Rule 12    id_list -> id_list COMMA ID
Rule 13    var_declaration -> VAR declaration_list
Rule 14    declaration_list -> declaration
Rule 15    declaration_list -> declaration_list declaration
Rule 16    declaration -> id_list COLON type_specifier SEMICOLON
Rule 17    block -> declaration_sections compound_statement
Rule 18    type_declaration -> TYPE type_list
Rule 19    type_list -> type_definition
Rule 20    type_list -> type_list type_definition
Rule 21    type_definition -> ID EQUAL type_specifier SEMICOLON
Rule 22    type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier
Rule 23    type_specifier -> subrange
Rule 24    type_specifier -> FILE OF type_specifier
Rule 25    type_specifier -> SET OF type_specifier
Rule 26    type_specifier -> RECORD field_list case_part END
Rule 27    type_specifier -> OBJECT field_list method_list END
Rule 28    type_specifier -> LPAREN id_list RPAREN
Rule 29    type_specifier -> BOOLEAN_LITERAL
Rule 30    type_specifier -> INTEGER
Rule 31    type_specifier -> BYTE
Rule 32    type_specifier -> CHAR
Rule 33    type_specifier -> STRING LBRACKET NUMBER RBRACKET
Rule 34    type_specifier -> ID
Rule 35    type_expression -> type_expression COMMA subrange
Rule 36    type_expression -> subrange
Rule 37    subrange -> NUMBER DOTDOT NUMBER
Rule 38    field_list -> field_list field
Rule 39    field_list -> field
Rule 40    field_list -> empty
Rule 41    field -> id_list COLON type_specifier SEMICOLON
Rule 42    field -> id_list COLON type_specifier
Rule 43    case_part -> CASE ID COLON type_specifier OF case_list SEMICOLON
Rule 44    case_part -> empty
Rule 45    case_list -> case_list SEMICOLON case_element
Rule 46    case_list -> case_element
Rule 47    case_element -> NUMBER COLON LPAREN field_list RPAREN
Rule 48    method_list -> method_list method
Rule 49    method_list -> method
Rule 50    method_list -> empty
Rule 51    method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON
Rule 52    method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON
Rule 53    method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON
Rule 54    method -> DESTRUCTOR ID SEMICOLON
Rule 55    type_specifier -> LONGINT
Rule 56    procedure_declarations -> procedure_declaration
Rule 57    procedure_declarations -> procedure_declarations procedure_declaration
Rule 58    procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON
Rule 59    procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON
Rule 60    procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON
Rule 61    procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON
Rule 62    procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON
Rule 63    procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON
Rule 64    function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
Rule 65    function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
Rule 66    function_call -> ID LPAREN expression_list RPAREN
Rule 67    factor -> function_call
Rule 68    parameter_list -> parameter
Rule 69    parameter_list -> parameter_list SEMICOLON parameter
Rule 70    parameter_list -> empty
Rule 71    parameter -> id_list COLON type_specifier
Rule 72    parameter -> VAR id_list COLON type_specifier
Rule 73    compound_statement -> BEGIN statement_list END
Rule 74    statement_list -> statement statement_list_tail
Rule 75    statement_list_tail -> SEMICOLON statement statement_list_tail
Rule 76    statement_list_tail -> empty
Rule 77    statement -> if_statement
Rule 78    statement -> assignment_statement
Rule 79    statement -> while_statement
Rule 80    statement -> procedure_call
Rule 81    statement -> compound_statement
Rule 82    statement -> for_statement
Rule 83    statement -> empty
Rule 84    if_statement -> IF expression THEN statement ELSE statement
Rule 85    if_statement -> IF expression THEN statement
Rule 86    for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement
Rule 87    for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement
Rule 88    assignment_statement -> variable COLON_EQUAL expression
Rule 89    variable -> ID
Rule 90    variable -> ID LBRACKET index_list RBRACKET
Rule 91    index_list -> expression
Rule 92    index_list -> index_list COMMA expression
Rule 93    while_statement -> WHILE expression DO statement
Rule 94    procedure_call -> ID LPAREN expression_list RPAREN
Rule 95    procedure_call -> ID
Rule 96    expression_list -> expression expression_list_tail
Rule 97    expression_list_tail -> COMMA expression expression_list_tail
Rule 98    expression_list_tail -> empty
Rule 99    expression_list -> empty
Rule 100   expression -> simple_expression relop simple_expression
Rule 101   expression -> simple_expression
Rule 102   simple_expression -> term simple_expression_tail
Rule 103   simple_expression_tail -> addop term
Rule 104   simple_expression_tail -> empty
Rule 105   addop -> PLUS
Rule 106   addop -> MINUS
Rule 107   term -> factor term_tail
Rule 108   term_tail -> mulop factor
Rule 109   term_tail -> empty
Rule 110   mulop -> TIMES
Rule 111   mulop -> DIVIDE
Rule 112   mulop -> DIV
Rule 113   expression -> expression PLUS expression
Rule 114   expression -> expression MINUS expression
Rule 115   expression -> expression TIMES expression
Rule 116   expression -> expression DIVIDE expression
Rule 117   expression -> expression MOD expression
Rule 118   factor -> LPAREN expression RPAREN
Rule 119   factor -> variable
Rule 120   factor -> NUMBER
Rule 121   factor -> STRING_LITERAL
Rule 122   relop -> LESS
Rule 123   relop -> LESS_EQUAL
Rule 124   relop -> GREAT
Rule 125   relop -> GREAT_EQUAL
Rule 126   relop -> EQUAL
Rule 127   relop -> DIFFERENT
Rule 128   empty -> <empty>
Rule 129   statement -> READLN
Rule 130   statement -> READLN LPAREN variable RPAREN
Rule 131   statement -> READLN LBRACKET variable RBRACKET
Rule 132   statement -> WRITELN LPAREN expression_list RPAREN
Rule 133   statement -> WRITE LPAREN expression_list RPAREN
Rule 134   statement -> USES ID SEMICOLON
Rule 135   constant_declaration -> CONST constant_list
Rule 136   constant_list -> constant
Rule 137   constant_list -> constant_list constant
Rule 138   constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON
Rule 139   constant -> ID EQUAL NUMBER SEMICOLON
Rule 140   constant -> ID EQUAL STRING_LITERAL SEMICOLON
Rule 141   constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON
Rule 142   expression -> expression AND expression
Rule 143   expression -> expression OR expression
Rule 144   expression -> NOT expression

Terminals, with rules where they appear

AND                  : 142
ARRAY                : 22
BEGIN                : 73
BOOLEAN_LITERAL      : 29 141
BYTE                 : 31
CASE                 : 43
CHAR                 : 32
CHARACTER_LITERAL    : 138
COLON                : 16 41 42 43 47 53 64 65 71 72
COLON_EQUAL          : 86 87 88
COMMA                : 12 35 92 97
CONST                : 135
CONSTRUCTOR          : 51
DESTRUCTOR           : 54
DIFFERENT            : 127
DIV                  : 112
DIVIDE               : 111 116
DO                   : 86 87 93
DOT                  : 1
DOTDOT               : 37
DOWNTO               : 87
ELSE                 : 84
END                  : 26 27 73
EQUAL                : 21 126 138 139 140 141
FALSE                : 
FILE                 : 24
FOR                  : 86 87
FORWARD              : 61 62 63 65
FUNCTION             : 53 64 65
GOTO                 : 
GREAT                : 124
GREAT_EQUAL          : 125
ID                   : 1 11 12 21 34 43 51 52 53 54 58 59 60 61 62 63 64 65 66 86 87 89 90 94 95 134 138 139 140 141
IF                   : 84 85
IN                   : 
INTEGER              : 30
LABEL                : 
LBLOCK               : 
LBRACKET             : 22 33 90 131
LESS                 : 122
LESS_EQUAL           : 123
LONGINT              : 55
LPAREN               : 28 47 51 52 53 58 59 61 62 64 65 66 94 118 130 132 133
MINUS                : 106 114
MOD                  : 117
NIL                  : 
NOT                  : 144
NUMBER               : 33 37 37 47 120 139
OBJECT               : 27
OF                   : 22 24 25 43
OR                   : 143
PACKED               : 
PLUS                 : 105 113
PROCEDURE            : 52 58 59 60 61 62 63
PROGRAM              : 1
RBLOCK               : 
RBRACKET             : 22 33 90 131
READLINE             : 
READLN               : 129 130 131
RECORD               : 26
REPEAT               : 
RPAREN               : 28 47 51 52 53 58 59 61 62 64 65 66 94 118 130 132 133
SEMICOLON            : 1 10 16 21 41 43 45 51 52 53 54 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 69 75 134 138 139 140 141
SET                  : 25
STRING               : 33
STRING_LITERAL       : 121 140
SUBRANGE             : 
THEN                 : 84 85
TIMES                : 110 115
TO                   : 86
TRUE                 : 
TYPE                 : 18
UNTIL                : 
USES                 : 10 134
VAR                  : 13 72
WHILE                : 93
WITH                 : 
WRITE                : 133
WRITELN              : 132
error                : 

Nonterminals, with rules where they appear

addop                : 103
assignment_statement : 78
block                : 1 59 60 64
case_element         : 45 46
case_list            : 43 45
case_part            : 26
compound_statement   : 17 81
constant             : 136 137
constant_declaration : 5
constant_list        : 135 137
declaration          : 14 15
declaration_list     : 13 15
declaration_section  : 2
declaration_sections : 1 2 17
empty                : 3 40 44 50 70 76 83 98 99 104 109
expression           : 84 85 86 86 87 87 88 91 92 93 96 97 113 113 114 114 115 115 116 116 117 117 118 142 142 143 143 144
expression_list      : 66 94 132 133
expression_list_tail : 96 97
factor               : 107 108
field                : 38 39
field_list           : 26 27 38 47 51 52 53 58 61
for_statement        : 82
function_call        : 67
function_declaration : 9
id_list              : 10 12 16 28 41 42 71 72
if_statement         : 77
index_list           : 90 92
method               : 48 49
method_list          : 27 48
mulop                : 108
parameter            : 68 69
parameter_list       : 64 65 69
procedure_call       : 80
procedure_declaration : 56 57
procedure_declarations : 8 57
program              : 0
relop                : 100
simple_expression    : 100 100 101
simple_expression_tail : 102
statement            : 74 75 84 84 85 86 87 93
statement_list       : 73
statement_list_tail  : 74 75
subrange             : 23 35 36
term                 : 102 103
term_tail            : 107
type_declaration     : 6
type_definition      : 19 20
type_expression      : 22 35
type_list            : 18 20
type_specifier       : 16 21 22 24 25 41 42 43 53 64 65 71 72
uses_opt             : 4
var_declaration      : 7
variable             : 88 119 130 131
while_statement      : 79

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON declaration_sections block DOT

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON declaration_sections block DOT

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON declaration_sections block DOT

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . declaration_sections block DOT
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (128) empty -> .

    USES            reduce using rule 128 (empty -> .)
    CONST           reduce using rule 128 (empty -> .)
    TYPE            reduce using rule 128 (empty -> .)
    VAR             reduce using rule 128 (empty -> .)
    FUNCTION        reduce using rule 128 (empty -> .)
    PROCEDURE       reduce using rule 128 (empty -> .)
    BEGIN           reduce using rule 128 (empty -> .)

    declaration_sections           shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) program -> PROGRAM ID SEMICOLON declaration_sections . block DOT
    (2) declaration_sections -> declaration_sections . declaration_section
    (17) block -> . declaration_sections compound_statement
    (4) declaration_section -> . uses_opt
    (5) declaration_section -> . constant_declaration
    (6) declaration_section -> . type_declaration
    (7) declaration_section -> . var_declaration
    (8) declaration_section -> . procedure_declarations
    (9) declaration_section -> . function_declaration
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (10) uses_opt -> . USES id_list SEMICOLON
    (135) constant_declaration -> . CONST constant_list
    (18) type_declaration -> . TYPE type_list
    (13) var_declaration -> . VAR declaration_list
    (56) procedure_declarations -> . procedure_declaration
    (57) procedure_declarations -> . procedure_declarations procedure_declaration
    (64) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (65) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (128) empty -> .
    (58) procedure_declaration -> . PROCEDURE ID LPAREN field_list RPAREN SEMICOLON
    (59) procedure_declaration -> . PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON
    (60) procedure_declaration -> . PROCEDURE ID SEMICOLON block SEMICOLON
    (61) procedure_declaration -> . PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON
    (62) procedure_declaration -> . PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON
    (63) procedure_declaration -> . PROCEDURE ID SEMICOLON FORWARD SEMICOLON

  ! shift/reduce conflict for USES resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for PROCEDURE resolved as shift
    USES            shift and go to state 16
    CONST           shift and go to state 17
    TYPE            shift and go to state 18
    VAR             shift and go to state 19
    FUNCTION        shift and go to state 21
    BEGIN           reduce using rule 128 (empty -> .)
    PROCEDURE       shift and go to state 22

  ! USES            [ reduce using rule 128 (empty -> .) ]
  ! CONST           [ reduce using rule 128 (empty -> .) ]
  ! TYPE            [ reduce using rule 128 (empty -> .) ]
  ! VAR             [ reduce using rule 128 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 128 (empty -> .) ]
  ! PROCEDURE       [ reduce using rule 128 (empty -> .) ]

    declaration_sections           shift and go to state 7
    block                          shift and go to state 8
    declaration_section            shift and go to state 9
    uses_opt                       shift and go to state 10
    constant_declaration           shift and go to state 11
    type_declaration               shift and go to state 12
    var_declaration                shift and go to state 13
    procedure_declarations         shift and go to state 14
    function_declaration           shift and go to state 15
    empty                          shift and go to state 6
    procedure_declaration          shift and go to state 20

state 6

    (3) declaration_sections -> empty .

    USES            reduce using rule 3 (declaration_sections -> empty .)
    CONST           reduce using rule 3 (declaration_sections -> empty .)
    TYPE            reduce using rule 3 (declaration_sections -> empty .)
    VAR             reduce using rule 3 (declaration_sections -> empty .)
    FUNCTION        reduce using rule 3 (declaration_sections -> empty .)
    PROCEDURE       reduce using rule 3 (declaration_sections -> empty .)
    BEGIN           reduce using rule 3 (declaration_sections -> empty .)


state 7

    (17) block -> declaration_sections . compound_statement
    (2) declaration_sections -> declaration_sections . declaration_section
    (73) compound_statement -> . BEGIN statement_list END
    (4) declaration_section -> . uses_opt
    (5) declaration_section -> . constant_declaration
    (6) declaration_section -> . type_declaration
    (7) declaration_section -> . var_declaration
    (8) declaration_section -> . procedure_declarations
    (9) declaration_section -> . function_declaration
    (10) uses_opt -> . USES id_list SEMICOLON
    (135) constant_declaration -> . CONST constant_list
    (18) type_declaration -> . TYPE type_list
    (13) var_declaration -> . VAR declaration_list
    (56) procedure_declarations -> . procedure_declaration
    (57) procedure_declarations -> . procedure_declarations procedure_declaration
    (64) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (65) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (58) procedure_declaration -> . PROCEDURE ID LPAREN field_list RPAREN SEMICOLON
    (59) procedure_declaration -> . PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON
    (60) procedure_declaration -> . PROCEDURE ID SEMICOLON block SEMICOLON
    (61) procedure_declaration -> . PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON
    (62) procedure_declaration -> . PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON
    (63) procedure_declaration -> . PROCEDURE ID SEMICOLON FORWARD SEMICOLON

    BEGIN           shift and go to state 24
    USES            shift and go to state 16
    CONST           shift and go to state 17
    TYPE            shift and go to state 18
    VAR             shift and go to state 19
    FUNCTION        shift and go to state 21
    PROCEDURE       shift and go to state 22

    compound_statement             shift and go to state 23
    declaration_section            shift and go to state 9
    uses_opt                       shift and go to state 10
    constant_declaration           shift and go to state 11
    type_declaration               shift and go to state 12
    var_declaration                shift and go to state 13
    procedure_declarations         shift and go to state 14
    function_declaration           shift and go to state 15
    procedure_declaration          shift and go to state 20

state 8

    (1) program -> PROGRAM ID SEMICOLON declaration_sections block . DOT

    DOT             shift and go to state 25


state 9

    (2) declaration_sections -> declaration_sections declaration_section .

    USES            reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    CONST           reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    TYPE            reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    VAR             reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    FUNCTION        reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    PROCEDURE       reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)
    BEGIN           reduce using rule 2 (declaration_sections -> declaration_sections declaration_section .)


state 10

    (4) declaration_section -> uses_opt .

    USES            reduce using rule 4 (declaration_section -> uses_opt .)
    CONST           reduce using rule 4 (declaration_section -> uses_opt .)
    TYPE            reduce using rule 4 (declaration_section -> uses_opt .)
    VAR             reduce using rule 4 (declaration_section -> uses_opt .)
    FUNCTION        reduce using rule 4 (declaration_section -> uses_opt .)
    PROCEDURE       reduce using rule 4 (declaration_section -> uses_opt .)
    BEGIN           reduce using rule 4 (declaration_section -> uses_opt .)


state 11

    (5) declaration_section -> constant_declaration .

    USES            reduce using rule 5 (declaration_section -> constant_declaration .)
    CONST           reduce using rule 5 (declaration_section -> constant_declaration .)
    TYPE            reduce using rule 5 (declaration_section -> constant_declaration .)
    VAR             reduce using rule 5 (declaration_section -> constant_declaration .)
    FUNCTION        reduce using rule 5 (declaration_section -> constant_declaration .)
    PROCEDURE       reduce using rule 5 (declaration_section -> constant_declaration .)
    BEGIN           reduce using rule 5 (declaration_section -> constant_declaration .)


state 12

    (6) declaration_section -> type_declaration .

    USES            reduce using rule 6 (declaration_section -> type_declaration .)
    CONST           reduce using rule 6 (declaration_section -> type_declaration .)
    TYPE            reduce using rule 6 (declaration_section -> type_declaration .)
    VAR             reduce using rule 6 (declaration_section -> type_declaration .)
    FUNCTION        reduce using rule 6 (declaration_section -> type_declaration .)
    PROCEDURE       reduce using rule 6 (declaration_section -> type_declaration .)
    BEGIN           reduce using rule 6 (declaration_section -> type_declaration .)


state 13

    (7) declaration_section -> var_declaration .

    USES            reduce using rule 7 (declaration_section -> var_declaration .)
    CONST           reduce using rule 7 (declaration_section -> var_declaration .)
    TYPE            reduce using rule 7 (declaration_section -> var_declaration .)
    VAR             reduce using rule 7 (declaration_section -> var_declaration .)
    FUNCTION        reduce using rule 7 (declaration_section -> var_declaration .)
    PROCEDURE       reduce using rule 7 (declaration_section -> var_declaration .)
    BEGIN           reduce using rule 7 (declaration_section -> var_declaration .)


state 14

    (8) declaration_section -> procedure_declarations .
    (57) procedure_declarations -> procedure_declarations . procedure_declaration
    (58) procedure_declaration -> . PROCEDURE ID LPAREN field_list RPAREN SEMICOLON
    (59) procedure_declaration -> . PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON
    (60) procedure_declaration -> . PROCEDURE ID SEMICOLON block SEMICOLON
    (61) procedure_declaration -> . PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON
    (62) procedure_declaration -> . PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON
    (63) procedure_declaration -> . PROCEDURE ID SEMICOLON FORWARD SEMICOLON

  ! shift/reduce conflict for PROCEDURE resolved as shift
    USES            reduce using rule 8 (declaration_section -> procedure_declarations .)
    CONST           reduce using rule 8 (declaration_section -> procedure_declarations .)
    TYPE            reduce using rule 8 (declaration_section -> procedure_declarations .)
    VAR             reduce using rule 8 (declaration_section -> procedure_declarations .)
    FUNCTION        reduce using rule 8 (declaration_section -> procedure_declarations .)
    BEGIN           reduce using rule 8 (declaration_section -> procedure_declarations .)
    PROCEDURE       shift and go to state 22

  ! PROCEDURE       [ reduce using rule 8 (declaration_section -> procedure_declarations .) ]

    procedure_declaration          shift and go to state 26

state 15

    (9) declaration_section -> function_declaration .

    USES            reduce using rule 9 (declaration_section -> function_declaration .)
    CONST           reduce using rule 9 (declaration_section -> function_declaration .)
    TYPE            reduce using rule 9 (declaration_section -> function_declaration .)
    VAR             reduce using rule 9 (declaration_section -> function_declaration .)
    FUNCTION        reduce using rule 9 (declaration_section -> function_declaration .)
    PROCEDURE       reduce using rule 9 (declaration_section -> function_declaration .)
    BEGIN           reduce using rule 9 (declaration_section -> function_declaration .)


state 16

    (10) uses_opt -> USES . id_list SEMICOLON
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    ID              shift and go to state 28

    id_list                        shift and go to state 27

state 17

    (135) constant_declaration -> CONST . constant_list
    (136) constant_list -> . constant
    (137) constant_list -> . constant_list constant
    (138) constant -> . ID EQUAL CHARACTER_LITERAL SEMICOLON
    (139) constant -> . ID EQUAL NUMBER SEMICOLON
    (140) constant -> . ID EQUAL STRING_LITERAL SEMICOLON
    (141) constant -> . ID EQUAL BOOLEAN_LITERAL SEMICOLON

    ID              shift and go to state 31

    constant_list                  shift and go to state 29
    constant                       shift and go to state 30

state 18

    (18) type_declaration -> TYPE . type_list
    (19) type_list -> . type_definition
    (20) type_list -> . type_list type_definition
    (21) type_definition -> . ID EQUAL type_specifier SEMICOLON

    ID              shift and go to state 34

    type_list                      shift and go to state 32
    type_definition                shift and go to state 33

state 19

    (13) var_declaration -> VAR . declaration_list
    (14) declaration_list -> . declaration
    (15) declaration_list -> . declaration_list declaration
    (16) declaration -> . id_list COLON type_specifier SEMICOLON
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    ID              shift and go to state 28

    declaration_list               shift and go to state 35
    declaration                    shift and go to state 36
    id_list                        shift and go to state 37

state 20

    (56) procedure_declarations -> procedure_declaration .

    PROCEDURE       reduce using rule 56 (procedure_declarations -> procedure_declaration .)
    USES            reduce using rule 56 (procedure_declarations -> procedure_declaration .)
    CONST           reduce using rule 56 (procedure_declarations -> procedure_declaration .)
    TYPE            reduce using rule 56 (procedure_declarations -> procedure_declaration .)
    VAR             reduce using rule 56 (procedure_declarations -> procedure_declaration .)
    FUNCTION        reduce using rule 56 (procedure_declarations -> procedure_declaration .)
    BEGIN           reduce using rule 56 (procedure_declarations -> procedure_declaration .)


state 21

    (64) function_declaration -> FUNCTION . ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (65) function_declaration -> FUNCTION . ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON

    ID              shift and go to state 38


state 22

    (58) procedure_declaration -> PROCEDURE . ID LPAREN field_list RPAREN SEMICOLON
    (59) procedure_declaration -> PROCEDURE . ID LPAREN RPAREN SEMICOLON block SEMICOLON
    (60) procedure_declaration -> PROCEDURE . ID SEMICOLON block SEMICOLON
    (61) procedure_declaration -> PROCEDURE . ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON
    (62) procedure_declaration -> PROCEDURE . ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON
    (63) procedure_declaration -> PROCEDURE . ID SEMICOLON FORWARD SEMICOLON

    ID              shift and go to state 39


state 23

    (17) block -> declaration_sections compound_statement .

    DOT             reduce using rule 17 (block -> declaration_sections compound_statement .)
    SEMICOLON       reduce using rule 17 (block -> declaration_sections compound_statement .)


state 24

    (73) compound_statement -> BEGIN . statement_list END
    (74) statement_list -> . statement statement_list_tail
    (77) statement -> . if_statement
    (78) statement -> . assignment_statement
    (79) statement -> . while_statement
    (80) statement -> . procedure_call
    (81) statement -> . compound_statement
    (82) statement -> . for_statement
    (83) statement -> . empty
    (129) statement -> . READLN
    (130) statement -> . READLN LPAREN variable RPAREN
    (131) statement -> . READLN LBRACKET variable RBRACKET
    (132) statement -> . WRITELN LPAREN expression_list RPAREN
    (133) statement -> . WRITE LPAREN expression_list RPAREN
    (134) statement -> . USES ID SEMICOLON
    (84) if_statement -> . IF expression THEN statement ELSE statement
    (85) if_statement -> . IF expression THEN statement
    (88) assignment_statement -> . variable COLON_EQUAL expression
    (93) while_statement -> . WHILE expression DO statement
    (94) procedure_call -> . ID LPAREN expression_list RPAREN
    (95) procedure_call -> . ID
    (73) compound_statement -> . BEGIN statement_list END
    (86) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (87) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (128) empty -> .
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    READLN          shift and go to state 49
    WRITELN         shift and go to state 51
    WRITE           shift and go to state 52
    USES            shift and go to state 53
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    ID              shift and go to state 54
    BEGIN           shift and go to state 24
    FOR             shift and go to state 57
    SEMICOLON       reduce using rule 128 (empty -> .)
    END             reduce using rule 128 (empty -> .)

    statement_list                 shift and go to state 40
    statement                      shift and go to state 41
    if_statement                   shift and go to state 42
    assignment_statement           shift and go to state 43
    while_statement                shift and go to state 44
    procedure_call                 shift and go to state 45
    compound_statement             shift and go to state 46
    for_statement                  shift and go to state 47
    empty                          shift and go to state 48
    variable                       shift and go to state 50

state 25

    (1) program -> PROGRAM ID SEMICOLON declaration_sections block DOT .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON declaration_sections block DOT .)


state 26

    (57) procedure_declarations -> procedure_declarations procedure_declaration .

    PROCEDURE       reduce using rule 57 (procedure_declarations -> procedure_declarations procedure_declaration .)
    USES            reduce using rule 57 (procedure_declarations -> procedure_declarations procedure_declaration .)
    CONST           reduce using rule 57 (procedure_declarations -> procedure_declarations procedure_declaration .)
    TYPE            reduce using rule 57 (procedure_declarations -> procedure_declarations procedure_declaration .)
    VAR             reduce using rule 57 (procedure_declarations -> procedure_declarations procedure_declaration .)
    FUNCTION        reduce using rule 57 (procedure_declarations -> procedure_declarations procedure_declaration .)
    BEGIN           reduce using rule 57 (procedure_declarations -> procedure_declarations procedure_declaration .)


state 27

    (10) uses_opt -> USES id_list . SEMICOLON
    (12) id_list -> id_list . COMMA ID

    SEMICOLON       shift and go to state 58
    COMMA           shift and go to state 59


state 28

    (11) id_list -> ID .

    SEMICOLON       reduce using rule 11 (id_list -> ID .)
    COMMA           reduce using rule 11 (id_list -> ID .)
    COLON           reduce using rule 11 (id_list -> ID .)
    RPAREN          reduce using rule 11 (id_list -> ID .)


state 29

    (135) constant_declaration -> CONST constant_list .
    (137) constant_list -> constant_list . constant
    (138) constant -> . ID EQUAL CHARACTER_LITERAL SEMICOLON
    (139) constant -> . ID EQUAL NUMBER SEMICOLON
    (140) constant -> . ID EQUAL STRING_LITERAL SEMICOLON
    (141) constant -> . ID EQUAL BOOLEAN_LITERAL SEMICOLON

    USES            reduce using rule 135 (constant_declaration -> CONST constant_list .)
    CONST           reduce using rule 135 (constant_declaration -> CONST constant_list .)
    TYPE            reduce using rule 135 (constant_declaration -> CONST constant_list .)
    VAR             reduce using rule 135 (constant_declaration -> CONST constant_list .)
    FUNCTION        reduce using rule 135 (constant_declaration -> CONST constant_list .)
    PROCEDURE       reduce using rule 135 (constant_declaration -> CONST constant_list .)
    BEGIN           reduce using rule 135 (constant_declaration -> CONST constant_list .)
    ID              shift and go to state 31

    constant                       shift and go to state 60

state 30

    (136) constant_list -> constant .

    ID              reduce using rule 136 (constant_list -> constant .)
    USES            reduce using rule 136 (constant_list -> constant .)
    CONST           reduce using rule 136 (constant_list -> constant .)
    TYPE            reduce using rule 136 (constant_list -> constant .)
    VAR             reduce using rule 136 (constant_list -> constant .)
    FUNCTION        reduce using rule 136 (constant_list -> constant .)
    PROCEDURE       reduce using rule 136 (constant_list -> constant .)
    BEGIN           reduce using rule 136 (constant_list -> constant .)


state 31

    (138) constant -> ID . EQUAL CHARACTER_LITERAL SEMICOLON
    (139) constant -> ID . EQUAL NUMBER SEMICOLON
    (140) constant -> ID . EQUAL STRING_LITERAL SEMICOLON
    (141) constant -> ID . EQUAL BOOLEAN_LITERAL SEMICOLON

    EQUAL           shift and go to state 61


state 32

    (18) type_declaration -> TYPE type_list .
    (20) type_list -> type_list . type_definition
    (21) type_definition -> . ID EQUAL type_specifier SEMICOLON

    USES            reduce using rule 18 (type_declaration -> TYPE type_list .)
    CONST           reduce using rule 18 (type_declaration -> TYPE type_list .)
    TYPE            reduce using rule 18 (type_declaration -> TYPE type_list .)
    VAR             reduce using rule 18 (type_declaration -> TYPE type_list .)
    FUNCTION        reduce using rule 18 (type_declaration -> TYPE type_list .)
    PROCEDURE       reduce using rule 18 (type_declaration -> TYPE type_list .)
    BEGIN           reduce using rule 18 (type_declaration -> TYPE type_list .)
    ID              shift and go to state 34

    type_definition                shift and go to state 62

state 33

    (19) type_list -> type_definition .

    ID              reduce using rule 19 (type_list -> type_definition .)
    USES            reduce using rule 19 (type_list -> type_definition .)
    CONST           reduce using rule 19 (type_list -> type_definition .)
    TYPE            reduce using rule 19 (type_list -> type_definition .)
    VAR             reduce using rule 19 (type_list -> type_definition .)
    FUNCTION        reduce using rule 19 (type_list -> type_definition .)
    PROCEDURE       reduce using rule 19 (type_list -> type_definition .)
    BEGIN           reduce using rule 19 (type_list -> type_definition .)


state 34

    (21) type_definition -> ID . EQUAL type_specifier SEMICOLON

    EQUAL           shift and go to state 63


state 35

    (13) var_declaration -> VAR declaration_list .
    (15) declaration_list -> declaration_list . declaration
    (16) declaration -> . id_list COLON type_specifier SEMICOLON
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    USES            reduce using rule 13 (var_declaration -> VAR declaration_list .)
    CONST           reduce using rule 13 (var_declaration -> VAR declaration_list .)
    TYPE            reduce using rule 13 (var_declaration -> VAR declaration_list .)
    VAR             reduce using rule 13 (var_declaration -> VAR declaration_list .)
    FUNCTION        reduce using rule 13 (var_declaration -> VAR declaration_list .)
    PROCEDURE       reduce using rule 13 (var_declaration -> VAR declaration_list .)
    BEGIN           reduce using rule 13 (var_declaration -> VAR declaration_list .)
    ID              shift and go to state 28

    declaration                    shift and go to state 64
    id_list                        shift and go to state 37

state 36

    (14) declaration_list -> declaration .

    ID              reduce using rule 14 (declaration_list -> declaration .)
    USES            reduce using rule 14 (declaration_list -> declaration .)
    CONST           reduce using rule 14 (declaration_list -> declaration .)
    TYPE            reduce using rule 14 (declaration_list -> declaration .)
    VAR             reduce using rule 14 (declaration_list -> declaration .)
    FUNCTION        reduce using rule 14 (declaration_list -> declaration .)
    PROCEDURE       reduce using rule 14 (declaration_list -> declaration .)
    BEGIN           reduce using rule 14 (declaration_list -> declaration .)


state 37

    (16) declaration -> id_list . COLON type_specifier SEMICOLON
    (12) id_list -> id_list . COMMA ID

    COLON           shift and go to state 65
    COMMA           shift and go to state 59


state 38

    (64) function_declaration -> FUNCTION ID . LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (65) function_declaration -> FUNCTION ID . LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON

    LPAREN          shift and go to state 66


state 39

    (58) procedure_declaration -> PROCEDURE ID . LPAREN field_list RPAREN SEMICOLON
    (59) procedure_declaration -> PROCEDURE ID . LPAREN RPAREN SEMICOLON block SEMICOLON
    (60) procedure_declaration -> PROCEDURE ID . SEMICOLON block SEMICOLON
    (61) procedure_declaration -> PROCEDURE ID . LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON
    (62) procedure_declaration -> PROCEDURE ID . LPAREN RPAREN SEMICOLON FORWARD SEMICOLON
    (63) procedure_declaration -> PROCEDURE ID . SEMICOLON FORWARD SEMICOLON

    LPAREN          shift and go to state 67
    SEMICOLON       shift and go to state 68


state 40

    (73) compound_statement -> BEGIN statement_list . END

    END             shift and go to state 69


state 41

    (74) statement_list -> statement . statement_list_tail
    (75) statement_list_tail -> . SEMICOLON statement statement_list_tail
    (76) statement_list_tail -> . empty
    (128) empty -> .

    SEMICOLON       shift and go to state 71
    END             reduce using rule 128 (empty -> .)

    statement_list_tail            shift and go to state 70
    empty                          shift and go to state 72

state 42

    (77) statement -> if_statement .

    SEMICOLON       reduce using rule 77 (statement -> if_statement .)
    END             reduce using rule 77 (statement -> if_statement .)
    ELSE            reduce using rule 77 (statement -> if_statement .)


state 43

    (78) statement -> assignment_statement .

    SEMICOLON       reduce using rule 78 (statement -> assignment_statement .)
    END             reduce using rule 78 (statement -> assignment_statement .)
    ELSE            reduce using rule 78 (statement -> assignment_statement .)


state 44

    (79) statement -> while_statement .

    SEMICOLON       reduce using rule 79 (statement -> while_statement .)
    END             reduce using rule 79 (statement -> while_statement .)
    ELSE            reduce using rule 79 (statement -> while_statement .)


state 45

    (80) statement -> procedure_call .

    SEMICOLON       reduce using rule 80 (statement -> procedure_call .)
    END             reduce using rule 80 (statement -> procedure_call .)
    ELSE            reduce using rule 80 (statement -> procedure_call .)


state 46

    (81) statement -> compound_statement .

    SEMICOLON       reduce using rule 81 (statement -> compound_statement .)
    END             reduce using rule 81 (statement -> compound_statement .)
    ELSE            reduce using rule 81 (statement -> compound_statement .)


state 47

    (82) statement -> for_statement .

    SEMICOLON       reduce using rule 82 (statement -> for_statement .)
    END             reduce using rule 82 (statement -> for_statement .)
    ELSE            reduce using rule 82 (statement -> for_statement .)


state 48

    (83) statement -> empty .

    SEMICOLON       reduce using rule 83 (statement -> empty .)
    END             reduce using rule 83 (statement -> empty .)
    ELSE            reduce using rule 83 (statement -> empty .)


state 49

    (129) statement -> READLN .
    (130) statement -> READLN . LPAREN variable RPAREN
    (131) statement -> READLN . LBRACKET variable RBRACKET

    SEMICOLON       reduce using rule 129 (statement -> READLN .)
    END             reduce using rule 129 (statement -> READLN .)
    ELSE            reduce using rule 129 (statement -> READLN .)
    LPAREN          shift and go to state 73
    LBRACKET        shift and go to state 74


state 50

    (88) assignment_statement -> variable . COLON_EQUAL expression

    COLON_EQUAL     shift and go to state 75


state 51

    (132) statement -> WRITELN . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 76


state 52

    (133) statement -> WRITE . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 77


state 53

    (134) statement -> USES . ID SEMICOLON

    ID              shift and go to state 78


state 54

    (94) procedure_call -> ID . LPAREN expression_list RPAREN
    (95) procedure_call -> ID .
    (89) variable -> ID .
    (90) variable -> ID . LBRACKET index_list RBRACKET

    LPAREN          shift and go to state 79
    SEMICOLON       reduce using rule 95 (procedure_call -> ID .)
    END             reduce using rule 95 (procedure_call -> ID .)
    ELSE            reduce using rule 95 (procedure_call -> ID .)
    COLON_EQUAL     reduce using rule 89 (variable -> ID .)
    LBRACKET        shift and go to state 80


state 55

    (84) if_statement -> IF . expression THEN statement ELSE statement
    (85) if_statement -> IF . expression THEN statement
    (100) expression -> . simple_expression relop simple_expression
    (101) expression -> . simple_expression
    (113) expression -> . expression PLUS expression
    (114) expression -> . expression MINUS expression
    (115) expression -> . expression TIMES expression
    (116) expression -> . expression DIVIDE expression
    (117) expression -> . expression MOD expression
    (142) expression -> . expression AND expression
    (143) expression -> . expression OR expression
    (144) expression -> . NOT expression
    (102) simple_expression -> . term simple_expression_tail
    (107) term -> . factor term_tail
    (67) factor -> . function_call
    (118) factor -> . LPAREN expression RPAREN
    (119) factor -> . variable
    (120) factor -> . NUMBER
    (121) factor -> . STRING_LITERAL
    (66) function_call -> . ID LPAREN expression_list RPAREN
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 81
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 56

    (93) while_statement -> WHILE . expression DO statement
    (100) expression -> . simple_expression relop simple_expression
    (101) expression -> . simple_expression
    (113) expression -> . expression PLUS expression
    (114) expression -> . expression MINUS expression
    (115) expression -> . expression TIMES expression
    (116) expression -> . expression DIVIDE expression
    (117) expression -> . expression MOD expression
    (142) expression -> . expression AND expression
    (143) expression -> . expression OR expression
    (144) expression -> . NOT expression
    (102) simple_expression -> . term simple_expression_tail
    (107) term -> . factor term_tail
    (67) factor -> . function_call
    (118) factor -> . LPAREN expression RPAREN
    (119) factor -> . variable
    (120) factor -> . NUMBER
    (121) factor -> . STRING_LITERAL
    (66) function_call -> . ID LPAREN expression_list RPAREN
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 92
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 57

    (86) for_statement -> FOR . ID COLON_EQUAL expression TO expression DO statement
    (87) for_statement -> FOR . ID COLON_EQUAL expression DOWNTO expression DO statement

    ID              shift and go to state 93


state 58

    (10) uses_opt -> USES id_list SEMICOLON .

    USES            reduce using rule 10 (uses_opt -> USES id_list SEMICOLON .)
    CONST           reduce using rule 10 (uses_opt -> USES id_list SEMICOLON .)
    TYPE            reduce using rule 10 (uses_opt -> USES id_list SEMICOLON .)
    VAR             reduce using rule 10 (uses_opt -> USES id_list SEMICOLON .)
    FUNCTION        reduce using rule 10 (uses_opt -> USES id_list SEMICOLON .)
    PROCEDURE       reduce using rule 10 (uses_opt -> USES id_list SEMICOLON .)
    BEGIN           reduce using rule 10 (uses_opt -> USES id_list SEMICOLON .)


state 59

    (12) id_list -> id_list COMMA . ID

    ID              shift and go to state 94


state 60

    (137) constant_list -> constant_list constant .

    ID              reduce using rule 137 (constant_list -> constant_list constant .)
    USES            reduce using rule 137 (constant_list -> constant_list constant .)
    CONST           reduce using rule 137 (constant_list -> constant_list constant .)
    TYPE            reduce using rule 137 (constant_list -> constant_list constant .)
    VAR             reduce using rule 137 (constant_list -> constant_list constant .)
    FUNCTION        reduce using rule 137 (constant_list -> constant_list constant .)
    PROCEDURE       reduce using rule 137 (constant_list -> constant_list constant .)
    BEGIN           reduce using rule 137 (constant_list -> constant_list constant .)


state 61

    (138) constant -> ID EQUAL . CHARACTER_LITERAL SEMICOLON
    (139) constant -> ID EQUAL . NUMBER SEMICOLON
    (140) constant -> ID EQUAL . STRING_LITERAL SEMICOLON
    (141) constant -> ID EQUAL . BOOLEAN_LITERAL SEMICOLON

    CHARACTER_LITERAL shift and go to state 95
    NUMBER          shift and go to state 96
    STRING_LITERAL  shift and go to state 97
    BOOLEAN_LITERAL shift and go to state 98


state 62

    (20) type_list -> type_list type_definition .

    ID              reduce using rule 20 (type_list -> type_list type_definition .)
    USES            reduce using rule 20 (type_list -> type_list type_definition .)
    CONST           reduce using rule 20 (type_list -> type_list type_definition .)
    TYPE            reduce using rule 20 (type_list -> type_list type_definition .)
    VAR             reduce using rule 20 (type_list -> type_list type_definition .)
    FUNCTION        reduce using rule 20 (type_list -> type_list type_definition .)
    PROCEDURE       reduce using rule 20 (type_list -> type_list type_definition .)
    BEGIN           reduce using rule 20 (type_list -> type_list type_definition .)


state 63

    (21) type_definition -> ID EQUAL . type_specifier SEMICOLON
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (34) type_specifier -> . ID
    (55) type_specifier -> . LONGINT
    (37) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 101
    FILE            shift and go to state 103
    SET             shift and go to state 104
    RECORD          shift and go to state 105
    OBJECT          shift and go to state 106
    LPAREN          shift and go to state 107
    BOOLEAN_LITERAL shift and go to state 108
    INTEGER         shift and go to state 109
    BYTE            shift and go to state 110
    CHAR            shift and go to state 111
    STRING          shift and go to state 112
    ID              shift and go to state 99
    LONGINT         shift and go to state 114
    NUMBER          shift and go to state 113

    type_specifier                 shift and go to state 100
    subrange                       shift and go to state 102

state 64

    (15) declaration_list -> declaration_list declaration .

    ID              reduce using rule 15 (declaration_list -> declaration_list declaration .)
    USES            reduce using rule 15 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 15 (declaration_list -> declaration_list declaration .)
    TYPE            reduce using rule 15 (declaration_list -> declaration_list declaration .)
    VAR             reduce using rule 15 (declaration_list -> declaration_list declaration .)
    FUNCTION        reduce using rule 15 (declaration_list -> declaration_list declaration .)
    PROCEDURE       reduce using rule 15 (declaration_list -> declaration_list declaration .)
    BEGIN           reduce using rule 15 (declaration_list -> declaration_list declaration .)


state 65

    (16) declaration -> id_list COLON . type_specifier SEMICOLON
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (34) type_specifier -> . ID
    (55) type_specifier -> . LONGINT
    (37) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 101
    FILE            shift and go to state 103
    SET             shift and go to state 104
    RECORD          shift and go to state 105
    OBJECT          shift and go to state 106
    LPAREN          shift and go to state 107
    BOOLEAN_LITERAL shift and go to state 108
    INTEGER         shift and go to state 109
    BYTE            shift and go to state 110
    CHAR            shift and go to state 111
    STRING          shift and go to state 112
    ID              shift and go to state 99
    LONGINT         shift and go to state 114
    NUMBER          shift and go to state 113

    type_specifier                 shift and go to state 115
    subrange                       shift and go to state 102

state 66

    (64) function_declaration -> FUNCTION ID LPAREN . parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (65) function_declaration -> FUNCTION ID LPAREN . parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (68) parameter_list -> . parameter
    (69) parameter_list -> . parameter_list SEMICOLON parameter
    (70) parameter_list -> . empty
    (71) parameter -> . id_list COLON type_specifier
    (72) parameter -> . VAR id_list COLON type_specifier
    (128) empty -> .
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    VAR             shift and go to state 120
    RPAREN          reduce using rule 128 (empty -> .)
    SEMICOLON       reduce using rule 128 (empty -> .)
    ID              shift and go to state 28

    parameter_list                 shift and go to state 116
    parameter                      shift and go to state 117
    empty                          shift and go to state 118
    id_list                        shift and go to state 119

state 67

    (58) procedure_declaration -> PROCEDURE ID LPAREN . field_list RPAREN SEMICOLON
    (59) procedure_declaration -> PROCEDURE ID LPAREN . RPAREN SEMICOLON block SEMICOLON
    (61) procedure_declaration -> PROCEDURE ID LPAREN . field_list RPAREN SEMICOLON FORWARD SEMICOLON
    (62) procedure_declaration -> PROCEDURE ID LPAREN . RPAREN SEMICOLON FORWARD SEMICOLON
    (38) field_list -> . field_list field
    (39) field_list -> . field
    (40) field_list -> . empty
    (41) field -> . id_list COLON type_specifier SEMICOLON
    (42) field -> . id_list COLON type_specifier
    (128) empty -> .
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    RPAREN          shift and go to state 122
    ID              shift and go to state 28

  ! RPAREN          [ reduce using rule 128 (empty -> .) ]
  ! ID              [ reduce using rule 128 (empty -> .) ]

    field_list                     shift and go to state 121
    field                          shift and go to state 123
    empty                          shift and go to state 124
    id_list                        shift and go to state 125

state 68

    (60) procedure_declaration -> PROCEDURE ID SEMICOLON . block SEMICOLON
    (63) procedure_declaration -> PROCEDURE ID SEMICOLON . FORWARD SEMICOLON
    (17) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (128) empty -> .

    FORWARD         shift and go to state 127
    BEGIN           reduce using rule 128 (empty -> .)
    USES            reduce using rule 128 (empty -> .)
    CONST           reduce using rule 128 (empty -> .)
    TYPE            reduce using rule 128 (empty -> .)
    VAR             reduce using rule 128 (empty -> .)
    FUNCTION        reduce using rule 128 (empty -> .)
    PROCEDURE       reduce using rule 128 (empty -> .)

    block                          shift and go to state 126
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 69

    (73) compound_statement -> BEGIN statement_list END .

    DOT             reduce using rule 73 (compound_statement -> BEGIN statement_list END .)
    SEMICOLON       reduce using rule 73 (compound_statement -> BEGIN statement_list END .)
    END             reduce using rule 73 (compound_statement -> BEGIN statement_list END .)
    ELSE            reduce using rule 73 (compound_statement -> BEGIN statement_list END .)


state 70

    (74) statement_list -> statement statement_list_tail .

    END             reduce using rule 74 (statement_list -> statement statement_list_tail .)


state 71

    (75) statement_list_tail -> SEMICOLON . statement statement_list_tail
    (77) statement -> . if_statement
    (78) statement -> . assignment_statement
    (79) statement -> . while_statement
    (80) statement -> . procedure_call
    (81) statement -> . compound_statement
    (82) statement -> . for_statement
    (83) statement -> . empty
    (129) statement -> . READLN
    (130) statement -> . READLN LPAREN variable RPAREN
    (131) statement -> . READLN LBRACKET variable RBRACKET
    (132) statement -> . WRITELN LPAREN expression_list RPAREN
    (133) statement -> . WRITE LPAREN expression_list RPAREN
    (134) statement -> . USES ID SEMICOLON
    (84) if_statement -> . IF expression THEN statement ELSE statement
    (85) if_statement -> . IF expression THEN statement
    (88) assignment_statement -> . variable COLON_EQUAL expression
    (93) while_statement -> . WHILE expression DO statement
    (94) procedure_call -> . ID LPAREN expression_list RPAREN
    (95) procedure_call -> . ID
    (73) compound_statement -> . BEGIN statement_list END
    (86) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (87) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (128) empty -> .
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    READLN          shift and go to state 49
    WRITELN         shift and go to state 51
    WRITE           shift and go to state 52
    USES            shift and go to state 53
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    ID              shift and go to state 54
    BEGIN           shift and go to state 24
    FOR             shift and go to state 57
    SEMICOLON       reduce using rule 128 (empty -> .)
    END             reduce using rule 128 (empty -> .)

    statement                      shift and go to state 128
    if_statement                   shift and go to state 42
    assignment_statement           shift and go to state 43
    while_statement                shift and go to state 44
    procedure_call                 shift and go to state 45
    compound_statement             shift and go to state 46
    for_statement                  shift and go to state 47
    empty                          shift and go to state 48
    variable                       shift and go to state 50

state 72

    (76) statement_list_tail -> empty .

    END             reduce using rule 76 (statement_list_tail -> empty .)


state 73

    (130) statement -> READLN LPAREN . variable RPAREN
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    ID              shift and go to state 130

    variable                       shift and go to state 129

state 74

    (131) statement -> READLN LBRACKET . variable RBRACKET
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    ID              shift and go to state 130

    variable                       shift and go to state 131

state 75

    (88) assignment_statement -> variable COLON_EQUAL . expression
    (100) expression -> . simple_expression relop simple_expression
    (101) expression -> . simple_expression
    (113) expression -> . expression PLUS expression
    (114) expression -> . expression MINUS expression
    (115) expression -> . expression TIMES expression
    (116) expression -> . expression DIVIDE expression
    (117) expression -> . expression MOD expression
    (142) expression -> . expression AND expression
    (143) expression -> . expression OR expression
    (144) expression -> . NOT expression
    (102) simple_expression -> . term simple_expression_tail
    (107) term -> . factor term_tail
    (67) factor -> . function_call
    (118) factor -> . LPAREN expression RPAREN
    (119) factor -> . variable
    (120) factor -> . NUMBER
    (121) factor -> . STRING_LITERAL
    (66) function_call -> . ID LPAREN expression_list RPAREN
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    variable                       shift and go to state 88
    expression                     shift and go to state 132
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86

state 76

    (132) statement -> WRITELN LPAREN . expression_list RPAREN
    (96) expression_list -> . expression expression_list_tail
    (99) expression_list -> . empty
    (100) expression -> . simple_expression relop simple_expression
    (101) expression -> . simple_expression
    (113) expression -> . expression PLUS expression
    (114) expression -> . expression MINUS expression
    (115) expression -> . expression TIMES expression
    (116) expression -> . expression DIVIDE expression
    (117) expression -> . expression MOD expression
    (142) expression -> . expression AND expression
    (143) expression -> . expression OR expression
    (144) expression -> . NOT expression
    (128) empty -> .
    (102) simple_expression -> . term simple_expression_tail
    (107) term -> . factor term_tail
    (67) factor -> . function_call
    (118) factor -> . LPAREN expression RPAREN
    (119) factor -> . variable
    (120) factor -> . NUMBER
    (121) factor -> . STRING_LITERAL
    (66) function_call -> . ID LPAREN expression_list RPAREN
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    RPAREN          reduce using rule 128 (empty -> .)
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression_list                shift and go to state 133
    expression                     shift and go to state 134
    empty                          shift and go to state 135
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 77

    (133) statement -> WRITE LPAREN . expression_list RPAREN
    (96) expression_list -> . expression expression_list_tail
    (99) expression_list -> . empty
    (100) expression -> . simple_expression relop simple_expression
    (101) expression -> . simple_expression
    (113) expression -> . expression PLUS expression
    (114) expression -> . expression MINUS expression
    (115) expression -> . expression TIMES expression
    (116) expression -> . expression DIVIDE expression
    (117) expression -> . expression MOD expression
    (142) expression -> . expression AND expression
    (143) expression -> . expression OR expression
    (144) expression -> . NOT expression
    (128) empty -> .
    (102) simple_expression -> . term simple_expression_tail
    (107) term -> . factor term_tail
    (67) factor -> . function_call
    (118) factor -> . LPAREN expression RPAREN
    (119) factor -> . variable
    (120) factor -> . NUMBER
    (121) factor -> . STRING_LITERAL
    (66) function_call -> . ID LPAREN expression_list RPAREN
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    RPAREN          reduce using rule 128 (empty -> .)
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression_list                shift and go to state 136
    expression                     shift and go to state 134
    empty                          shift and go to state 135
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 78

    (134) statement -> USES ID . SEMICOLON

    SEMICOLON       shift and go to state 137


state 79

    (94) procedure_call -> ID LPAREN . expression_list RPAREN
    (96) expression_list -> . expression expression_list_tail
    (99) expression_list -> . empty
    (100) expression -> . simple_expression relop simple_expression
    (101) expression -> . simple_expression
    (113) expression -> . expression PLUS expression
    (114) expression -> . expression MINUS expression
    (115) expression -> . expression TIMES expression
    (116) expression -> . expression DIVIDE expression
    (117) expression -> . expression MOD expression
    (142) expression -> . expression AND expression
    (143) expression -> . expression OR expression
    (144) expression -> . NOT expression
    (128) empty -> .
    (102) simple_expression -> . term simple_expression_tail
    (107) term -> . factor term_tail
    (67) factor -> . function_call
    (118) factor -> . LPAREN expression RPAREN
    (119) factor -> . variable
    (120) factor -> . NUMBER
    (121) factor -> . STRING_LITERAL
    (66) function_call -> . ID LPAREN expression_list RPAREN
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    RPAREN          reduce using rule 128 (empty -> .)
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression_list                shift and go to state 138
    expression                     shift and go to state 134
    empty                          shift and go to state 135
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 80

    (90) variable -> ID LBRACKET . index_list RBRACKET
    (91) index_list -> . expression
    (92) index_list -> . index_list COMMA expression
    (100) expression -> . simple_expression relop simple_expression
    (101) expression -> . simple_expression
    (113) expression -> . expression PLUS expression
    (114) expression -> . expression MINUS expression
    (115) expression -> . expression TIMES expression
    (116) expression -> . expression DIVIDE expression
    (117) expression -> . expression MOD expression
    (142) expression -> . expression AND expression
    (143) expression -> . expression OR expression
    (144) expression -> . NOT expression
    (102) simple_expression -> . term simple_expression_tail
    (107) term -> . factor term_tail
    (67) factor -> . function_call
    (118) factor -> . LPAREN expression RPAREN
    (119) factor -> . variable
    (120) factor -> . NUMBER
    (121) factor -> . STRING_LITERAL
    (66) function_call -> . ID LPAREN expression_list RPAREN
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    index_list                     shift and go to state 139
    expression                     shift and go to state 140
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 81

    (84) if_statement -> IF expression . THEN statement ELSE statement
    (85) if_statement -> IF expression . THEN statement
    (113) expression -> expression . PLUS expression
    (114) expression -> expression . MINUS expression
    (115) expression -> expression . TIMES expression
    (116) expression -> expression . DIVIDE expression
    (117) expression -> expression . MOD expression
    (142) expression -> expression . AND expression
    (143) expression -> expression . OR expression

    THEN            shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    MOD             shift and go to state 146
    AND             shift and go to state 147
    OR              shift and go to state 148


state 82

    (100) expression -> simple_expression . relop simple_expression
    (101) expression -> simple_expression .
    (122) relop -> . LESS
    (123) relop -> . LESS_EQUAL
    (124) relop -> . GREAT
    (125) relop -> . GREAT_EQUAL
    (126) relop -> . EQUAL
    (127) relop -> . DIFFERENT

    THEN            reduce using rule 101 (expression -> simple_expression .)
    PLUS            reduce using rule 101 (expression -> simple_expression .)
    MINUS           reduce using rule 101 (expression -> simple_expression .)
    TIMES           reduce using rule 101 (expression -> simple_expression .)
    DIVIDE          reduce using rule 101 (expression -> simple_expression .)
    MOD             reduce using rule 101 (expression -> simple_expression .)
    AND             reduce using rule 101 (expression -> simple_expression .)
    OR              reduce using rule 101 (expression -> simple_expression .)
    DO              reduce using rule 101 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 101 (expression -> simple_expression .)
    END             reduce using rule 101 (expression -> simple_expression .)
    ELSE            reduce using rule 101 (expression -> simple_expression .)
    COMMA           reduce using rule 101 (expression -> simple_expression .)
    RPAREN          reduce using rule 101 (expression -> simple_expression .)
    RBRACKET        reduce using rule 101 (expression -> simple_expression .)
    TO              reduce using rule 101 (expression -> simple_expression .)
    DOWNTO          reduce using rule 101 (expression -> simple_expression .)
    LESS            shift and go to state 150
    LESS_EQUAL      shift and go to state 151
    GREAT           shift and go to state 152
    GREAT_EQUAL     shift and go to state 153
    EQUAL           shift and go to state 154
    DIFFERENT       shift and go to state 155

    relop                          shift and go to state 149

state 83

    (144) expression -> NOT . expression
    (100) expression -> . simple_expression relop simple_expression
    (101) expression -> . simple_expression
    (113) expression -> . expression PLUS expression
    (114) expression -> . expression MINUS expression
    (115) expression -> . expression TIMES expression
    (116) expression -> . expression DIVIDE expression
    (117) expression -> . expression MOD expression
    (142) expression -> . expression AND expression
    (143) expression -> . expression OR expression
    (144) expression -> . NOT expression
    (102) simple_expression -> . term simple_expression_tail
    (107) term -> . factor term_tail
    (67) factor -> . function_call
    (118) factor -> . LPAREN expression RPAREN
    (119) factor -> . variable
    (120) factor -> . NUMBER
    (121) factor -> . STRING_LITERAL
    (66) function_call -> . ID LPAREN expression_list RPAREN
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 156
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 84

    (102) simple_expression -> term . simple_expression_tail
    (103) simple_expression_tail -> . addop term
    (104) simple_expression_tail -> . empty
    (105) addop -> . PLUS
    (106) addop -> . MINUS
    (128) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 160
    MINUS           shift and go to state 161
    LESS            reduce using rule 128 (empty -> .)
    LESS_EQUAL      reduce using rule 128 (empty -> .)
    GREAT           reduce using rule 128 (empty -> .)
    GREAT_EQUAL     reduce using rule 128 (empty -> .)
    EQUAL           reduce using rule 128 (empty -> .)
    DIFFERENT       reduce using rule 128 (empty -> .)
    THEN            reduce using rule 128 (empty -> .)
    TIMES           reduce using rule 128 (empty -> .)
    DIVIDE          reduce using rule 128 (empty -> .)
    MOD             reduce using rule 128 (empty -> .)
    AND             reduce using rule 128 (empty -> .)
    OR              reduce using rule 128 (empty -> .)
    DO              reduce using rule 128 (empty -> .)
    SEMICOLON       reduce using rule 128 (empty -> .)
    END             reduce using rule 128 (empty -> .)
    ELSE            reduce using rule 128 (empty -> .)
    COMMA           reduce using rule 128 (empty -> .)
    RPAREN          reduce using rule 128 (empty -> .)
    RBRACKET        reduce using rule 128 (empty -> .)
    TO              reduce using rule 128 (empty -> .)
    DOWNTO          reduce using rule 128 (empty -> .)

  ! PLUS            [ reduce using rule 128 (empty -> .) ]
  ! MINUS           [ reduce using rule 128 (empty -> .) ]

    simple_expression_tail         shift and go to state 157
    addop                          shift and go to state 158
    empty                          shift and go to state 159

state 85

    (107) term -> factor . term_tail
    (108) term_tail -> . mulop factor
    (109) term_tail -> . empty
    (110) mulop -> . TIMES
    (111) mulop -> . DIVIDE
    (112) mulop -> . DIV
    (128) empty -> .

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    TIMES           shift and go to state 165
    DIVIDE          shift and go to state 166
    DIV             shift and go to state 167
    PLUS            reduce using rule 128 (empty -> .)
    MINUS           reduce using rule 128 (empty -> .)
    LESS            reduce using rule 128 (empty -> .)
    LESS_EQUAL      reduce using rule 128 (empty -> .)
    GREAT           reduce using rule 128 (empty -> .)
    GREAT_EQUAL     reduce using rule 128 (empty -> .)
    EQUAL           reduce using rule 128 (empty -> .)
    DIFFERENT       reduce using rule 128 (empty -> .)
    THEN            reduce using rule 128 (empty -> .)
    MOD             reduce using rule 128 (empty -> .)
    AND             reduce using rule 128 (empty -> .)
    OR              reduce using rule 128 (empty -> .)
    DO              reduce using rule 128 (empty -> .)
    SEMICOLON       reduce using rule 128 (empty -> .)
    END             reduce using rule 128 (empty -> .)
    ELSE            reduce using rule 128 (empty -> .)
    COMMA           reduce using rule 128 (empty -> .)
    RPAREN          reduce using rule 128 (empty -> .)
    RBRACKET        reduce using rule 128 (empty -> .)
    TO              reduce using rule 128 (empty -> .)
    DOWNTO          reduce using rule 128 (empty -> .)

  ! TIMES           [ reduce using rule 128 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 128 (empty -> .) ]

    term_tail                      shift and go to state 162
    mulop                          shift and go to state 163
    empty                          shift and go to state 164

state 86

    (67) factor -> function_call .

    TIMES           reduce using rule 67 (factor -> function_call .)
    DIVIDE          reduce using rule 67 (factor -> function_call .)
    DIV             reduce using rule 67 (factor -> function_call .)
    PLUS            reduce using rule 67 (factor -> function_call .)
    MINUS           reduce using rule 67 (factor -> function_call .)
    LESS            reduce using rule 67 (factor -> function_call .)
    LESS_EQUAL      reduce using rule 67 (factor -> function_call .)
    GREAT           reduce using rule 67 (factor -> function_call .)
    GREAT_EQUAL     reduce using rule 67 (factor -> function_call .)
    EQUAL           reduce using rule 67 (factor -> function_call .)
    DIFFERENT       reduce using rule 67 (factor -> function_call .)
    THEN            reduce using rule 67 (factor -> function_call .)
    MOD             reduce using rule 67 (factor -> function_call .)
    AND             reduce using rule 67 (factor -> function_call .)
    OR              reduce using rule 67 (factor -> function_call .)
    DO              reduce using rule 67 (factor -> function_call .)
    SEMICOLON       reduce using rule 67 (factor -> function_call .)
    END             reduce using rule 67 (factor -> function_call .)
    ELSE            reduce using rule 67 (factor -> function_call .)
    COMMA           reduce using rule 67 (factor -> function_call .)
    RPAREN          reduce using rule 67 (factor -> function_call .)
    RBRACKET        reduce using rule 67 (factor -> function_call .)
    TO              reduce using rule 67 (factor -> function_call .)
    DOWNTO          reduce using rule 67 (factor -> function_call .)


state 87

    (118) factor -> LPAREN . expression RPAREN
    (100) expression -> . simple_expression relop simple_expression
    (101) expression -> . simple_expression
    (113) expression -> . expression PLUS expression
    (114) expression -> . expression MINUS expression
    (115) expression -> . expression TIMES expression
    (116) expression -> . expression DIVIDE expression
    (117) expression -> . expression MOD expression
    (142) expression -> . expression AND expression
    (143) expression -> . expression OR expression
    (144) expression -> . NOT expression
    (102) simple_expression -> . term simple_expression_tail
    (107) term -> . factor term_tail
    (67) factor -> . function_call
    (118) factor -> . LPAREN expression RPAREN
    (119) factor -> . variable
    (120) factor -> . NUMBER
    (121) factor -> . STRING_LITERAL
    (66) function_call -> . ID LPAREN expression_list RPAREN
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 168
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 88

    (119) factor -> variable .

    TIMES           reduce using rule 119 (factor -> variable .)
    DIVIDE          reduce using rule 119 (factor -> variable .)
    DIV             reduce using rule 119 (factor -> variable .)
    PLUS            reduce using rule 119 (factor -> variable .)
    MINUS           reduce using rule 119 (factor -> variable .)
    LESS            reduce using rule 119 (factor -> variable .)
    LESS_EQUAL      reduce using rule 119 (factor -> variable .)
    GREAT           reduce using rule 119 (factor -> variable .)
    GREAT_EQUAL     reduce using rule 119 (factor -> variable .)
    EQUAL           reduce using rule 119 (factor -> variable .)
    DIFFERENT       reduce using rule 119 (factor -> variable .)
    THEN            reduce using rule 119 (factor -> variable .)
    MOD             reduce using rule 119 (factor -> variable .)
    AND             reduce using rule 119 (factor -> variable .)
    OR              reduce using rule 119 (factor -> variable .)
    DO              reduce using rule 119 (factor -> variable .)
    SEMICOLON       reduce using rule 119 (factor -> variable .)
    END             reduce using rule 119 (factor -> variable .)
    ELSE            reduce using rule 119 (factor -> variable .)
    COMMA           reduce using rule 119 (factor -> variable .)
    RPAREN          reduce using rule 119 (factor -> variable .)
    RBRACKET        reduce using rule 119 (factor -> variable .)
    TO              reduce using rule 119 (factor -> variable .)
    DOWNTO          reduce using rule 119 (factor -> variable .)


state 89

    (120) factor -> NUMBER .

    TIMES           reduce using rule 120 (factor -> NUMBER .)
    DIVIDE          reduce using rule 120 (factor -> NUMBER .)
    DIV             reduce using rule 120 (factor -> NUMBER .)
    PLUS            reduce using rule 120 (factor -> NUMBER .)
    MINUS           reduce using rule 120 (factor -> NUMBER .)
    LESS            reduce using rule 120 (factor -> NUMBER .)
    LESS_EQUAL      reduce using rule 120 (factor -> NUMBER .)
    GREAT           reduce using rule 120 (factor -> NUMBER .)
    GREAT_EQUAL     reduce using rule 120 (factor -> NUMBER .)
    EQUAL           reduce using rule 120 (factor -> NUMBER .)
    DIFFERENT       reduce using rule 120 (factor -> NUMBER .)
    THEN            reduce using rule 120 (factor -> NUMBER .)
    MOD             reduce using rule 120 (factor -> NUMBER .)
    AND             reduce using rule 120 (factor -> NUMBER .)
    OR              reduce using rule 120 (factor -> NUMBER .)
    DO              reduce using rule 120 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 120 (factor -> NUMBER .)
    END             reduce using rule 120 (factor -> NUMBER .)
    ELSE            reduce using rule 120 (factor -> NUMBER .)
    COMMA           reduce using rule 120 (factor -> NUMBER .)
    RPAREN          reduce using rule 120 (factor -> NUMBER .)
    RBRACKET        reduce using rule 120 (factor -> NUMBER .)
    TO              reduce using rule 120 (factor -> NUMBER .)
    DOWNTO          reduce using rule 120 (factor -> NUMBER .)


state 90

    (121) factor -> STRING_LITERAL .

    TIMES           reduce using rule 121 (factor -> STRING_LITERAL .)
    DIVIDE          reduce using rule 121 (factor -> STRING_LITERAL .)
    DIV             reduce using rule 121 (factor -> STRING_LITERAL .)
    PLUS            reduce using rule 121 (factor -> STRING_LITERAL .)
    MINUS           reduce using rule 121 (factor -> STRING_LITERAL .)
    LESS            reduce using rule 121 (factor -> STRING_LITERAL .)
    LESS_EQUAL      reduce using rule 121 (factor -> STRING_LITERAL .)
    GREAT           reduce using rule 121 (factor -> STRING_LITERAL .)
    GREAT_EQUAL     reduce using rule 121 (factor -> STRING_LITERAL .)
    EQUAL           reduce using rule 121 (factor -> STRING_LITERAL .)
    DIFFERENT       reduce using rule 121 (factor -> STRING_LITERAL .)
    THEN            reduce using rule 121 (factor -> STRING_LITERAL .)
    MOD             reduce using rule 121 (factor -> STRING_LITERAL .)
    AND             reduce using rule 121 (factor -> STRING_LITERAL .)
    OR              reduce using rule 121 (factor -> STRING_LITERAL .)
    DO              reduce using rule 121 (factor -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 121 (factor -> STRING_LITERAL .)
    END             reduce using rule 121 (factor -> STRING_LITERAL .)
    ELSE            reduce using rule 121 (factor -> STRING_LITERAL .)
    COMMA           reduce using rule 121 (factor -> STRING_LITERAL .)
    RPAREN          reduce using rule 121 (factor -> STRING_LITERAL .)
    RBRACKET        reduce using rule 121 (factor -> STRING_LITERAL .)
    TO              reduce using rule 121 (factor -> STRING_LITERAL .)
    DOWNTO          reduce using rule 121 (factor -> STRING_LITERAL .)


state 91

    (66) function_call -> ID . LPAREN expression_list RPAREN
    (89) variable -> ID .
    (90) variable -> ID . LBRACKET index_list RBRACKET

    LPAREN          shift and go to state 169
    TIMES           reduce using rule 89 (variable -> ID .)
    DIVIDE          reduce using rule 89 (variable -> ID .)
    DIV             reduce using rule 89 (variable -> ID .)
    PLUS            reduce using rule 89 (variable -> ID .)
    MINUS           reduce using rule 89 (variable -> ID .)
    LESS            reduce using rule 89 (variable -> ID .)
    LESS_EQUAL      reduce using rule 89 (variable -> ID .)
    GREAT           reduce using rule 89 (variable -> ID .)
    GREAT_EQUAL     reduce using rule 89 (variable -> ID .)
    EQUAL           reduce using rule 89 (variable -> ID .)
    DIFFERENT       reduce using rule 89 (variable -> ID .)
    THEN            reduce using rule 89 (variable -> ID .)
    MOD             reduce using rule 89 (variable -> ID .)
    AND             reduce using rule 89 (variable -> ID .)
    OR              reduce using rule 89 (variable -> ID .)
    DO              reduce using rule 89 (variable -> ID .)
    SEMICOLON       reduce using rule 89 (variable -> ID .)
    END             reduce using rule 89 (variable -> ID .)
    ELSE            reduce using rule 89 (variable -> ID .)
    COMMA           reduce using rule 89 (variable -> ID .)
    RPAREN          reduce using rule 89 (variable -> ID .)
    RBRACKET        reduce using rule 89 (variable -> ID .)
    TO              reduce using rule 89 (variable -> ID .)
    DOWNTO          reduce using rule 89 (variable -> ID .)
    LBRACKET        shift and go to state 80


state 92

    (93) while_statement -> WHILE expression . DO statement
    (113) expression -> expression . PLUS expression
    (114) expression -> expression . MINUS expression
    (115) expression -> expression . TIMES expression
    (116) expression -> expression . DIVIDE expression
    (117) expression -> expression . MOD expression
    (142) expression -> expression . AND expression
    (143) expression -> expression . OR expression

    DO              shift and go to state 170
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    MOD             shift and go to state 146
    AND             shift and go to state 147
    OR              shift and go to state 148


state 93

    (86) for_statement -> FOR ID . COLON_EQUAL expression TO expression DO statement
    (87) for_statement -> FOR ID . COLON_EQUAL expression DOWNTO expression DO statement

    COLON_EQUAL     shift and go to state 171


state 94

    (12) id_list -> id_list COMMA ID .

    SEMICOLON       reduce using rule 12 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 12 (id_list -> id_list COMMA ID .)
    COLON           reduce using rule 12 (id_list -> id_list COMMA ID .)
    RPAREN          reduce using rule 12 (id_list -> id_list COMMA ID .)


state 95

    (138) constant -> ID EQUAL CHARACTER_LITERAL . SEMICOLON

    SEMICOLON       shift and go to state 172


state 96

    (139) constant -> ID EQUAL NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 173


state 97

    (140) constant -> ID EQUAL STRING_LITERAL . SEMICOLON

    SEMICOLON       shift and go to state 174


state 98

    (141) constant -> ID EQUAL BOOLEAN_LITERAL . SEMICOLON

    SEMICOLON       shift and go to state 175


state 99

    (34) type_specifier -> ID .

    SEMICOLON       reduce using rule 34 (type_specifier -> ID .)
    RPAREN          reduce using rule 34 (type_specifier -> ID .)
    ID              reduce using rule 34 (type_specifier -> ID .)
    CASE            reduce using rule 34 (type_specifier -> ID .)
    END             reduce using rule 34 (type_specifier -> ID .)
    CONSTRUCTOR     reduce using rule 34 (type_specifier -> ID .)
    PROCEDURE       reduce using rule 34 (type_specifier -> ID .)
    FUNCTION        reduce using rule 34 (type_specifier -> ID .)
    DESTRUCTOR      reduce using rule 34 (type_specifier -> ID .)
    OF              reduce using rule 34 (type_specifier -> ID .)


state 100

    (21) type_definition -> ID EQUAL type_specifier . SEMICOLON

    SEMICOLON       shift and go to state 176


state 101

    (22) type_specifier -> ARRAY . LBRACKET type_expression RBRACKET OF type_specifier

    LBRACKET        shift and go to state 177


state 102

    (23) type_specifier -> subrange .

    SEMICOLON       reduce using rule 23 (type_specifier -> subrange .)
    RPAREN          reduce using rule 23 (type_specifier -> subrange .)
    ID              reduce using rule 23 (type_specifier -> subrange .)
    CASE            reduce using rule 23 (type_specifier -> subrange .)
    END             reduce using rule 23 (type_specifier -> subrange .)
    CONSTRUCTOR     reduce using rule 23 (type_specifier -> subrange .)
    PROCEDURE       reduce using rule 23 (type_specifier -> subrange .)
    FUNCTION        reduce using rule 23 (type_specifier -> subrange .)
    DESTRUCTOR      reduce using rule 23 (type_specifier -> subrange .)
    OF              reduce using rule 23 (type_specifier -> subrange .)


state 103

    (24) type_specifier -> FILE . OF type_specifier

    OF              shift and go to state 178


state 104

    (25) type_specifier -> SET . OF type_specifier

    OF              shift and go to state 179


state 105

    (26) type_specifier -> RECORD . field_list case_part END
    (38) field_list -> . field_list field
    (39) field_list -> . field
    (40) field_list -> . empty
    (41) field -> . id_list COLON type_specifier SEMICOLON
    (42) field -> . id_list COLON type_specifier
    (128) empty -> .
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

  ! shift/reduce conflict for ID resolved as shift
    CASE            reduce using rule 128 (empty -> .)
    END             reduce using rule 128 (empty -> .)
    ID              shift and go to state 28

  ! ID              [ reduce using rule 128 (empty -> .) ]

    field_list                     shift and go to state 180
    field                          shift and go to state 123
    empty                          shift and go to state 124
    id_list                        shift and go to state 125

state 106

    (27) type_specifier -> OBJECT . field_list method_list END
    (38) field_list -> . field_list field
    (39) field_list -> . field
    (40) field_list -> . empty
    (41) field -> . id_list COLON type_specifier SEMICOLON
    (42) field -> . id_list COLON type_specifier
    (128) empty -> .
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

  ! shift/reduce conflict for ID resolved as shift
    CONSTRUCTOR     reduce using rule 128 (empty -> .)
    PROCEDURE       reduce using rule 128 (empty -> .)
    FUNCTION        reduce using rule 128 (empty -> .)
    DESTRUCTOR      reduce using rule 128 (empty -> .)
    END             reduce using rule 128 (empty -> .)
    ID              shift and go to state 28

  ! ID              [ reduce using rule 128 (empty -> .) ]

    field_list                     shift and go to state 181
    field                          shift and go to state 123
    empty                          shift and go to state 124
    id_list                        shift and go to state 125

state 107

    (28) type_specifier -> LPAREN . id_list RPAREN
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    ID              shift and go to state 28

    id_list                        shift and go to state 182

state 108

    (29) type_specifier -> BOOLEAN_LITERAL .

    SEMICOLON       reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)
    RPAREN          reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)
    ID              reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)
    CASE            reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)
    END             reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)
    CONSTRUCTOR     reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)
    PROCEDURE       reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)
    FUNCTION        reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)
    DESTRUCTOR      reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)
    OF              reduce using rule 29 (type_specifier -> BOOLEAN_LITERAL .)


state 109

    (30) type_specifier -> INTEGER .

    SEMICOLON       reduce using rule 30 (type_specifier -> INTEGER .)
    RPAREN          reduce using rule 30 (type_specifier -> INTEGER .)
    ID              reduce using rule 30 (type_specifier -> INTEGER .)
    CASE            reduce using rule 30 (type_specifier -> INTEGER .)
    END             reduce using rule 30 (type_specifier -> INTEGER .)
    CONSTRUCTOR     reduce using rule 30 (type_specifier -> INTEGER .)
    PROCEDURE       reduce using rule 30 (type_specifier -> INTEGER .)
    FUNCTION        reduce using rule 30 (type_specifier -> INTEGER .)
    DESTRUCTOR      reduce using rule 30 (type_specifier -> INTEGER .)
    OF              reduce using rule 30 (type_specifier -> INTEGER .)


state 110

    (31) type_specifier -> BYTE .

    SEMICOLON       reduce using rule 31 (type_specifier -> BYTE .)
    RPAREN          reduce using rule 31 (type_specifier -> BYTE .)
    ID              reduce using rule 31 (type_specifier -> BYTE .)
    CASE            reduce using rule 31 (type_specifier -> BYTE .)
    END             reduce using rule 31 (type_specifier -> BYTE .)
    CONSTRUCTOR     reduce using rule 31 (type_specifier -> BYTE .)
    PROCEDURE       reduce using rule 31 (type_specifier -> BYTE .)
    FUNCTION        reduce using rule 31 (type_specifier -> BYTE .)
    DESTRUCTOR      reduce using rule 31 (type_specifier -> BYTE .)
    OF              reduce using rule 31 (type_specifier -> BYTE .)


state 111

    (32) type_specifier -> CHAR .

    SEMICOLON       reduce using rule 32 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 32 (type_specifier -> CHAR .)
    ID              reduce using rule 32 (type_specifier -> CHAR .)
    CASE            reduce using rule 32 (type_specifier -> CHAR .)
    END             reduce using rule 32 (type_specifier -> CHAR .)
    CONSTRUCTOR     reduce using rule 32 (type_specifier -> CHAR .)
    PROCEDURE       reduce using rule 32 (type_specifier -> CHAR .)
    FUNCTION        reduce using rule 32 (type_specifier -> CHAR .)
    DESTRUCTOR      reduce using rule 32 (type_specifier -> CHAR .)
    OF              reduce using rule 32 (type_specifier -> CHAR .)


state 112

    (33) type_specifier -> STRING . LBRACKET NUMBER RBRACKET

    LBRACKET        shift and go to state 183


state 113

    (37) subrange -> NUMBER . DOTDOT NUMBER

    DOTDOT          shift and go to state 184


state 114

    (55) type_specifier -> LONGINT .

    SEMICOLON       reduce using rule 55 (type_specifier -> LONGINT .)
    RPAREN          reduce using rule 55 (type_specifier -> LONGINT .)
    ID              reduce using rule 55 (type_specifier -> LONGINT .)
    CASE            reduce using rule 55 (type_specifier -> LONGINT .)
    END             reduce using rule 55 (type_specifier -> LONGINT .)
    CONSTRUCTOR     reduce using rule 55 (type_specifier -> LONGINT .)
    PROCEDURE       reduce using rule 55 (type_specifier -> LONGINT .)
    FUNCTION        reduce using rule 55 (type_specifier -> LONGINT .)
    DESTRUCTOR      reduce using rule 55 (type_specifier -> LONGINT .)
    OF              reduce using rule 55 (type_specifier -> LONGINT .)


state 115

    (16) declaration -> id_list COLON type_specifier . SEMICOLON

    SEMICOLON       shift and go to state 185


state 116

    (64) function_declaration -> FUNCTION ID LPAREN parameter_list . RPAREN COLON type_specifier SEMICOLON block SEMICOLON
    (65) function_declaration -> FUNCTION ID LPAREN parameter_list . RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON
    (69) parameter_list -> parameter_list . SEMICOLON parameter

    RPAREN          shift and go to state 186
    SEMICOLON       shift and go to state 187


state 117

    (68) parameter_list -> parameter .

    RPAREN          reduce using rule 68 (parameter_list -> parameter .)
    SEMICOLON       reduce using rule 68 (parameter_list -> parameter .)


state 118

    (70) parameter_list -> empty .

    RPAREN          reduce using rule 70 (parameter_list -> empty .)
    SEMICOLON       reduce using rule 70 (parameter_list -> empty .)


state 119

    (71) parameter -> id_list . COLON type_specifier
    (12) id_list -> id_list . COMMA ID

    COLON           shift and go to state 188
    COMMA           shift and go to state 59


state 120

    (72) parameter -> VAR . id_list COLON type_specifier
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    ID              shift and go to state 28

    id_list                        shift and go to state 189

state 121

    (58) procedure_declaration -> PROCEDURE ID LPAREN field_list . RPAREN SEMICOLON
    (61) procedure_declaration -> PROCEDURE ID LPAREN field_list . RPAREN SEMICOLON FORWARD SEMICOLON
    (38) field_list -> field_list . field
    (41) field -> . id_list COLON type_specifier SEMICOLON
    (42) field -> . id_list COLON type_specifier
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 190
    ID              shift and go to state 28

    field                          shift and go to state 191
    id_list                        shift and go to state 125

state 122

    (59) procedure_declaration -> PROCEDURE ID LPAREN RPAREN . SEMICOLON block SEMICOLON
    (62) procedure_declaration -> PROCEDURE ID LPAREN RPAREN . SEMICOLON FORWARD SEMICOLON

    SEMICOLON       shift and go to state 192


state 123

    (39) field_list -> field .

    RPAREN          reduce using rule 39 (field_list -> field .)
    ID              reduce using rule 39 (field_list -> field .)
    CASE            reduce using rule 39 (field_list -> field .)
    END             reduce using rule 39 (field_list -> field .)
    CONSTRUCTOR     reduce using rule 39 (field_list -> field .)
    PROCEDURE       reduce using rule 39 (field_list -> field .)
    FUNCTION        reduce using rule 39 (field_list -> field .)
    DESTRUCTOR      reduce using rule 39 (field_list -> field .)


state 124

    (40) field_list -> empty .

    RPAREN          reduce using rule 40 (field_list -> empty .)
    ID              reduce using rule 40 (field_list -> empty .)
    CASE            reduce using rule 40 (field_list -> empty .)
    END             reduce using rule 40 (field_list -> empty .)
    CONSTRUCTOR     reduce using rule 40 (field_list -> empty .)
    PROCEDURE       reduce using rule 40 (field_list -> empty .)
    FUNCTION        reduce using rule 40 (field_list -> empty .)
    DESTRUCTOR      reduce using rule 40 (field_list -> empty .)


state 125

    (41) field -> id_list . COLON type_specifier SEMICOLON
    (42) field -> id_list . COLON type_specifier
    (12) id_list -> id_list . COMMA ID

    COLON           shift and go to state 193
    COMMA           shift and go to state 59


state 126

    (60) procedure_declaration -> PROCEDURE ID SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 194


state 127

    (63) procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD . SEMICOLON

    SEMICOLON       shift and go to state 195


state 128

    (75) statement_list_tail -> SEMICOLON statement . statement_list_tail
    (75) statement_list_tail -> . SEMICOLON statement statement_list_tail
    (76) statement_list_tail -> . empty
    (128) empty -> .

    SEMICOLON       shift and go to state 71
    END             reduce using rule 128 (empty -> .)

    statement_list_tail            shift and go to state 196
    empty                          shift and go to state 72

state 129

    (130) statement -> READLN LPAREN variable . RPAREN

    RPAREN          shift and go to state 197


state 130

    (89) variable -> ID .
    (90) variable -> ID . LBRACKET index_list RBRACKET

    RPAREN          reduce using rule 89 (variable -> ID .)
    RBRACKET        reduce using rule 89 (variable -> ID .)
    LBRACKET        shift and go to state 80


state 131

    (131) statement -> READLN LBRACKET variable . RBRACKET

    RBRACKET        shift and go to state 198


state 132

    (88) assignment_statement -> variable COLON_EQUAL expression .
    (113) expression -> expression . PLUS expression
    (114) expression -> expression . MINUS expression
    (115) expression -> expression . TIMES expression
    (116) expression -> expression . DIVIDE expression
    (117) expression -> expression . MOD expression
    (142) expression -> expression . AND expression
    (143) expression -> expression . OR expression

    SEMICOLON       reduce using rule 88 (assignment_statement -> variable COLON_EQUAL expression .)
    END             reduce using rule 88 (assignment_statement -> variable COLON_EQUAL expression .)
    ELSE            reduce using rule 88 (assignment_statement -> variable COLON_EQUAL expression .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    MOD             shift and go to state 146
    AND             shift and go to state 147
    OR              shift and go to state 148


state 133

    (132) statement -> WRITELN LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 199


state 134

    (96) expression_list -> expression . expression_list_tail
    (113) expression -> expression . PLUS expression
    (114) expression -> expression . MINUS expression
    (115) expression -> expression . TIMES expression
    (116) expression -> expression . DIVIDE expression
    (117) expression -> expression . MOD expression
    (142) expression -> expression . AND expression
    (143) expression -> expression . OR expression
    (97) expression_list_tail -> . COMMA expression expression_list_tail
    (98) expression_list_tail -> . empty
    (128) empty -> .

    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    MOD             shift and go to state 146
    AND             shift and go to state 147
    OR              shift and go to state 148
    COMMA           shift and go to state 201
    RPAREN          reduce using rule 128 (empty -> .)

    expression_list_tail           shift and go to state 200
    empty                          shift and go to state 202

state 135

    (99) expression_list -> empty .

    RPAREN          reduce using rule 99 (expression_list -> empty .)


state 136

    (133) statement -> WRITE LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 203


state 137

    (134) statement -> USES ID SEMICOLON .

    SEMICOLON       reduce using rule 134 (statement -> USES ID SEMICOLON .)
    END             reduce using rule 134 (statement -> USES ID SEMICOLON .)
    ELSE            reduce using rule 134 (statement -> USES ID SEMICOLON .)


state 138

    (94) procedure_call -> ID LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 204


state 139

    (90) variable -> ID LBRACKET index_list . RBRACKET
    (92) index_list -> index_list . COMMA expression

    RBRACKET        shift and go to state 205
    COMMA           shift and go to state 206


state 140

    (91) index_list -> expression .
    (113) expression -> expression . PLUS expression
    (114) expression -> expression . MINUS expression
    (115) expression -> expression . TIMES expression
    (116) expression -> expression . DIVIDE expression
    (117) expression -> expression . MOD expression
    (142) expression -> expression . AND expression
    (143) expression -> expression . OR expression

    RBRACKET        reduce using rule 91 (index_list -> expression .)
    COMMA           reduce using rule 91 (index_list -> expression .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    MOD             shift and go to state 146
    AND             shift and go to state 147
    OR              shift and go to state 148


state 141

    (84) if_statement -> IF expression THEN . statement ELSE statement
    (85) if_statement -> IF expression THEN . statement
    (77) statement -> . if_statement
    (78) statement -> . assignment_statement
    (79) statement -> . while_statement
    (80) statement -> . procedure_call
    (81) statement -> . compound_statement
    (82) statement -> . for_statement
    (83) statement -> . empty
    (129) statement -> . READLN
    (130) statement -> . READLN LPAREN variable RPAREN
    (131) statement -> . READLN LBRACKET variable RBRACKET
    (132) statement -> . WRITELN LPAREN expression_list RPAREN
    (133) statement -> . WRITE LPAREN expression_list RPAREN
    (134) statement -> . USES ID SEMICOLON
    (84) if_statement -> . IF expression THEN statement ELSE statement
    (85) if_statement -> . IF expression THEN statement
    (88) assignment_statement -> . variable COLON_EQUAL expression
    (93) while_statement -> . WHILE expression DO statement
    (94) procedure_call -> . ID LPAREN expression_list RPAREN
    (95) procedure_call -> . ID
    (73) compound_statement -> . BEGIN statement_list END
    (86) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (87) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (128) empty -> .
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    READLN          shift and go to state 49
    WRITELN         shift and go to state 51
    WRITE           shift and go to state 52
    USES            shift and go to state 53
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    ID              shift and go to state 54
    BEGIN           shift and go to state 24
    FOR             shift and go to state 57
    ELSE            reduce using rule 128 (empty -> .)
    SEMICOLON       reduce using rule 128 (empty -> .)
    END             reduce using rule 128 (empty -> .)

    statement                      shift and go to state 207
    if_statement                   shift and go to state 42
    assignment_statement           shift and go to state 43
    while_statement                shift and go to state 44
    procedure_call                 shift and go to state 45
    compound_statement             shift and go to state 46
    for_statement                  shift and go to state 47
    empty                          shift and go to state 48
    variable                       shift and go to state 50

state 142

    (113) expression -> expression PLUS . expression
    (100) expression -> . simple_expression relop simple_expression
    (101) expression -> . simple_expression
    (113) expression -> . expression PLUS expression
    (114) expression -> . expression MINUS expression
    (115) expression -> . expression TIMES expression
    (116) expression -> . expression DIVIDE expression
    (117) expression -> . expression MOD expression
    (142) expression -> . expression AND expression
    (143) expression -> . expression OR expression
    (144) expression -> . NOT expression
    (102) simple_expression -> . term simple_expression_tail
    (107) term -> . factor term_tail
    (67) factor -> . function_call
    (118) factor -> . LPAREN expression RPAREN
    (119) factor -> . variable
    (120) factor -> . NUMBER
    (121) factor -> . STRING_LITERAL
    (66) function_call -> . ID LPAREN expression_list RPAREN
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 208
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 143

    (114) expression -> expression MINUS . expression
    (100) expression -> . simple_expression relop simple_expression
    (101) expression -> . simple_expression
    (113) expression -> . expression PLUS expression
    (114) expression -> . expression MINUS expression
    (115) expression -> . expression TIMES expression
    (116) expression -> . expression DIVIDE expression
    (117) expression -> . expression MOD expression
    (142) expression -> . expression AND expression
    (143) expression -> . expression OR expression
    (144) expression -> . NOT expression
    (102) simple_expression -> . term simple_expression_tail
    (107) term -> . factor term_tail
    (67) factor -> . function_call
    (118) factor -> . LPAREN expression RPAREN
    (119) factor -> . variable
    (120) factor -> . NUMBER
    (121) factor -> . STRING_LITERAL
    (66) function_call -> . ID LPAREN expression_list RPAREN
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 209
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 144

    (115) expression -> expression TIMES . expression
    (100) expression -> . simple_expression relop simple_expression
    (101) expression -> . simple_expression
    (113) expression -> . expression PLUS expression
    (114) expression -> . expression MINUS expression
    (115) expression -> . expression TIMES expression
    (116) expression -> . expression DIVIDE expression
    (117) expression -> . expression MOD expression
    (142) expression -> . expression AND expression
    (143) expression -> . expression OR expression
    (144) expression -> . NOT expression
    (102) simple_expression -> . term simple_expression_tail
    (107) term -> . factor term_tail
    (67) factor -> . function_call
    (118) factor -> . LPAREN expression RPAREN
    (119) factor -> . variable
    (120) factor -> . NUMBER
    (121) factor -> . STRING_LITERAL
    (66) function_call -> . ID LPAREN expression_list RPAREN
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 210
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 145

    (116) expression -> expression DIVIDE . expression
    (100) expression -> . simple_expression relop simple_expression
    (101) expression -> . simple_expression
    (113) expression -> . expression PLUS expression
    (114) expression -> . expression MINUS expression
    (115) expression -> . expression TIMES expression
    (116) expression -> . expression DIVIDE expression
    (117) expression -> . expression MOD expression
    (142) expression -> . expression AND expression
    (143) expression -> . expression OR expression
    (144) expression -> . NOT expression
    (102) simple_expression -> . term simple_expression_tail
    (107) term -> . factor term_tail
    (67) factor -> . function_call
    (118) factor -> . LPAREN expression RPAREN
    (119) factor -> . variable
    (120) factor -> . NUMBER
    (121) factor -> . STRING_LITERAL
    (66) function_call -> . ID LPAREN expression_list RPAREN
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 211
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 146

    (117) expression -> expression MOD . expression
    (100) expression -> . simple_expression relop simple_expression
    (101) expression -> . simple_expression
    (113) expression -> . expression PLUS expression
    (114) expression -> . expression MINUS expression
    (115) expression -> . expression TIMES expression
    (116) expression -> . expression DIVIDE expression
    (117) expression -> . expression MOD expression
    (142) expression -> . expression AND expression
    (143) expression -> . expression OR expression
    (144) expression -> . NOT expression
    (102) simple_expression -> . term simple_expression_tail
    (107) term -> . factor term_tail
    (67) factor -> . function_call
    (118) factor -> . LPAREN expression RPAREN
    (119) factor -> . variable
    (120) factor -> . NUMBER
    (121) factor -> . STRING_LITERAL
    (66) function_call -> . ID LPAREN expression_list RPAREN
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 212
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 147

    (142) expression -> expression AND . expression
    (100) expression -> . simple_expression relop simple_expression
    (101) expression -> . simple_expression
    (113) expression -> . expression PLUS expression
    (114) expression -> . expression MINUS expression
    (115) expression -> . expression TIMES expression
    (116) expression -> . expression DIVIDE expression
    (117) expression -> . expression MOD expression
    (142) expression -> . expression AND expression
    (143) expression -> . expression OR expression
    (144) expression -> . NOT expression
    (102) simple_expression -> . term simple_expression_tail
    (107) term -> . factor term_tail
    (67) factor -> . function_call
    (118) factor -> . LPAREN expression RPAREN
    (119) factor -> . variable
    (120) factor -> . NUMBER
    (121) factor -> . STRING_LITERAL
    (66) function_call -> . ID LPAREN expression_list RPAREN
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 213
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 148

    (143) expression -> expression OR . expression
    (100) expression -> . simple_expression relop simple_expression
    (101) expression -> . simple_expression
    (113) expression -> . expression PLUS expression
    (114) expression -> . expression MINUS expression
    (115) expression -> . expression TIMES expression
    (116) expression -> . expression DIVIDE expression
    (117) expression -> . expression MOD expression
    (142) expression -> . expression AND expression
    (143) expression -> . expression OR expression
    (144) expression -> . NOT expression
    (102) simple_expression -> . term simple_expression_tail
    (107) term -> . factor term_tail
    (67) factor -> . function_call
    (118) factor -> . LPAREN expression RPAREN
    (119) factor -> . variable
    (120) factor -> . NUMBER
    (121) factor -> . STRING_LITERAL
    (66) function_call -> . ID LPAREN expression_list RPAREN
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 214
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 149

    (100) expression -> simple_expression relop . simple_expression
    (102) simple_expression -> . term simple_expression_tail
    (107) term -> . factor term_tail
    (67) factor -> . function_call
    (118) factor -> . LPAREN expression RPAREN
    (119) factor -> . variable
    (120) factor -> . NUMBER
    (121) factor -> . STRING_LITERAL
    (66) function_call -> . ID LPAREN expression_list RPAREN
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    simple_expression              shift and go to state 215
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 150

    (122) relop -> LESS .

    LPAREN          reduce using rule 122 (relop -> LESS .)
    NUMBER          reduce using rule 122 (relop -> LESS .)
    STRING_LITERAL  reduce using rule 122 (relop -> LESS .)
    ID              reduce using rule 122 (relop -> LESS .)


state 151

    (123) relop -> LESS_EQUAL .

    LPAREN          reduce using rule 123 (relop -> LESS_EQUAL .)
    NUMBER          reduce using rule 123 (relop -> LESS_EQUAL .)
    STRING_LITERAL  reduce using rule 123 (relop -> LESS_EQUAL .)
    ID              reduce using rule 123 (relop -> LESS_EQUAL .)


state 152

    (124) relop -> GREAT .

    LPAREN          reduce using rule 124 (relop -> GREAT .)
    NUMBER          reduce using rule 124 (relop -> GREAT .)
    STRING_LITERAL  reduce using rule 124 (relop -> GREAT .)
    ID              reduce using rule 124 (relop -> GREAT .)


state 153

    (125) relop -> GREAT_EQUAL .

    LPAREN          reduce using rule 125 (relop -> GREAT_EQUAL .)
    NUMBER          reduce using rule 125 (relop -> GREAT_EQUAL .)
    STRING_LITERAL  reduce using rule 125 (relop -> GREAT_EQUAL .)
    ID              reduce using rule 125 (relop -> GREAT_EQUAL .)


state 154

    (126) relop -> EQUAL .

    LPAREN          reduce using rule 126 (relop -> EQUAL .)
    NUMBER          reduce using rule 126 (relop -> EQUAL .)
    STRING_LITERAL  reduce using rule 126 (relop -> EQUAL .)
    ID              reduce using rule 126 (relop -> EQUAL .)


state 155

    (127) relop -> DIFFERENT .

    LPAREN          reduce using rule 127 (relop -> DIFFERENT .)
    NUMBER          reduce using rule 127 (relop -> DIFFERENT .)
    STRING_LITERAL  reduce using rule 127 (relop -> DIFFERENT .)
    ID              reduce using rule 127 (relop -> DIFFERENT .)


state 156

    (144) expression -> NOT expression .
    (113) expression -> expression . PLUS expression
    (114) expression -> expression . MINUS expression
    (115) expression -> expression . TIMES expression
    (116) expression -> expression . DIVIDE expression
    (117) expression -> expression . MOD expression
    (142) expression -> expression . AND expression
    (143) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 144 (expression -> NOT expression .)
    DO              reduce using rule 144 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 144 (expression -> NOT expression .)
    END             reduce using rule 144 (expression -> NOT expression .)
    ELSE            reduce using rule 144 (expression -> NOT expression .)
    COMMA           reduce using rule 144 (expression -> NOT expression .)
    RPAREN          reduce using rule 144 (expression -> NOT expression .)
    RBRACKET        reduce using rule 144 (expression -> NOT expression .)
    TO              reduce using rule 144 (expression -> NOT expression .)
    DOWNTO          reduce using rule 144 (expression -> NOT expression .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    MOD             shift and go to state 146
    AND             shift and go to state 147
    OR              shift and go to state 148

  ! PLUS            [ reduce using rule 144 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 144 (expression -> NOT expression .) ]
  ! TIMES           [ reduce using rule 144 (expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 144 (expression -> NOT expression .) ]
  ! MOD             [ reduce using rule 144 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 144 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 144 (expression -> NOT expression .) ]


state 157

    (102) simple_expression -> term simple_expression_tail .

    LESS            reduce using rule 102 (simple_expression -> term simple_expression_tail .)
    LESS_EQUAL      reduce using rule 102 (simple_expression -> term simple_expression_tail .)
    GREAT           reduce using rule 102 (simple_expression -> term simple_expression_tail .)
    GREAT_EQUAL     reduce using rule 102 (simple_expression -> term simple_expression_tail .)
    EQUAL           reduce using rule 102 (simple_expression -> term simple_expression_tail .)
    DIFFERENT       reduce using rule 102 (simple_expression -> term simple_expression_tail .)
    THEN            reduce using rule 102 (simple_expression -> term simple_expression_tail .)
    PLUS            reduce using rule 102 (simple_expression -> term simple_expression_tail .)
    MINUS           reduce using rule 102 (simple_expression -> term simple_expression_tail .)
    TIMES           reduce using rule 102 (simple_expression -> term simple_expression_tail .)
    DIVIDE          reduce using rule 102 (simple_expression -> term simple_expression_tail .)
    MOD             reduce using rule 102 (simple_expression -> term simple_expression_tail .)
    AND             reduce using rule 102 (simple_expression -> term simple_expression_tail .)
    OR              reduce using rule 102 (simple_expression -> term simple_expression_tail .)
    DO              reduce using rule 102 (simple_expression -> term simple_expression_tail .)
    SEMICOLON       reduce using rule 102 (simple_expression -> term simple_expression_tail .)
    END             reduce using rule 102 (simple_expression -> term simple_expression_tail .)
    ELSE            reduce using rule 102 (simple_expression -> term simple_expression_tail .)
    COMMA           reduce using rule 102 (simple_expression -> term simple_expression_tail .)
    RPAREN          reduce using rule 102 (simple_expression -> term simple_expression_tail .)
    RBRACKET        reduce using rule 102 (simple_expression -> term simple_expression_tail .)
    TO              reduce using rule 102 (simple_expression -> term simple_expression_tail .)
    DOWNTO          reduce using rule 102 (simple_expression -> term simple_expression_tail .)


state 158

    (103) simple_expression_tail -> addop . term
    (107) term -> . factor term_tail
    (67) factor -> . function_call
    (118) factor -> . LPAREN expression RPAREN
    (119) factor -> . variable
    (120) factor -> . NUMBER
    (121) factor -> . STRING_LITERAL
    (66) function_call -> . ID LPAREN expression_list RPAREN
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    term                           shift and go to state 216
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 159

    (104) simple_expression_tail -> empty .

    LESS            reduce using rule 104 (simple_expression_tail -> empty .)
    LESS_EQUAL      reduce using rule 104 (simple_expression_tail -> empty .)
    GREAT           reduce using rule 104 (simple_expression_tail -> empty .)
    GREAT_EQUAL     reduce using rule 104 (simple_expression_tail -> empty .)
    EQUAL           reduce using rule 104 (simple_expression_tail -> empty .)
    DIFFERENT       reduce using rule 104 (simple_expression_tail -> empty .)
    THEN            reduce using rule 104 (simple_expression_tail -> empty .)
    PLUS            reduce using rule 104 (simple_expression_tail -> empty .)
    MINUS           reduce using rule 104 (simple_expression_tail -> empty .)
    TIMES           reduce using rule 104 (simple_expression_tail -> empty .)
    DIVIDE          reduce using rule 104 (simple_expression_tail -> empty .)
    MOD             reduce using rule 104 (simple_expression_tail -> empty .)
    AND             reduce using rule 104 (simple_expression_tail -> empty .)
    OR              reduce using rule 104 (simple_expression_tail -> empty .)
    DO              reduce using rule 104 (simple_expression_tail -> empty .)
    SEMICOLON       reduce using rule 104 (simple_expression_tail -> empty .)
    END             reduce using rule 104 (simple_expression_tail -> empty .)
    ELSE            reduce using rule 104 (simple_expression_tail -> empty .)
    COMMA           reduce using rule 104 (simple_expression_tail -> empty .)
    RPAREN          reduce using rule 104 (simple_expression_tail -> empty .)
    RBRACKET        reduce using rule 104 (simple_expression_tail -> empty .)
    TO              reduce using rule 104 (simple_expression_tail -> empty .)
    DOWNTO          reduce using rule 104 (simple_expression_tail -> empty .)


state 160

    (105) addop -> PLUS .

    LPAREN          reduce using rule 105 (addop -> PLUS .)
    NUMBER          reduce using rule 105 (addop -> PLUS .)
    STRING_LITERAL  reduce using rule 105 (addop -> PLUS .)
    ID              reduce using rule 105 (addop -> PLUS .)


state 161

    (106) addop -> MINUS .

    LPAREN          reduce using rule 106 (addop -> MINUS .)
    NUMBER          reduce using rule 106 (addop -> MINUS .)
    STRING_LITERAL  reduce using rule 106 (addop -> MINUS .)
    ID              reduce using rule 106 (addop -> MINUS .)


state 162

    (107) term -> factor term_tail .

    PLUS            reduce using rule 107 (term -> factor term_tail .)
    MINUS           reduce using rule 107 (term -> factor term_tail .)
    LESS            reduce using rule 107 (term -> factor term_tail .)
    LESS_EQUAL      reduce using rule 107 (term -> factor term_tail .)
    GREAT           reduce using rule 107 (term -> factor term_tail .)
    GREAT_EQUAL     reduce using rule 107 (term -> factor term_tail .)
    EQUAL           reduce using rule 107 (term -> factor term_tail .)
    DIFFERENT       reduce using rule 107 (term -> factor term_tail .)
    THEN            reduce using rule 107 (term -> factor term_tail .)
    TIMES           reduce using rule 107 (term -> factor term_tail .)
    DIVIDE          reduce using rule 107 (term -> factor term_tail .)
    MOD             reduce using rule 107 (term -> factor term_tail .)
    AND             reduce using rule 107 (term -> factor term_tail .)
    OR              reduce using rule 107 (term -> factor term_tail .)
    DO              reduce using rule 107 (term -> factor term_tail .)
    SEMICOLON       reduce using rule 107 (term -> factor term_tail .)
    END             reduce using rule 107 (term -> factor term_tail .)
    ELSE            reduce using rule 107 (term -> factor term_tail .)
    COMMA           reduce using rule 107 (term -> factor term_tail .)
    RPAREN          reduce using rule 107 (term -> factor term_tail .)
    RBRACKET        reduce using rule 107 (term -> factor term_tail .)
    TO              reduce using rule 107 (term -> factor term_tail .)
    DOWNTO          reduce using rule 107 (term -> factor term_tail .)


state 163

    (108) term_tail -> mulop . factor
    (67) factor -> . function_call
    (118) factor -> . LPAREN expression RPAREN
    (119) factor -> . variable
    (120) factor -> . NUMBER
    (121) factor -> . STRING_LITERAL
    (66) function_call -> . ID LPAREN expression_list RPAREN
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    factor                         shift and go to state 217
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 164

    (109) term_tail -> empty .

    PLUS            reduce using rule 109 (term_tail -> empty .)
    MINUS           reduce using rule 109 (term_tail -> empty .)
    LESS            reduce using rule 109 (term_tail -> empty .)
    LESS_EQUAL      reduce using rule 109 (term_tail -> empty .)
    GREAT           reduce using rule 109 (term_tail -> empty .)
    GREAT_EQUAL     reduce using rule 109 (term_tail -> empty .)
    EQUAL           reduce using rule 109 (term_tail -> empty .)
    DIFFERENT       reduce using rule 109 (term_tail -> empty .)
    THEN            reduce using rule 109 (term_tail -> empty .)
    TIMES           reduce using rule 109 (term_tail -> empty .)
    DIVIDE          reduce using rule 109 (term_tail -> empty .)
    MOD             reduce using rule 109 (term_tail -> empty .)
    AND             reduce using rule 109 (term_tail -> empty .)
    OR              reduce using rule 109 (term_tail -> empty .)
    DO              reduce using rule 109 (term_tail -> empty .)
    SEMICOLON       reduce using rule 109 (term_tail -> empty .)
    END             reduce using rule 109 (term_tail -> empty .)
    ELSE            reduce using rule 109 (term_tail -> empty .)
    COMMA           reduce using rule 109 (term_tail -> empty .)
    RPAREN          reduce using rule 109 (term_tail -> empty .)
    RBRACKET        reduce using rule 109 (term_tail -> empty .)
    TO              reduce using rule 109 (term_tail -> empty .)
    DOWNTO          reduce using rule 109 (term_tail -> empty .)


state 165

    (110) mulop -> TIMES .

    LPAREN          reduce using rule 110 (mulop -> TIMES .)
    NUMBER          reduce using rule 110 (mulop -> TIMES .)
    STRING_LITERAL  reduce using rule 110 (mulop -> TIMES .)
    ID              reduce using rule 110 (mulop -> TIMES .)


state 166

    (111) mulop -> DIVIDE .

    LPAREN          reduce using rule 111 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 111 (mulop -> DIVIDE .)
    STRING_LITERAL  reduce using rule 111 (mulop -> DIVIDE .)
    ID              reduce using rule 111 (mulop -> DIVIDE .)


state 167

    (112) mulop -> DIV .

    LPAREN          reduce using rule 112 (mulop -> DIV .)
    NUMBER          reduce using rule 112 (mulop -> DIV .)
    STRING_LITERAL  reduce using rule 112 (mulop -> DIV .)
    ID              reduce using rule 112 (mulop -> DIV .)


state 168

    (118) factor -> LPAREN expression . RPAREN
    (113) expression -> expression . PLUS expression
    (114) expression -> expression . MINUS expression
    (115) expression -> expression . TIMES expression
    (116) expression -> expression . DIVIDE expression
    (117) expression -> expression . MOD expression
    (142) expression -> expression . AND expression
    (143) expression -> expression . OR expression

    RPAREN          shift and go to state 218
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    MOD             shift and go to state 146
    AND             shift and go to state 147
    OR              shift and go to state 148


state 169

    (66) function_call -> ID LPAREN . expression_list RPAREN
    (96) expression_list -> . expression expression_list_tail
    (99) expression_list -> . empty
    (100) expression -> . simple_expression relop simple_expression
    (101) expression -> . simple_expression
    (113) expression -> . expression PLUS expression
    (114) expression -> . expression MINUS expression
    (115) expression -> . expression TIMES expression
    (116) expression -> . expression DIVIDE expression
    (117) expression -> . expression MOD expression
    (142) expression -> . expression AND expression
    (143) expression -> . expression OR expression
    (144) expression -> . NOT expression
    (128) empty -> .
    (102) simple_expression -> . term simple_expression_tail
    (107) term -> . factor term_tail
    (67) factor -> . function_call
    (118) factor -> . LPAREN expression RPAREN
    (119) factor -> . variable
    (120) factor -> . NUMBER
    (121) factor -> . STRING_LITERAL
    (66) function_call -> . ID LPAREN expression_list RPAREN
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    RPAREN          reduce using rule 128 (empty -> .)
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression_list                shift and go to state 219
    expression                     shift and go to state 134
    empty                          shift and go to state 135
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 170

    (93) while_statement -> WHILE expression DO . statement
    (77) statement -> . if_statement
    (78) statement -> . assignment_statement
    (79) statement -> . while_statement
    (80) statement -> . procedure_call
    (81) statement -> . compound_statement
    (82) statement -> . for_statement
    (83) statement -> . empty
    (129) statement -> . READLN
    (130) statement -> . READLN LPAREN variable RPAREN
    (131) statement -> . READLN LBRACKET variable RBRACKET
    (132) statement -> . WRITELN LPAREN expression_list RPAREN
    (133) statement -> . WRITE LPAREN expression_list RPAREN
    (134) statement -> . USES ID SEMICOLON
    (84) if_statement -> . IF expression THEN statement ELSE statement
    (85) if_statement -> . IF expression THEN statement
    (88) assignment_statement -> . variable COLON_EQUAL expression
    (93) while_statement -> . WHILE expression DO statement
    (94) procedure_call -> . ID LPAREN expression_list RPAREN
    (95) procedure_call -> . ID
    (73) compound_statement -> . BEGIN statement_list END
    (86) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (87) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (128) empty -> .
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    READLN          shift and go to state 49
    WRITELN         shift and go to state 51
    WRITE           shift and go to state 52
    USES            shift and go to state 53
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    ID              shift and go to state 54
    BEGIN           shift and go to state 24
    FOR             shift and go to state 57
    ELSE            reduce using rule 128 (empty -> .)
    SEMICOLON       reduce using rule 128 (empty -> .)
    END             reduce using rule 128 (empty -> .)

    statement                      shift and go to state 220
    if_statement                   shift and go to state 42
    assignment_statement           shift and go to state 43
    while_statement                shift and go to state 44
    procedure_call                 shift and go to state 45
    compound_statement             shift and go to state 46
    for_statement                  shift and go to state 47
    empty                          shift and go to state 48
    variable                       shift and go to state 50

state 171

    (86) for_statement -> FOR ID COLON_EQUAL . expression TO expression DO statement
    (87) for_statement -> FOR ID COLON_EQUAL . expression DOWNTO expression DO statement
    (100) expression -> . simple_expression relop simple_expression
    (101) expression -> . simple_expression
    (113) expression -> . expression PLUS expression
    (114) expression -> . expression MINUS expression
    (115) expression -> . expression TIMES expression
    (116) expression -> . expression DIVIDE expression
    (117) expression -> . expression MOD expression
    (142) expression -> . expression AND expression
    (143) expression -> . expression OR expression
    (144) expression -> . NOT expression
    (102) simple_expression -> . term simple_expression_tail
    (107) term -> . factor term_tail
    (67) factor -> . function_call
    (118) factor -> . LPAREN expression RPAREN
    (119) factor -> . variable
    (120) factor -> . NUMBER
    (121) factor -> . STRING_LITERAL
    (66) function_call -> . ID LPAREN expression_list RPAREN
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 221
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 172

    (138) constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .

    ID              reduce using rule 138 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    USES            reduce using rule 138 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    CONST           reduce using rule 138 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    TYPE            reduce using rule 138 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    VAR             reduce using rule 138 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    FUNCTION        reduce using rule 138 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    PROCEDURE       reduce using rule 138 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)
    BEGIN           reduce using rule 138 (constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON .)


state 173

    (139) constant -> ID EQUAL NUMBER SEMICOLON .

    ID              reduce using rule 139 (constant -> ID EQUAL NUMBER SEMICOLON .)
    USES            reduce using rule 139 (constant -> ID EQUAL NUMBER SEMICOLON .)
    CONST           reduce using rule 139 (constant -> ID EQUAL NUMBER SEMICOLON .)
    TYPE            reduce using rule 139 (constant -> ID EQUAL NUMBER SEMICOLON .)
    VAR             reduce using rule 139 (constant -> ID EQUAL NUMBER SEMICOLON .)
    FUNCTION        reduce using rule 139 (constant -> ID EQUAL NUMBER SEMICOLON .)
    PROCEDURE       reduce using rule 139 (constant -> ID EQUAL NUMBER SEMICOLON .)
    BEGIN           reduce using rule 139 (constant -> ID EQUAL NUMBER SEMICOLON .)


state 174

    (140) constant -> ID EQUAL STRING_LITERAL SEMICOLON .

    ID              reduce using rule 140 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    USES            reduce using rule 140 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    CONST           reduce using rule 140 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    TYPE            reduce using rule 140 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    VAR             reduce using rule 140 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    FUNCTION        reduce using rule 140 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    PROCEDURE       reduce using rule 140 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)
    BEGIN           reduce using rule 140 (constant -> ID EQUAL STRING_LITERAL SEMICOLON .)


state 175

    (141) constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .

    ID              reduce using rule 141 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    USES            reduce using rule 141 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    CONST           reduce using rule 141 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    TYPE            reduce using rule 141 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    VAR             reduce using rule 141 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    FUNCTION        reduce using rule 141 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    PROCEDURE       reduce using rule 141 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)
    BEGIN           reduce using rule 141 (constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON .)


state 176

    (21) type_definition -> ID EQUAL type_specifier SEMICOLON .

    ID              reduce using rule 21 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    USES            reduce using rule 21 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    CONST           reduce using rule 21 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    TYPE            reduce using rule 21 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    VAR             reduce using rule 21 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 21 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 21 (type_definition -> ID EQUAL type_specifier SEMICOLON .)
    BEGIN           reduce using rule 21 (type_definition -> ID EQUAL type_specifier SEMICOLON .)


state 177

    (22) type_specifier -> ARRAY LBRACKET . type_expression RBRACKET OF type_specifier
    (35) type_expression -> . type_expression COMMA subrange
    (36) type_expression -> . subrange
    (37) subrange -> . NUMBER DOTDOT NUMBER

    NUMBER          shift and go to state 113

    type_expression                shift and go to state 222
    subrange                       shift and go to state 223

state 178

    (24) type_specifier -> FILE OF . type_specifier
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (34) type_specifier -> . ID
    (55) type_specifier -> . LONGINT
    (37) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 101
    FILE            shift and go to state 103
    SET             shift and go to state 104
    RECORD          shift and go to state 105
    OBJECT          shift and go to state 106
    LPAREN          shift and go to state 107
    BOOLEAN_LITERAL shift and go to state 108
    INTEGER         shift and go to state 109
    BYTE            shift and go to state 110
    CHAR            shift and go to state 111
    STRING          shift and go to state 112
    ID              shift and go to state 99
    LONGINT         shift and go to state 114
    NUMBER          shift and go to state 113

    type_specifier                 shift and go to state 224
    subrange                       shift and go to state 102

state 179

    (25) type_specifier -> SET OF . type_specifier
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (34) type_specifier -> . ID
    (55) type_specifier -> . LONGINT
    (37) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 101
    FILE            shift and go to state 103
    SET             shift and go to state 104
    RECORD          shift and go to state 105
    OBJECT          shift and go to state 106
    LPAREN          shift and go to state 107
    BOOLEAN_LITERAL shift and go to state 108
    INTEGER         shift and go to state 109
    BYTE            shift and go to state 110
    CHAR            shift and go to state 111
    STRING          shift and go to state 112
    ID              shift and go to state 99
    LONGINT         shift and go to state 114
    NUMBER          shift and go to state 113

    type_specifier                 shift and go to state 225
    subrange                       shift and go to state 102

state 180

    (26) type_specifier -> RECORD field_list . case_part END
    (38) field_list -> field_list . field
    (43) case_part -> . CASE ID COLON type_specifier OF case_list SEMICOLON
    (44) case_part -> . empty
    (41) field -> . id_list COLON type_specifier SEMICOLON
    (42) field -> . id_list COLON type_specifier
    (128) empty -> .
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    CASE            shift and go to state 227
    END             reduce using rule 128 (empty -> .)
    ID              shift and go to state 28

    case_part                      shift and go to state 226
    field                          shift and go to state 191
    empty                          shift and go to state 228
    id_list                        shift and go to state 125

state 181

    (27) type_specifier -> OBJECT field_list . method_list END
    (38) field_list -> field_list . field
    (48) method_list -> . method_list method
    (49) method_list -> . method
    (50) method_list -> . empty
    (41) field -> . id_list COLON type_specifier SEMICOLON
    (42) field -> . id_list COLON type_specifier
    (51) method -> . CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON
    (52) method -> . PROCEDURE ID LPAREN field_list RPAREN SEMICOLON
    (53) method -> . FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON
    (54) method -> . DESTRUCTOR ID SEMICOLON
    (128) empty -> .
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for PROCEDURE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DESTRUCTOR resolved as shift
    CONSTRUCTOR     shift and go to state 232
    PROCEDURE       shift and go to state 233
    FUNCTION        shift and go to state 234
    DESTRUCTOR      shift and go to state 235
    END             reduce using rule 128 (empty -> .)
    ID              shift and go to state 28

  ! CONSTRUCTOR     [ reduce using rule 128 (empty -> .) ]
  ! PROCEDURE       [ reduce using rule 128 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 128 (empty -> .) ]
  ! DESTRUCTOR      [ reduce using rule 128 (empty -> .) ]

    method_list                    shift and go to state 229
    field                          shift and go to state 191
    method                         shift and go to state 230
    empty                          shift and go to state 231
    id_list                        shift and go to state 125

state 182

    (28) type_specifier -> LPAREN id_list . RPAREN
    (12) id_list -> id_list . COMMA ID

    RPAREN          shift and go to state 236
    COMMA           shift and go to state 59


state 183

    (33) type_specifier -> STRING LBRACKET . NUMBER RBRACKET

    NUMBER          shift and go to state 237


state 184

    (37) subrange -> NUMBER DOTDOT . NUMBER

    NUMBER          shift and go to state 238


state 185

    (16) declaration -> id_list COLON type_specifier SEMICOLON .

    ID              reduce using rule 16 (declaration -> id_list COLON type_specifier SEMICOLON .)
    USES            reduce using rule 16 (declaration -> id_list COLON type_specifier SEMICOLON .)
    CONST           reduce using rule 16 (declaration -> id_list COLON type_specifier SEMICOLON .)
    TYPE            reduce using rule 16 (declaration -> id_list COLON type_specifier SEMICOLON .)
    VAR             reduce using rule 16 (declaration -> id_list COLON type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 16 (declaration -> id_list COLON type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 16 (declaration -> id_list COLON type_specifier SEMICOLON .)
    BEGIN           reduce using rule 16 (declaration -> id_list COLON type_specifier SEMICOLON .)


state 186

    (64) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN . COLON type_specifier SEMICOLON block SEMICOLON
    (65) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN . COLON type_specifier SEMICOLON FORWARD SEMICOLON

    COLON           shift and go to state 239


state 187

    (69) parameter_list -> parameter_list SEMICOLON . parameter
    (71) parameter -> . id_list COLON type_specifier
    (72) parameter -> . VAR id_list COLON type_specifier
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    VAR             shift and go to state 120
    ID              shift and go to state 28

    parameter                      shift and go to state 240
    id_list                        shift and go to state 119

state 188

    (71) parameter -> id_list COLON . type_specifier
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (34) type_specifier -> . ID
    (55) type_specifier -> . LONGINT
    (37) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 101
    FILE            shift and go to state 103
    SET             shift and go to state 104
    RECORD          shift and go to state 105
    OBJECT          shift and go to state 106
    LPAREN          shift and go to state 107
    BOOLEAN_LITERAL shift and go to state 108
    INTEGER         shift and go to state 109
    BYTE            shift and go to state 110
    CHAR            shift and go to state 111
    STRING          shift and go to state 112
    ID              shift and go to state 99
    LONGINT         shift and go to state 114
    NUMBER          shift and go to state 113

    type_specifier                 shift and go to state 241
    subrange                       shift and go to state 102

state 189

    (72) parameter -> VAR id_list . COLON type_specifier
    (12) id_list -> id_list . COMMA ID

    COLON           shift and go to state 242
    COMMA           shift and go to state 59


state 190

    (58) procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN . SEMICOLON
    (61) procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN . SEMICOLON FORWARD SEMICOLON

    SEMICOLON       shift and go to state 243


state 191

    (38) field_list -> field_list field .

    RPAREN          reduce using rule 38 (field_list -> field_list field .)
    ID              reduce using rule 38 (field_list -> field_list field .)
    CASE            reduce using rule 38 (field_list -> field_list field .)
    END             reduce using rule 38 (field_list -> field_list field .)
    CONSTRUCTOR     reduce using rule 38 (field_list -> field_list field .)
    PROCEDURE       reduce using rule 38 (field_list -> field_list field .)
    FUNCTION        reduce using rule 38 (field_list -> field_list field .)
    DESTRUCTOR      reduce using rule 38 (field_list -> field_list field .)


state 192

    (59) procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON . block SEMICOLON
    (62) procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON . FORWARD SEMICOLON
    (17) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (128) empty -> .

    FORWARD         shift and go to state 245
    BEGIN           reduce using rule 128 (empty -> .)
    USES            reduce using rule 128 (empty -> .)
    CONST           reduce using rule 128 (empty -> .)
    TYPE            reduce using rule 128 (empty -> .)
    VAR             reduce using rule 128 (empty -> .)
    FUNCTION        reduce using rule 128 (empty -> .)
    PROCEDURE       reduce using rule 128 (empty -> .)

    block                          shift and go to state 244
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 193

    (41) field -> id_list COLON . type_specifier SEMICOLON
    (42) field -> id_list COLON . type_specifier
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (34) type_specifier -> . ID
    (55) type_specifier -> . LONGINT
    (37) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 101
    FILE            shift and go to state 103
    SET             shift and go to state 104
    RECORD          shift and go to state 105
    OBJECT          shift and go to state 106
    LPAREN          shift and go to state 107
    BOOLEAN_LITERAL shift and go to state 108
    INTEGER         shift and go to state 109
    BYTE            shift and go to state 110
    CHAR            shift and go to state 111
    STRING          shift and go to state 112
    ID              shift and go to state 99
    LONGINT         shift and go to state 114
    NUMBER          shift and go to state 113

    type_specifier                 shift and go to state 246
    subrange                       shift and go to state 102

state 194

    (60) procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .

    PROCEDURE       reduce using rule 60 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    USES            reduce using rule 60 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    CONST           reduce using rule 60 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    TYPE            reduce using rule 60 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    VAR             reduce using rule 60 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 60 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    BEGIN           reduce using rule 60 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)


state 195

    (63) procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .

    PROCEDURE       reduce using rule 63 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)
    USES            reduce using rule 63 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)
    CONST           reduce using rule 63 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)
    TYPE            reduce using rule 63 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)
    VAR             reduce using rule 63 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)
    FUNCTION        reduce using rule 63 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)
    BEGIN           reduce using rule 63 (procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON .)


state 196

    (75) statement_list_tail -> SEMICOLON statement statement_list_tail .

    END             reduce using rule 75 (statement_list_tail -> SEMICOLON statement statement_list_tail .)


state 197

    (130) statement -> READLN LPAREN variable RPAREN .

    SEMICOLON       reduce using rule 130 (statement -> READLN LPAREN variable RPAREN .)
    END             reduce using rule 130 (statement -> READLN LPAREN variable RPAREN .)
    ELSE            reduce using rule 130 (statement -> READLN LPAREN variable RPAREN .)


state 198

    (131) statement -> READLN LBRACKET variable RBRACKET .

    SEMICOLON       reduce using rule 131 (statement -> READLN LBRACKET variable RBRACKET .)
    END             reduce using rule 131 (statement -> READLN LBRACKET variable RBRACKET .)
    ELSE            reduce using rule 131 (statement -> READLN LBRACKET variable RBRACKET .)


state 199

    (132) statement -> WRITELN LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 132 (statement -> WRITELN LPAREN expression_list RPAREN .)
    END             reduce using rule 132 (statement -> WRITELN LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 132 (statement -> WRITELN LPAREN expression_list RPAREN .)


state 200

    (96) expression_list -> expression expression_list_tail .

    RPAREN          reduce using rule 96 (expression_list -> expression expression_list_tail .)


state 201

    (97) expression_list_tail -> COMMA . expression expression_list_tail
    (100) expression -> . simple_expression relop simple_expression
    (101) expression -> . simple_expression
    (113) expression -> . expression PLUS expression
    (114) expression -> . expression MINUS expression
    (115) expression -> . expression TIMES expression
    (116) expression -> . expression DIVIDE expression
    (117) expression -> . expression MOD expression
    (142) expression -> . expression AND expression
    (143) expression -> . expression OR expression
    (144) expression -> . NOT expression
    (102) simple_expression -> . term simple_expression_tail
    (107) term -> . factor term_tail
    (67) factor -> . function_call
    (118) factor -> . LPAREN expression RPAREN
    (119) factor -> . variable
    (120) factor -> . NUMBER
    (121) factor -> . STRING_LITERAL
    (66) function_call -> . ID LPAREN expression_list RPAREN
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 247
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 202

    (98) expression_list_tail -> empty .

    RPAREN          reduce using rule 98 (expression_list_tail -> empty .)


state 203

    (133) statement -> WRITE LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 133 (statement -> WRITE LPAREN expression_list RPAREN .)
    END             reduce using rule 133 (statement -> WRITE LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 133 (statement -> WRITE LPAREN expression_list RPAREN .)


state 204

    (94) procedure_call -> ID LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 94 (procedure_call -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 94 (procedure_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 94 (procedure_call -> ID LPAREN expression_list RPAREN .)


state 205

    (90) variable -> ID LBRACKET index_list RBRACKET .

    COLON_EQUAL     reduce using rule 90 (variable -> ID LBRACKET index_list RBRACKET .)
    TIMES           reduce using rule 90 (variable -> ID LBRACKET index_list RBRACKET .)
    DIVIDE          reduce using rule 90 (variable -> ID LBRACKET index_list RBRACKET .)
    DIV             reduce using rule 90 (variable -> ID LBRACKET index_list RBRACKET .)
    PLUS            reduce using rule 90 (variable -> ID LBRACKET index_list RBRACKET .)
    MINUS           reduce using rule 90 (variable -> ID LBRACKET index_list RBRACKET .)
    LESS            reduce using rule 90 (variable -> ID LBRACKET index_list RBRACKET .)
    LESS_EQUAL      reduce using rule 90 (variable -> ID LBRACKET index_list RBRACKET .)
    GREAT           reduce using rule 90 (variable -> ID LBRACKET index_list RBRACKET .)
    GREAT_EQUAL     reduce using rule 90 (variable -> ID LBRACKET index_list RBRACKET .)
    EQUAL           reduce using rule 90 (variable -> ID LBRACKET index_list RBRACKET .)
    DIFFERENT       reduce using rule 90 (variable -> ID LBRACKET index_list RBRACKET .)
    THEN            reduce using rule 90 (variable -> ID LBRACKET index_list RBRACKET .)
    MOD             reduce using rule 90 (variable -> ID LBRACKET index_list RBRACKET .)
    AND             reduce using rule 90 (variable -> ID LBRACKET index_list RBRACKET .)
    OR              reduce using rule 90 (variable -> ID LBRACKET index_list RBRACKET .)
    DO              reduce using rule 90 (variable -> ID LBRACKET index_list RBRACKET .)
    RPAREN          reduce using rule 90 (variable -> ID LBRACKET index_list RBRACKET .)
    RBRACKET        reduce using rule 90 (variable -> ID LBRACKET index_list RBRACKET .)
    SEMICOLON       reduce using rule 90 (variable -> ID LBRACKET index_list RBRACKET .)
    END             reduce using rule 90 (variable -> ID LBRACKET index_list RBRACKET .)
    ELSE            reduce using rule 90 (variable -> ID LBRACKET index_list RBRACKET .)
    COMMA           reduce using rule 90 (variable -> ID LBRACKET index_list RBRACKET .)
    TO              reduce using rule 90 (variable -> ID LBRACKET index_list RBRACKET .)
    DOWNTO          reduce using rule 90 (variable -> ID LBRACKET index_list RBRACKET .)


state 206

    (92) index_list -> index_list COMMA . expression
    (100) expression -> . simple_expression relop simple_expression
    (101) expression -> . simple_expression
    (113) expression -> . expression PLUS expression
    (114) expression -> . expression MINUS expression
    (115) expression -> . expression TIMES expression
    (116) expression -> . expression DIVIDE expression
    (117) expression -> . expression MOD expression
    (142) expression -> . expression AND expression
    (143) expression -> . expression OR expression
    (144) expression -> . NOT expression
    (102) simple_expression -> . term simple_expression_tail
    (107) term -> . factor term_tail
    (67) factor -> . function_call
    (118) factor -> . LPAREN expression RPAREN
    (119) factor -> . variable
    (120) factor -> . NUMBER
    (121) factor -> . STRING_LITERAL
    (66) function_call -> . ID LPAREN expression_list RPAREN
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 248
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 207

    (84) if_statement -> IF expression THEN statement . ELSE statement
    (85) if_statement -> IF expression THEN statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 249
    SEMICOLON       reduce using rule 85 (if_statement -> IF expression THEN statement .)
    END             reduce using rule 85 (if_statement -> IF expression THEN statement .)

  ! ELSE            [ reduce using rule 85 (if_statement -> IF expression THEN statement .) ]


state 208

    (113) expression -> expression PLUS expression .
    (113) expression -> expression . PLUS expression
    (114) expression -> expression . MINUS expression
    (115) expression -> expression . TIMES expression
    (116) expression -> expression . DIVIDE expression
    (117) expression -> expression . MOD expression
    (142) expression -> expression . AND expression
    (143) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 113 (expression -> expression PLUS expression .)
    DO              reduce using rule 113 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 113 (expression -> expression PLUS expression .)
    END             reduce using rule 113 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 113 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 113 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 113 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 113 (expression -> expression PLUS expression .)
    TO              reduce using rule 113 (expression -> expression PLUS expression .)
    DOWNTO          reduce using rule 113 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    MOD             shift and go to state 146
    AND             shift and go to state 147
    OR              shift and go to state 148

  ! PLUS            [ reduce using rule 113 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 113 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 113 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 113 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 113 (expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 113 (expression -> expression PLUS expression .) ]
  ! OR              [ reduce using rule 113 (expression -> expression PLUS expression .) ]


state 209

    (114) expression -> expression MINUS expression .
    (113) expression -> expression . PLUS expression
    (114) expression -> expression . MINUS expression
    (115) expression -> expression . TIMES expression
    (116) expression -> expression . DIVIDE expression
    (117) expression -> expression . MOD expression
    (142) expression -> expression . AND expression
    (143) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 114 (expression -> expression MINUS expression .)
    DO              reduce using rule 114 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 114 (expression -> expression MINUS expression .)
    END             reduce using rule 114 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 114 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 114 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 114 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 114 (expression -> expression MINUS expression .)
    TO              reduce using rule 114 (expression -> expression MINUS expression .)
    DOWNTO          reduce using rule 114 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    MOD             shift and go to state 146
    AND             shift and go to state 147
    OR              shift and go to state 148

  ! PLUS            [ reduce using rule 114 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 114 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 114 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 114 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 114 (expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 114 (expression -> expression MINUS expression .) ]
  ! OR              [ reduce using rule 114 (expression -> expression MINUS expression .) ]


state 210

    (115) expression -> expression TIMES expression .
    (113) expression -> expression . PLUS expression
    (114) expression -> expression . MINUS expression
    (115) expression -> expression . TIMES expression
    (116) expression -> expression . DIVIDE expression
    (117) expression -> expression . MOD expression
    (142) expression -> expression . AND expression
    (143) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 115 (expression -> expression TIMES expression .)
    DO              reduce using rule 115 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 115 (expression -> expression TIMES expression .)
    END             reduce using rule 115 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 115 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 115 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 115 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 115 (expression -> expression TIMES expression .)
    TO              reduce using rule 115 (expression -> expression TIMES expression .)
    DOWNTO          reduce using rule 115 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    MOD             shift and go to state 146
    AND             shift and go to state 147
    OR              shift and go to state 148

  ! PLUS            [ reduce using rule 115 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 115 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 115 (expression -> expression TIMES expression .) ]
  ! DIVIDE          [ reduce using rule 115 (expression -> expression TIMES expression .) ]
  ! MOD             [ reduce using rule 115 (expression -> expression TIMES expression .) ]
  ! AND             [ reduce using rule 115 (expression -> expression TIMES expression .) ]
  ! OR              [ reduce using rule 115 (expression -> expression TIMES expression .) ]


state 211

    (116) expression -> expression DIVIDE expression .
    (113) expression -> expression . PLUS expression
    (114) expression -> expression . MINUS expression
    (115) expression -> expression . TIMES expression
    (116) expression -> expression . DIVIDE expression
    (117) expression -> expression . MOD expression
    (142) expression -> expression . AND expression
    (143) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 116 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 116 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 116 (expression -> expression DIVIDE expression .)
    END             reduce using rule 116 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 116 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 116 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 116 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 116 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 116 (expression -> expression DIVIDE expression .)
    DOWNTO          reduce using rule 116 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    MOD             shift and go to state 146
    AND             shift and go to state 147
    OR              shift and go to state 148

  ! PLUS            [ reduce using rule 116 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 116 (expression -> expression DIVIDE expression .) ]
  ! TIMES           [ reduce using rule 116 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 116 (expression -> expression DIVIDE expression .) ]
  ! MOD             [ reduce using rule 116 (expression -> expression DIVIDE expression .) ]
  ! AND             [ reduce using rule 116 (expression -> expression DIVIDE expression .) ]
  ! OR              [ reduce using rule 116 (expression -> expression DIVIDE expression .) ]


state 212

    (117) expression -> expression MOD expression .
    (113) expression -> expression . PLUS expression
    (114) expression -> expression . MINUS expression
    (115) expression -> expression . TIMES expression
    (116) expression -> expression . DIVIDE expression
    (117) expression -> expression . MOD expression
    (142) expression -> expression . AND expression
    (143) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 117 (expression -> expression MOD expression .)
    DO              reduce using rule 117 (expression -> expression MOD expression .)
    SEMICOLON       reduce using rule 117 (expression -> expression MOD expression .)
    END             reduce using rule 117 (expression -> expression MOD expression .)
    ELSE            reduce using rule 117 (expression -> expression MOD expression .)
    COMMA           reduce using rule 117 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 117 (expression -> expression MOD expression .)
    RBRACKET        reduce using rule 117 (expression -> expression MOD expression .)
    TO              reduce using rule 117 (expression -> expression MOD expression .)
    DOWNTO          reduce using rule 117 (expression -> expression MOD expression .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    MOD             shift and go to state 146
    AND             shift and go to state 147
    OR              shift and go to state 148

  ! PLUS            [ reduce using rule 117 (expression -> expression MOD expression .) ]
  ! MINUS           [ reduce using rule 117 (expression -> expression MOD expression .) ]
  ! TIMES           [ reduce using rule 117 (expression -> expression MOD expression .) ]
  ! DIVIDE          [ reduce using rule 117 (expression -> expression MOD expression .) ]
  ! MOD             [ reduce using rule 117 (expression -> expression MOD expression .) ]
  ! AND             [ reduce using rule 117 (expression -> expression MOD expression .) ]
  ! OR              [ reduce using rule 117 (expression -> expression MOD expression .) ]


state 213

    (142) expression -> expression AND expression .
    (113) expression -> expression . PLUS expression
    (114) expression -> expression . MINUS expression
    (115) expression -> expression . TIMES expression
    (116) expression -> expression . DIVIDE expression
    (117) expression -> expression . MOD expression
    (142) expression -> expression . AND expression
    (143) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 142 (expression -> expression AND expression .)
    DO              reduce using rule 142 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 142 (expression -> expression AND expression .)
    END             reduce using rule 142 (expression -> expression AND expression .)
    ELSE            reduce using rule 142 (expression -> expression AND expression .)
    COMMA           reduce using rule 142 (expression -> expression AND expression .)
    RPAREN          reduce using rule 142 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 142 (expression -> expression AND expression .)
    TO              reduce using rule 142 (expression -> expression AND expression .)
    DOWNTO          reduce using rule 142 (expression -> expression AND expression .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    MOD             shift and go to state 146
    AND             shift and go to state 147
    OR              shift and go to state 148

  ! PLUS            [ reduce using rule 142 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 142 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 142 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 142 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 142 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 142 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 142 (expression -> expression AND expression .) ]


state 214

    (143) expression -> expression OR expression .
    (113) expression -> expression . PLUS expression
    (114) expression -> expression . MINUS expression
    (115) expression -> expression . TIMES expression
    (116) expression -> expression . DIVIDE expression
    (117) expression -> expression . MOD expression
    (142) expression -> expression . AND expression
    (143) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 143 (expression -> expression OR expression .)
    DO              reduce using rule 143 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 143 (expression -> expression OR expression .)
    END             reduce using rule 143 (expression -> expression OR expression .)
    ELSE            reduce using rule 143 (expression -> expression OR expression .)
    COMMA           reduce using rule 143 (expression -> expression OR expression .)
    RPAREN          reduce using rule 143 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 143 (expression -> expression OR expression .)
    TO              reduce using rule 143 (expression -> expression OR expression .)
    DOWNTO          reduce using rule 143 (expression -> expression OR expression .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    MOD             shift and go to state 146
    AND             shift and go to state 147
    OR              shift and go to state 148

  ! PLUS            [ reduce using rule 143 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 143 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 143 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 143 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 143 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 143 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 143 (expression -> expression OR expression .) ]


state 215

    (100) expression -> simple_expression relop simple_expression .

    THEN            reduce using rule 100 (expression -> simple_expression relop simple_expression .)
    PLUS            reduce using rule 100 (expression -> simple_expression relop simple_expression .)
    MINUS           reduce using rule 100 (expression -> simple_expression relop simple_expression .)
    TIMES           reduce using rule 100 (expression -> simple_expression relop simple_expression .)
    DIVIDE          reduce using rule 100 (expression -> simple_expression relop simple_expression .)
    MOD             reduce using rule 100 (expression -> simple_expression relop simple_expression .)
    AND             reduce using rule 100 (expression -> simple_expression relop simple_expression .)
    OR              reduce using rule 100 (expression -> simple_expression relop simple_expression .)
    DO              reduce using rule 100 (expression -> simple_expression relop simple_expression .)
    SEMICOLON       reduce using rule 100 (expression -> simple_expression relop simple_expression .)
    END             reduce using rule 100 (expression -> simple_expression relop simple_expression .)
    ELSE            reduce using rule 100 (expression -> simple_expression relop simple_expression .)
    COMMA           reduce using rule 100 (expression -> simple_expression relop simple_expression .)
    RPAREN          reduce using rule 100 (expression -> simple_expression relop simple_expression .)
    RBRACKET        reduce using rule 100 (expression -> simple_expression relop simple_expression .)
    TO              reduce using rule 100 (expression -> simple_expression relop simple_expression .)
    DOWNTO          reduce using rule 100 (expression -> simple_expression relop simple_expression .)


state 216

    (103) simple_expression_tail -> addop term .

    LESS            reduce using rule 103 (simple_expression_tail -> addop term .)
    LESS_EQUAL      reduce using rule 103 (simple_expression_tail -> addop term .)
    GREAT           reduce using rule 103 (simple_expression_tail -> addop term .)
    GREAT_EQUAL     reduce using rule 103 (simple_expression_tail -> addop term .)
    EQUAL           reduce using rule 103 (simple_expression_tail -> addop term .)
    DIFFERENT       reduce using rule 103 (simple_expression_tail -> addop term .)
    THEN            reduce using rule 103 (simple_expression_tail -> addop term .)
    PLUS            reduce using rule 103 (simple_expression_tail -> addop term .)
    MINUS           reduce using rule 103 (simple_expression_tail -> addop term .)
    TIMES           reduce using rule 103 (simple_expression_tail -> addop term .)
    DIVIDE          reduce using rule 103 (simple_expression_tail -> addop term .)
    MOD             reduce using rule 103 (simple_expression_tail -> addop term .)
    AND             reduce using rule 103 (simple_expression_tail -> addop term .)
    OR              reduce using rule 103 (simple_expression_tail -> addop term .)
    DO              reduce using rule 103 (simple_expression_tail -> addop term .)
    SEMICOLON       reduce using rule 103 (simple_expression_tail -> addop term .)
    END             reduce using rule 103 (simple_expression_tail -> addop term .)
    ELSE            reduce using rule 103 (simple_expression_tail -> addop term .)
    COMMA           reduce using rule 103 (simple_expression_tail -> addop term .)
    RPAREN          reduce using rule 103 (simple_expression_tail -> addop term .)
    RBRACKET        reduce using rule 103 (simple_expression_tail -> addop term .)
    TO              reduce using rule 103 (simple_expression_tail -> addop term .)
    DOWNTO          reduce using rule 103 (simple_expression_tail -> addop term .)


state 217

    (108) term_tail -> mulop factor .

    PLUS            reduce using rule 108 (term_tail -> mulop factor .)
    MINUS           reduce using rule 108 (term_tail -> mulop factor .)
    LESS            reduce using rule 108 (term_tail -> mulop factor .)
    LESS_EQUAL      reduce using rule 108 (term_tail -> mulop factor .)
    GREAT           reduce using rule 108 (term_tail -> mulop factor .)
    GREAT_EQUAL     reduce using rule 108 (term_tail -> mulop factor .)
    EQUAL           reduce using rule 108 (term_tail -> mulop factor .)
    DIFFERENT       reduce using rule 108 (term_tail -> mulop factor .)
    THEN            reduce using rule 108 (term_tail -> mulop factor .)
    TIMES           reduce using rule 108 (term_tail -> mulop factor .)
    DIVIDE          reduce using rule 108 (term_tail -> mulop factor .)
    MOD             reduce using rule 108 (term_tail -> mulop factor .)
    AND             reduce using rule 108 (term_tail -> mulop factor .)
    OR              reduce using rule 108 (term_tail -> mulop factor .)
    DO              reduce using rule 108 (term_tail -> mulop factor .)
    SEMICOLON       reduce using rule 108 (term_tail -> mulop factor .)
    END             reduce using rule 108 (term_tail -> mulop factor .)
    ELSE            reduce using rule 108 (term_tail -> mulop factor .)
    COMMA           reduce using rule 108 (term_tail -> mulop factor .)
    RPAREN          reduce using rule 108 (term_tail -> mulop factor .)
    RBRACKET        reduce using rule 108 (term_tail -> mulop factor .)
    TO              reduce using rule 108 (term_tail -> mulop factor .)
    DOWNTO          reduce using rule 108 (term_tail -> mulop factor .)


state 218

    (118) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 118 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 118 (factor -> LPAREN expression RPAREN .)
    DIV             reduce using rule 118 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 118 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 118 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 118 (factor -> LPAREN expression RPAREN .)
    LESS_EQUAL      reduce using rule 118 (factor -> LPAREN expression RPAREN .)
    GREAT           reduce using rule 118 (factor -> LPAREN expression RPAREN .)
    GREAT_EQUAL     reduce using rule 118 (factor -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 118 (factor -> LPAREN expression RPAREN .)
    DIFFERENT       reduce using rule 118 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 118 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 118 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 118 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 118 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 118 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 118 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 118 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 118 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 118 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 118 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 118 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 118 (factor -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 118 (factor -> LPAREN expression RPAREN .)


state 219

    (66) function_call -> ID LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 250


state 220

    (93) while_statement -> WHILE expression DO statement .

    SEMICOLON       reduce using rule 93 (while_statement -> WHILE expression DO statement .)
    END             reduce using rule 93 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 93 (while_statement -> WHILE expression DO statement .)


state 221

    (86) for_statement -> FOR ID COLON_EQUAL expression . TO expression DO statement
    (87) for_statement -> FOR ID COLON_EQUAL expression . DOWNTO expression DO statement
    (113) expression -> expression . PLUS expression
    (114) expression -> expression . MINUS expression
    (115) expression -> expression . TIMES expression
    (116) expression -> expression . DIVIDE expression
    (117) expression -> expression . MOD expression
    (142) expression -> expression . AND expression
    (143) expression -> expression . OR expression

    TO              shift and go to state 251
    DOWNTO          shift and go to state 252
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    MOD             shift and go to state 146
    AND             shift and go to state 147
    OR              shift and go to state 148


state 222

    (22) type_specifier -> ARRAY LBRACKET type_expression . RBRACKET OF type_specifier
    (35) type_expression -> type_expression . COMMA subrange

    RBRACKET        shift and go to state 253
    COMMA           shift and go to state 254


state 223

    (36) type_expression -> subrange .

    RBRACKET        reduce using rule 36 (type_expression -> subrange .)
    COMMA           reduce using rule 36 (type_expression -> subrange .)


state 224

    (24) type_specifier -> FILE OF type_specifier .

    SEMICOLON       reduce using rule 24 (type_specifier -> FILE OF type_specifier .)
    RPAREN          reduce using rule 24 (type_specifier -> FILE OF type_specifier .)
    ID              reduce using rule 24 (type_specifier -> FILE OF type_specifier .)
    CASE            reduce using rule 24 (type_specifier -> FILE OF type_specifier .)
    END             reduce using rule 24 (type_specifier -> FILE OF type_specifier .)
    CONSTRUCTOR     reduce using rule 24 (type_specifier -> FILE OF type_specifier .)
    PROCEDURE       reduce using rule 24 (type_specifier -> FILE OF type_specifier .)
    FUNCTION        reduce using rule 24 (type_specifier -> FILE OF type_specifier .)
    DESTRUCTOR      reduce using rule 24 (type_specifier -> FILE OF type_specifier .)
    OF              reduce using rule 24 (type_specifier -> FILE OF type_specifier .)


state 225

    (25) type_specifier -> SET OF type_specifier .

    SEMICOLON       reduce using rule 25 (type_specifier -> SET OF type_specifier .)
    RPAREN          reduce using rule 25 (type_specifier -> SET OF type_specifier .)
    ID              reduce using rule 25 (type_specifier -> SET OF type_specifier .)
    CASE            reduce using rule 25 (type_specifier -> SET OF type_specifier .)
    END             reduce using rule 25 (type_specifier -> SET OF type_specifier .)
    CONSTRUCTOR     reduce using rule 25 (type_specifier -> SET OF type_specifier .)
    PROCEDURE       reduce using rule 25 (type_specifier -> SET OF type_specifier .)
    FUNCTION        reduce using rule 25 (type_specifier -> SET OF type_specifier .)
    DESTRUCTOR      reduce using rule 25 (type_specifier -> SET OF type_specifier .)
    OF              reduce using rule 25 (type_specifier -> SET OF type_specifier .)


state 226

    (26) type_specifier -> RECORD field_list case_part . END

    END             shift and go to state 255


state 227

    (43) case_part -> CASE . ID COLON type_specifier OF case_list SEMICOLON

    ID              shift and go to state 256


state 228

    (44) case_part -> empty .

    END             reduce using rule 44 (case_part -> empty .)


state 229

    (27) type_specifier -> OBJECT field_list method_list . END
    (48) method_list -> method_list . method
    (51) method -> . CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON
    (52) method -> . PROCEDURE ID LPAREN field_list RPAREN SEMICOLON
    (53) method -> . FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON
    (54) method -> . DESTRUCTOR ID SEMICOLON

    END             shift and go to state 257
    CONSTRUCTOR     shift and go to state 232
    PROCEDURE       shift and go to state 233
    FUNCTION        shift and go to state 234
    DESTRUCTOR      shift and go to state 235

    method                         shift and go to state 258

state 230

    (49) method_list -> method .

    END             reduce using rule 49 (method_list -> method .)
    CONSTRUCTOR     reduce using rule 49 (method_list -> method .)
    PROCEDURE       reduce using rule 49 (method_list -> method .)
    FUNCTION        reduce using rule 49 (method_list -> method .)
    DESTRUCTOR      reduce using rule 49 (method_list -> method .)


state 231

    (50) method_list -> empty .

    END             reduce using rule 50 (method_list -> empty .)
    CONSTRUCTOR     reduce using rule 50 (method_list -> empty .)
    PROCEDURE       reduce using rule 50 (method_list -> empty .)
    FUNCTION        reduce using rule 50 (method_list -> empty .)
    DESTRUCTOR      reduce using rule 50 (method_list -> empty .)


state 232

    (51) method -> CONSTRUCTOR . ID LPAREN field_list RPAREN SEMICOLON

    ID              shift and go to state 259


state 233

    (52) method -> PROCEDURE . ID LPAREN field_list RPAREN SEMICOLON

    ID              shift and go to state 260


state 234

    (53) method -> FUNCTION . ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON

    ID              shift and go to state 261


state 235

    (54) method -> DESTRUCTOR . ID SEMICOLON

    ID              shift and go to state 262


state 236

    (28) type_specifier -> LPAREN id_list RPAREN .

    SEMICOLON       reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)
    RPAREN          reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)
    ID              reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)
    CASE            reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)
    END             reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)
    CONSTRUCTOR     reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)
    PROCEDURE       reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)
    FUNCTION        reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)
    DESTRUCTOR      reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)
    OF              reduce using rule 28 (type_specifier -> LPAREN id_list RPAREN .)


state 237

    (33) type_specifier -> STRING LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 263


state 238

    (37) subrange -> NUMBER DOTDOT NUMBER .

    SEMICOLON       reduce using rule 37 (subrange -> NUMBER DOTDOT NUMBER .)
    RBRACKET        reduce using rule 37 (subrange -> NUMBER DOTDOT NUMBER .)
    COMMA           reduce using rule 37 (subrange -> NUMBER DOTDOT NUMBER .)
    RPAREN          reduce using rule 37 (subrange -> NUMBER DOTDOT NUMBER .)
    ID              reduce using rule 37 (subrange -> NUMBER DOTDOT NUMBER .)
    CASE            reduce using rule 37 (subrange -> NUMBER DOTDOT NUMBER .)
    END             reduce using rule 37 (subrange -> NUMBER DOTDOT NUMBER .)
    CONSTRUCTOR     reduce using rule 37 (subrange -> NUMBER DOTDOT NUMBER .)
    PROCEDURE       reduce using rule 37 (subrange -> NUMBER DOTDOT NUMBER .)
    FUNCTION        reduce using rule 37 (subrange -> NUMBER DOTDOT NUMBER .)
    DESTRUCTOR      reduce using rule 37 (subrange -> NUMBER DOTDOT NUMBER .)
    OF              reduce using rule 37 (subrange -> NUMBER DOTDOT NUMBER .)


state 239

    (64) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON . type_specifier SEMICOLON block SEMICOLON
    (65) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON . type_specifier SEMICOLON FORWARD SEMICOLON
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (34) type_specifier -> . ID
    (55) type_specifier -> . LONGINT
    (37) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 101
    FILE            shift and go to state 103
    SET             shift and go to state 104
    RECORD          shift and go to state 105
    OBJECT          shift and go to state 106
    LPAREN          shift and go to state 107
    BOOLEAN_LITERAL shift and go to state 108
    INTEGER         shift and go to state 109
    BYTE            shift and go to state 110
    CHAR            shift and go to state 111
    STRING          shift and go to state 112
    ID              shift and go to state 99
    LONGINT         shift and go to state 114
    NUMBER          shift and go to state 113

    type_specifier                 shift and go to state 264
    subrange                       shift and go to state 102

state 240

    (69) parameter_list -> parameter_list SEMICOLON parameter .

    RPAREN          reduce using rule 69 (parameter_list -> parameter_list SEMICOLON parameter .)
    SEMICOLON       reduce using rule 69 (parameter_list -> parameter_list SEMICOLON parameter .)


state 241

    (71) parameter -> id_list COLON type_specifier .

    RPAREN          reduce using rule 71 (parameter -> id_list COLON type_specifier .)
    SEMICOLON       reduce using rule 71 (parameter -> id_list COLON type_specifier .)


state 242

    (72) parameter -> VAR id_list COLON . type_specifier
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (34) type_specifier -> . ID
    (55) type_specifier -> . LONGINT
    (37) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 101
    FILE            shift and go to state 103
    SET             shift and go to state 104
    RECORD          shift and go to state 105
    OBJECT          shift and go to state 106
    LPAREN          shift and go to state 107
    BOOLEAN_LITERAL shift and go to state 108
    INTEGER         shift and go to state 109
    BYTE            shift and go to state 110
    CHAR            shift and go to state 111
    STRING          shift and go to state 112
    ID              shift and go to state 99
    LONGINT         shift and go to state 114
    NUMBER          shift and go to state 113

    type_specifier                 shift and go to state 265
    subrange                       shift and go to state 102

state 243

    (58) procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .
    (61) procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON . FORWARD SEMICOLON

    PROCEDURE       reduce using rule 58 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    USES            reduce using rule 58 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    CONST           reduce using rule 58 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    TYPE            reduce using rule 58 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    VAR             reduce using rule 58 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 58 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    BEGIN           reduce using rule 58 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    FORWARD         shift and go to state 266


state 244

    (59) procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 267


state 245

    (62) procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD . SEMICOLON

    SEMICOLON       shift and go to state 268


state 246

    (41) field -> id_list COLON type_specifier . SEMICOLON
    (42) field -> id_list COLON type_specifier .

    SEMICOLON       shift and go to state 269
    RPAREN          reduce using rule 42 (field -> id_list COLON type_specifier .)
    ID              reduce using rule 42 (field -> id_list COLON type_specifier .)
    CASE            reduce using rule 42 (field -> id_list COLON type_specifier .)
    END             reduce using rule 42 (field -> id_list COLON type_specifier .)
    CONSTRUCTOR     reduce using rule 42 (field -> id_list COLON type_specifier .)
    PROCEDURE       reduce using rule 42 (field -> id_list COLON type_specifier .)
    FUNCTION        reduce using rule 42 (field -> id_list COLON type_specifier .)
    DESTRUCTOR      reduce using rule 42 (field -> id_list COLON type_specifier .)


state 247

    (97) expression_list_tail -> COMMA expression . expression_list_tail
    (113) expression -> expression . PLUS expression
    (114) expression -> expression . MINUS expression
    (115) expression -> expression . TIMES expression
    (116) expression -> expression . DIVIDE expression
    (117) expression -> expression . MOD expression
    (142) expression -> expression . AND expression
    (143) expression -> expression . OR expression
    (97) expression_list_tail -> . COMMA expression expression_list_tail
    (98) expression_list_tail -> . empty
    (128) empty -> .

    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    MOD             shift and go to state 146
    AND             shift and go to state 147
    OR              shift and go to state 148
    COMMA           shift and go to state 201
    RPAREN          reduce using rule 128 (empty -> .)

    expression_list_tail           shift and go to state 270
    empty                          shift and go to state 202

state 248

    (92) index_list -> index_list COMMA expression .
    (113) expression -> expression . PLUS expression
    (114) expression -> expression . MINUS expression
    (115) expression -> expression . TIMES expression
    (116) expression -> expression . DIVIDE expression
    (117) expression -> expression . MOD expression
    (142) expression -> expression . AND expression
    (143) expression -> expression . OR expression

    RBRACKET        reduce using rule 92 (index_list -> index_list COMMA expression .)
    COMMA           reduce using rule 92 (index_list -> index_list COMMA expression .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    MOD             shift and go to state 146
    AND             shift and go to state 147
    OR              shift and go to state 148


state 249

    (84) if_statement -> IF expression THEN statement ELSE . statement
    (77) statement -> . if_statement
    (78) statement -> . assignment_statement
    (79) statement -> . while_statement
    (80) statement -> . procedure_call
    (81) statement -> . compound_statement
    (82) statement -> . for_statement
    (83) statement -> . empty
    (129) statement -> . READLN
    (130) statement -> . READLN LPAREN variable RPAREN
    (131) statement -> . READLN LBRACKET variable RBRACKET
    (132) statement -> . WRITELN LPAREN expression_list RPAREN
    (133) statement -> . WRITE LPAREN expression_list RPAREN
    (134) statement -> . USES ID SEMICOLON
    (84) if_statement -> . IF expression THEN statement ELSE statement
    (85) if_statement -> . IF expression THEN statement
    (88) assignment_statement -> . variable COLON_EQUAL expression
    (93) while_statement -> . WHILE expression DO statement
    (94) procedure_call -> . ID LPAREN expression_list RPAREN
    (95) procedure_call -> . ID
    (73) compound_statement -> . BEGIN statement_list END
    (86) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (87) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (128) empty -> .
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    READLN          shift and go to state 49
    WRITELN         shift and go to state 51
    WRITE           shift and go to state 52
    USES            shift and go to state 53
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    ID              shift and go to state 54
    BEGIN           shift and go to state 24
    FOR             shift and go to state 57
    ELSE            reduce using rule 128 (empty -> .)
    SEMICOLON       reduce using rule 128 (empty -> .)
    END             reduce using rule 128 (empty -> .)

    statement                      shift and go to state 271
    if_statement                   shift and go to state 42
    assignment_statement           shift and go to state 43
    while_statement                shift and go to state 44
    procedure_call                 shift and go to state 45
    compound_statement             shift and go to state 46
    for_statement                  shift and go to state 47
    empty                          shift and go to state 48
    variable                       shift and go to state 50

state 250

    (66) function_call -> ID LPAREN expression_list RPAREN .

    TIMES           reduce using rule 66 (function_call -> ID LPAREN expression_list RPAREN .)
    DIVIDE          reduce using rule 66 (function_call -> ID LPAREN expression_list RPAREN .)
    DIV             reduce using rule 66 (function_call -> ID LPAREN expression_list RPAREN .)
    PLUS            reduce using rule 66 (function_call -> ID LPAREN expression_list RPAREN .)
    MINUS           reduce using rule 66 (function_call -> ID LPAREN expression_list RPAREN .)
    LESS            reduce using rule 66 (function_call -> ID LPAREN expression_list RPAREN .)
    LESS_EQUAL      reduce using rule 66 (function_call -> ID LPAREN expression_list RPAREN .)
    GREAT           reduce using rule 66 (function_call -> ID LPAREN expression_list RPAREN .)
    GREAT_EQUAL     reduce using rule 66 (function_call -> ID LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 66 (function_call -> ID LPAREN expression_list RPAREN .)
    DIFFERENT       reduce using rule 66 (function_call -> ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 66 (function_call -> ID LPAREN expression_list RPAREN .)
    MOD             reduce using rule 66 (function_call -> ID LPAREN expression_list RPAREN .)
    AND             reduce using rule 66 (function_call -> ID LPAREN expression_list RPAREN .)
    OR              reduce using rule 66 (function_call -> ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 66 (function_call -> ID LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 66 (function_call -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 66 (function_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 66 (function_call -> ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 66 (function_call -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 66 (function_call -> ID LPAREN expression_list RPAREN .)
    RBRACKET        reduce using rule 66 (function_call -> ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 66 (function_call -> ID LPAREN expression_list RPAREN .)
    DOWNTO          reduce using rule 66 (function_call -> ID LPAREN expression_list RPAREN .)


state 251

    (86) for_statement -> FOR ID COLON_EQUAL expression TO . expression DO statement
    (100) expression -> . simple_expression relop simple_expression
    (101) expression -> . simple_expression
    (113) expression -> . expression PLUS expression
    (114) expression -> . expression MINUS expression
    (115) expression -> . expression TIMES expression
    (116) expression -> . expression DIVIDE expression
    (117) expression -> . expression MOD expression
    (142) expression -> . expression AND expression
    (143) expression -> . expression OR expression
    (144) expression -> . NOT expression
    (102) simple_expression -> . term simple_expression_tail
    (107) term -> . factor term_tail
    (67) factor -> . function_call
    (118) factor -> . LPAREN expression RPAREN
    (119) factor -> . variable
    (120) factor -> . NUMBER
    (121) factor -> . STRING_LITERAL
    (66) function_call -> . ID LPAREN expression_list RPAREN
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 272
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 252

    (87) for_statement -> FOR ID COLON_EQUAL expression DOWNTO . expression DO statement
    (100) expression -> . simple_expression relop simple_expression
    (101) expression -> . simple_expression
    (113) expression -> . expression PLUS expression
    (114) expression -> . expression MINUS expression
    (115) expression -> . expression TIMES expression
    (116) expression -> . expression DIVIDE expression
    (117) expression -> . expression MOD expression
    (142) expression -> . expression AND expression
    (143) expression -> . expression OR expression
    (144) expression -> . NOT expression
    (102) simple_expression -> . term simple_expression_tail
    (107) term -> . factor term_tail
    (67) factor -> . function_call
    (118) factor -> . LPAREN expression RPAREN
    (119) factor -> . variable
    (120) factor -> . NUMBER
    (121) factor -> . STRING_LITERAL
    (66) function_call -> . ID LPAREN expression_list RPAREN
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    NOT             shift and go to state 83
    LPAREN          shift and go to state 87
    NUMBER          shift and go to state 89
    STRING_LITERAL  shift and go to state 90
    ID              shift and go to state 91

    expression                     shift and go to state 273
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    function_call                  shift and go to state 86
    variable                       shift and go to state 88

state 253

    (22) type_specifier -> ARRAY LBRACKET type_expression RBRACKET . OF type_specifier

    OF              shift and go to state 274


state 254

    (35) type_expression -> type_expression COMMA . subrange
    (37) subrange -> . NUMBER DOTDOT NUMBER

    NUMBER          shift and go to state 113

    subrange                       shift and go to state 275

state 255

    (26) type_specifier -> RECORD field_list case_part END .

    SEMICOLON       reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)
    RPAREN          reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)
    ID              reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)
    CASE            reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)
    END             reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)
    CONSTRUCTOR     reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)
    PROCEDURE       reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)
    FUNCTION        reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)
    DESTRUCTOR      reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)
    OF              reduce using rule 26 (type_specifier -> RECORD field_list case_part END .)


state 256

    (43) case_part -> CASE ID . COLON type_specifier OF case_list SEMICOLON

    COLON           shift and go to state 276


state 257

    (27) type_specifier -> OBJECT field_list method_list END .

    SEMICOLON       reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)
    RPAREN          reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)
    ID              reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)
    CASE            reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)
    END             reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)
    CONSTRUCTOR     reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)
    PROCEDURE       reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)
    FUNCTION        reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)
    DESTRUCTOR      reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)
    OF              reduce using rule 27 (type_specifier -> OBJECT field_list method_list END .)


state 258

    (48) method_list -> method_list method .

    END             reduce using rule 48 (method_list -> method_list method .)
    CONSTRUCTOR     reduce using rule 48 (method_list -> method_list method .)
    PROCEDURE       reduce using rule 48 (method_list -> method_list method .)
    FUNCTION        reduce using rule 48 (method_list -> method_list method .)
    DESTRUCTOR      reduce using rule 48 (method_list -> method_list method .)


state 259

    (51) method -> CONSTRUCTOR ID . LPAREN field_list RPAREN SEMICOLON

    LPAREN          shift and go to state 277


state 260

    (52) method -> PROCEDURE ID . LPAREN field_list RPAREN SEMICOLON

    LPAREN          shift and go to state 278


state 261

    (53) method -> FUNCTION ID . LPAREN field_list RPAREN COLON type_specifier SEMICOLON

    LPAREN          shift and go to state 279


state 262

    (54) method -> DESTRUCTOR ID . SEMICOLON

    SEMICOLON       shift and go to state 280


state 263

    (33) type_specifier -> STRING LBRACKET NUMBER RBRACKET .

    SEMICOLON       reduce using rule 33 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    RPAREN          reduce using rule 33 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    ID              reduce using rule 33 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    CASE            reduce using rule 33 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    END             reduce using rule 33 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    CONSTRUCTOR     reduce using rule 33 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    PROCEDURE       reduce using rule 33 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    FUNCTION        reduce using rule 33 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    DESTRUCTOR      reduce using rule 33 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)
    OF              reduce using rule 33 (type_specifier -> STRING LBRACKET NUMBER RBRACKET .)


state 264

    (64) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier . SEMICOLON block SEMICOLON
    (65) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier . SEMICOLON FORWARD SEMICOLON

    SEMICOLON       shift and go to state 281


state 265

    (72) parameter -> VAR id_list COLON type_specifier .

    RPAREN          reduce using rule 72 (parameter -> VAR id_list COLON type_specifier .)
    SEMICOLON       reduce using rule 72 (parameter -> VAR id_list COLON type_specifier .)


state 266

    (61) procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD . SEMICOLON

    SEMICOLON       shift and go to state 282


state 267

    (59) procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .

    PROCEDURE       reduce using rule 59 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    USES            reduce using rule 59 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    CONST           reduce using rule 59 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    TYPE            reduce using rule 59 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    VAR             reduce using rule 59 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 59 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)
    BEGIN           reduce using rule 59 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON .)


state 268

    (62) procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .

    PROCEDURE       reduce using rule 62 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)
    USES            reduce using rule 62 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)
    CONST           reduce using rule 62 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)
    TYPE            reduce using rule 62 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)
    VAR             reduce using rule 62 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)
    FUNCTION        reduce using rule 62 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)
    BEGIN           reduce using rule 62 (procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON .)


state 269

    (41) field -> id_list COLON type_specifier SEMICOLON .

    RPAREN          reduce using rule 41 (field -> id_list COLON type_specifier SEMICOLON .)
    ID              reduce using rule 41 (field -> id_list COLON type_specifier SEMICOLON .)
    CASE            reduce using rule 41 (field -> id_list COLON type_specifier SEMICOLON .)
    END             reduce using rule 41 (field -> id_list COLON type_specifier SEMICOLON .)
    CONSTRUCTOR     reduce using rule 41 (field -> id_list COLON type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 41 (field -> id_list COLON type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 41 (field -> id_list COLON type_specifier SEMICOLON .)
    DESTRUCTOR      reduce using rule 41 (field -> id_list COLON type_specifier SEMICOLON .)


state 270

    (97) expression_list_tail -> COMMA expression expression_list_tail .

    RPAREN          reduce using rule 97 (expression_list_tail -> COMMA expression expression_list_tail .)


state 271

    (84) if_statement -> IF expression THEN statement ELSE statement .

    SEMICOLON       reduce using rule 84 (if_statement -> IF expression THEN statement ELSE statement .)
    END             reduce using rule 84 (if_statement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 84 (if_statement -> IF expression THEN statement ELSE statement .)


state 272

    (86) for_statement -> FOR ID COLON_EQUAL expression TO expression . DO statement
    (113) expression -> expression . PLUS expression
    (114) expression -> expression . MINUS expression
    (115) expression -> expression . TIMES expression
    (116) expression -> expression . DIVIDE expression
    (117) expression -> expression . MOD expression
    (142) expression -> expression . AND expression
    (143) expression -> expression . OR expression

    DO              shift and go to state 283
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    MOD             shift and go to state 146
    AND             shift and go to state 147
    OR              shift and go to state 148


state 273

    (87) for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression . DO statement
    (113) expression -> expression . PLUS expression
    (114) expression -> expression . MINUS expression
    (115) expression -> expression . TIMES expression
    (116) expression -> expression . DIVIDE expression
    (117) expression -> expression . MOD expression
    (142) expression -> expression . AND expression
    (143) expression -> expression . OR expression

    DO              shift and go to state 284
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    MOD             shift and go to state 146
    AND             shift and go to state 147
    OR              shift and go to state 148


state 274

    (22) type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF . type_specifier
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (34) type_specifier -> . ID
    (55) type_specifier -> . LONGINT
    (37) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 101
    FILE            shift and go to state 103
    SET             shift and go to state 104
    RECORD          shift and go to state 105
    OBJECT          shift and go to state 106
    LPAREN          shift and go to state 107
    BOOLEAN_LITERAL shift and go to state 108
    INTEGER         shift and go to state 109
    BYTE            shift and go to state 110
    CHAR            shift and go to state 111
    STRING          shift and go to state 112
    ID              shift and go to state 99
    LONGINT         shift and go to state 114
    NUMBER          shift and go to state 113

    type_specifier                 shift and go to state 285
    subrange                       shift and go to state 102

state 275

    (35) type_expression -> type_expression COMMA subrange .

    RBRACKET        reduce using rule 35 (type_expression -> type_expression COMMA subrange .)
    COMMA           reduce using rule 35 (type_expression -> type_expression COMMA subrange .)


state 276

    (43) case_part -> CASE ID COLON . type_specifier OF case_list SEMICOLON
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (34) type_specifier -> . ID
    (55) type_specifier -> . LONGINT
    (37) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 101
    FILE            shift and go to state 103
    SET             shift and go to state 104
    RECORD          shift and go to state 105
    OBJECT          shift and go to state 106
    LPAREN          shift and go to state 107
    BOOLEAN_LITERAL shift and go to state 108
    INTEGER         shift and go to state 109
    BYTE            shift and go to state 110
    CHAR            shift and go to state 111
    STRING          shift and go to state 112
    ID              shift and go to state 99
    LONGINT         shift and go to state 114
    NUMBER          shift and go to state 113

    type_specifier                 shift and go to state 286
    subrange                       shift and go to state 102

state 277

    (51) method -> CONSTRUCTOR ID LPAREN . field_list RPAREN SEMICOLON
    (38) field_list -> . field_list field
    (39) field_list -> . field
    (40) field_list -> . empty
    (41) field -> . id_list COLON type_specifier SEMICOLON
    (42) field -> . id_list COLON type_specifier
    (128) empty -> .
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

  ! shift/reduce conflict for ID resolved as shift
    RPAREN          reduce using rule 128 (empty -> .)
    ID              shift and go to state 28

  ! ID              [ reduce using rule 128 (empty -> .) ]

    field_list                     shift and go to state 287
    field                          shift and go to state 123
    empty                          shift and go to state 124
    id_list                        shift and go to state 125

state 278

    (52) method -> PROCEDURE ID LPAREN . field_list RPAREN SEMICOLON
    (38) field_list -> . field_list field
    (39) field_list -> . field
    (40) field_list -> . empty
    (41) field -> . id_list COLON type_specifier SEMICOLON
    (42) field -> . id_list COLON type_specifier
    (128) empty -> .
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

  ! shift/reduce conflict for ID resolved as shift
    RPAREN          reduce using rule 128 (empty -> .)
    ID              shift and go to state 28

  ! ID              [ reduce using rule 128 (empty -> .) ]

    field_list                     shift and go to state 288
    field                          shift and go to state 123
    empty                          shift and go to state 124
    id_list                        shift and go to state 125

state 279

    (53) method -> FUNCTION ID LPAREN . field_list RPAREN COLON type_specifier SEMICOLON
    (38) field_list -> . field_list field
    (39) field_list -> . field
    (40) field_list -> . empty
    (41) field -> . id_list COLON type_specifier SEMICOLON
    (42) field -> . id_list COLON type_specifier
    (128) empty -> .
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

  ! shift/reduce conflict for ID resolved as shift
    RPAREN          reduce using rule 128 (empty -> .)
    ID              shift and go to state 28

  ! ID              [ reduce using rule 128 (empty -> .) ]

    field_list                     shift and go to state 289
    field                          shift and go to state 123
    empty                          shift and go to state 124
    id_list                        shift and go to state 125

state 280

    (54) method -> DESTRUCTOR ID SEMICOLON .

    END             reduce using rule 54 (method -> DESTRUCTOR ID SEMICOLON .)
    CONSTRUCTOR     reduce using rule 54 (method -> DESTRUCTOR ID SEMICOLON .)
    PROCEDURE       reduce using rule 54 (method -> DESTRUCTOR ID SEMICOLON .)
    FUNCTION        reduce using rule 54 (method -> DESTRUCTOR ID SEMICOLON .)
    DESTRUCTOR      reduce using rule 54 (method -> DESTRUCTOR ID SEMICOLON .)


state 281

    (64) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON . block SEMICOLON
    (65) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON . FORWARD SEMICOLON
    (17) block -> . declaration_sections compound_statement
    (2) declaration_sections -> . declaration_sections declaration_section
    (3) declaration_sections -> . empty
    (128) empty -> .

    FORWARD         shift and go to state 291
    BEGIN           reduce using rule 128 (empty -> .)
    USES            reduce using rule 128 (empty -> .)
    CONST           reduce using rule 128 (empty -> .)
    TYPE            reduce using rule 128 (empty -> .)
    VAR             reduce using rule 128 (empty -> .)
    FUNCTION        reduce using rule 128 (empty -> .)
    PROCEDURE       reduce using rule 128 (empty -> .)

    block                          shift and go to state 290
    declaration_sections           shift and go to state 7
    empty                          shift and go to state 6

state 282

    (61) procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON .

    PROCEDURE       reduce using rule 61 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON .)
    USES            reduce using rule 61 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON .)
    CONST           reduce using rule 61 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON .)
    TYPE            reduce using rule 61 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON .)
    VAR             reduce using rule 61 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON .)
    FUNCTION        reduce using rule 61 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON .)
    BEGIN           reduce using rule 61 (procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON .)


state 283

    (86) for_statement -> FOR ID COLON_EQUAL expression TO expression DO . statement
    (77) statement -> . if_statement
    (78) statement -> . assignment_statement
    (79) statement -> . while_statement
    (80) statement -> . procedure_call
    (81) statement -> . compound_statement
    (82) statement -> . for_statement
    (83) statement -> . empty
    (129) statement -> . READLN
    (130) statement -> . READLN LPAREN variable RPAREN
    (131) statement -> . READLN LBRACKET variable RBRACKET
    (132) statement -> . WRITELN LPAREN expression_list RPAREN
    (133) statement -> . WRITE LPAREN expression_list RPAREN
    (134) statement -> . USES ID SEMICOLON
    (84) if_statement -> . IF expression THEN statement ELSE statement
    (85) if_statement -> . IF expression THEN statement
    (88) assignment_statement -> . variable COLON_EQUAL expression
    (93) while_statement -> . WHILE expression DO statement
    (94) procedure_call -> . ID LPAREN expression_list RPAREN
    (95) procedure_call -> . ID
    (73) compound_statement -> . BEGIN statement_list END
    (86) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (87) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (128) empty -> .
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    READLN          shift and go to state 49
    WRITELN         shift and go to state 51
    WRITE           shift and go to state 52
    USES            shift and go to state 53
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    ID              shift and go to state 54
    BEGIN           shift and go to state 24
    FOR             shift and go to state 57
    ELSE            reduce using rule 128 (empty -> .)
    SEMICOLON       reduce using rule 128 (empty -> .)
    END             reduce using rule 128 (empty -> .)

    statement                      shift and go to state 292
    if_statement                   shift and go to state 42
    assignment_statement           shift and go to state 43
    while_statement                shift and go to state 44
    procedure_call                 shift and go to state 45
    compound_statement             shift and go to state 46
    for_statement                  shift and go to state 47
    empty                          shift and go to state 48
    variable                       shift and go to state 50

state 284

    (87) for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO . statement
    (77) statement -> . if_statement
    (78) statement -> . assignment_statement
    (79) statement -> . while_statement
    (80) statement -> . procedure_call
    (81) statement -> . compound_statement
    (82) statement -> . for_statement
    (83) statement -> . empty
    (129) statement -> . READLN
    (130) statement -> . READLN LPAREN variable RPAREN
    (131) statement -> . READLN LBRACKET variable RBRACKET
    (132) statement -> . WRITELN LPAREN expression_list RPAREN
    (133) statement -> . WRITE LPAREN expression_list RPAREN
    (134) statement -> . USES ID SEMICOLON
    (84) if_statement -> . IF expression THEN statement ELSE statement
    (85) if_statement -> . IF expression THEN statement
    (88) assignment_statement -> . variable COLON_EQUAL expression
    (93) while_statement -> . WHILE expression DO statement
    (94) procedure_call -> . ID LPAREN expression_list RPAREN
    (95) procedure_call -> . ID
    (73) compound_statement -> . BEGIN statement_list END
    (86) for_statement -> . FOR ID COLON_EQUAL expression TO expression DO statement
    (87) for_statement -> . FOR ID COLON_EQUAL expression DOWNTO expression DO statement
    (128) empty -> .
    (89) variable -> . ID
    (90) variable -> . ID LBRACKET index_list RBRACKET

    READLN          shift and go to state 49
    WRITELN         shift and go to state 51
    WRITE           shift and go to state 52
    USES            shift and go to state 53
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    ID              shift and go to state 54
    BEGIN           shift and go to state 24
    FOR             shift and go to state 57
    ELSE            reduce using rule 128 (empty -> .)
    SEMICOLON       reduce using rule 128 (empty -> .)
    END             reduce using rule 128 (empty -> .)

    statement                      shift and go to state 293
    if_statement                   shift and go to state 42
    assignment_statement           shift and go to state 43
    while_statement                shift and go to state 44
    procedure_call                 shift and go to state 45
    compound_statement             shift and go to state 46
    for_statement                  shift and go to state 47
    empty                          shift and go to state 48
    variable                       shift and go to state 50

state 285

    (22) type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .

    SEMICOLON       reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    RPAREN          reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    ID              reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    CASE            reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    END             reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    CONSTRUCTOR     reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    PROCEDURE       reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    FUNCTION        reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    DESTRUCTOR      reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)
    OF              reduce using rule 22 (type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier .)


state 286

    (43) case_part -> CASE ID COLON type_specifier . OF case_list SEMICOLON

    OF              shift and go to state 294


state 287

    (51) method -> CONSTRUCTOR ID LPAREN field_list . RPAREN SEMICOLON
    (38) field_list -> field_list . field
    (41) field -> . id_list COLON type_specifier SEMICOLON
    (42) field -> . id_list COLON type_specifier
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 295
    ID              shift and go to state 28

    field                          shift and go to state 191
    id_list                        shift and go to state 125

state 288

    (52) method -> PROCEDURE ID LPAREN field_list . RPAREN SEMICOLON
    (38) field_list -> field_list . field
    (41) field -> . id_list COLON type_specifier SEMICOLON
    (42) field -> . id_list COLON type_specifier
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 296
    ID              shift and go to state 28

    field                          shift and go to state 191
    id_list                        shift and go to state 125

state 289

    (53) method -> FUNCTION ID LPAREN field_list . RPAREN COLON type_specifier SEMICOLON
    (38) field_list -> field_list . field
    (41) field -> . id_list COLON type_specifier SEMICOLON
    (42) field -> . id_list COLON type_specifier
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 297
    ID              shift and go to state 28

    field                          shift and go to state 191
    id_list                        shift and go to state 125

state 290

    (64) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 298


state 291

    (65) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD . SEMICOLON

    SEMICOLON       shift and go to state 299


state 292

    (86) for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement .

    SEMICOLON       reduce using rule 86 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement .)
    END             reduce using rule 86 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement .)
    ELSE            reduce using rule 86 (for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement .)


state 293

    (87) for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement .

    SEMICOLON       reduce using rule 87 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement .)
    END             reduce using rule 87 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement .)
    ELSE            reduce using rule 87 (for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement .)


state 294

    (43) case_part -> CASE ID COLON type_specifier OF . case_list SEMICOLON
    (45) case_list -> . case_list SEMICOLON case_element
    (46) case_list -> . case_element
    (47) case_element -> . NUMBER COLON LPAREN field_list RPAREN

    NUMBER          shift and go to state 302

    case_list                      shift and go to state 300
    case_element                   shift and go to state 301

state 295

    (51) method -> CONSTRUCTOR ID LPAREN field_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 303


state 296

    (52) method -> PROCEDURE ID LPAREN field_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 304


state 297

    (53) method -> FUNCTION ID LPAREN field_list RPAREN . COLON type_specifier SEMICOLON

    COLON           shift and go to state 305


state 298

    (64) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .

    USES            reduce using rule 64 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    CONST           reduce using rule 64 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    TYPE            reduce using rule 64 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    VAR             reduce using rule 64 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 64 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    PROCEDURE       reduce using rule 64 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)
    BEGIN           reduce using rule 64 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON .)


state 299

    (65) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .

    USES            reduce using rule 65 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    CONST           reduce using rule 65 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    TYPE            reduce using rule 65 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    VAR             reduce using rule 65 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    FUNCTION        reduce using rule 65 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    PROCEDURE       reduce using rule 65 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)
    BEGIN           reduce using rule 65 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON .)


state 300

    (43) case_part -> CASE ID COLON type_specifier OF case_list . SEMICOLON
    (45) case_list -> case_list . SEMICOLON case_element

    SEMICOLON       shift and go to state 306


state 301

    (46) case_list -> case_element .

    SEMICOLON       reduce using rule 46 (case_list -> case_element .)


state 302

    (47) case_element -> NUMBER . COLON LPAREN field_list RPAREN

    COLON           shift and go to state 307


state 303

    (51) method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .

    END             reduce using rule 51 (method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .)
    CONSTRUCTOR     reduce using rule 51 (method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .)
    PROCEDURE       reduce using rule 51 (method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 51 (method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .)
    DESTRUCTOR      reduce using rule 51 (method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON .)


state 304

    (52) method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .

    END             reduce using rule 52 (method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    CONSTRUCTOR     reduce using rule 52 (method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    PROCEDURE       reduce using rule 52 (method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 52 (method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)
    DESTRUCTOR      reduce using rule 52 (method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON .)


state 305

    (53) method -> FUNCTION ID LPAREN field_list RPAREN COLON . type_specifier SEMICOLON
    (22) type_specifier -> . ARRAY LBRACKET type_expression RBRACKET OF type_specifier
    (23) type_specifier -> . subrange
    (24) type_specifier -> . FILE OF type_specifier
    (25) type_specifier -> . SET OF type_specifier
    (26) type_specifier -> . RECORD field_list case_part END
    (27) type_specifier -> . OBJECT field_list method_list END
    (28) type_specifier -> . LPAREN id_list RPAREN
    (29) type_specifier -> . BOOLEAN_LITERAL
    (30) type_specifier -> . INTEGER
    (31) type_specifier -> . BYTE
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . STRING LBRACKET NUMBER RBRACKET
    (34) type_specifier -> . ID
    (55) type_specifier -> . LONGINT
    (37) subrange -> . NUMBER DOTDOT NUMBER

    ARRAY           shift and go to state 101
    FILE            shift and go to state 103
    SET             shift and go to state 104
    RECORD          shift and go to state 105
    OBJECT          shift and go to state 106
    LPAREN          shift and go to state 107
    BOOLEAN_LITERAL shift and go to state 108
    INTEGER         shift and go to state 109
    BYTE            shift and go to state 110
    CHAR            shift and go to state 111
    STRING          shift and go to state 112
    ID              shift and go to state 99
    LONGINT         shift and go to state 114
    NUMBER          shift and go to state 113

    type_specifier                 shift and go to state 308
    subrange                       shift and go to state 102

state 306

    (43) case_part -> CASE ID COLON type_specifier OF case_list SEMICOLON .
    (45) case_list -> case_list SEMICOLON . case_element
    (47) case_element -> . NUMBER COLON LPAREN field_list RPAREN

    END             reduce using rule 43 (case_part -> CASE ID COLON type_specifier OF case_list SEMICOLON .)
    NUMBER          shift and go to state 302

    case_element                   shift and go to state 309

state 307

    (47) case_element -> NUMBER COLON . LPAREN field_list RPAREN

    LPAREN          shift and go to state 310


state 308

    (53) method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier . SEMICOLON

    SEMICOLON       shift and go to state 311


state 309

    (45) case_list -> case_list SEMICOLON case_element .

    SEMICOLON       reduce using rule 45 (case_list -> case_list SEMICOLON case_element .)


state 310

    (47) case_element -> NUMBER COLON LPAREN . field_list RPAREN
    (38) field_list -> . field_list field
    (39) field_list -> . field
    (40) field_list -> . empty
    (41) field -> . id_list COLON type_specifier SEMICOLON
    (42) field -> . id_list COLON type_specifier
    (128) empty -> .
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

  ! shift/reduce conflict for ID resolved as shift
    RPAREN          reduce using rule 128 (empty -> .)
    ID              shift and go to state 28

  ! ID              [ reduce using rule 128 (empty -> .) ]

    field_list                     shift and go to state 312
    field                          shift and go to state 123
    empty                          shift and go to state 124
    id_list                        shift and go to state 125

state 311

    (53) method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .

    END             reduce using rule 53 (method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .)
    CONSTRUCTOR     reduce using rule 53 (method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .)
    PROCEDURE       reduce using rule 53 (method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .)
    FUNCTION        reduce using rule 53 (method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .)
    DESTRUCTOR      reduce using rule 53 (method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON .)


state 312

    (47) case_element -> NUMBER COLON LPAREN field_list . RPAREN
    (38) field_list -> field_list . field
    (41) field -> . id_list COLON type_specifier SEMICOLON
    (42) field -> . id_list COLON type_specifier
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 313
    ID              shift and go to state 28

    field                          shift and go to state 191
    id_list                        shift and go to state 125

state 313

    (47) case_element -> NUMBER COLON LPAREN field_list RPAREN .

    SEMICOLON       reduce using rule 47 (case_element -> NUMBER COLON LPAREN field_list RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for USES in state 5 resolved as shift
WARNING: shift/reduce conflict for CONST in state 5 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 5 resolved as shift
WARNING: shift/reduce conflict for VAR in state 5 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 5 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 5 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 14 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 67 resolved as shift
WARNING: shift/reduce conflict for ID in state 67 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 84 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 84 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 85 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 85 resolved as shift
WARNING: shift/reduce conflict for ID in state 105 resolved as shift
WARNING: shift/reduce conflict for ID in state 106 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 156 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 156 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 156 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 156 resolved as shift
WARNING: shift/reduce conflict for MOD in state 156 resolved as shift
WARNING: shift/reduce conflict for AND in state 156 resolved as shift
WARNING: shift/reduce conflict for OR in state 156 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 181 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 181 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 181 resolved as shift
WARNING: shift/reduce conflict for DESTRUCTOR in state 181 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 207 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 208 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 208 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 208 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 208 resolved as shift
WARNING: shift/reduce conflict for MOD in state 208 resolved as shift
WARNING: shift/reduce conflict for AND in state 208 resolved as shift
WARNING: shift/reduce conflict for OR in state 208 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 209 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 209 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 209 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 209 resolved as shift
WARNING: shift/reduce conflict for MOD in state 209 resolved as shift
WARNING: shift/reduce conflict for AND in state 209 resolved as shift
WARNING: shift/reduce conflict for OR in state 209 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 210 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 210 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 210 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 210 resolved as shift
WARNING: shift/reduce conflict for MOD in state 210 resolved as shift
WARNING: shift/reduce conflict for AND in state 210 resolved as shift
WARNING: shift/reduce conflict for OR in state 210 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 211 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 211 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 211 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 211 resolved as shift
WARNING: shift/reduce conflict for MOD in state 211 resolved as shift
WARNING: shift/reduce conflict for AND in state 211 resolved as shift
WARNING: shift/reduce conflict for OR in state 211 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 212 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 212 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 212 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 212 resolved as shift
WARNING: shift/reduce conflict for MOD in state 212 resolved as shift
WARNING: shift/reduce conflict for AND in state 212 resolved as shift
WARNING: shift/reduce conflict for OR in state 212 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 213 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 213 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 213 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 213 resolved as shift
WARNING: shift/reduce conflict for MOD in state 213 resolved as shift
WARNING: shift/reduce conflict for AND in state 213 resolved as shift
WARNING: shift/reduce conflict for OR in state 213 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 214 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 214 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 214 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 214 resolved as shift
WARNING: shift/reduce conflict for MOD in state 214 resolved as shift
WARNING: shift/reduce conflict for AND in state 214 resolved as shift
WARNING: shift/reduce conflict for OR in state 214 resolved as shift
WARNING: shift/reduce conflict for ID in state 277 resolved as shift
WARNING: shift/reduce conflict for ID in state 278 resolved as shift
WARNING: shift/reduce conflict for ID in state 279 resolved as shift
WARNING: shift/reduce conflict for ID in state 310 resolved as shift
