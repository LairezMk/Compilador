
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocELSEAND ARRAY BEGIN BOOLEAN_LITERAL BYTE CASE CHAR CHARACTER_LITERAL COLON COLON_EQUAL COMMA CONST DIFFERENT DIV DIVIDE DO DOT DOTDOT DOWNTO ELSE END EQUAL FALSE FILE FOR FUNCTION GOTO GREAT GREAT_EQUAL ID IF IN INTEGER LABEL LBLOCK LBRACKET LESS LESS_EQUAL LONGINT LPAREN MINUS MOD NIL NOT NUMBER OF OR PACKED PLUS PROCEDURE PROGRAM RBLOCK RBRACKET READLINE READLN RECORD REPEAT RPAREN SEMICOLON SET STRING STRING_LITERAL THEN TIMES TO TRUE TYPE UNTIL USES VAR WHILE WITH WRITE WRITELNprogram : PROGRAM ID SEMICOLON declaration_sections block DOTdeclaration_sections : declaration_sections declaration_section\n                            | emptydeclaration_section : uses_opt\n                           | constant_declaration\n                           | type_declaration\n                           | var_declaration\n                           | procedure_declaration\n                           | function_declarationuses_opt : USES ID SEMICOLON\n                | emptyvar_declaration : VAR declaration_listdeclaration_list : declaration\n                        | declaration_list declarationdeclaration : id_list COLON type_specifier SEMICOLONblock : declaration_sections compound_statementid_list : IDid_list : id_list COMMA IDtype_declaration : TYPE type_listtype_list : type_definition\n                 | type_list type_definitiontype_definition : ID EQUAL type_specifier SEMICOLONtype_specifier : ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier\n                      | INTEGER\n                      | BYTE\n                      | CHAR\n                      | IDtype_specifier : LONGINTprocedure_declarations : procedure_declaration\n                              | procedure_declarations procedure_declarationprocedure_declaration : PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON\n                             | PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOTfunction_declaration : FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLONfunction_call : ID LPAREN expression_list RPARENfactor : function_callparameter_list : parameter\n                      | parameter_list SEMICOLON parameterparameter : id_list COLON type_specifier\n                 | VAR id_list COLON type_specifiercompound_statement : BEGIN statement_list ENDstatement_list : statement statement_list_tailstatement_list_tail : SEMICOLON statement statement_list_tail\n                           | emptystatement : if_statement\n                 | assignment_statement\n                 | while_statement\n                 | procedure_call\n                 | compound_statement\n                 | for_statement\n                 | emptyif_statement : IF expression THEN statement ELSE statement\n                 | IF expression THEN statementfor_statement : FOR ID COLON_EQUAL expression TO expression DO statement\n                     | FOR ID COLON_EQUAL expression DOWNTO expression DO statementassignment_statement : variable COLON_EQUAL expressionvariable : IDvariable : ID LBRACKET expression RBRACKETwhile_statement : WHILE expression DO statementprocedure_call : ID LPAREN expression_list RPARENexpression_list : expression expression_list_tailexpression_list_tail : COMMA expression expression_list_tail\n                            | emptyexpression_list : emptyexpression : simple_expression relop simple_expression\n                  | simple_expressionsimple_expression : term simple_expression_tailsimple_expression_tail : addop term\n                              | emptyaddop : PLUS\n             | MINUSterm : factor term_tailterm_tail : mulop factor\n                 | emptymulop : TIMES\n             | DIVIDE\n             | DIVexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expressionfactor : LPAREN expression RPARENfactor : variablefactor : NUMBERfactor : STRING_LITERALrelop : LESS\n             | LESS_EQUAL\n             | GREAT\n             | GREAT_EQUAL\n             | EQUAL\n             | DIFFERENTempty :statement : READLNstatement : READLN LPAREN variable RPAREN\n                 | READLN LBRACKET variable RBRACKETstatement : WRITELN LPAREN expression_list RPARENstatement : WRITE LPAREN expression_list RPARENstatement : USES ID SEMICOLONconstant_declaration : CONST constant_listconstant_list : constant\n                     | constant_list constantconstant : ID EQUAL CHARACTER_LITERAL SEMICOLON\n                | ID EQUAL NUMBER SEMICOLON\n                | ID EQUAL STRING_LITERAL SEMICOLONexpression : expression AND expression\n                  | expression OR expression\n                  | NOT expression'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,26,],[0,-1,]),'ID':([2,17,18,19,20,21,22,24,28,29,31,32,34,35,53,55,56,57,59,61,62,63,64,65,66,67,70,72,73,74,75,76,78,79,82,86,108,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,139,141,142,144,146,147,148,150,151,152,153,154,155,156,157,158,160,161,169,193,194,196,198,199,200,212,213,218,],[3,27,30,33,37,38,39,54,30,-100,33,-20,37,-13,77,90,90,92,-101,-21,96,-14,96,104,37,37,54,112,112,90,90,90,90,90,90,90,37,54,90,90,90,90,90,90,90,90,-86,-87,-88,-89,-90,-91,90,-69,-70,90,-74,-75,-76,90,54,90,-102,-103,-104,-22,90,-15,37,96,90,96,96,54,90,90,90,54,54,96,]),'SEMICOLON':([3,23,24,27,41,42,43,44,45,46,47,48,49,68,70,77,81,83,84,85,87,88,89,90,93,94,95,96,97,99,100,101,102,103,105,106,109,110,114,119,122,137,138,140,143,145,151,159,165,166,167,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,187,191,192,196,197,201,202,203,205,212,213,215,216,217,220,],[4,-16,-92,58,70,-44,-45,-46,-47,-48,-49,-50,-93,-40,-92,119,-65,-92,-92,-35,-83,-84,-85,-56,153,154,155,-27,156,-24,-25,-26,-28,158,160,-36,160,70,-55,-98,-92,-107,-66,-68,-71,-73,-92,190,-94,-95,-96,-97,-59,-57,-52,-77,-78,-79,-80,-81,-105,-106,-64,-67,-72,-82,-58,-37,-38,-92,-34,209,-39,211,-51,-92,-92,219,-53,-54,-23,]),'USES':([4,5,6,7,9,10,11,12,13,14,15,16,24,25,28,29,31,32,34,35,58,59,61,63,70,122,151,153,154,155,156,158,190,196,209,210,211,212,213,219,],[-92,17,-3,17,-2,-4,-5,-6,-7,-8,-9,-3,53,-11,-99,-100,-19,-20,-12,-13,-10,-101,-21,-14,53,53,53,-102,-103,-104,-22,-15,-92,53,-31,-32,-92,53,53,-33,]),'CONST':([4,5,6,7,9,10,11,12,13,14,15,16,25,28,29,31,32,34,35,58,59,61,63,153,154,155,156,158,190,209,210,211,219,],[-92,18,-3,18,-2,-4,-5,-6,-7,-8,-9,-3,-11,-99,-100,-19,-20,-12,-13,-10,-101,-21,-14,-102,-103,-104,-22,-15,-92,-31,-32,-92,-33,]),'TYPE':([4,5,6,7,9,10,11,12,13,14,15,16,25,28,29,31,32,34,35,58,59,61,63,153,154,155,156,158,190,209,210,211,219,],[-92,19,-3,19,-2,-4,-5,-6,-7,-8,-9,-3,-11,-99,-100,-19,-20,-12,-13,-10,-101,-21,-14,-102,-103,-104,-22,-15,-92,-31,-32,-92,-33,]),'VAR':([4,5,6,7,9,10,11,12,13,14,15,16,25,28,29,31,32,34,35,58,59,61,63,66,67,153,154,155,156,158,160,190,209,210,211,219,],[-92,20,-3,20,-2,-4,-5,-6,-7,-8,-9,-3,-11,-99,-100,-19,-20,-12,-13,-10,-101,-21,-14,108,108,-102,-103,-104,-22,-15,108,-92,-31,-32,-92,-33,]),'PROCEDURE':([4,5,6,7,9,10,11,12,13,14,15,16,25,28,29,31,32,34,35,58,59,61,63,153,154,155,156,158,190,209,210,211,219,],[-92,21,-3,21,-2,-4,-5,-6,-7,-8,-9,-3,-11,-99,-100,-19,-20,-12,-13,-10,-101,-21,-14,-102,-103,-104,-22,-15,-92,-31,-32,-92,-33,]),'FUNCTION':([4,5,6,7,9,10,11,12,13,14,15,16,25,28,29,31,32,34,35,58,59,61,63,153,154,155,156,158,190,209,210,211,219,],[-92,22,-3,22,-2,-4,-5,-6,-7,-8,-9,-3,-11,-99,-100,-19,-20,-12,-13,-10,-101,-21,-14,-102,-103,-104,-22,-15,-92,-31,-32,-92,-33,]),'BEGIN':([4,5,6,7,9,10,11,12,13,14,15,16,24,25,28,29,31,32,34,35,58,59,61,63,70,122,151,153,154,155,156,158,190,196,209,210,211,212,213,219,],[-92,-92,-3,24,-2,-4,-5,-6,-7,-8,-9,-3,24,-11,-99,-100,-19,-20,-12,-13,-10,-101,-21,-14,24,24,24,-102,-103,-104,-22,-15,-92,24,-31,-32,-92,24,24,-33,]),'DOT':([8,23,68,201,],[26,-16,-40,210,]),'READLN':([24,70,122,151,196,212,213,],[49,49,49,49,49,49,49,]),'WRITELN':([24,70,122,151,196,212,213,],[51,51,51,51,51,51,51,]),'WRITE':([24,70,122,151,196,212,213,],[52,52,52,52,52,52,52,]),'IF':([24,70,122,151,196,212,213,],[55,55,55,55,55,55,55,]),'WHILE':([24,70,122,151,196,212,213,],[56,56,56,56,56,56,56,]),'FOR':([24,70,122,151,196,212,213,],[57,57,57,57,57,57,57,]),'END':([24,40,41,42,43,44,45,46,47,48,49,68,69,70,71,81,83,84,85,87,88,89,90,110,114,119,122,137,138,140,143,145,151,164,165,166,167,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,187,196,197,205,212,213,216,217,],[-92,68,-92,-44,-45,-46,-47,-48,-49,-50,-93,-40,-41,-92,-43,-65,-92,-92,-35,-83,-84,-85,-56,-92,-55,-98,-92,-107,-66,-68,-71,-73,-92,-42,-94,-95,-96,-97,-59,-57,-52,-77,-78,-79,-80,-81,-105,-106,-64,-67,-72,-82,-58,-92,-34,-51,-92,-92,-53,-54,]),'EQUAL':([30,33,81,83,84,85,87,88,89,90,138,140,143,145,173,183,184,185,197,],[60,62,135,-92,-92,-35,-83,-84,-85,-56,-66,-68,-71,-73,-57,-67,-72,-82,-34,]),'COLON':([36,37,104,107,162,163,],[64,-17,-18,161,193,194,]),'COMMA':([36,37,81,83,84,85,87,88,89,90,104,107,116,137,138,140,143,145,162,173,175,176,177,178,179,180,181,182,183,184,185,195,197,],[65,-17,-65,-92,-92,-35,-83,-84,-85,-56,-18,65,169,-107,-66,-68,-71,-73,65,-57,-77,-78,-79,-80,-81,-105,-106,-64,-67,-72,-82,169,-34,]),'LPAREN':([38,39,49,51,52,54,55,56,74,75,76,78,79,82,86,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,139,141,142,144,146,147,148,150,152,157,169,198,199,200,],[66,67,72,75,76,78,86,86,86,86,86,86,86,86,86,150,86,86,86,86,86,86,86,86,-86,-87,-88,-89,-90,-91,86,-69,-70,86,-74,-75,-76,86,86,86,86,86,86,86,]),'ELSE':([42,43,44,45,46,47,48,49,68,81,83,84,85,87,88,89,90,114,119,122,137,138,140,143,145,151,165,166,167,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,187,196,197,205,212,213,216,217,],[-44,-45,-46,-47,-48,-49,-50,-93,-40,-65,-92,-92,-35,-83,-84,-85,-56,-55,-98,-92,-107,-66,-68,-71,-73,-92,-94,-95,-96,-97,-59,-57,196,-77,-78,-79,-80,-81,-105,-106,-64,-67,-72,-82,-58,-92,-34,-51,-92,-92,-53,-54,]),'LBRACKET':([49,54,90,98,112,],[73,79,79,157,79,]),'COLON_EQUAL':([50,54,92,173,],[74,-56,152,-57,]),'NOT':([55,56,74,75,76,78,79,82,86,123,124,125,126,127,128,129,150,152,157,169,198,199,200,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'NUMBER':([55,56,60,74,75,76,78,79,82,86,123,124,125,126,127,128,129,130,131,132,133,134,135,136,139,141,142,144,146,147,148,150,152,157,169,198,199,200,],[88,88,94,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,-86,-87,-88,-89,-90,-91,88,-69,-70,88,-74,-75,-76,88,88,88,88,88,88,88,]),'STRING_LITERAL':([55,56,60,74,75,76,78,79,82,86,123,124,125,126,127,128,129,130,131,132,133,134,135,136,139,141,142,144,146,147,148,150,152,157,169,198,199,200,],[89,89,95,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,-86,-87,-88,-89,-90,-91,89,-69,-70,89,-74,-75,-76,89,89,89,89,89,89,89,]),'CHARACTER_LITERAL':([60,],[93,]),'ARRAY':([62,64,161,193,194,218,],[98,98,98,98,98,98,]),'INTEGER':([62,64,161,193,194,218,],[99,99,99,99,99,99,]),'BYTE':([62,64,161,193,194,218,],[100,100,100,100,100,100,]),'CHAR':([62,64,161,193,194,218,],[101,101,101,101,101,101,]),'LONGINT':([62,64,161,193,194,218,],[102,102,102,102,102,102,]),'RPAREN':([75,76,78,81,83,84,85,87,88,89,90,96,99,100,101,102,105,106,109,111,112,115,116,117,118,120,137,138,140,143,145,149,150,168,170,173,175,176,177,178,179,180,181,182,183,184,185,186,191,192,195,197,202,204,220,],[-92,-92,-92,-65,-92,-92,-35,-83,-84,-85,-56,-27,-24,-25,-26,-28,159,-36,163,165,-56,167,-92,-63,171,172,-107,-66,-68,-71,-73,185,-92,-60,-62,-57,-77,-78,-79,-80,-81,-105,-106,-64,-67,-72,-82,197,-37,-38,-92,-34,-39,-61,-23,]),'THEN':([80,81,83,84,85,87,88,89,90,137,138,140,143,145,173,175,176,177,178,179,180,181,182,183,184,185,197,],[122,-65,-92,-92,-35,-83,-84,-85,-56,-107,-66,-68,-71,-73,-57,-77,-78,-79,-80,-81,-105,-106,-64,-67,-72,-82,-34,]),'PLUS':([80,81,83,84,85,87,88,89,90,91,114,116,121,137,138,140,143,145,149,173,175,176,177,178,179,180,181,182,183,184,185,188,189,195,197,206,207,208,],[123,-65,141,-92,-35,-83,-84,-85,-56,123,123,123,123,123,-66,-68,-71,-73,123,-57,123,123,123,123,123,123,123,-64,-67,-72,-82,123,123,123,-34,123,123,123,]),'MINUS':([80,81,83,84,85,87,88,89,90,91,114,116,121,137,138,140,143,145,149,173,175,176,177,178,179,180,181,182,183,184,185,188,189,195,197,206,207,208,],[124,-65,142,-92,-35,-83,-84,-85,-56,124,124,124,124,124,-66,-68,-71,-73,124,-57,124,124,124,124,124,124,124,-64,-67,-72,-82,124,124,124,-34,124,124,124,]),'TIMES':([80,81,83,84,85,87,88,89,90,91,114,116,121,137,138,140,143,145,149,173,175,176,177,178,179,180,181,182,183,184,185,188,189,195,197,206,207,208,],[125,-65,-92,146,-35,-83,-84,-85,-56,125,125,125,125,125,-66,-68,-71,-73,125,-57,125,125,125,125,125,125,125,-64,-67,-72,-82,125,125,125,-34,125,125,125,]),'DIVIDE':([80,81,83,84,85,87,88,89,90,91,114,116,121,137,138,140,143,145,149,173,175,176,177,178,179,180,181,182,183,184,185,188,189,195,197,206,207,208,],[126,-65,-92,147,-35,-83,-84,-85,-56,126,126,126,126,126,-66,-68,-71,-73,126,-57,126,126,126,126,126,126,126,-64,-67,-72,-82,126,126,126,-34,126,126,126,]),'MOD':([80,81,83,84,85,87,88,89,90,91,114,116,121,137,138,140,143,145,149,173,175,176,177,178,179,180,181,182,183,184,185,188,189,195,197,206,207,208,],[127,-65,-92,-92,-35,-83,-84,-85,-56,127,127,127,127,127,-66,-68,-71,-73,127,-57,127,127,127,127,127,127,127,-64,-67,-72,-82,127,127,127,-34,127,127,127,]),'AND':([80,81,83,84,85,87,88,89,90,91,114,116,121,137,138,140,143,145,149,173,175,176,177,178,179,180,181,182,183,184,185,188,189,195,197,206,207,208,],[128,-65,-92,-92,-35,-83,-84,-85,-56,128,128,128,128,128,-66,-68,-71,-73,128,-57,128,128,128,128,128,128,128,-64,-67,-72,-82,128,128,128,-34,128,128,128,]),'OR':([80,81,83,84,85,87,88,89,90,91,114,116,121,137,138,140,143,145,149,173,175,176,177,178,179,180,181,182,183,184,185,188,189,195,197,206,207,208,],[129,-65,-92,-92,-35,-83,-84,-85,-56,129,129,129,129,129,-66,-68,-71,-73,129,-57,129,129,129,129,129,129,129,-64,-67,-72,-82,129,129,129,-34,129,129,129,]),'DO':([81,83,84,85,87,88,89,90,91,137,138,140,143,145,173,175,176,177,178,179,180,181,182,183,184,185,197,206,207,],[-65,-92,-92,-35,-83,-84,-85,-56,151,-107,-66,-68,-71,-73,-57,-77,-78,-79,-80,-81,-105,-106,-64,-67,-72,-82,-34,212,213,]),'RBRACKET':([81,83,84,85,87,88,89,90,112,113,121,137,138,140,143,145,173,175,176,177,178,179,180,181,182,183,184,185,197,208,],[-65,-92,-92,-35,-83,-84,-85,-56,-56,166,173,-107,-66,-68,-71,-73,-57,-77,-78,-79,-80,-81,-105,-106,-64,-67,-72,-82,-34,214,]),'TO':([81,83,84,85,87,88,89,90,137,138,140,143,145,173,175,176,177,178,179,180,181,182,183,184,185,188,197,],[-65,-92,-92,-35,-83,-84,-85,-56,-107,-66,-68,-71,-73,-57,-77,-78,-79,-80,-81,-105,-106,-64,-67,-72,-82,198,-34,]),'DOWNTO':([81,83,84,85,87,88,89,90,137,138,140,143,145,173,175,176,177,178,179,180,181,182,183,184,185,188,197,],[-65,-92,-92,-35,-83,-84,-85,-56,-107,-66,-68,-71,-73,-57,-77,-78,-79,-80,-81,-105,-106,-64,-67,-72,-82,199,-34,]),'DOTDOT':([81,83,84,85,87,88,89,90,137,138,140,143,145,173,175,176,177,178,179,180,181,182,183,184,185,189,197,],[-65,-92,-92,-35,-83,-84,-85,-56,-107,-66,-68,-71,-73,-57,-77,-78,-79,-80,-81,-105,-106,-64,-67,-72,-82,200,-34,]),'LESS':([81,83,84,85,87,88,89,90,138,140,143,145,173,183,184,185,197,],[131,-92,-92,-35,-83,-84,-85,-56,-66,-68,-71,-73,-57,-67,-72,-82,-34,]),'LESS_EQUAL':([81,83,84,85,87,88,89,90,138,140,143,145,173,183,184,185,197,],[132,-92,-92,-35,-83,-84,-85,-56,-66,-68,-71,-73,-57,-67,-72,-82,-34,]),'GREAT':([81,83,84,85,87,88,89,90,138,140,143,145,173,183,184,185,197,],[133,-92,-92,-35,-83,-84,-85,-56,-66,-68,-71,-73,-57,-67,-72,-82,-34,]),'GREAT_EQUAL':([81,83,84,85,87,88,89,90,138,140,143,145,173,183,184,185,197,],[134,-92,-92,-35,-83,-84,-85,-56,-66,-68,-71,-73,-57,-67,-72,-82,-34,]),'DIFFERENT':([81,83,84,85,87,88,89,90,138,140,143,145,173,183,184,185,197,],[136,-92,-92,-35,-83,-84,-85,-56,-66,-68,-71,-73,-57,-67,-72,-82,-34,]),'DIV':([84,85,87,88,89,90,173,185,197,],[148,-35,-83,-84,-85,-56,-57,-82,-34,]),'OF':([214,],[218,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_sections':([4,5,190,211,],[5,7,7,7,]),'empty':([4,5,7,24,41,70,75,76,78,83,84,110,116,122,150,151,190,195,196,211,212,213,],[6,16,25,48,71,48,117,117,117,140,145,71,170,48,117,48,6,170,48,6,48,48,]),'block':([5,190,211,],[8,201,215,]),'declaration_section':([5,7,],[9,9,]),'uses_opt':([5,7,],[10,10,]),'constant_declaration':([5,7,],[11,11,]),'type_declaration':([5,7,],[12,12,]),'var_declaration':([5,7,],[13,13,]),'procedure_declaration':([5,7,],[14,14,]),'function_declaration':([5,7,],[15,15,]),'compound_statement':([7,24,70,122,151,196,212,213,],[23,46,46,46,46,46,46,46,]),'constant_list':([18,],[28,]),'constant':([18,28,],[29,59,]),'type_list':([19,],[31,]),'type_definition':([19,31,],[32,61,]),'declaration_list':([20,],[34,]),'declaration':([20,34,],[35,63,]),'id_list':([20,34,66,67,108,160,],[36,36,107,107,162,107,]),'statement_list':([24,],[40,]),'statement':([24,70,122,151,196,212,213,],[41,110,174,187,205,216,217,]),'if_statement':([24,70,122,151,196,212,213,],[42,42,42,42,42,42,42,]),'assignment_statement':([24,70,122,151,196,212,213,],[43,43,43,43,43,43,43,]),'while_statement':([24,70,122,151,196,212,213,],[44,44,44,44,44,44,44,]),'procedure_call':([24,70,122,151,196,212,213,],[45,45,45,45,45,45,45,]),'for_statement':([24,70,122,151,196,212,213,],[47,47,47,47,47,47,47,]),'variable':([24,55,56,70,72,73,74,75,76,78,79,82,86,122,123,124,125,126,127,128,129,130,139,144,150,151,152,157,169,196,198,199,200,212,213,],[50,87,87,50,111,113,87,87,87,87,87,87,87,50,87,87,87,87,87,87,87,87,87,87,87,50,87,87,87,50,87,87,87,50,50,]),'statement_list_tail':([41,110,],[69,164,]),'expression':([55,56,74,75,76,78,79,82,86,123,124,125,126,127,128,129,150,152,157,169,198,199,200,],[80,91,114,116,116,116,121,137,149,175,176,177,178,179,180,181,116,188,189,195,206,207,208,]),'simple_expression':([55,56,74,75,76,78,79,82,86,123,124,125,126,127,128,129,130,150,152,157,169,198,199,200,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,182,81,81,81,81,81,81,81,]),'term':([55,56,74,75,76,78,79,82,86,123,124,125,126,127,128,129,130,139,150,152,157,169,198,199,200,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,183,83,83,83,83,83,83,83,]),'factor':([55,56,74,75,76,78,79,82,86,123,124,125,126,127,128,129,130,139,144,150,152,157,169,198,199,200,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,184,84,84,84,84,84,84,84,]),'function_call':([55,56,74,75,76,78,79,82,86,123,124,125,126,127,128,129,130,139,144,150,152,157,169,198,199,200,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'type_specifier':([62,64,161,193,194,218,],[97,103,192,202,203,220,]),'parameter_list':([66,67,],[105,109,]),'parameter':([66,67,160,],[106,106,191,]),'expression_list':([75,76,78,150,],[115,118,120,186,]),'relop':([81,],[130,]),'simple_expression_tail':([83,],[138,]),'addop':([83,],[139,]),'term_tail':([84,],[143,]),'mulop':([84,],[144,]),'expression_list_tail':([116,195,],[168,204,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON declaration_sections block DOT','program',6,'p_program','Parser_MiniPascal.py',18),
  ('declaration_sections -> declaration_sections declaration_section','declaration_sections',2,'p_declaration_sections','Parser_MiniPascal.py',40),
  ('declaration_sections -> empty','declaration_sections',1,'p_declaration_sections','Parser_MiniPascal.py',41),
  ('declaration_section -> uses_opt','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',48),
  ('declaration_section -> constant_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',49),
  ('declaration_section -> type_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',50),
  ('declaration_section -> var_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',51),
  ('declaration_section -> procedure_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',52),
  ('declaration_section -> function_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',53),
  ('uses_opt -> USES ID SEMICOLON','uses_opt',3,'p_uses_opt','Parser_MiniPascal.py',57),
  ('uses_opt -> empty','uses_opt',1,'p_uses_opt','Parser_MiniPascal.py',58),
  ('var_declaration -> VAR declaration_list','var_declaration',2,'p_var_declaration','Parser_MiniPascal.py',65),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser_MiniPascal.py',69),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','Parser_MiniPascal.py',70),
  ('declaration -> id_list COLON type_specifier SEMICOLON','declaration',4,'p_declaration','Parser_MiniPascal.py',77),
  ('block -> declaration_sections compound_statement','block',2,'p_block','Parser_MiniPascal.py',82),
  ('id_list -> ID','id_list',1,'p_id_list_single','Parser_MiniPascal.py',111),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list_multi','Parser_MiniPascal.py',115),
  ('type_declaration -> TYPE type_list','type_declaration',2,'p_type_declaration','Parser_MiniPascal.py',119),
  ('type_list -> type_definition','type_list',1,'p_type_list','Parser_MiniPascal.py',123),
  ('type_list -> type_list type_definition','type_list',2,'p_type_list','Parser_MiniPascal.py',124),
  ('type_definition -> ID EQUAL type_specifier SEMICOLON','type_definition',4,'p_type_definition','Parser_MiniPascal.py',131),
  ('type_specifier -> ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier','type_specifier',8,'p_type_specifier','Parser_MiniPascal.py',135),
  ('type_specifier -> INTEGER','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',136),
  ('type_specifier -> BYTE','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',137),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',138),
  ('type_specifier -> ID','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',139),
  ('type_specifier -> LONGINT','type_specifier',1,'p_type_specifier_longint','Parser_MiniPascal.py',155),
  ('procedure_declarations -> procedure_declaration','procedure_declarations',1,'p_procedure_declarations','Parser_MiniPascal.py',160),
  ('procedure_declarations -> procedure_declarations procedure_declaration','procedure_declarations',2,'p_procedure_declarations','Parser_MiniPascal.py',161),
  ('procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON','procedure_declaration',8,'p_procedure_declaration','Parser_MiniPascal.py',171),
  ('procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT','procedure_declaration',8,'p_procedure_declaration','Parser_MiniPascal.py',172),
  ('function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON','function_declaration',10,'p_function_declaration','Parser_MiniPascal.py',176),
  ('function_call -> ID LPAREN expression_list RPAREN','function_call',4,'p_function_call','Parser_MiniPascal.py',184),
  ('factor -> function_call','factor',1,'p_factor_function_call','Parser_MiniPascal.py',188),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','Parser_MiniPascal.py',193),
  ('parameter_list -> parameter_list SEMICOLON parameter','parameter_list',3,'p_parameter_list','Parser_MiniPascal.py',194),
  ('parameter -> id_list COLON type_specifier','parameter',3,'p_parameter','Parser_MiniPascal.py',201),
  ('parameter -> VAR id_list COLON type_specifier','parameter',4,'p_parameter','Parser_MiniPascal.py',202),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','Parser_MiniPascal.py',210),
  ('statement_list -> statement statement_list_tail','statement_list',2,'p_statement_list_multi','Parser_MiniPascal.py',215),
  ('statement_list_tail -> SEMICOLON statement statement_list_tail','statement_list_tail',3,'p_statement_list_tail','Parser_MiniPascal.py',219),
  ('statement_list_tail -> empty','statement_list_tail',1,'p_statement_list_tail','Parser_MiniPascal.py',220),
  ('statement -> if_statement','statement',1,'p_statement','Parser_MiniPascal.py',228),
  ('statement -> assignment_statement','statement',1,'p_statement','Parser_MiniPascal.py',229),
  ('statement -> while_statement','statement',1,'p_statement','Parser_MiniPascal.py',230),
  ('statement -> procedure_call','statement',1,'p_statement','Parser_MiniPascal.py',231),
  ('statement -> compound_statement','statement',1,'p_statement','Parser_MiniPascal.py',232),
  ('statement -> for_statement','statement',1,'p_statement','Parser_MiniPascal.py',233),
  ('statement -> empty','statement',1,'p_statement','Parser_MiniPascal.py',234),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_if_statement','Parser_MiniPascal.py',238),
  ('if_statement -> IF expression THEN statement','if_statement',4,'p_if_statement','Parser_MiniPascal.py',239),
  ('for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement','for_statement',8,'p_for_statement','Parser_MiniPascal.py',246),
  ('for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement','for_statement',8,'p_for_statement','Parser_MiniPascal.py',247),
  ('assignment_statement -> variable COLON_EQUAL expression','assignment_statement',3,'p_assignment_statement','Parser_MiniPascal.py',255),
  ('variable -> ID','variable',1,'p_variable_simple','Parser_MiniPascal.py',260),
  ('variable -> ID LBRACKET expression RBRACKET','variable',4,'p_variable_index','Parser_MiniPascal.py',264),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','Parser_MiniPascal.py',269),
  ('procedure_call -> ID LPAREN expression_list RPAREN','procedure_call',4,'p_procedure_call','Parser_MiniPascal.py',274),
  ('expression_list -> expression expression_list_tail','expression_list',2,'p_expression_list_multi','Parser_MiniPascal.py',279),
  ('expression_list_tail -> COMMA expression expression_list_tail','expression_list_tail',3,'p_expression_list_tail','Parser_MiniPascal.py',283),
  ('expression_list_tail -> empty','expression_list_tail',1,'p_expression_list_tail','Parser_MiniPascal.py',284),
  ('expression_list -> empty','expression_list',1,'p_expression_list_empty','Parser_MiniPascal.py',291),
  ('expression -> simple_expression relop simple_expression','expression',3,'p_expression','Parser_MiniPascal.py',296),
  ('expression -> simple_expression','expression',1,'p_expression','Parser_MiniPascal.py',297),
  ('simple_expression -> term simple_expression_tail','simple_expression',2,'p_simple_expression','Parser_MiniPascal.py',305),
  ('simple_expression_tail -> addop term','simple_expression_tail',2,'p_simple_expression_tail','Parser_MiniPascal.py',312),
  ('simple_expression_tail -> empty','simple_expression_tail',1,'p_simple_expression_tail','Parser_MiniPascal.py',313),
  ('addop -> PLUS','addop',1,'p_addop','Parser_MiniPascal.py',320),
  ('addop -> MINUS','addop',1,'p_addop','Parser_MiniPascal.py',321),
  ('term -> factor term_tail','term',2,'p_term','Parser_MiniPascal.py',326),
  ('term_tail -> mulop factor','term_tail',2,'p_term_tail','Parser_MiniPascal.py',333),
  ('term_tail -> empty','term_tail',1,'p_term_tail','Parser_MiniPascal.py',334),
  ('mulop -> TIMES','mulop',1,'p_mulop','Parser_MiniPascal.py',341),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','Parser_MiniPascal.py',342),
  ('mulop -> DIV','mulop',1,'p_mulop','Parser_MiniPascal.py',343),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',348),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',349),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',350),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',351),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',352),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','Parser_MiniPascal.py',359),
  ('factor -> variable','factor',1,'p_factor_variable','Parser_MiniPascal.py',363),
  ('factor -> NUMBER','factor',1,'p_factor_number','Parser_MiniPascal.py',367),
  ('factor -> STRING_LITERAL','factor',1,'p_factor_string','Parser_MiniPascal.py',371),
  ('relop -> LESS','relop',1,'p_relop','Parser_MiniPascal.py',378),
  ('relop -> LESS_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',379),
  ('relop -> GREAT','relop',1,'p_relop','Parser_MiniPascal.py',380),
  ('relop -> GREAT_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',381),
  ('relop -> EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',382),
  ('relop -> DIFFERENT','relop',1,'p_relop','Parser_MiniPascal.py',383),
  ('empty -> <empty>','empty',0,'p_empty','Parser_MiniPascal.py',388),
  ('statement -> READLN','statement',1,'p_statement_readln','Parser_MiniPascal.py',392),
  ('statement -> READLN LPAREN variable RPAREN','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',396),
  ('statement -> READLN LBRACKET variable RBRACKET','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',397),
  ('statement -> WRITELN LPAREN expression_list RPAREN','statement',4,'p_statement_writeln','Parser_MiniPascal.py',401),
  ('statement -> WRITE LPAREN expression_list RPAREN','statement',4,'p_statement_write','Parser_MiniPascal.py',405),
  ('statement -> USES ID SEMICOLON','statement',3,'p_statement_uses','Parser_MiniPascal.py',410),
  ('constant_declaration -> CONST constant_list','constant_declaration',2,'p_constant_declaration','Parser_MiniPascal.py',415),
  ('constant_list -> constant','constant_list',1,'p_constant_list','Parser_MiniPascal.py',419),
  ('constant_list -> constant_list constant','constant_list',2,'p_constant_list','Parser_MiniPascal.py',420),
  ('constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',427),
  ('constant -> ID EQUAL NUMBER SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',428),
  ('constant -> ID EQUAL STRING_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',429),
  ('expression -> expression AND expression','expression',3,'p_expression_logical','Parser_MiniPascal.py',434),
  ('expression -> expression OR expression','expression',3,'p_expression_logical','Parser_MiniPascal.py',435),
  ('expression -> NOT expression','expression',2,'p_expression_logical','Parser_MiniPascal.py',436),
]
