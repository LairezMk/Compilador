
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY BEGIN BOOLEAN_LITERAL BYTE CASE CHAR CHARACTER_LITERAL COLON COLON_EQUAL COMMA CONST DIFFERENT DIV DIVIDE DO DOT DOTDOT DOWNTO ELSE END EQUAL FALSE FILE FOR FUNCTION GOTO GREAT GREAT_EQUAL ID IF IN INTEGER LABEL LBLOCK LBRACKET LESS LESS_EQUAL LONGINT LPAREN MINUS MOD NIL NOT NUMBER OF OR PACKED PLUS PROCEDURE PROGRAM RBLOCK RBRACKET READLINE READLN RECORD REPEAT RPAREN SEMICOLON SET STRING STRING_LITERAL THEN TIMES TO TRUE TYPE UNTIL USES VAR WHILE WITH WRITE WRITELNprogram : PROGRAM ID SEMICOLON uses_opt block DOTuses_opt : USES ID SEMICOLON\n                | emptyblock : declarations compound_statementdeclarations : VAR declaration_list procedure_declarationsdeclarations : VAR declaration_listdeclarations : procedure_declarationsdeclarations : emptydeclaration_list : declaration\n                        | declaration_list declarationdeclaration : id_list COLON type_specifier SEMICOLONid_list : IDid_list : id_list COMMA IDtype_specifier : INTEGERtype_specifier : LONGINTtype_specifier : ARRAY LBRACKET NUMBER DOTDOT NUMBER RBRACKET OF INTEGERprocedure_declarations : procedure_declaration\n                              | procedure_declarations procedure_declarationprocedure_declaration : PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLONparameter_list : id_list COLON type_specifiercompound_statement : BEGIN statement_list ENDstatement_list : statement statement_list_tailstatement_list_tail : SEMICOLON statement statement_list_tail\n                           | emptystatement : assignment_statementstatement : if_statementstatement : FOR ID COLON_EQUAL expression TO expression DO statementstatement : while_statementstatement : procedure_callstatement : compound_statementstatement : emptyassignment_statement : variable COLON_EQUAL expressionvariable : IDvariable : ID LBRACKET expression RBRACKETif_statement : IF expression THEN statement ELSE statementwhile_statement : WHILE expression DO statementprocedure_call : ID LPAREN expression_list RPARENexpression_list : expression expression_list_tailexpression_list_tail : COMMA expression expression_list_tail\n                            | emptyexpression_list : emptyexpression : simple_expression relop simple_expression\n                  | simple_expressionsimple_expression : term simple_expression_tailsimple_expression_tail : addop term\n                              | emptyaddop : PLUS\n             | MINUSterm : factor term_tailterm_tail : mulop factor\n                 | emptymulop : TIMES\n             | DIVIDE\n             | DIVexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expressionfactor : LPAREN expression RPARENfactor : variablefactor : NUMBERfactor : STRING_LITERALrelop : LESS\n             | LESS_EQUAL\n             | GREAT\n             | GREAT_EQUAL\n             | EQUAL\n             | DIFFERENTempty :statement : READLNstatement : READLN LPAREN ID RPARENstatement : WRITELN LPAREN expression_list RPARENstatement : WRITE LPAREN expression_list RPARENstatement : USES ID SEMICOLON'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,16,],[0,-1,]),'ID':([2,6,10,14,18,19,20,30,39,41,42,44,46,47,50,53,54,55,56,57,59,64,78,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,105,107,109,110,111,113,114,122,142,144,152,],[3,15,22,24,31,22,-9,52,58,68,68,-10,74,22,31,68,68,83,68,68,68,68,68,31,68,68,68,68,68,68,-64,-65,-66,-67,-68,-69,68,-47,-48,68,-52,-53,-54,31,-11,68,68,31,31,]),'SEMICOLON':([3,15,17,18,27,28,29,32,33,34,35,36,48,50,58,61,62,63,65,66,67,68,70,71,72,77,86,87,101,103,106,108,113,116,120,124,125,126,127,129,130,131,132,133,134,135,136,137,138,144,146,149,152,154,156,],[4,25,-4,-70,50,-25,-26,-28,-29,-30,-31,-71,-21,-70,86,-43,-70,-70,-61,-62,-63,-33,114,-14,-15,50,-75,-32,-44,-46,-49,-51,-70,140,-37,-34,-72,-73,-74,-55,-56,-57,-58,-59,-42,-45,-50,-60,-36,-70,151,-35,-70,-27,-16,]),'USES':([4,18,50,88,113,144,152,],[6,39,39,39,39,39,39,]),'VAR':([4,5,7,25,140,],[-70,10,-3,-2,10,]),'PROCEDURE':([4,5,7,11,13,19,20,23,25,43,44,114,140,151,],[-70,14,-3,14,-17,14,-9,-18,-2,14,-10,-11,14,-19,]),'BEGIN':([4,5,7,9,11,12,13,18,19,20,23,25,43,44,50,88,113,114,140,144,151,152,],[-70,-70,-3,18,-7,-8,-17,18,-6,-9,-18,-2,-5,-10,18,18,18,-11,-70,18,-19,18,]),'DOT':([8,17,48,],[16,-4,-21,]),'FOR':([18,50,88,113,144,152,],[30,30,30,30,30,30,]),'READLN':([18,50,88,113,144,152,],[36,36,36,36,36,36,]),'WRITELN':([18,50,88,113,144,152,],[37,37,37,37,37,37,]),'WRITE':([18,50,88,113,144,152,],[38,38,38,38,38,38,]),'IF':([18,50,88,113,144,152,],[41,41,41,41,41,41,]),'WHILE':([18,50,88,113,144,152,],[42,42,42,42,42,42,]),'END':([18,26,27,28,29,32,33,34,35,36,48,49,50,51,61,62,63,65,66,67,68,77,86,87,101,103,106,108,113,118,120,124,125,126,127,129,130,131,132,133,134,135,136,137,138,144,149,152,154,],[-70,48,-70,-25,-26,-28,-29,-30,-31,-71,-21,-22,-70,-24,-43,-70,-70,-61,-62,-63,-33,-70,-75,-32,-44,-46,-49,-51,-70,-23,-37,-34,-72,-73,-74,-55,-56,-57,-58,-59,-42,-45,-50,-60,-36,-70,-35,-70,-27,]),'COLON':([21,22,74,76,],[45,-12,-13,117,]),'COMMA':([21,22,61,62,63,65,66,67,68,74,76,80,101,103,106,108,124,129,130,131,132,133,134,135,136,137,143,],[46,-12,-43,-70,-70,-61,-62,-63,-33,-13,46,122,-44,-46,-49,-51,-34,-55,-56,-57,-58,-59,-42,-45,-50,-60,122,]),'LPAREN':([24,31,36,37,38,41,42,53,54,56,57,59,64,78,89,90,91,92,93,94,95,96,97,98,99,100,102,104,105,107,109,110,111,122,142,],[47,53,55,56,57,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-64,-65,-66,-67,-68,-69,64,-47,-48,64,-52,-53,-54,64,64,]),'ELSE':([28,29,32,33,34,35,36,48,61,62,63,65,66,67,68,86,87,88,101,103,106,108,113,120,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,144,149,152,154,],[-25,-26,-28,-29,-30,-31,-71,-21,-43,-70,-70,-61,-62,-63,-33,-75,-32,-70,-44,-46,-49,-51,-70,-37,-34,-72,-73,-74,144,-55,-56,-57,-58,-59,-42,-45,-50,-60,-36,-70,-35,-70,-27,]),'COLON_EQUAL':([31,40,52,124,],[-33,59,78,-34,]),'LBRACKET':([31,68,73,],[54,54,115,]),'NUMBER':([41,42,53,54,56,57,59,64,78,89,90,91,92,93,94,95,96,97,98,99,100,102,104,105,107,109,110,111,115,122,142,145,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-64,-65,-66,-67,-68,-69,66,-47,-48,66,-52,-53,-54,139,66,66,150,]),'STRING_LITERAL':([41,42,53,54,56,57,59,64,78,89,90,91,92,93,94,95,96,97,98,99,100,102,104,105,107,109,110,111,122,142,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-64,-65,-66,-67,-68,-69,67,-47,-48,67,-52,-53,-54,67,67,]),'INTEGER':([45,117,155,],[71,71,156,]),'LONGINT':([45,117,],[72,72,]),'ARRAY':([45,117,],[73,73,]),'RPAREN':([53,56,57,61,62,63,65,66,67,68,71,72,75,79,80,81,83,84,85,101,103,106,108,112,121,123,124,129,130,131,132,133,134,135,136,137,141,143,148,156,],[-70,-70,-70,-43,-70,-70,-61,-62,-63,-33,-14,-15,116,120,-70,-41,125,126,127,-44,-46,-49,-51,137,-38,-40,-34,-55,-56,-57,-58,-59,-42,-45,-50,-60,-20,-70,-39,-16,]),'THEN':([60,61,62,63,65,66,67,68,101,103,106,108,124,129,130,131,132,133,134,135,136,137,],[88,-43,-70,-70,-61,-62,-63,-33,-44,-46,-49,-51,-34,-55,-56,-57,-58,-59,-42,-45,-50,-60,]),'PLUS':([60,61,62,63,65,66,67,68,69,80,82,87,101,103,106,108,112,119,124,129,130,131,132,133,134,135,136,137,143,147,],[89,-43,104,-70,-61,-62,-63,-33,89,89,89,89,-44,-46,-49,-51,89,89,-34,89,89,89,89,89,-42,-45,-50,-60,89,89,]),'MINUS':([60,61,62,63,65,66,67,68,69,80,82,87,101,103,106,108,112,119,124,129,130,131,132,133,134,135,136,137,143,147,],[90,-43,105,-70,-61,-62,-63,-33,90,90,90,90,-44,-46,-49,-51,90,90,-34,90,90,90,90,90,-42,-45,-50,-60,90,90,]),'TIMES':([60,61,62,63,65,66,67,68,69,80,82,87,101,103,106,108,112,119,124,129,130,131,132,133,134,135,136,137,143,147,],[91,-43,-70,109,-61,-62,-63,-33,91,91,91,91,-44,-46,-49,-51,91,91,-34,91,91,91,91,91,-42,-45,-50,-60,91,91,]),'DIVIDE':([60,61,62,63,65,66,67,68,69,80,82,87,101,103,106,108,112,119,124,129,130,131,132,133,134,135,136,137,143,147,],[92,-43,-70,110,-61,-62,-63,-33,92,92,92,92,-44,-46,-49,-51,92,92,-34,92,92,92,92,92,-42,-45,-50,-60,92,92,]),'MOD':([60,61,62,63,65,66,67,68,69,80,82,87,101,103,106,108,112,119,124,129,130,131,132,133,134,135,136,137,143,147,],[93,-43,-70,-70,-61,-62,-63,-33,93,93,93,93,-44,-46,-49,-51,93,93,-34,93,93,93,93,93,-42,-45,-50,-60,93,93,]),'DO':([61,62,63,65,66,67,68,69,101,103,106,108,124,129,130,131,132,133,134,135,136,137,147,],[-43,-70,-70,-61,-62,-63,-33,113,-44,-46,-49,-51,-34,-55,-56,-57,-58,-59,-42,-45,-50,-60,152,]),'RBRACKET':([61,62,63,65,66,67,68,82,101,103,106,108,124,129,130,131,132,133,134,135,136,137,150,],[-43,-70,-70,-61,-62,-63,-33,124,-44,-46,-49,-51,-34,-55,-56,-57,-58,-59,-42,-45,-50,-60,153,]),'TO':([61,62,63,65,66,67,68,101,103,106,108,119,124,129,130,131,132,133,134,135,136,137,],[-43,-70,-70,-61,-62,-63,-33,-44,-46,-49,-51,142,-34,-55,-56,-57,-58,-59,-42,-45,-50,-60,]),'LESS':([61,62,63,65,66,67,68,101,103,106,108,124,135,136,137,],[95,-70,-70,-61,-62,-63,-33,-44,-46,-49,-51,-34,-45,-50,-60,]),'LESS_EQUAL':([61,62,63,65,66,67,68,101,103,106,108,124,135,136,137,],[96,-70,-70,-61,-62,-63,-33,-44,-46,-49,-51,-34,-45,-50,-60,]),'GREAT':([61,62,63,65,66,67,68,101,103,106,108,124,135,136,137,],[97,-70,-70,-61,-62,-63,-33,-44,-46,-49,-51,-34,-45,-50,-60,]),'GREAT_EQUAL':([61,62,63,65,66,67,68,101,103,106,108,124,135,136,137,],[98,-70,-70,-61,-62,-63,-33,-44,-46,-49,-51,-34,-45,-50,-60,]),'EQUAL':([61,62,63,65,66,67,68,101,103,106,108,124,135,136,137,],[99,-70,-70,-61,-62,-63,-33,-44,-46,-49,-51,-34,-45,-50,-60,]),'DIFFERENT':([61,62,63,65,66,67,68,101,103,106,108,124,135,136,137,],[100,-70,-70,-61,-62,-63,-33,-44,-46,-49,-51,-34,-45,-50,-60,]),'DIV':([63,65,66,67,68,124,137,],[111,-61,-62,-63,-33,-34,-60,]),'DOTDOT':([139,],[145,]),'OF':([153,],[155,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'uses_opt':([4,],[5,]),'empty':([4,5,18,27,50,53,56,57,62,63,77,80,88,113,140,143,144,152,],[7,12,35,51,35,81,81,81,103,108,51,123,35,35,12,123,35,35,]),'block':([5,140,],[8,146,]),'declarations':([5,140,],[9,9,]),'procedure_declarations':([5,19,140,],[11,43,11,]),'procedure_declaration':([5,11,19,43,140,],[13,23,13,23,13,]),'compound_statement':([9,18,50,88,113,144,152,],[17,34,34,34,34,34,34,]),'declaration_list':([10,],[19,]),'declaration':([10,19,],[20,44,]),'id_list':([10,19,47,],[21,21,76,]),'statement_list':([18,],[26,]),'statement':([18,50,88,113,144,152,],[27,77,128,138,149,154,]),'assignment_statement':([18,50,88,113,144,152,],[28,28,28,28,28,28,]),'if_statement':([18,50,88,113,144,152,],[29,29,29,29,29,29,]),'while_statement':([18,50,88,113,144,152,],[32,32,32,32,32,32,]),'procedure_call':([18,50,88,113,144,152,],[33,33,33,33,33,33,]),'variable':([18,41,42,50,53,54,56,57,59,64,78,88,89,90,91,92,93,94,102,107,113,122,142,144,152,],[40,65,65,40,65,65,65,65,65,65,65,40,65,65,65,65,65,65,65,65,40,65,65,40,40,]),'statement_list_tail':([27,77,],[49,118,]),'expression':([41,42,53,54,56,57,59,64,78,89,90,91,92,93,122,142,],[60,69,80,82,80,80,87,112,119,129,130,131,132,133,143,147,]),'simple_expression':([41,42,53,54,56,57,59,64,78,89,90,91,92,93,94,122,142,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,134,61,61,]),'term':([41,42,53,54,56,57,59,64,78,89,90,91,92,93,94,102,122,142,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,135,62,62,]),'factor':([41,42,53,54,56,57,59,64,78,89,90,91,92,93,94,102,107,122,142,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,136,63,63,]),'type_specifier':([45,117,],[70,141,]),'parameter_list':([47,],[75,]),'expression_list':([53,56,57,],[79,84,85,]),'relop':([61,],[94,]),'simple_expression_tail':([62,],[101,]),'addop':([62,],[102,]),'term_tail':([63,],[106,]),'mulop':([63,],[107,]),'expression_list_tail':([80,143,],[121,148,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON uses_opt block DOT','program',6,'p_program','Parser_MiniPascal.py',12),
  ('uses_opt -> USES ID SEMICOLON','uses_opt',3,'p_uses_opt','Parser_MiniPascal.py',16),
  ('uses_opt -> empty','uses_opt',1,'p_uses_opt','Parser_MiniPascal.py',17),
  ('block -> declarations compound_statement','block',2,'p_block','Parser_MiniPascal.py',25),
  ('declarations -> VAR declaration_list procedure_declarations','declarations',3,'p_declarations_var_proc','Parser_MiniPascal.py',30),
  ('declarations -> VAR declaration_list','declarations',2,'p_declarations_var_only','Parser_MiniPascal.py',34),
  ('declarations -> procedure_declarations','declarations',1,'p_declarations_proc_only','Parser_MiniPascal.py',38),
  ('declarations -> empty','declarations',1,'p_declarations_empty','Parser_MiniPascal.py',42),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser_MiniPascal.py',47),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','Parser_MiniPascal.py',48),
  ('declaration -> id_list COLON type_specifier SEMICOLON','declaration',4,'p_declaration','Parser_MiniPascal.py',56),
  ('id_list -> ID','id_list',1,'p_id_list_single','Parser_MiniPascal.py',61),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list_multi','Parser_MiniPascal.py',65),
  ('type_specifier -> INTEGER','type_specifier',1,'p_type_specifier_int','Parser_MiniPascal.py',70),
  ('type_specifier -> LONGINT','type_specifier',1,'p_type_specifier_longint','Parser_MiniPascal.py',86),
  ('type_specifier -> ARRAY LBRACKET NUMBER DOTDOT NUMBER RBRACKET OF INTEGER','type_specifier',8,'p_type_specifier_array','Parser_MiniPascal.py',91),
  ('procedure_declarations -> procedure_declaration','procedure_declarations',1,'p_procedure_declarations','Parser_MiniPascal.py',97),
  ('procedure_declarations -> procedure_declarations procedure_declaration','procedure_declarations',2,'p_procedure_declarations','Parser_MiniPascal.py',98),
  ('procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON','procedure_declaration',8,'p_procedure_declaration','Parser_MiniPascal.py',108),
  ('parameter_list -> id_list COLON type_specifier','parameter_list',3,'p_parameter_list','Parser_MiniPascal.py',113),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','Parser_MiniPascal.py',118),
  ('statement_list -> statement statement_list_tail','statement_list',2,'p_statement_list_multi','Parser_MiniPascal.py',123),
  ('statement_list_tail -> SEMICOLON statement statement_list_tail','statement_list_tail',3,'p_statement_list_tail','Parser_MiniPascal.py',127),
  ('statement_list_tail -> empty','statement_list_tail',1,'p_statement_list_tail','Parser_MiniPascal.py',128),
  ('statement -> assignment_statement','statement',1,'p_statement_assignment','Parser_MiniPascal.py',136),
  ('statement -> if_statement','statement',1,'p_statement_if','Parser_MiniPascal.py',140),
  ('statement -> FOR ID COLON_EQUAL expression TO expression DO statement','statement',8,'p_statement_for','Parser_MiniPascal.py',148),
  ('statement -> while_statement','statement',1,'p_statement_while','Parser_MiniPascal.py',153),
  ('statement -> procedure_call','statement',1,'p_statement_proc_call','Parser_MiniPascal.py',157),
  ('statement -> compound_statement','statement',1,'p_statement_compound','Parser_MiniPascal.py',161),
  ('statement -> empty','statement',1,'p_statement_empty','Parser_MiniPascal.py',165),
  ('assignment_statement -> variable COLON_EQUAL expression','assignment_statement',3,'p_assignment_statement','Parser_MiniPascal.py',170),
  ('variable -> ID','variable',1,'p_variable_simple','Parser_MiniPascal.py',175),
  ('variable -> ID LBRACKET expression RBRACKET','variable',4,'p_variable_index','Parser_MiniPascal.py',179),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_if_statement','Parser_MiniPascal.py',184),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','Parser_MiniPascal.py',189),
  ('procedure_call -> ID LPAREN expression_list RPAREN','procedure_call',4,'p_procedure_call','Parser_MiniPascal.py',194),
  ('expression_list -> expression expression_list_tail','expression_list',2,'p_expression_list_multi','Parser_MiniPascal.py',199),
  ('expression_list_tail -> COMMA expression expression_list_tail','expression_list_tail',3,'p_expression_list_tail','Parser_MiniPascal.py',203),
  ('expression_list_tail -> empty','expression_list_tail',1,'p_expression_list_tail','Parser_MiniPascal.py',204),
  ('expression_list -> empty','expression_list',1,'p_expression_list_empty','Parser_MiniPascal.py',211),
  ('expression -> simple_expression relop simple_expression','expression',3,'p_expression','Parser_MiniPascal.py',216),
  ('expression -> simple_expression','expression',1,'p_expression','Parser_MiniPascal.py',217),
  ('simple_expression -> term simple_expression_tail','simple_expression',2,'p_simple_expression','Parser_MiniPascal.py',225),
  ('simple_expression_tail -> addop term','simple_expression_tail',2,'p_simple_expression_tail','Parser_MiniPascal.py',232),
  ('simple_expression_tail -> empty','simple_expression_tail',1,'p_simple_expression_tail','Parser_MiniPascal.py',233),
  ('addop -> PLUS','addop',1,'p_addop','Parser_MiniPascal.py',240),
  ('addop -> MINUS','addop',1,'p_addop','Parser_MiniPascal.py',241),
  ('term -> factor term_tail','term',2,'p_term','Parser_MiniPascal.py',246),
  ('term_tail -> mulop factor','term_tail',2,'p_term_tail','Parser_MiniPascal.py',253),
  ('term_tail -> empty','term_tail',1,'p_term_tail','Parser_MiniPascal.py',254),
  ('mulop -> TIMES','mulop',1,'p_mulop','Parser_MiniPascal.py',261),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','Parser_MiniPascal.py',262),
  ('mulop -> DIV','mulop',1,'p_mulop','Parser_MiniPascal.py',263),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',270),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',271),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',272),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',273),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',274),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','Parser_MiniPascal.py',281),
  ('factor -> variable','factor',1,'p_factor_variable','Parser_MiniPascal.py',285),
  ('factor -> NUMBER','factor',1,'p_factor_number','Parser_MiniPascal.py',289),
  ('factor -> STRING_LITERAL','factor',1,'p_factor_string','Parser_MiniPascal.py',293),
  ('relop -> LESS','relop',1,'p_relop','Parser_MiniPascal.py',298),
  ('relop -> LESS_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',299),
  ('relop -> GREAT','relop',1,'p_relop','Parser_MiniPascal.py',300),
  ('relop -> GREAT_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',301),
  ('relop -> EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',302),
  ('relop -> DIFFERENT','relop',1,'p_relop','Parser_MiniPascal.py',303),
  ('empty -> <empty>','empty',0,'p_empty','Parser_MiniPascal.py',308),
  ('statement -> READLN','statement',1,'p_statement_readln','Parser_MiniPascal.py',312),
  ('statement -> READLN LPAREN ID RPAREN','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',316),
  ('statement -> WRITELN LPAREN expression_list RPAREN','statement',4,'p_statement_writeln','Parser_MiniPascal.py',320),
  ('statement -> WRITE LPAREN expression_list RPAREN','statement',4,'p_statement_write','Parser_MiniPascal.py',324),
  ('statement -> USES ID SEMICOLON','statement',3,'p_statement_uses','Parser_MiniPascal.py',330),
]
