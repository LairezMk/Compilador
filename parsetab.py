
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocELSEAND ARRAY BEGIN BOOLEAN_LITERAL BYTE CASE CHAR CHARACTER_LITERAL COLON COLON_EQUAL COMMA CONST CONSTRUCTOR DESTRUCTOR DIFFERENT DIV DIVIDE DO DOT DOTDOT DOWNTO ELSE END EQUAL FALSE FILE FOR FORWARD FUNCTION GOTO GREAT GREAT_EQUAL ID IF IN INTEGER LABEL LBLOCK LBRACKET LESS LESS_EQUAL LONGINT LPAREN MINUS MOD NIL NOT NUMBER OBJECT OF OR PACKED PLUS PROCEDURE PROGRAM RBLOCK RBRACKET READLINE READLN RECORD REPEAT RPAREN SEMICOLON SET STRING STRING_LITERAL SUBRANGE THEN TIMES TO TRUE TYPE UNTIL USES VAR WHILE WITH WRITE WRITELNprogram : PROGRAM ID SEMICOLON declaration_sections block DOTdeclaration_sections : declaration_sections declaration_section\n                            | emptydeclaration_section : uses_opt\n                           | constant_declaration\n                           | type_declaration\n                           | var_declaration\n                           | procedure_declarations\n                           | function_declarationuses_opt : USES id_list SEMICOLONid_list : ID\n               | id_list COMMA IDvar_declaration : VAR declaration_listdeclaration_list : declaration\n                        | declaration_list declarationdeclaration : id_list COLON type_specifier SEMICOLONblock : declaration_sections compound_statementtype_declaration : TYPE type_listtype_list : type_definition\n                 | type_list type_definitiontype_definition : ID EQUAL type_specifier SEMICOLONtype_specifier : ARRAY LBRACKET type_expression RBRACKET OF type_specifier\n                      | subrange\n                      | FILE OF type_specifier\n                      | SET OF type_specifier\n                      | RECORD field_list case_part END\n                      | OBJECT field_list method_list END                              \n                      | LPAREN id_list RPAREN\n                      | BOOLEAN_LITERAL\n                      | INTEGER\n                      | BYTE\n                      | CHAR\n                      | STRING\n                      | STRING LBRACKET NUMBER RBRACKET\n                      | IDtype_expression : type_expression COMMA subrange\n                       | subrangesubrange : NUMBER DOTDOT NUMBERfield_list : field_list field\n                  | field\n                  | emptyfield : id_list COLON type_specifier\n             | id_list COLON type_specifier SEMICOLON\n             | VAR id_list COLON type_specifier\n             | VAR id_list COLON type_specifier SEMICOLON\n             | id_list LPAREN STRING_LITERAL RPARENcase_part : CASE ID COLON type_specifier OF case_list SEMICOLON\n                 | emptycase_list : case_list SEMICOLON case_element\n                 | case_elementcase_element : NUMBER COLON LPAREN field_list RPAREN\n                    | NUMBER COLON field_listmethod_list : method_list method\n                   | method\n                   | emptymethod : CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON\n              | PROCEDURE ID LPAREN field_list RPAREN SEMICOLON\n              | FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON\n              | DESTRUCTOR ID SEMICOLONcase_statement : CASE expression OF case_list END SEMICOLON\n                      | CASE expression OF case_list ENDtype_specifier : LONGINTprocedure_declarations : procedure_declaration\n                              | procedure_declarations procedure_declarationprocedure_declaration : PROCEDURE ID LPAREN field_list RPAREN SEMICOLON block \n                             | PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON\n                             | PROCEDURE ID SEMICOLON block SEMICOLON\n                             | PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON\n                             | PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON\n                             | PROCEDURE ID SEMICOLON FORWARD SEMICOLONfunction_declaration : FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block\n                            | FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLONfunction_call : ID LPAREN expression_list RPARENfactor : function_callparameter_list : parameter\n                      | parameter_list SEMICOLON parameter\n                      | emptyparameter : id_list COLON type_specifier\n                 | VAR id_list COLON type_specifiercompound_statement : BEGIN statement_list END SEMICOLON\n                         | BEGIN statement_list ENDstatement_list : statement statement_list_tailstatement_list_tail : SEMICOLON statement statement_list_tail \n                           | emptystatement : if_statement\n                 | assignment_statement\n                 | while_statement\n                 | procedure_call\n                 | compound_statement\n                 | for_statement\n                 | case_statement\n                 | emptyif_statement : IF expression THEN statement ELSE statement\n                 | IF expression THEN statementfor_statement : FOR ID COLON_EQUAL expression TO expression DO statement\n                     | FOR ID COLON_EQUAL expression DOWNTO expression DO statementassignment_statement : variable COLON_EQUAL expression\n                            | variable COLON_EQUAL BOOLEAN_LITERALvariable : IDvariable : ID LBRACKET index_list RBRACKETindex_list : expression\n                  | index_list COMMA expressionwhile_statement : WHILE expression DO statementprocedure_call : ID LPAREN expression_list RPAREN\n                      | IDexpression_list : expression expression_list_tailexpression_list_tail : COMMA expression expression_list_tail\n                            | emptyexpression_list : emptyexpression : simple_expression relop simple_expression\n                  | simple_expressionsimple_expression : term simple_expression_tailsimple_expression_tail : addop term\n                              | emptyaddop : PLUS\n             | MINUSterm : factor term_tailterm_tail : mulop factor\n                 | emptymulop : TIMES\n             | DIVIDE\n             | DIVexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expressionfactor : LPAREN expression RPARENfactor : variablefactor : NUMBERfactor : STRING_LITERALrelop : LESS\n             | LESS_EQUAL\n             | GREAT\n             | GREAT_EQUAL\n             | EQUAL\n             | DIFFERENTempty :statement : READLNstatement : READLN LPAREN variable RPAREN\n                 | READLN LBRACKET variable RBRACKETstatement : WRITELN LPAREN expression_list RPARENstatement : WRITE LPAREN expression_list RPARENstatement : USES ID SEMICOLONconstant_declaration : CONST constant_listconstant_list : constant\n                     | constant_list constantconstant : ID EQUAL CHARACTER_LITERAL SEMICOLON\n                | ID EQUAL NUMBER SEMICOLON\n                | ID EQUAL STRING_LITERAL SEMICOLON\n                | ID EQUAL BOOLEAN_LITERAL SEMICOLONexpression : expression AND expression\n                  | expression OR expression\n                  | NOT expression'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,25,],[0,-1,]),'ID':([2,16,17,18,19,21,22,24,29,30,32,33,35,36,54,56,57,58,59,61,62,64,65,66,67,68,69,73,75,76,77,78,79,81,82,85,89,102,105,108,109,110,111,112,113,114,115,117,123,124,126,127,129,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,164,166,167,169,171,172,173,175,176,177,179,180,181,182,183,185,186,187,188,192,194,195,198,200,210,215,236,237,239,244,245,246,247,248,250,251,254,258,260,263,265,266,269,272,274,280,287,288,289,296,297,298,300,301,302,303,307,308,309,310,311,313,314,315,329,],[3,28,31,34,28,38,39,55,31,-146,34,-19,28,-14,80,93,93,95,93,97,-147,-20,102,-15,102,28,28,55,135,135,93,93,93,93,93,93,93,-35,-23,28,28,28,-29,-30,-31,-32,-33,-62,28,28,-40,-41,28,55,93,93,93,93,93,93,93,93,-132,-133,-134,-135,-136,-137,93,-115,-116,93,-120,-121,-122,93,55,93,-148,-149,-150,-151,-21,102,102,28,28,-16,28,102,-39,102,93,93,-24,-25,273,276,277,278,279,-28,-38,102,102,-42,102,55,93,93,28,-26,-27,-34,-43,-46,-44,28,28,102,102,28,28,28,-45,55,55,28,-22,28,28,28,102,]),'SEMICOLON':([3,23,24,27,28,39,41,42,43,44,45,46,47,48,49,50,55,68,71,73,80,84,86,87,88,90,91,92,93,97,98,99,100,101,102,103,105,111,112,113,114,115,117,118,119,120,121,125,126,127,130,131,132,133,137,138,143,147,162,163,165,168,170,176,197,198,206,207,208,212,213,214,216,217,218,219,220,221,222,223,224,225,226,227,229,231,232,236,237,248,250,252,253,256,257,258,263,264,267,269,272,274,279,280,281,282,284,287,288,289,291,294,295,297,307,308,309,311,317,318,319,320,322,323,326,331,],[4,-17,-138,60,-11,70,73,-85,-86,-87,-88,-89,-90,-91,-92,-139,-105,-138,132,-138,143,-111,-138,-138,-74,-129,-130,-131,-99,-12,179,180,181,182,-35,183,-23,-29,-30,-31,-32,-33,-62,192,194,-75,-77,199,-40,-41,203,204,-80,73,-97,-98,-144,-138,-154,-112,-114,-117,-119,-138,255,-39,-140,-141,-142,-143,-104,-100,-94,-123,-124,-125,-126,-127,-152,-153,-110,-113,-118,-128,-103,268,-50,-24,-25,-28,-38,-76,-78,285,286,287,-138,-73,294,-138,-26,-27,304,-34,305,-79,306,-43,-46,307,-93,-60,-49,-52,-45,-138,-138,-22,325,-95,-96,-51,327,328,330,332,]),'USES':([4,5,6,7,9,10,11,12,13,14,15,20,23,24,26,29,30,32,33,35,36,60,62,64,66,70,71,73,132,147,176,179,180,181,182,183,192,199,203,204,255,263,283,285,286,305,306,308,309,316,325,],[-138,16,-3,16,-2,-4,-5,-6,-7,-8,-9,-63,-17,54,-64,-145,-146,-18,-19,-13,-14,-10,-147,-20,-15,-138,-81,54,-80,54,54,-148,-149,-150,-151,-21,-16,-138,-67,-70,-138,54,-65,-66,-69,-138,-68,54,54,-71,-72,]),'CONST':([4,5,6,7,9,10,11,12,13,14,15,20,23,26,29,30,32,33,35,36,60,62,64,66,70,71,132,179,180,181,182,183,192,199,203,204,255,283,285,286,305,306,316,325,],[-138,17,-3,17,-2,-4,-5,-6,-7,-8,-9,-63,-17,-64,-145,-146,-18,-19,-13,-14,-10,-147,-20,-15,-138,-81,-80,-148,-149,-150,-151,-21,-16,-138,-67,-70,-138,-65,-66,-69,-138,-68,-71,-72,]),'TYPE':([4,5,6,7,9,10,11,12,13,14,15,20,23,26,29,30,32,33,35,36,60,62,64,66,70,71,132,179,180,181,182,183,192,199,203,204,255,283,285,286,305,306,316,325,],[-138,18,-3,18,-2,-4,-5,-6,-7,-8,-9,-63,-17,-64,-145,-146,-18,-19,-13,-14,-10,-147,-20,-15,-138,-81,-80,-148,-149,-150,-151,-21,-16,-138,-67,-70,-138,-65,-66,-69,-138,-68,-71,-72,]),'VAR':([4,5,6,7,9,10,11,12,13,14,15,20,23,26,29,30,32,33,35,36,60,62,64,66,68,69,70,71,102,105,108,109,111,112,113,114,115,117,124,126,127,132,179,180,181,182,183,187,188,192,194,198,199,203,204,236,237,248,250,255,258,269,272,274,280,283,285,286,287,288,289,296,297,301,302,303,305,306,307,310,311,313,314,315,316,325,],[-138,19,-3,19,-2,-4,-5,-6,-7,-8,-9,-63,-17,-64,-145,-146,-18,-19,-13,-14,-10,-147,-20,-15,123,129,-138,-81,-35,-23,129,129,-29,-30,-31,-32,-33,-62,129,-40,-41,-80,-148,-149,-150,-151,-21,129,129,-16,123,-39,-138,-67,-70,-24,-25,-28,-38,-138,-42,129,-26,-27,-34,-65,-66,-69,-43,-46,-44,129,129,129,129,129,-138,-68,-45,129,-22,129,129,129,-71,-72,]),'FUNCTION':([4,5,6,7,9,10,11,12,13,14,15,20,23,26,29,30,32,33,35,36,60,62,64,66,70,71,102,105,109,111,112,113,114,115,117,126,127,132,179,180,181,182,183,188,192,198,199,203,204,236,237,241,242,243,248,250,255,258,272,274,275,280,283,285,286,287,288,289,304,305,306,307,311,316,325,327,328,332,],[-138,21,-3,21,-2,-4,-5,-6,-7,-8,-9,-63,-17,-64,-145,-146,-18,-19,-13,-14,-10,-147,-20,-15,-138,-81,-35,-23,-138,-29,-30,-31,-32,-33,-62,-40,-41,-80,-148,-149,-150,-151,-21,246,-16,-39,-138,-67,-70,-24,-25,246,-54,-55,-28,-38,-138,-42,-26,-27,-53,-34,-65,-66,-69,-43,-46,-44,-59,-138,-68,-45,-22,-71,-72,-56,-57,-58,]),'PROCEDURE':([4,5,6,7,9,10,11,12,13,14,15,20,23,26,29,30,32,33,35,36,60,62,64,66,70,71,102,105,109,111,112,113,114,115,117,126,127,132,179,180,181,182,183,188,192,198,199,203,204,236,237,241,242,243,248,250,255,258,272,274,275,280,283,285,286,287,288,289,304,305,306,307,311,316,325,327,328,332,],[-138,22,-3,22,-2,-4,-5,-6,-7,22,-9,-63,-17,-64,-145,-146,-18,-19,-13,-14,-10,-147,-20,-15,-138,-81,-35,-23,-138,-29,-30,-31,-32,-33,-62,-40,-41,-80,-148,-149,-150,-151,-21,245,-16,-39,-138,-67,-70,-24,-25,245,-54,-55,-28,-38,-138,-42,-26,-27,-53,-34,-65,-66,-69,-43,-46,-44,-59,-138,-68,-45,-22,-71,-72,-56,-57,-58,]),'BEGIN':([4,5,6,7,9,10,11,12,13,14,15,20,23,24,26,29,30,32,33,35,36,60,62,64,66,70,71,73,132,147,176,179,180,181,182,183,192,199,203,204,255,263,283,285,286,305,306,308,309,316,325,],[-138,-138,-3,24,-2,-4,-5,-6,-7,-8,-9,-63,-17,24,-64,-145,-146,-18,-19,-13,-14,-10,-147,-20,-15,-138,-81,24,-80,24,24,-148,-149,-150,-151,-21,-16,-138,-67,-70,-138,24,-65,-66,-69,-138,-68,24,24,-71,-72,]),'DOT':([8,23,71,132,],[25,-17,-81,-80,]),'READLN':([24,73,147,176,263,308,309,],[50,50,50,50,50,50,50,]),'WRITELN':([24,73,147,176,263,308,309,],[52,52,52,52,52,52,52,]),'WRITE':([24,73,147,176,263,308,309,],[53,53,53,53,53,53,53,]),'IF':([24,73,147,176,263,308,309,],[56,56,56,56,56,56,56,]),'WHILE':([24,73,147,176,263,308,309,],[57,57,57,57,57,57,57,]),'FOR':([24,73,147,176,263,308,309,],[58,58,58,58,58,58,58,]),'CASE':([24,73,102,105,108,111,112,113,114,115,117,126,127,147,176,187,198,236,237,248,250,258,263,272,274,280,287,288,289,307,308,309,311,],[59,59,-35,-23,-138,-29,-30,-31,-32,-33,-62,-40,-41,59,59,239,-39,-24,-25,-28,-38,-42,59,-26,-27,-34,-43,-46,-44,-45,59,59,-22,]),'END':([24,40,41,42,43,44,45,46,47,48,49,50,55,71,72,73,74,84,86,87,88,90,91,92,93,102,105,108,109,111,112,113,114,115,117,126,127,132,133,137,138,143,147,162,163,165,168,170,176,187,188,198,205,206,207,208,212,213,214,216,217,218,219,220,221,222,223,224,225,226,227,229,231,232,236,237,238,240,241,242,243,248,250,258,263,264,267,269,272,274,275,280,287,288,289,291,294,295,297,304,307,308,309,311,318,319,320,327,328,330,332,],[-138,71,-138,-85,-86,-87,-88,-89,-90,-91,-92,-139,-105,-81,-82,-138,-84,-111,-138,-138,-74,-129,-130,-131,-99,-35,-23,-138,-138,-29,-30,-31,-32,-33,-62,-40,-41,-80,-138,-97,-98,-144,-138,-154,-112,-114,-117,-119,-138,-138,-138,-39,-83,-140,-141,-142,-143,-104,-100,-94,-123,-124,-125,-126,-127,-152,-153,-110,-113,-118,-128,-103,267,-50,-24,-25,272,-48,274,-54,-55,-28,-38,-42,-138,-73,-61,-138,-26,-27,-53,-34,-43,-46,-44,-93,-60,-49,-52,-59,-45,-138,-138,-22,-95,-96,-51,-56,-57,-47,-58,]),'COMMA':([27,28,37,84,86,87,88,90,91,92,93,97,122,128,140,145,146,162,163,165,168,170,189,196,202,214,217,218,219,220,221,222,223,224,225,226,227,234,235,250,261,262,264,299,],[61,-11,61,-111,-138,-138,-74,-129,-130,-131,-99,-12,61,61,210,215,-101,-154,-112,-114,-117,-119,61,61,61,-100,-123,-124,-125,-126,-127,-152,-153,-110,-113,-118,-128,271,-37,-38,210,-102,-73,-36,]),'COLON':([28,37,97,122,128,193,196,202,233,273,324,],[-11,67,-12,195,200,251,254,260,269,300,329,]),'LPAREN':([28,38,39,50,52,53,55,56,57,59,65,67,77,78,79,81,82,85,89,93,97,128,148,149,150,151,152,153,154,155,156,157,158,159,160,161,164,166,167,169,171,172,173,175,177,185,186,195,200,210,215,251,254,260,265,266,269,276,277,278,298,300,329,],[-11,68,69,75,78,79,81,89,89,89,110,110,89,89,89,89,89,89,89,175,-12,201,89,89,89,89,89,89,89,89,-132,-133,-134,-135,-136,-137,89,-115,-116,89,-120,-121,-122,89,89,110,110,110,110,89,89,110,110,110,89,89,296,301,302,303,110,110,110,]),'RPAREN':([28,68,69,78,79,81,84,86,87,88,90,91,92,93,97,102,105,111,112,113,114,115,117,119,120,121,124,126,127,134,135,139,140,141,142,144,162,163,165,168,170,174,175,189,198,209,211,214,217,218,219,220,221,222,223,224,225,226,227,228,236,237,248,250,252,253,258,259,261,264,272,274,280,282,287,288,289,290,296,301,302,303,307,310,311,313,314,315,],[-11,-138,125,-138,-138,-138,-111,-138,-138,-74,-129,-130,-131,-99,-12,-35,-23,-29,-30,-31,-32,-33,-62,193,-75,-77,197,-40,-41,206,-99,208,-138,-109,212,213,-154,-112,-114,-117,-119,227,-138,248,-39,-106,-108,-100,-123,-124,-125,-126,-127,-152,-153,-110,-113,-118,-128,264,-24,-25,-28,-38,-76,-78,-42,288,-138,-73,-26,-27,-34,-79,-43,-46,-44,-107,-138,-138,-138,-138,-45,320,-22,322,323,324,]),'EQUAL':([31,34,84,86,87,88,90,91,92,93,163,165,168,170,214,225,226,227,264,],[63,65,160,-138,-138,-74,-129,-130,-131,-99,-112,-114,-117,-119,-100,-113,-118,-128,-73,]),'ELSE':([42,43,44,45,46,47,48,49,50,55,71,84,86,87,88,90,91,92,93,132,137,138,143,147,162,163,165,168,170,176,206,207,208,212,213,214,216,217,218,219,220,221,222,223,224,225,226,227,229,263,264,267,291,294,308,309,318,319,],[-85,-86,-87,-88,-89,-90,-91,-92,-139,-105,-81,-111,-138,-138,-74,-129,-130,-131,-99,-80,-97,-98,-144,-138,-154,-112,-114,-117,-119,-138,-140,-141,-142,-143,-104,-100,263,-123,-124,-125,-126,-127,-152,-153,-110,-113,-118,-128,-103,-138,-73,-61,-93,-60,-138,-138,-95,-96,]),'LBRACKET':([50,55,93,104,115,135,],[76,82,82,184,190,82,]),'COLON_EQUAL':([51,55,95,214,],[77,-99,177,-100,]),'NOT':([56,57,59,77,78,79,81,82,85,89,148,149,150,151,152,153,154,175,177,210,215,265,266,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'NUMBER':([56,57,59,63,65,67,77,78,79,81,82,85,89,148,149,150,151,152,153,154,155,156,157,158,159,160,161,164,166,167,169,171,172,173,175,177,178,184,185,186,190,191,195,200,210,215,251,254,260,265,266,268,271,298,300,321,329,330,],[91,91,91,99,116,116,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,-132,-133,-134,-135,-136,-137,91,-115,-116,91,-120,-121,-122,91,91,233,116,116,116,249,250,116,116,91,91,116,116,116,91,91,233,116,116,116,233,116,233,]),'STRING_LITERAL':([56,57,59,63,77,78,79,81,82,85,89,148,149,150,151,152,153,154,155,156,157,158,159,160,161,164,166,167,169,171,172,173,175,177,201,210,215,265,266,],[92,92,92,100,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,-132,-133,-134,-135,-136,-137,92,-115,-116,92,-120,-121,-122,92,92,259,92,92,92,92,]),'CHARACTER_LITERAL':([63,],[98,]),'BOOLEAN_LITERAL':([63,65,67,77,185,186,195,200,251,254,260,298,300,329,],[101,111,111,138,111,111,111,111,111,111,111,111,111,111,]),'ARRAY':([65,67,185,186,195,200,251,254,260,298,300,329,],[104,104,104,104,104,104,104,104,104,104,104,104,]),'FILE':([65,67,185,186,195,200,251,254,260,298,300,329,],[106,106,106,106,106,106,106,106,106,106,106,106,]),'SET':([65,67,185,186,195,200,251,254,260,298,300,329,],[107,107,107,107,107,107,107,107,107,107,107,107,]),'RECORD':([65,67,185,186,195,200,251,254,260,298,300,329,],[108,108,108,108,108,108,108,108,108,108,108,108,]),'OBJECT':([65,67,185,186,195,200,251,254,260,298,300,329,],[109,109,109,109,109,109,109,109,109,109,109,109,]),'INTEGER':([65,67,185,186,195,200,251,254,260,298,300,329,],[112,112,112,112,112,112,112,112,112,112,112,112,]),'BYTE':([65,67,185,186,195,200,251,254,260,298,300,329,],[113,113,113,113,113,113,113,113,113,113,113,113,]),'CHAR':([65,67,185,186,195,200,251,254,260,298,300,329,],[114,114,114,114,114,114,114,114,114,114,114,114,]),'STRING':([65,67,185,186,195,200,251,254,260,298,300,329,],[115,115,115,115,115,115,115,115,115,115,115,115,]),'LONGINT':([65,67,185,186,195,200,251,254,260,298,300,329,],[117,117,117,117,117,117,117,117,117,117,117,117,]),'FORWARD':([70,199,255,305,],[131,257,284,317,]),'THEN':([83,84,86,87,88,90,91,92,93,162,163,165,168,170,214,217,218,219,220,221,222,223,224,225,226,227,264,],[147,-111,-138,-138,-74,-129,-130,-131,-99,-154,-112,-114,-117,-119,-100,-123,-124,-125,-126,-127,-152,-153,-110,-113,-118,-128,-73,]),'PLUS':([83,84,86,87,88,90,91,92,93,94,96,137,140,146,162,163,165,168,170,174,214,217,218,219,220,221,222,223,224,225,226,227,230,261,262,264,292,293,],[148,-111,166,-138,-74,-129,-130,-131,-99,148,148,148,148,148,148,-112,-114,-117,-119,148,-100,148,148,148,148,148,148,148,-110,-113,-118,-128,148,148,148,-73,148,148,]),'MINUS':([83,84,86,87,88,90,91,92,93,94,96,137,140,146,162,163,165,168,170,174,214,217,218,219,220,221,222,223,224,225,226,227,230,261,262,264,292,293,],[149,-111,167,-138,-74,-129,-130,-131,-99,149,149,149,149,149,149,-112,-114,-117,-119,149,-100,149,149,149,149,149,149,149,-110,-113,-118,-128,149,149,149,-73,149,149,]),'TIMES':([83,84,86,87,88,90,91,92,93,94,96,137,140,146,162,163,165,168,170,174,214,217,218,219,220,221,222,223,224,225,226,227,230,261,262,264,292,293,],[150,-111,-138,171,-74,-129,-130,-131,-99,150,150,150,150,150,150,-112,-114,-117,-119,150,-100,150,150,150,150,150,150,150,-110,-113,-118,-128,150,150,150,-73,150,150,]),'DIVIDE':([83,84,86,87,88,90,91,92,93,94,96,137,140,146,162,163,165,168,170,174,214,217,218,219,220,221,222,223,224,225,226,227,230,261,262,264,292,293,],[151,-111,-138,172,-74,-129,-130,-131,-99,151,151,151,151,151,151,-112,-114,-117,-119,151,-100,151,151,151,151,151,151,151,-110,-113,-118,-128,151,151,151,-73,151,151,]),'MOD':([83,84,86,87,88,90,91,92,93,94,96,137,140,146,162,163,165,168,170,174,214,217,218,219,220,221,222,223,224,225,226,227,230,261,262,264,292,293,],[152,-111,-138,-138,-74,-129,-130,-131,-99,152,152,152,152,152,152,-112,-114,-117,-119,152,-100,152,152,152,152,152,152,152,-110,-113,-118,-128,152,152,152,-73,152,152,]),'AND':([83,84,86,87,88,90,91,92,93,94,96,137,140,146,162,163,165,168,170,174,214,217,218,219,220,221,222,223,224,225,226,227,230,261,262,264,292,293,],[153,-111,-138,-138,-74,-129,-130,-131,-99,153,153,153,153,153,153,-112,-114,-117,-119,153,-100,153,153,153,153,153,153,153,-110,-113,-118,-128,153,153,153,-73,153,153,]),'OR':([83,84,86,87,88,90,91,92,93,94,96,137,140,146,162,163,165,168,170,174,214,217,218,219,220,221,222,223,224,225,226,227,230,261,262,264,292,293,],[154,-111,-138,-138,-74,-129,-130,-131,-99,154,154,154,154,154,154,-112,-114,-117,-119,154,-100,154,154,154,154,154,154,154,-110,-113,-118,-128,154,154,154,-73,154,154,]),'DO':([84,86,87,88,90,91,92,93,94,162,163,165,168,170,214,217,218,219,220,221,222,223,224,225,226,227,264,292,293,],[-111,-138,-138,-74,-129,-130,-131,-99,176,-154,-112,-114,-117,-119,-100,-123,-124,-125,-126,-127,-152,-153,-110,-113,-118,-128,-73,308,309,]),'OF':([84,86,87,88,90,91,92,93,96,102,105,106,107,111,112,113,114,115,117,162,163,165,168,170,214,217,218,219,220,221,222,223,224,225,226,227,236,237,248,250,264,270,272,274,280,311,312,],[-111,-138,-138,-74,-129,-130,-131,-99,178,-35,-23,185,186,-29,-30,-31,-32,-33,-62,-154,-112,-114,-117,-119,-100,-123,-124,-125,-126,-127,-152,-153,-110,-113,-118,-128,-24,-25,-28,-38,-73,298,-26,-27,-34,-22,321,]),'RBRACKET':([84,86,87,88,90,91,92,93,135,136,145,146,162,163,165,168,170,214,217,218,219,220,221,222,223,224,225,226,227,234,235,249,250,262,264,299,],[-111,-138,-138,-74,-129,-130,-131,-99,-99,207,214,-101,-154,-112,-114,-117,-119,-100,-123,-124,-125,-126,-127,-152,-153,-110,-113,-118,-128,270,-37,280,-38,-102,-73,-36,]),'TO':([84,86,87,88,90,91,92,93,162,163,165,168,170,214,217,218,219,220,221,222,223,224,225,226,227,230,264,],[-111,-138,-138,-74,-129,-130,-131,-99,-154,-112,-114,-117,-119,-100,-123,-124,-125,-126,-127,-152,-153,-110,-113,-118,-128,265,-73,]),'DOWNTO':([84,86,87,88,90,91,92,93,162,163,165,168,170,214,217,218,219,220,221,222,223,224,225,226,227,230,264,],[-111,-138,-138,-74,-129,-130,-131,-99,-154,-112,-114,-117,-119,-100,-123,-124,-125,-126,-127,-152,-153,-110,-113,-118,-128,266,-73,]),'LESS':([84,86,87,88,90,91,92,93,163,165,168,170,214,225,226,227,264,],[156,-138,-138,-74,-129,-130,-131,-99,-112,-114,-117,-119,-100,-113,-118,-128,-73,]),'LESS_EQUAL':([84,86,87,88,90,91,92,93,163,165,168,170,214,225,226,227,264,],[157,-138,-138,-74,-129,-130,-131,-99,-112,-114,-117,-119,-100,-113,-118,-128,-73,]),'GREAT':([84,86,87,88,90,91,92,93,163,165,168,170,214,225,226,227,264,],[158,-138,-138,-74,-129,-130,-131,-99,-112,-114,-117,-119,-100,-113,-118,-128,-73,]),'GREAT_EQUAL':([84,86,87,88,90,91,92,93,163,165,168,170,214,225,226,227,264,],[159,-138,-138,-74,-129,-130,-131,-99,-112,-114,-117,-119,-100,-113,-118,-128,-73,]),'DIFFERENT':([84,86,87,88,90,91,92,93,163,165,168,170,214,225,226,227,264,],[161,-138,-138,-74,-129,-130,-131,-99,-112,-114,-117,-119,-100,-113,-118,-128,-73,]),'DIV':([87,88,90,91,92,93,214,227,264,],[173,-74,-129,-130,-131,-99,-100,-128,-73,]),'CONSTRUCTOR':([102,105,109,111,112,113,114,115,117,126,127,188,198,236,237,241,242,243,248,250,258,272,274,275,280,287,288,289,304,307,311,327,328,332,],[-35,-23,-138,-29,-30,-31,-32,-33,-62,-40,-41,244,-39,-24,-25,244,-54,-55,-28,-38,-42,-26,-27,-53,-34,-43,-46,-44,-59,-45,-22,-56,-57,-58,]),'DESTRUCTOR':([102,105,109,111,112,113,114,115,117,126,127,188,198,236,237,241,242,243,248,250,258,272,274,275,280,287,288,289,304,307,311,327,328,332,],[-35,-23,-138,-29,-30,-31,-32,-33,-62,-40,-41,247,-39,-24,-25,247,-54,-55,-28,-38,-42,-26,-27,-53,-34,-43,-46,-44,-59,-45,-22,-56,-57,-58,]),'DOTDOT':([116,],[191,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_sections':([4,5,70,199,255,305,],[5,7,7,7,7,7,]),'empty':([4,5,24,41,68,69,70,73,78,79,81,86,87,108,109,133,140,147,175,176,187,188,199,255,261,263,269,296,301,302,303,305,308,309,],[6,6,49,74,121,127,6,49,141,141,141,165,170,127,127,74,211,49,141,49,240,243,6,6,211,49,127,127,127,127,127,6,49,49,]),'block':([5,70,199,255,305,],[8,130,256,283,316,]),'declaration_section':([5,7,],[9,9,]),'uses_opt':([5,7,],[10,10,]),'constant_declaration':([5,7,],[11,11,]),'type_declaration':([5,7,],[12,12,]),'var_declaration':([5,7,],[13,13,]),'procedure_declarations':([5,7,],[14,14,]),'function_declaration':([5,7,],[15,15,]),'procedure_declaration':([5,7,14,],[20,20,26,]),'compound_statement':([7,24,73,147,176,263,308,309,],[23,46,46,46,46,46,46,46,]),'id_list':([16,19,35,68,69,108,109,110,123,124,129,187,188,194,269,296,297,301,302,303,310,313,314,315,],[27,37,37,122,128,128,128,189,196,128,202,128,128,122,128,128,128,128,128,128,128,128,128,128,]),'constant_list':([17,],[29,]),'constant':([17,29,],[30,62,]),'type_list':([18,],[32,]),'type_definition':([18,32,],[33,64,]),'declaration_list':([19,],[35,]),'declaration':([19,35,],[36,66,]),'statement_list':([24,],[40,]),'statement':([24,73,147,176,263,308,309,],[41,133,216,229,291,318,319,]),'if_statement':([24,73,147,176,263,308,309,],[42,42,42,42,42,42,42,]),'assignment_statement':([24,73,147,176,263,308,309,],[43,43,43,43,43,43,43,]),'while_statement':([24,73,147,176,263,308,309,],[44,44,44,44,44,44,44,]),'procedure_call':([24,73,147,176,263,308,309,],[45,45,45,45,45,45,45,]),'for_statement':([24,73,147,176,263,308,309,],[47,47,47,47,47,47,47,]),'case_statement':([24,73,147,176,263,308,309,],[48,48,48,48,48,48,48,]),'variable':([24,56,57,59,73,75,76,77,78,79,81,82,85,89,147,148,149,150,151,152,153,154,155,164,169,175,176,177,210,215,263,265,266,308,309,],[51,90,90,90,51,134,136,90,90,90,90,90,90,90,51,90,90,90,90,90,90,90,90,90,90,90,51,90,90,90,51,90,90,51,51,]),'statement_list_tail':([41,133,],[72,205,]),'expression':([56,57,59,77,78,79,81,82,85,89,148,149,150,151,152,153,154,175,177,210,215,265,266,],[83,94,96,137,140,140,140,146,162,174,217,218,219,220,221,222,223,140,230,261,262,292,293,]),'simple_expression':([56,57,59,77,78,79,81,82,85,89,148,149,150,151,152,153,154,155,175,177,210,215,265,266,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,224,84,84,84,84,84,84,]),'term':([56,57,59,77,78,79,81,82,85,89,148,149,150,151,152,153,154,155,164,175,177,210,215,265,266,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,225,86,86,86,86,86,86,]),'factor':([56,57,59,77,78,79,81,82,85,89,148,149,150,151,152,153,154,155,164,169,175,177,210,215,265,266,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,226,87,87,87,87,87,87,]),'function_call':([56,57,59,77,78,79,81,82,85,89,148,149,150,151,152,153,154,155,164,169,175,177,210,215,265,266,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'type_specifier':([65,67,185,186,195,200,251,254,260,298,300,329,],[103,118,236,237,253,258,281,282,289,311,312,331,]),'subrange':([65,67,184,185,186,195,200,251,254,260,271,298,300,329,],[105,105,235,105,105,105,105,105,105,105,299,105,105,105,]),'parameter_list':([68,],[119,]),'parameter':([68,194,],[120,252,]),'field_list':([69,108,109,269,296,301,302,303,],[124,187,188,297,310,313,314,315,]),'field':([69,108,109,124,187,188,269,296,297,301,302,303,310,313,314,315,],[126,126,126,198,198,198,126,126,198,126,126,126,198,198,198,198,]),'expression_list':([78,79,81,175,],[139,142,144,228,]),'index_list':([82,],[145,]),'relop':([84,],[155,]),'simple_expression_tail':([86,],[163,]),'addop':([86,],[164,]),'term_tail':([87,],[168,]),'mulop':([87,],[169,]),'expression_list_tail':([140,261,],[209,290,]),'case_list':([178,321,],[231,326,]),'case_element':([178,268,321,330,],[232,295,232,295,]),'type_expression':([184,],[234,]),'case_part':([187,],[238,]),'method_list':([188,],[241,]),'method':([188,241,],[242,275,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON declaration_sections block DOT','program',6,'p_program','Parser_MiniPascal.py',18),
  ('declaration_sections -> declaration_sections declaration_section','declaration_sections',2,'p_declaration_sections','Parser_MiniPascal.py',24),
  ('declaration_sections -> empty','declaration_sections',1,'p_declaration_sections','Parser_MiniPascal.py',25),
  ('declaration_section -> uses_opt','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',29),
  ('declaration_section -> constant_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',30),
  ('declaration_section -> type_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',31),
  ('declaration_section -> var_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',32),
  ('declaration_section -> procedure_declarations','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',33),
  ('declaration_section -> function_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',34),
  ('uses_opt -> USES id_list SEMICOLON','uses_opt',3,'p_uses_opt','Parser_MiniPascal.py',38),
  ('id_list -> ID','id_list',1,'p_id_list','Parser_MiniPascal.py',43),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','Parser_MiniPascal.py',44),
  ('var_declaration -> VAR declaration_list','var_declaration',2,'p_var_declaration','Parser_MiniPascal.py',48),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser_MiniPascal.py',52),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','Parser_MiniPascal.py',53),
  ('declaration -> id_list COLON type_specifier SEMICOLON','declaration',4,'p_declaration','Parser_MiniPascal.py',57),
  ('block -> declaration_sections compound_statement','block',2,'p_block','Parser_MiniPascal.py',62),
  ('type_declaration -> TYPE type_list','type_declaration',2,'p_type_declaration','Parser_MiniPascal.py',68),
  ('type_list -> type_definition','type_list',1,'p_type_list','Parser_MiniPascal.py',72),
  ('type_list -> type_list type_definition','type_list',2,'p_type_list','Parser_MiniPascal.py',73),
  ('type_definition -> ID EQUAL type_specifier SEMICOLON','type_definition',4,'p_type_definition','Parser_MiniPascal.py',81),
  ('type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier','type_specifier',6,'p_type_specifier','Parser_MiniPascal.py',85),
  ('type_specifier -> subrange','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',86),
  ('type_specifier -> FILE OF type_specifier','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',87),
  ('type_specifier -> SET OF type_specifier','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',88),
  ('type_specifier -> RECORD field_list case_part END','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',89),
  ('type_specifier -> OBJECT field_list method_list END','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',90),
  ('type_specifier -> LPAREN id_list RPAREN','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',91),
  ('type_specifier -> BOOLEAN_LITERAL','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',92),
  ('type_specifier -> INTEGER','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',93),
  ('type_specifier -> BYTE','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',94),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',95),
  ('type_specifier -> STRING','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',96),
  ('type_specifier -> STRING LBRACKET NUMBER RBRACKET','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',97),
  ('type_specifier -> ID','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',98),
  ('type_expression -> type_expression COMMA subrange','type_expression',3,'p_type_expression','Parser_MiniPascal.py',102),
  ('type_expression -> subrange','type_expression',1,'p_type_expression','Parser_MiniPascal.py',103),
  ('subrange -> NUMBER DOTDOT NUMBER','subrange',3,'p_subrange','Parser_MiniPascal.py',107),
  ('field_list -> field_list field','field_list',2,'p_field_list','Parser_MiniPascal.py',112),
  ('field_list -> field','field_list',1,'p_field_list','Parser_MiniPascal.py',113),
  ('field_list -> empty','field_list',1,'p_field_list','Parser_MiniPascal.py',114),
  ('field -> id_list COLON type_specifier','field',3,'p_field','Parser_MiniPascal.py',118),
  ('field -> id_list COLON type_specifier SEMICOLON','field',4,'p_field','Parser_MiniPascal.py',119),
  ('field -> VAR id_list COLON type_specifier','field',4,'p_field','Parser_MiniPascal.py',120),
  ('field -> VAR id_list COLON type_specifier SEMICOLON','field',5,'p_field','Parser_MiniPascal.py',121),
  ('field -> id_list LPAREN STRING_LITERAL RPAREN','field',4,'p_field','Parser_MiniPascal.py',122),
  ('case_part -> CASE ID COLON type_specifier OF case_list SEMICOLON','case_part',7,'p_case_part','Parser_MiniPascal.py',126),
  ('case_part -> empty','case_part',1,'p_case_part','Parser_MiniPascal.py',127),
  ('case_list -> case_list SEMICOLON case_element','case_list',3,'p_case_list','Parser_MiniPascal.py',131),
  ('case_list -> case_element','case_list',1,'p_case_list','Parser_MiniPascal.py',132),
  ('case_element -> NUMBER COLON LPAREN field_list RPAREN','case_element',5,'p_case_element','Parser_MiniPascal.py',136),
  ('case_element -> NUMBER COLON field_list','case_element',3,'p_case_element','Parser_MiniPascal.py',137),
  ('method_list -> method_list method','method_list',2,'p_method_list','Parser_MiniPascal.py',144),
  ('method_list -> method','method_list',1,'p_method_list','Parser_MiniPascal.py',145),
  ('method_list -> empty','method_list',1,'p_method_list','Parser_MiniPascal.py',146),
  ('method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON','method',6,'p_method','Parser_MiniPascal.py',150),
  ('method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON','method',6,'p_method','Parser_MiniPascal.py',151),
  ('method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON','method',8,'p_method','Parser_MiniPascal.py',152),
  ('method -> DESTRUCTOR ID SEMICOLON','method',3,'p_method','Parser_MiniPascal.py',153),
  ('case_statement -> CASE expression OF case_list END SEMICOLON','case_statement',6,'p_case_statement','Parser_MiniPascal.py',159),
  ('case_statement -> CASE expression OF case_list END','case_statement',5,'p_case_statement','Parser_MiniPascal.py',160),
  ('type_specifier -> LONGINT','type_specifier',1,'p_type_specifier_longint','Parser_MiniPascal.py',164),
  ('procedure_declarations -> procedure_declaration','procedure_declarations',1,'p_procedure_declarations','Parser_MiniPascal.py',169),
  ('procedure_declarations -> procedure_declarations procedure_declaration','procedure_declarations',2,'p_procedure_declarations','Parser_MiniPascal.py',170),
  ('procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON block','procedure_declaration',7,'p_procedure_declaration','Parser_MiniPascal.py',177),
  ('procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON','procedure_declaration',7,'p_procedure_declaration','Parser_MiniPascal.py',178),
  ('procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON','procedure_declaration',5,'p_procedure_declaration','Parser_MiniPascal.py',179),
  ('procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON','procedure_declaration',8,'p_procedure_declaration','Parser_MiniPascal.py',180),
  ('procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON','procedure_declaration',7,'p_procedure_declaration','Parser_MiniPascal.py',181),
  ('procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON','procedure_declaration',5,'p_procedure_declaration','Parser_MiniPascal.py',182),
  ('function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block','function_declaration',9,'p_function_declaration','Parser_MiniPascal.py',190),
  ('function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON','function_declaration',10,'p_function_declaration','Parser_MiniPascal.py',191),
  ('function_call -> ID LPAREN expression_list RPAREN','function_call',4,'p_function_call','Parser_MiniPascal.py',197),
  ('factor -> function_call','factor',1,'p_factor_function_call','Parser_MiniPascal.py',202),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','Parser_MiniPascal.py',207),
  ('parameter_list -> parameter_list SEMICOLON parameter','parameter_list',3,'p_parameter_list','Parser_MiniPascal.py',208),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','Parser_MiniPascal.py',209),
  ('parameter -> id_list COLON type_specifier','parameter',3,'p_parameter','Parser_MiniPascal.py',213),
  ('parameter -> VAR id_list COLON type_specifier','parameter',4,'p_parameter','Parser_MiniPascal.py',214),
  ('compound_statement -> BEGIN statement_list END SEMICOLON','compound_statement',4,'p_compound_statement','Parser_MiniPascal.py',219),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','Parser_MiniPascal.py',220),
  ('statement_list -> statement statement_list_tail','statement_list',2,'p_statement_list_multi','Parser_MiniPascal.py',225),
  ('statement_list_tail -> SEMICOLON statement statement_list_tail','statement_list_tail',3,'p_statement_list_tail','Parser_MiniPascal.py',229),
  ('statement_list_tail -> empty','statement_list_tail',1,'p_statement_list_tail','Parser_MiniPascal.py',230),
  ('statement -> if_statement','statement',1,'p_statement','Parser_MiniPascal.py',235),
  ('statement -> assignment_statement','statement',1,'p_statement','Parser_MiniPascal.py',236),
  ('statement -> while_statement','statement',1,'p_statement','Parser_MiniPascal.py',237),
  ('statement -> procedure_call','statement',1,'p_statement','Parser_MiniPascal.py',238),
  ('statement -> compound_statement','statement',1,'p_statement','Parser_MiniPascal.py',239),
  ('statement -> for_statement','statement',1,'p_statement','Parser_MiniPascal.py',240),
  ('statement -> case_statement','statement',1,'p_statement','Parser_MiniPascal.py',241),
  ('statement -> empty','statement',1,'p_statement','Parser_MiniPascal.py',242),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_if_statement','Parser_MiniPascal.py',246),
  ('if_statement -> IF expression THEN statement','if_statement',4,'p_if_statement','Parser_MiniPascal.py',247),
  ('for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement','for_statement',8,'p_for_statement','Parser_MiniPascal.py',251),
  ('for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement','for_statement',8,'p_for_statement','Parser_MiniPascal.py',252),
  ('assignment_statement -> variable COLON_EQUAL expression','assignment_statement',3,'p_assignment_statement','Parser_MiniPascal.py',257),
  ('assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL','assignment_statement',3,'p_assignment_statement','Parser_MiniPascal.py',258),
  ('variable -> ID','variable',1,'p_variable_simple','Parser_MiniPascal.py',263),
  ('variable -> ID LBRACKET index_list RBRACKET','variable',4,'p_variable_index','Parser_MiniPascal.py',267),
  ('index_list -> expression','index_list',1,'p_index_list','Parser_MiniPascal.py',271),
  ('index_list -> index_list COMMA expression','index_list',3,'p_index_list','Parser_MiniPascal.py',272),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','Parser_MiniPascal.py',277),
  ('procedure_call -> ID LPAREN expression_list RPAREN','procedure_call',4,'p_procedure_call','Parser_MiniPascal.py',282),
  ('procedure_call -> ID','procedure_call',1,'p_procedure_call','Parser_MiniPascal.py',283),
  ('expression_list -> expression expression_list_tail','expression_list',2,'p_expression_list_multi','Parser_MiniPascal.py',288),
  ('expression_list_tail -> COMMA expression expression_list_tail','expression_list_tail',3,'p_expression_list_tail','Parser_MiniPascal.py',292),
  ('expression_list_tail -> empty','expression_list_tail',1,'p_expression_list_tail','Parser_MiniPascal.py',293),
  ('expression_list -> empty','expression_list',1,'p_expression_list_empty','Parser_MiniPascal.py',297),
  ('expression -> simple_expression relop simple_expression','expression',3,'p_expression','Parser_MiniPascal.py',302),
  ('expression -> simple_expression','expression',1,'p_expression','Parser_MiniPascal.py',303),
  ('simple_expression -> term simple_expression_tail','simple_expression',2,'p_simple_expression','Parser_MiniPascal.py',308),
  ('simple_expression_tail -> addop term','simple_expression_tail',2,'p_simple_expression_tail','Parser_MiniPascal.py',312),
  ('simple_expression_tail -> empty','simple_expression_tail',1,'p_simple_expression_tail','Parser_MiniPascal.py',313),
  ('addop -> PLUS','addop',1,'p_addop','Parser_MiniPascal.py',317),
  ('addop -> MINUS','addop',1,'p_addop','Parser_MiniPascal.py',318),
  ('term -> factor term_tail','term',2,'p_term','Parser_MiniPascal.py',323),
  ('term_tail -> mulop factor','term_tail',2,'p_term_tail','Parser_MiniPascal.py',327),
  ('term_tail -> empty','term_tail',1,'p_term_tail','Parser_MiniPascal.py',328),
  ('mulop -> TIMES','mulop',1,'p_mulop','Parser_MiniPascal.py',332),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','Parser_MiniPascal.py',333),
  ('mulop -> DIV','mulop',1,'p_mulop','Parser_MiniPascal.py',334),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',339),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',340),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',341),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',342),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',343),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','Parser_MiniPascal.py',350),
  ('factor -> variable','factor',1,'p_factor_variable','Parser_MiniPascal.py',354),
  ('factor -> NUMBER','factor',1,'p_factor_number','Parser_MiniPascal.py',358),
  ('factor -> STRING_LITERAL','factor',1,'p_factor_string','Parser_MiniPascal.py',362),
  ('relop -> LESS','relop',1,'p_relop','Parser_MiniPascal.py',369),
  ('relop -> LESS_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',370),
  ('relop -> GREAT','relop',1,'p_relop','Parser_MiniPascal.py',371),
  ('relop -> GREAT_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',372),
  ('relop -> EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',373),
  ('relop -> DIFFERENT','relop',1,'p_relop','Parser_MiniPascal.py',374),
  ('empty -> <empty>','empty',0,'p_empty','Parser_MiniPascal.py',379),
  ('statement -> READLN','statement',1,'p_statement_readln','Parser_MiniPascal.py',383),
  ('statement -> READLN LPAREN variable RPAREN','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',387),
  ('statement -> READLN LBRACKET variable RBRACKET','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',388),
  ('statement -> WRITELN LPAREN expression_list RPAREN','statement',4,'p_statement_writeln','Parser_MiniPascal.py',392),
  ('statement -> WRITE LPAREN expression_list RPAREN','statement',4,'p_statement_write','Parser_MiniPascal.py',396),
  ('statement -> USES ID SEMICOLON','statement',3,'p_statement_uses','Parser_MiniPascal.py',401),
  ('constant_declaration -> CONST constant_list','constant_declaration',2,'p_constant_declaration','Parser_MiniPascal.py',406),
  ('constant_list -> constant','constant_list',1,'p_constant_list','Parser_MiniPascal.py',410),
  ('constant_list -> constant_list constant','constant_list',2,'p_constant_list','Parser_MiniPascal.py',411),
  ('constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',415),
  ('constant -> ID EQUAL NUMBER SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',416),
  ('constant -> ID EQUAL STRING_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',417),
  ('constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',418),
  ('expression -> expression AND expression','expression',3,'p_expression_logical','Parser_MiniPascal.py',423),
  ('expression -> expression OR expression','expression',3,'p_expression_logical','Parser_MiniPascal.py',424),
  ('expression -> NOT expression','expression',2,'p_expression_logical','Parser_MiniPascal.py',425),
]
