
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocELSEAND ARRAY BEGIN BOOLEAN_LITERAL BYTE CASE CHAR CHARACTER_LITERAL COLON COLON_EQUAL COMMA CONST CONSTRUCTOR DESTRUCTOR DIFFERENT DIV DIVIDE DO DOT DOTDOT DOWNTO ELSE END EQUAL FALSE FILE FOR FORWARD FUNCTION GOTO GREAT GREAT_EQUAL ID IF IN INTEGER LABEL LBLOCK LBRACKET LESS LESS_EQUAL LONGINT LPAREN MINUS MOD NIL NOT NUMBER OBJECT OF OR PACKED PLUS PROCEDURE PROGRAM RBLOCK RBRACKET READLINE READLN RECORD REPEAT RPAREN SEMICOLON SET STRING STRING_LITERAL SUBRANGE THEN TIMES TO TRUE TYPE UNTIL USES VAR WHILE WITH WRITE WRITELNprogram : PROGRAM ID SEMICOLON declaration_sections block DOTdeclaration_sections : declaration_sections declaration_section\n                            | emptydeclaration_section : uses_opt\n                           | constant_declaration\n                           | type_declaration\n                           | var_declaration\n                           | procedure_declarations\n                           | function_declarationuses_opt : USES id_list SEMICOLONid_list : ID\n               | id_list COMMA IDvar_declaration : VAR declaration_listdeclaration_list : declaration\n                        | declaration_list declarationdeclaration : id_list COLON type_specifier SEMICOLONblock : declaration_sections compound_statementtype_declaration : TYPE type_listtype_list : type_definition\n                 | type_list type_definitiontype_definition : ID EQUAL type_specifier SEMICOLONtype_specifier : ARRAY LBRACKET type_expression RBRACKET OF type_specifier\n                      | subrange\n                      | FILE OF type_specifier\n                      | SET OF type_specifier\n                      | RECORD field_list case_part END\n                      | OBJECT field_list method_list END                              \n                      | LPAREN id_list RPAREN\n                      | BOOLEAN_LITERAL\n                      | INTEGER\n                      | BYTE\n                      | CHAR\n                      | STRING LBRACKET NUMBER RBRACKET\n                      | IDtype_expression : type_expression COMMA subrange\n                       | subrangesubrange : NUMBER DOTDOT NUMBERfield_list : field_list field\n                  | field\n                  | emptyfield : id_list COLON type_specifier SEMICOLON\n             | id_list COLON type_specifiercase_part : CASE ID COLON type_specifier OF case_list SEMICOLON\n                 | emptycase_list : case_list SEMICOLON case_element\n                 | case_elementcase_element : NUMBER COLON LPAREN field_list RPARENmethod_list : method_list method\n                   | method\n                   | emptymethod : CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON\n              | PROCEDURE ID LPAREN field_list RPAREN SEMICOLON\n              | FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON\n              | DESTRUCTOR ID SEMICOLONtype_specifier : LONGINTprocedure_declarations : procedure_declaration\n                              | procedure_declarations procedure_declarationprocedure_declaration : PROCEDURE ID LPAREN field_list RPAREN SEMICOLON\n                             | PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON\n                             | PROCEDURE ID SEMICOLON block SEMICOLON\n                             | PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON\n                             | PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON\n                             | PROCEDURE ID SEMICOLON FORWARD SEMICOLONfunction_declaration : FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON\n                            | FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLONfunction_call : ID LPAREN expression_list RPARENfactor : function_callparameter_list : parameter\n                      | parameter_list SEMICOLON parameter\n                      | emptyparameter : id_list COLON type_specifier\n                 | VAR id_list COLON type_specifiercompound_statement : BEGIN statement_list ENDstatement_list : statement statement_list_tailstatement_list_tail : SEMICOLON statement statement_list_tail\n                           | emptystatement : if_statement\n                 | assignment_statement\n                 | while_statement\n                 | procedure_call\n                 | compound_statement\n                 | for_statement\n                 | emptyif_statement : IF expression THEN statement ELSE statement\n                 | IF expression THEN statementfor_statement : FOR ID COLON_EQUAL expression TO expression DO statement\n                     | FOR ID COLON_EQUAL expression DOWNTO expression DO statementassignment_statement : variable COLON_EQUAL expressionvariable : IDvariable : ID LBRACKET index_list RBRACKETindex_list : expression\n                  | index_list COMMA expressionwhile_statement : WHILE expression DO statementprocedure_call : ID LPAREN expression_list RPAREN\n                      | IDexpression_list : expression expression_list_tailexpression_list_tail : COMMA expression expression_list_tail\n                            | emptyexpression_list : emptyexpression : simple_expression relop simple_expression\n                  | simple_expressionsimple_expression : term simple_expression_tailsimple_expression_tail : addop term\n                              | emptyaddop : PLUS\n             | MINUSterm : factor term_tailterm_tail : mulop factor\n                 | emptymulop : TIMES\n             | DIVIDE\n             | DIVexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expressionfactor : LPAREN expression RPARENfactor : variablefactor : NUMBERfactor : STRING_LITERALrelop : LESS\n             | LESS_EQUAL\n             | GREAT\n             | GREAT_EQUAL\n             | EQUAL\n             | DIFFERENTempty :statement : READLNstatement : READLN LPAREN variable RPAREN\n                 | READLN LBRACKET variable RBRACKETstatement : WRITELN LPAREN expression_list RPARENstatement : WRITE LPAREN expression_list RPARENstatement : USES ID SEMICOLONconstant_declaration : CONST constant_listconstant_list : constant\n                     | constant_list constantconstant : ID EQUAL CHARACTER_LITERAL SEMICOLON\n                | ID EQUAL NUMBER SEMICOLON\n                | ID EQUAL STRING_LITERAL SEMICOLON\n                | ID EQUAL BOOLEAN_LITERAL SEMICOLONexpression : expression AND expression\n                  | expression OR expression\n                  | NOT expression'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,25,],[0,-1,]),'ID':([2,16,17,18,19,21,22,24,29,30,32,33,35,36,53,55,56,57,59,60,62,63,64,65,66,67,71,73,74,75,76,77,79,80,83,87,99,102,105,106,107,108,109,110,111,114,120,121,123,124,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,158,160,161,163,165,166,167,169,170,171,172,173,174,175,176,178,179,180,181,185,187,188,191,193,201,206,224,225,227,232,233,234,235,236,238,239,242,246,249,251,252,255,257,263,269,274,276,277,278,279,283,284,285,287,288,289,305,310,312,],[3,28,31,34,28,38,39,54,31,-136,34,-19,28,-14,78,91,91,93,94,-137,-20,99,-15,99,28,28,54,130,130,91,91,91,91,91,91,91,-34,-23,28,28,28,-29,-30,-31,-32,-55,28,28,-39,-40,54,91,91,91,91,91,91,91,91,-122,-123,-124,-125,-126,-127,91,-105,-106,91,-110,-111,-112,91,54,91,-138,-139,-140,-141,-21,99,99,28,28,-16,28,99,-38,99,91,91,-24,-25,256,259,260,261,262,-28,-37,99,99,-42,54,91,91,-26,-27,-33,-41,99,99,28,28,28,54,54,-22,28,28,28,99,28,28,]),'SEMICOLON':([3,23,24,27,28,39,41,42,43,44,45,46,47,48,49,54,66,69,71,78,82,84,85,86,88,89,90,91,94,95,96,97,98,99,100,102,108,109,110,111,114,115,116,117,118,122,126,127,128,132,137,141,156,157,159,162,164,170,190,197,198,199,203,204,205,207,208,209,210,211,212,213,214,215,216,217,218,220,224,225,236,238,240,241,244,245,246,249,250,255,257,262,263,264,265,266,271,283,284,285,290,291,292,293,295,296,300,301,308,309,313,],[4,-17,-128,58,-11,68,71,-77,-78,-79,-80,-81,-82,-83,-129,-95,-128,-73,-128,137,-101,-128,-128,-67,-119,-120,-121,-89,-12,172,173,174,175,-34,176,-23,-29,-30,-31,-32,-55,185,187,-68,-70,192,194,195,71,-88,-134,-128,-144,-102,-104,-107,-109,-128,243,-130,-131,-132,-133,-94,-90,-85,-113,-114,-115,-116,-117,-142,-143,-100,-103,-108,-118,-93,-24,-25,-28,-37,-69,-71,267,268,269,-128,-66,-26,-27,280,-33,281,-72,282,-84,-128,-128,-22,298,299,-86,-87,303,304,306,-46,311,-45,-47,]),'USES':([4,5,6,7,9,10,11,12,13,14,15,20,24,26,29,30,32,33,35,36,58,60,62,64,68,71,141,170,172,173,174,175,176,185,192,194,195,243,249,267,268,281,282,283,284,298,299,],[-128,16,-3,16,-2,-4,-5,-6,-7,-8,-9,-56,53,-57,-135,-136,-18,-19,-13,-14,-10,-137,-20,-15,-128,53,53,53,-138,-139,-140,-141,-21,-16,-128,-60,-63,-58,53,-59,-62,-128,-61,53,53,-64,-65,]),'CONST':([4,5,6,7,9,10,11,12,13,14,15,20,26,29,30,32,33,35,36,58,60,62,64,68,172,173,174,175,176,185,192,194,195,243,267,268,281,282,298,299,],[-128,17,-3,17,-2,-4,-5,-6,-7,-8,-9,-56,-57,-135,-136,-18,-19,-13,-14,-10,-137,-20,-15,-128,-138,-139,-140,-141,-21,-16,-128,-60,-63,-58,-59,-62,-128,-61,-64,-65,]),'TYPE':([4,5,6,7,9,10,11,12,13,14,15,20,26,29,30,32,33,35,36,58,60,62,64,68,172,173,174,175,176,185,192,194,195,243,267,268,281,282,298,299,],[-128,18,-3,18,-2,-4,-5,-6,-7,-8,-9,-56,-57,-135,-136,-18,-19,-13,-14,-10,-137,-20,-15,-128,-138,-139,-140,-141,-21,-16,-128,-60,-63,-58,-59,-62,-128,-61,-64,-65,]),'VAR':([4,5,6,7,9,10,11,12,13,14,15,20,26,29,30,32,33,35,36,58,60,62,64,66,68,172,173,174,175,176,185,187,192,194,195,243,267,268,281,282,298,299,],[-128,19,-3,19,-2,-4,-5,-6,-7,-8,-9,-56,-57,-135,-136,-18,-19,-13,-14,-10,-137,-20,-15,120,-128,-138,-139,-140,-141,-21,-16,120,-128,-60,-63,-58,-59,-62,-128,-61,-64,-65,]),'FUNCTION':([4,5,6,7,9,10,11,12,13,14,15,20,26,29,30,32,33,35,36,58,60,62,64,68,99,102,106,108,109,110,111,114,123,124,172,173,174,175,176,181,185,191,192,194,195,224,225,229,230,231,236,238,243,246,255,257,258,263,267,268,269,280,281,282,285,298,299,303,304,311,],[-128,21,-3,21,-2,-4,-5,-6,-7,-8,-9,-56,-57,-135,-136,-18,-19,-13,-14,-10,-137,-20,-15,-128,-34,-23,-128,-29,-30,-31,-32,-55,-39,-40,-138,-139,-140,-141,-21,234,-16,-38,-128,-60,-63,-24,-25,234,-49,-50,-28,-37,-58,-42,-26,-27,-48,-33,-59,-62,-41,-54,-128,-61,-22,-64,-65,-51,-52,-53,]),'PROCEDURE':([4,5,6,7,9,10,11,12,13,14,15,20,26,29,30,32,33,35,36,58,60,62,64,68,99,102,106,108,109,110,111,114,123,124,172,173,174,175,176,181,185,191,192,194,195,224,225,229,230,231,236,238,243,246,255,257,258,263,267,268,269,280,281,282,285,298,299,303,304,311,],[-128,22,-3,22,-2,-4,-5,-6,-7,22,-9,-56,-57,-135,-136,-18,-19,-13,-14,-10,-137,-20,-15,-128,-34,-23,-128,-29,-30,-31,-32,-55,-39,-40,-138,-139,-140,-141,-21,233,-16,-38,-128,-60,-63,-24,-25,233,-49,-50,-28,-37,-58,-42,-26,-27,-48,-33,-59,-62,-41,-54,-128,-61,-22,-64,-65,-51,-52,-53,]),'BEGIN':([4,5,6,7,9,10,11,12,13,14,15,20,24,26,29,30,32,33,35,36,58,60,62,64,68,71,141,170,172,173,174,175,176,185,192,194,195,243,249,267,268,281,282,283,284,298,299,],[-128,-128,-3,24,-2,-4,-5,-6,-7,-8,-9,-56,24,-57,-135,-136,-18,-19,-13,-14,-10,-137,-20,-15,-128,24,24,24,-138,-139,-140,-141,-21,-16,-128,-60,-63,-58,24,-59,-62,-128,-61,24,24,-64,-65,]),'DOT':([8,23,69,],[25,-17,-73,]),'READLN':([24,71,141,170,249,283,284,],[49,49,49,49,49,49,49,]),'WRITELN':([24,71,141,170,249,283,284,],[51,51,51,51,51,51,51,]),'WRITE':([24,71,141,170,249,283,284,],[52,52,52,52,52,52,52,]),'IF':([24,71,141,170,249,283,284,],[55,55,55,55,55,55,55,]),'WHILE':([24,71,141,170,249,283,284,],[56,56,56,56,56,56,56,]),'FOR':([24,71,141,170,249,283,284,],[57,57,57,57,57,57,57,]),'END':([24,40,41,42,43,44,45,46,47,48,49,54,69,70,71,72,82,84,85,86,88,89,90,91,99,102,105,106,108,109,110,111,114,123,124,128,132,137,141,156,157,159,162,164,170,180,181,191,196,197,198,199,203,204,205,207,208,209,210,211,212,213,214,215,216,217,218,220,224,225,226,228,229,230,231,236,238,246,249,250,255,257,258,263,269,271,280,283,284,285,292,293,303,304,306,311,],[-128,69,-128,-77,-78,-79,-80,-81,-82,-83,-129,-95,-73,-74,-128,-76,-101,-128,-128,-67,-119,-120,-121,-89,-34,-23,-128,-128,-29,-30,-31,-32,-55,-39,-40,-128,-88,-134,-128,-144,-102,-104,-107,-109,-128,-128,-128,-38,-75,-130,-131,-132,-133,-94,-90,-85,-113,-114,-115,-116,-117,-142,-143,-100,-103,-108,-118,-93,-24,-25,255,-44,257,-49,-50,-28,-37,-42,-128,-66,-26,-27,-48,-33,-41,-84,-54,-128,-128,-22,-86,-87,-51,-52,-43,-53,]),'COMMA':([27,28,37,82,84,85,86,88,89,90,91,94,119,125,134,139,140,156,157,159,162,164,182,189,205,208,209,210,211,212,213,214,215,216,217,218,222,223,238,247,248,250,275,],[59,-11,59,-101,-128,-128,-67,-119,-120,-121,-89,-12,59,59,201,206,-91,-144,-102,-104,-107,-109,59,59,-90,-113,-114,-115,-116,-117,-142,-143,-100,-103,-108,-118,254,-36,-37,201,-92,-66,-35,]),'COLON':([28,37,94,119,125,186,189,256,297,302,],[-11,65,-12,188,193,239,242,276,305,307,]),'RPAREN':([28,66,67,76,77,79,82,84,85,86,88,89,90,91,94,99,102,108,109,110,111,114,116,117,118,121,123,124,129,130,133,134,135,136,138,156,157,159,162,164,168,169,182,191,200,202,205,208,209,210,211,212,213,214,215,216,217,218,219,224,225,236,238,240,241,246,247,250,255,257,263,265,269,270,277,278,279,285,287,288,289,310,312,],[-11,-128,122,-128,-128,-128,-101,-128,-128,-67,-119,-120,-121,-89,-12,-34,-23,-29,-30,-31,-32,-55,186,-68,-70,190,-39,-40,197,-89,199,-128,-99,203,204,-144,-102,-104,-107,-109,218,-128,236,-38,-96,-98,-90,-113,-114,-115,-116,-117,-142,-143,-100,-103,-108,-118,250,-24,-25,-28,-37,-69,-71,-42,-128,-66,-26,-27,-33,-72,-41,-97,-128,-128,-128,-22,295,296,297,-128,313,]),'EQUAL':([31,34,82,84,85,86,88,89,90,91,157,159,162,164,205,216,217,218,250,],[61,63,154,-128,-128,-67,-119,-120,-121,-89,-102,-104,-107,-109,-90,-103,-108,-118,-66,]),'LPAREN':([38,39,49,51,52,54,55,56,63,65,75,76,77,79,80,83,87,91,142,143,144,145,146,147,148,149,150,151,152,153,154,155,158,160,161,163,165,166,167,169,171,178,179,188,193,201,206,239,242,251,252,259,260,261,274,276,305,307,],[66,67,73,76,77,79,87,87,107,107,87,87,87,87,87,87,87,169,87,87,87,87,87,87,87,87,-122,-123,-124,-125,-126,-127,87,-105,-106,87,-110,-111,-112,87,87,107,107,107,107,87,87,107,107,87,87,277,278,279,107,107,107,310,]),'ELSE':([42,43,44,45,46,47,48,49,54,69,82,84,85,86,88,89,90,91,132,137,141,156,157,159,162,164,170,197,198,199,203,204,205,207,208,209,210,211,212,213,214,215,216,217,218,220,249,250,271,283,284,292,293,],[-77,-78,-79,-80,-81,-82,-83,-129,-95,-73,-101,-128,-128,-67,-119,-120,-121,-89,-88,-134,-128,-144,-102,-104,-107,-109,-128,-130,-131,-132,-133,-94,-90,249,-113,-114,-115,-116,-117,-142,-143,-100,-103,-108,-118,-93,-128,-66,-84,-128,-128,-86,-87,]),'LBRACKET':([49,54,91,101,112,130,],[74,80,80,177,183,80,]),'COLON_EQUAL':([50,54,93,205,],[75,-89,171,-90,]),'NOT':([55,56,75,76,77,79,80,83,87,142,143,144,145,146,147,148,169,171,201,206,251,252,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'NUMBER':([55,56,61,63,65,75,76,77,79,80,83,87,142,143,144,145,146,147,148,149,150,151,152,153,154,155,158,160,161,163,165,166,167,169,171,177,178,179,183,184,188,193,201,206,239,242,251,252,254,274,276,294,305,306,],[89,89,96,113,113,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,-122,-123,-124,-125,-126,-127,89,-105,-106,89,-110,-111,-112,89,89,113,113,113,237,238,113,113,89,89,113,113,89,89,113,113,113,302,113,302,]),'STRING_LITERAL':([55,56,61,75,76,77,79,80,83,87,142,143,144,145,146,147,148,149,150,151,152,153,154,155,158,160,161,163,165,166,167,169,171,201,206,251,252,],[90,90,97,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,-122,-123,-124,-125,-126,-127,90,-105,-106,90,-110,-111,-112,90,90,90,90,90,90,]),'CHARACTER_LITERAL':([61,],[95,]),'BOOLEAN_LITERAL':([61,63,65,178,179,188,193,239,242,274,276,305,],[98,108,108,108,108,108,108,108,108,108,108,108,]),'ARRAY':([63,65,178,179,188,193,239,242,274,276,305,],[101,101,101,101,101,101,101,101,101,101,101,]),'FILE':([63,65,178,179,188,193,239,242,274,276,305,],[103,103,103,103,103,103,103,103,103,103,103,]),'SET':([63,65,178,179,188,193,239,242,274,276,305,],[104,104,104,104,104,104,104,104,104,104,104,]),'RECORD':([63,65,178,179,188,193,239,242,274,276,305,],[105,105,105,105,105,105,105,105,105,105,105,]),'OBJECT':([63,65,178,179,188,193,239,242,274,276,305,],[106,106,106,106,106,106,106,106,106,106,106,]),'INTEGER':([63,65,178,179,188,193,239,242,274,276,305,],[109,109,109,109,109,109,109,109,109,109,109,]),'BYTE':([63,65,178,179,188,193,239,242,274,276,305,],[110,110,110,110,110,110,110,110,110,110,110,]),'CHAR':([63,65,178,179,188,193,239,242,274,276,305,],[111,111,111,111,111,111,111,111,111,111,111,]),'STRING':([63,65,178,179,188,193,239,242,274,276,305,],[112,112,112,112,112,112,112,112,112,112,112,]),'LONGINT':([63,65,178,179,188,193,239,242,274,276,305,],[114,114,114,114,114,114,114,114,114,114,114,]),'FORWARD':([68,192,243,281,],[127,245,266,291,]),'THEN':([81,82,84,85,86,88,89,90,91,156,157,159,162,164,205,208,209,210,211,212,213,214,215,216,217,218,250,],[141,-101,-128,-128,-67,-119,-120,-121,-89,-144,-102,-104,-107,-109,-90,-113,-114,-115,-116,-117,-142,-143,-100,-103,-108,-118,-66,]),'PLUS':([81,82,84,85,86,88,89,90,91,92,132,134,140,156,157,159,162,164,168,205,208,209,210,211,212,213,214,215,216,217,218,221,247,248,250,272,273,],[142,-101,160,-128,-67,-119,-120,-121,-89,142,142,142,142,142,-102,-104,-107,-109,142,-90,142,142,142,142,142,142,142,-100,-103,-108,-118,142,142,142,-66,142,142,]),'MINUS':([81,82,84,85,86,88,89,90,91,92,132,134,140,156,157,159,162,164,168,205,208,209,210,211,212,213,214,215,216,217,218,221,247,248,250,272,273,],[143,-101,161,-128,-67,-119,-120,-121,-89,143,143,143,143,143,-102,-104,-107,-109,143,-90,143,143,143,143,143,143,143,-100,-103,-108,-118,143,143,143,-66,143,143,]),'TIMES':([81,82,84,85,86,88,89,90,91,92,132,134,140,156,157,159,162,164,168,205,208,209,210,211,212,213,214,215,216,217,218,221,247,248,250,272,273,],[144,-101,-128,165,-67,-119,-120,-121,-89,144,144,144,144,144,-102,-104,-107,-109,144,-90,144,144,144,144,144,144,144,-100,-103,-108,-118,144,144,144,-66,144,144,]),'DIVIDE':([81,82,84,85,86,88,89,90,91,92,132,134,140,156,157,159,162,164,168,205,208,209,210,211,212,213,214,215,216,217,218,221,247,248,250,272,273,],[145,-101,-128,166,-67,-119,-120,-121,-89,145,145,145,145,145,-102,-104,-107,-109,145,-90,145,145,145,145,145,145,145,-100,-103,-108,-118,145,145,145,-66,145,145,]),'MOD':([81,82,84,85,86,88,89,90,91,92,132,134,140,156,157,159,162,164,168,205,208,209,210,211,212,213,214,215,216,217,218,221,247,248,250,272,273,],[146,-101,-128,-128,-67,-119,-120,-121,-89,146,146,146,146,146,-102,-104,-107,-109,146,-90,146,146,146,146,146,146,146,-100,-103,-108,-118,146,146,146,-66,146,146,]),'AND':([81,82,84,85,86,88,89,90,91,92,132,134,140,156,157,159,162,164,168,205,208,209,210,211,212,213,214,215,216,217,218,221,247,248,250,272,273,],[147,-101,-128,-128,-67,-119,-120,-121,-89,147,147,147,147,147,-102,-104,-107,-109,147,-90,147,147,147,147,147,147,147,-100,-103,-108,-118,147,147,147,-66,147,147,]),'OR':([81,82,84,85,86,88,89,90,91,92,132,134,140,156,157,159,162,164,168,205,208,209,210,211,212,213,214,215,216,217,218,221,247,248,250,272,273,],[148,-101,-128,-128,-67,-119,-120,-121,-89,148,148,148,148,148,-102,-104,-107,-109,148,-90,148,148,148,148,148,148,148,-100,-103,-108,-118,148,148,148,-66,148,148,]),'DO':([82,84,85,86,88,89,90,91,92,156,157,159,162,164,205,208,209,210,211,212,213,214,215,216,217,218,250,272,273,],[-101,-128,-128,-67,-119,-120,-121,-89,170,-144,-102,-104,-107,-109,-90,-113,-114,-115,-116,-117,-142,-143,-100,-103,-108,-118,-66,283,284,]),'RBRACKET':([82,84,85,86,88,89,90,91,130,131,139,140,156,157,159,162,164,205,208,209,210,211,212,213,214,215,216,217,218,222,223,237,238,248,250,275,],[-101,-128,-128,-67,-119,-120,-121,-89,-89,198,205,-91,-144,-102,-104,-107,-109,-90,-113,-114,-115,-116,-117,-142,-143,-100,-103,-108,-118,253,-36,263,-37,-92,-66,-35,]),'TO':([82,84,85,86,88,89,90,91,156,157,159,162,164,205,208,209,210,211,212,213,214,215,216,217,218,221,250,],[-101,-128,-128,-67,-119,-120,-121,-89,-144,-102,-104,-107,-109,-90,-113,-114,-115,-116,-117,-142,-143,-100,-103,-108,-118,251,-66,]),'DOWNTO':([82,84,85,86,88,89,90,91,156,157,159,162,164,205,208,209,210,211,212,213,214,215,216,217,218,221,250,],[-101,-128,-128,-67,-119,-120,-121,-89,-144,-102,-104,-107,-109,-90,-113,-114,-115,-116,-117,-142,-143,-100,-103,-108,-118,252,-66,]),'LESS':([82,84,85,86,88,89,90,91,157,159,162,164,205,216,217,218,250,],[150,-128,-128,-67,-119,-120,-121,-89,-102,-104,-107,-109,-90,-103,-108,-118,-66,]),'LESS_EQUAL':([82,84,85,86,88,89,90,91,157,159,162,164,205,216,217,218,250,],[151,-128,-128,-67,-119,-120,-121,-89,-102,-104,-107,-109,-90,-103,-108,-118,-66,]),'GREAT':([82,84,85,86,88,89,90,91,157,159,162,164,205,216,217,218,250,],[152,-128,-128,-67,-119,-120,-121,-89,-102,-104,-107,-109,-90,-103,-108,-118,-66,]),'GREAT_EQUAL':([82,84,85,86,88,89,90,91,157,159,162,164,205,216,217,218,250,],[153,-128,-128,-67,-119,-120,-121,-89,-102,-104,-107,-109,-90,-103,-108,-118,-66,]),'DIFFERENT':([82,84,85,86,88,89,90,91,157,159,162,164,205,216,217,218,250,],[155,-128,-128,-67,-119,-120,-121,-89,-102,-104,-107,-109,-90,-103,-108,-118,-66,]),'DIV':([85,86,88,89,90,91,205,218,250,],[167,-67,-119,-120,-121,-89,-90,-118,-66,]),'CASE':([99,102,105,108,109,110,111,114,123,124,180,191,224,225,236,238,246,255,257,263,269,285,],[-34,-23,-128,-29,-30,-31,-32,-55,-39,-40,227,-38,-24,-25,-28,-37,-42,-26,-27,-33,-41,-22,]),'CONSTRUCTOR':([99,102,106,108,109,110,111,114,123,124,181,191,224,225,229,230,231,236,238,246,255,257,258,263,269,280,285,303,304,311,],[-34,-23,-128,-29,-30,-31,-32,-55,-39,-40,232,-38,-24,-25,232,-49,-50,-28,-37,-42,-26,-27,-48,-33,-41,-54,-22,-51,-52,-53,]),'DESTRUCTOR':([99,102,106,108,109,110,111,114,123,124,181,191,224,225,229,230,231,236,238,246,255,257,258,263,269,280,285,303,304,311,],[-34,-23,-128,-29,-30,-31,-32,-55,-39,-40,235,-38,-24,-25,235,-49,-50,-28,-37,-42,-26,-27,-48,-33,-41,-54,-22,-51,-52,-53,]),'OF':([99,102,103,104,108,109,110,111,114,224,225,236,238,253,255,257,263,285,286,],[-34,-23,178,179,-29,-30,-31,-32,-55,-24,-25,-28,-37,274,-26,-27,-33,-22,294,]),'DOTDOT':([113,],[184,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_sections':([4,5,68,192,281,],[5,7,7,7,7,]),'empty':([4,5,24,41,66,67,68,71,76,77,79,84,85,105,106,128,134,141,169,170,180,181,192,247,249,277,278,279,281,283,284,310,],[6,6,48,72,118,124,6,48,135,135,135,159,164,124,124,72,202,48,135,48,228,231,6,202,48,124,124,124,6,48,48,124,]),'block':([5,68,192,281,],[8,126,244,290,]),'declaration_section':([5,7,],[9,9,]),'uses_opt':([5,7,],[10,10,]),'constant_declaration':([5,7,],[11,11,]),'type_declaration':([5,7,],[12,12,]),'var_declaration':([5,7,],[13,13,]),'procedure_declarations':([5,7,],[14,14,]),'function_declaration':([5,7,],[15,15,]),'procedure_declaration':([5,7,14,],[20,20,26,]),'compound_statement':([7,24,71,141,170,249,283,284,],[23,46,46,46,46,46,46,46,]),'id_list':([16,19,35,66,67,105,106,107,120,121,180,181,187,277,278,279,287,288,289,310,312,],[27,37,37,119,125,125,125,182,189,125,125,125,119,125,125,125,125,125,125,125,125,]),'constant_list':([17,],[29,]),'constant':([17,29,],[30,60,]),'type_list':([18,],[32,]),'type_definition':([18,32,],[33,62,]),'declaration_list':([19,],[35,]),'declaration':([19,35,],[36,64,]),'statement_list':([24,],[40,]),'statement':([24,71,141,170,249,283,284,],[41,128,207,220,271,292,293,]),'if_statement':([24,71,141,170,249,283,284,],[42,42,42,42,42,42,42,]),'assignment_statement':([24,71,141,170,249,283,284,],[43,43,43,43,43,43,43,]),'while_statement':([24,71,141,170,249,283,284,],[44,44,44,44,44,44,44,]),'procedure_call':([24,71,141,170,249,283,284,],[45,45,45,45,45,45,45,]),'for_statement':([24,71,141,170,249,283,284,],[47,47,47,47,47,47,47,]),'variable':([24,55,56,71,73,74,75,76,77,79,80,83,87,141,142,143,144,145,146,147,148,149,158,163,169,170,171,201,206,249,251,252,283,284,],[50,88,88,50,129,131,88,88,88,88,88,88,88,50,88,88,88,88,88,88,88,88,88,88,88,50,88,88,88,50,88,88,50,50,]),'statement_list_tail':([41,128,],[70,196,]),'expression':([55,56,75,76,77,79,80,83,87,142,143,144,145,146,147,148,169,171,201,206,251,252,],[81,92,132,134,134,134,140,156,168,208,209,210,211,212,213,214,134,221,247,248,272,273,]),'simple_expression':([55,56,75,76,77,79,80,83,87,142,143,144,145,146,147,148,149,169,171,201,206,251,252,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,215,82,82,82,82,82,82,]),'term':([55,56,75,76,77,79,80,83,87,142,143,144,145,146,147,148,149,158,169,171,201,206,251,252,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,216,84,84,84,84,84,84,]),'factor':([55,56,75,76,77,79,80,83,87,142,143,144,145,146,147,148,149,158,163,169,171,201,206,251,252,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,217,85,85,85,85,85,85,]),'function_call':([55,56,75,76,77,79,80,83,87,142,143,144,145,146,147,148,149,158,163,169,171,201,206,251,252,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'type_specifier':([63,65,178,179,188,193,239,242,274,276,305,],[100,115,224,225,241,246,264,265,285,286,308,]),'subrange':([63,65,177,178,179,188,193,239,242,254,274,276,305,],[102,102,223,102,102,102,102,102,102,275,102,102,102,]),'parameter_list':([66,],[116,]),'parameter':([66,187,],[117,240,]),'field_list':([67,105,106,277,278,279,310,],[121,180,181,287,288,289,312,]),'field':([67,105,106,121,180,181,277,278,279,287,288,289,310,312,],[123,123,123,191,191,191,123,123,123,191,191,191,123,191,]),'expression_list':([76,77,79,169,],[133,136,138,219,]),'index_list':([80,],[139,]),'relop':([82,],[149,]),'simple_expression_tail':([84,],[157,]),'addop':([84,],[158,]),'term_tail':([85,],[162,]),'mulop':([85,],[163,]),'expression_list_tail':([134,247,],[200,270,]),'type_expression':([177,],[222,]),'case_part':([180,],[226,]),'method_list':([181,],[229,]),'method':([181,229,],[230,258,]),'case_list':([294,],[300,]),'case_element':([294,306,],[301,309,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON declaration_sections block DOT','program',6,'p_program','Parser_MiniPascal.py',18),
  ('declaration_sections -> declaration_sections declaration_section','declaration_sections',2,'p_declaration_sections','Parser_MiniPascal.py',40),
  ('declaration_sections -> empty','declaration_sections',1,'p_declaration_sections','Parser_MiniPascal.py',41),
  ('declaration_section -> uses_opt','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',45),
  ('declaration_section -> constant_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',46),
  ('declaration_section -> type_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',47),
  ('declaration_section -> var_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',48),
  ('declaration_section -> procedure_declarations','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',49),
  ('declaration_section -> function_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',50),
  ('uses_opt -> USES id_list SEMICOLON','uses_opt',3,'p_uses_opt','Parser_MiniPascal.py',54),
  ('id_list -> ID','id_list',1,'p_id_list','Parser_MiniPascal.py',59),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','Parser_MiniPascal.py',60),
  ('var_declaration -> VAR declaration_list','var_declaration',2,'p_var_declaration','Parser_MiniPascal.py',64),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser_MiniPascal.py',68),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','Parser_MiniPascal.py',69),
  ('declaration -> id_list COLON type_specifier SEMICOLON','declaration',4,'p_declaration','Parser_MiniPascal.py',73),
  ('block -> declaration_sections compound_statement','block',2,'p_block','Parser_MiniPascal.py',78),
  ('type_declaration -> TYPE type_list','type_declaration',2,'p_type_declaration','Parser_MiniPascal.py',84),
  ('type_list -> type_definition','type_list',1,'p_type_list','Parser_MiniPascal.py',88),
  ('type_list -> type_list type_definition','type_list',2,'p_type_list','Parser_MiniPascal.py',89),
  ('type_definition -> ID EQUAL type_specifier SEMICOLON','type_definition',4,'p_type_definition','Parser_MiniPascal.py',97),
  ('type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier','type_specifier',6,'p_type_specifier','Parser_MiniPascal.py',101),
  ('type_specifier -> subrange','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',102),
  ('type_specifier -> FILE OF type_specifier','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',103),
  ('type_specifier -> SET OF type_specifier','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',104),
  ('type_specifier -> RECORD field_list case_part END','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',105),
  ('type_specifier -> OBJECT field_list method_list END','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',106),
  ('type_specifier -> LPAREN id_list RPAREN','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',107),
  ('type_specifier -> BOOLEAN_LITERAL','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',108),
  ('type_specifier -> INTEGER','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',109),
  ('type_specifier -> BYTE','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',110),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',111),
  ('type_specifier -> STRING LBRACKET NUMBER RBRACKET','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',112),
  ('type_specifier -> ID','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',113),
  ('type_expression -> type_expression COMMA subrange','type_expression',3,'p_type_expression','Parser_MiniPascal.py',117),
  ('type_expression -> subrange','type_expression',1,'p_type_expression','Parser_MiniPascal.py',118),
  ('subrange -> NUMBER DOTDOT NUMBER','subrange',3,'p_subrange','Parser_MiniPascal.py',122),
  ('field_list -> field_list field','field_list',2,'p_field_list','Parser_MiniPascal.py',127),
  ('field_list -> field','field_list',1,'p_field_list','Parser_MiniPascal.py',128),
  ('field_list -> empty','field_list',1,'p_field_list','Parser_MiniPascal.py',129),
  ('field -> id_list COLON type_specifier SEMICOLON','field',4,'p_field','Parser_MiniPascal.py',133),
  ('field -> id_list COLON type_specifier','field',3,'p_field','Parser_MiniPascal.py',134),
  ('case_part -> CASE ID COLON type_specifier OF case_list SEMICOLON','case_part',7,'p_case_part','Parser_MiniPascal.py',138),
  ('case_part -> empty','case_part',1,'p_case_part','Parser_MiniPascal.py',139),
  ('case_list -> case_list SEMICOLON case_element','case_list',3,'p_case_list','Parser_MiniPascal.py',143),
  ('case_list -> case_element','case_list',1,'p_case_list','Parser_MiniPascal.py',144),
  ('case_element -> NUMBER COLON LPAREN field_list RPAREN','case_element',5,'p_case_element','Parser_MiniPascal.py',148),
  ('method_list -> method_list method','method_list',2,'p_method_list','Parser_MiniPascal.py',155),
  ('method_list -> method','method_list',1,'p_method_list','Parser_MiniPascal.py',156),
  ('method_list -> empty','method_list',1,'p_method_list','Parser_MiniPascal.py',157),
  ('method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON','method',6,'p_method','Parser_MiniPascal.py',161),
  ('method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON','method',6,'p_method','Parser_MiniPascal.py',162),
  ('method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON','method',8,'p_method','Parser_MiniPascal.py',163),
  ('method -> DESTRUCTOR ID SEMICOLON','method',3,'p_method','Parser_MiniPascal.py',164),
  ('type_specifier -> LONGINT','type_specifier',1,'p_type_specifier_longint','Parser_MiniPascal.py',178),
  ('procedure_declarations -> procedure_declaration','procedure_declarations',1,'p_procedure_declarations','Parser_MiniPascal.py',183),
  ('procedure_declarations -> procedure_declarations procedure_declaration','procedure_declarations',2,'p_procedure_declarations','Parser_MiniPascal.py',184),
  ('procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON','procedure_declaration',6,'p_procedure_declaration','Parser_MiniPascal.py',191),
  ('procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON','procedure_declaration',7,'p_procedure_declaration','Parser_MiniPascal.py',192),
  ('procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON','procedure_declaration',5,'p_procedure_declaration','Parser_MiniPascal.py',193),
  ('procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON','procedure_declaration',8,'p_procedure_declaration','Parser_MiniPascal.py',194),
  ('procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON','procedure_declaration',7,'p_procedure_declaration','Parser_MiniPascal.py',195),
  ('procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON','procedure_declaration',5,'p_procedure_declaration','Parser_MiniPascal.py',196),
  ('function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON','function_declaration',10,'p_function_declaration','Parser_MiniPascal.py',204),
  ('function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON','function_declaration',10,'p_function_declaration','Parser_MiniPascal.py',205),
  ('function_call -> ID LPAREN expression_list RPAREN','function_call',4,'p_function_call','Parser_MiniPascal.py',213),
  ('factor -> function_call','factor',1,'p_factor_function_call','Parser_MiniPascal.py',218),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','Parser_MiniPascal.py',223),
  ('parameter_list -> parameter_list SEMICOLON parameter','parameter_list',3,'p_parameter_list','Parser_MiniPascal.py',224),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','Parser_MiniPascal.py',225),
  ('parameter -> id_list COLON type_specifier','parameter',3,'p_parameter','Parser_MiniPascal.py',229),
  ('parameter -> VAR id_list COLON type_specifier','parameter',4,'p_parameter','Parser_MiniPascal.py',230),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','Parser_MiniPascal.py',235),
  ('statement_list -> statement statement_list_tail','statement_list',2,'p_statement_list_multi','Parser_MiniPascal.py',240),
  ('statement_list_tail -> SEMICOLON statement statement_list_tail','statement_list_tail',3,'p_statement_list_tail','Parser_MiniPascal.py',244),
  ('statement_list_tail -> empty','statement_list_tail',1,'p_statement_list_tail','Parser_MiniPascal.py',245),
  ('statement -> if_statement','statement',1,'p_statement','Parser_MiniPascal.py',250),
  ('statement -> assignment_statement','statement',1,'p_statement','Parser_MiniPascal.py',251),
  ('statement -> while_statement','statement',1,'p_statement','Parser_MiniPascal.py',252),
  ('statement -> procedure_call','statement',1,'p_statement','Parser_MiniPascal.py',253),
  ('statement -> compound_statement','statement',1,'p_statement','Parser_MiniPascal.py',254),
  ('statement -> for_statement','statement',1,'p_statement','Parser_MiniPascal.py',255),
  ('statement -> empty','statement',1,'p_statement','Parser_MiniPascal.py',256),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_if_statement','Parser_MiniPascal.py',260),
  ('if_statement -> IF expression THEN statement','if_statement',4,'p_if_statement','Parser_MiniPascal.py',261),
  ('for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement','for_statement',8,'p_for_statement','Parser_MiniPascal.py',265),
  ('for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement','for_statement',8,'p_for_statement','Parser_MiniPascal.py',266),
  ('assignment_statement -> variable COLON_EQUAL expression','assignment_statement',3,'p_assignment_statement','Parser_MiniPascal.py',271),
  ('variable -> ID','variable',1,'p_variable_simple','Parser_MiniPascal.py',276),
  ('variable -> ID LBRACKET index_list RBRACKET','variable',4,'p_variable_index','Parser_MiniPascal.py',280),
  ('index_list -> expression','index_list',1,'p_index_list','Parser_MiniPascal.py',284),
  ('index_list -> index_list COMMA expression','index_list',3,'p_index_list','Parser_MiniPascal.py',285),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','Parser_MiniPascal.py',290),
  ('procedure_call -> ID LPAREN expression_list RPAREN','procedure_call',4,'p_procedure_call','Parser_MiniPascal.py',295),
  ('procedure_call -> ID','procedure_call',1,'p_procedure_call','Parser_MiniPascal.py',296),
  ('expression_list -> expression expression_list_tail','expression_list',2,'p_expression_list_multi','Parser_MiniPascal.py',301),
  ('expression_list_tail -> COMMA expression expression_list_tail','expression_list_tail',3,'p_expression_list_tail','Parser_MiniPascal.py',305),
  ('expression_list_tail -> empty','expression_list_tail',1,'p_expression_list_tail','Parser_MiniPascal.py',306),
  ('expression_list -> empty','expression_list',1,'p_expression_list_empty','Parser_MiniPascal.py',310),
  ('expression -> simple_expression relop simple_expression','expression',3,'p_expression','Parser_MiniPascal.py',315),
  ('expression -> simple_expression','expression',1,'p_expression','Parser_MiniPascal.py',316),
  ('simple_expression -> term simple_expression_tail','simple_expression',2,'p_simple_expression','Parser_MiniPascal.py',321),
  ('simple_expression_tail -> addop term','simple_expression_tail',2,'p_simple_expression_tail','Parser_MiniPascal.py',325),
  ('simple_expression_tail -> empty','simple_expression_tail',1,'p_simple_expression_tail','Parser_MiniPascal.py',326),
  ('addop -> PLUS','addop',1,'p_addop','Parser_MiniPascal.py',330),
  ('addop -> MINUS','addop',1,'p_addop','Parser_MiniPascal.py',331),
  ('term -> factor term_tail','term',2,'p_term','Parser_MiniPascal.py',336),
  ('term_tail -> mulop factor','term_tail',2,'p_term_tail','Parser_MiniPascal.py',340),
  ('term_tail -> empty','term_tail',1,'p_term_tail','Parser_MiniPascal.py',341),
  ('mulop -> TIMES','mulop',1,'p_mulop','Parser_MiniPascal.py',345),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','Parser_MiniPascal.py',346),
  ('mulop -> DIV','mulop',1,'p_mulop','Parser_MiniPascal.py',347),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',352),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',353),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',354),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',355),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',356),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','Parser_MiniPascal.py',363),
  ('factor -> variable','factor',1,'p_factor_variable','Parser_MiniPascal.py',367),
  ('factor -> NUMBER','factor',1,'p_factor_number','Parser_MiniPascal.py',371),
  ('factor -> STRING_LITERAL','factor',1,'p_factor_string','Parser_MiniPascal.py',375),
  ('relop -> LESS','relop',1,'p_relop','Parser_MiniPascal.py',382),
  ('relop -> LESS_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',383),
  ('relop -> GREAT','relop',1,'p_relop','Parser_MiniPascal.py',384),
  ('relop -> GREAT_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',385),
  ('relop -> EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',386),
  ('relop -> DIFFERENT','relop',1,'p_relop','Parser_MiniPascal.py',387),
  ('empty -> <empty>','empty',0,'p_empty','Parser_MiniPascal.py',392),
  ('statement -> READLN','statement',1,'p_statement_readln','Parser_MiniPascal.py',396),
  ('statement -> READLN LPAREN variable RPAREN','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',400),
  ('statement -> READLN LBRACKET variable RBRACKET','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',401),
  ('statement -> WRITELN LPAREN expression_list RPAREN','statement',4,'p_statement_writeln','Parser_MiniPascal.py',405),
  ('statement -> WRITE LPAREN expression_list RPAREN','statement',4,'p_statement_write','Parser_MiniPascal.py',409),
  ('statement -> USES ID SEMICOLON','statement',3,'p_statement_uses','Parser_MiniPascal.py',414),
  ('constant_declaration -> CONST constant_list','constant_declaration',2,'p_constant_declaration','Parser_MiniPascal.py',419),
  ('constant_list -> constant','constant_list',1,'p_constant_list','Parser_MiniPascal.py',423),
  ('constant_list -> constant_list constant','constant_list',2,'p_constant_list','Parser_MiniPascal.py',424),
  ('constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',428),
  ('constant -> ID EQUAL NUMBER SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',429),
  ('constant -> ID EQUAL STRING_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',430),
  ('constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',431),
  ('expression -> expression AND expression','expression',3,'p_expression_logical','Parser_MiniPascal.py',436),
  ('expression -> expression OR expression','expression',3,'p_expression_logical','Parser_MiniPascal.py',437),
  ('expression -> NOT expression','expression',2,'p_expression_logical','Parser_MiniPascal.py',438),
]
