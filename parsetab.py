
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocELSEAND ARRAY BEGIN BOOLEAN_LITERAL BYTE CASE CHAR CHARACTER_LITERAL COLON COLON_EQUAL COMMA CONST CONSTRUCTOR DESTRUCTOR DIFFERENT DIV DIVIDE DO DOT DOTDOT DOWNTO ELSE END EQUAL FALSE FILE FOR FORWARD FUNCTION GOTO GREAT GREAT_EQUAL ID IF IN INTEGER LABEL LBLOCK LBRACKET LESS LESS_EQUAL LONGINT LPAREN MINUS MOD NIL NOT NUMBER OBJECT OF OR PACKED PLUS PROCEDURE PROGRAM RBLOCK RBRACKET READLINE READLN RECORD REPEAT RPAREN SEMICOLON SET STRING STRING_LITERAL SUBRANGE THEN TIMES TO TRUE TYPE UNTIL USES VAR WHILE WITH WRITE WRITELNprogram : PROGRAM ID SEMICOLON declaration_sections block DOTdeclaration_sections : declaration_sections declaration_section\n                            | emptydeclaration_section : uses_opt\n                           | constant_declaration\n                           | type_declaration\n                           | var_declaration\n                           | procedure_declarations\n                           | function_declaration\n                           | constructor_declaration\n                           | method_declarationmethod_declaration : CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block \n                          | PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block \n                          | FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block\n                          | DESTRUCTOR ID DOT ID SEMICOLON blockconstructor_declaration : CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block\n                               | CONSTRUCTOR ID LPAREN RPAREN SEMICOLON blockuses_opt : USES id_list SEMICOLONid_list : IDid_list : id_list COMMA IDvar_declaration : VAR declaration_listdeclaration_list : declaration\n                        | declaration_list declarationdeclaration : id_list COLON type_specifier SEMICOLONblock : declaration_sections compound_statementtype_declaration : TYPE type_listtype_list : type_definition\n                 | type_list type_definitiontype_definition : ID EQUAL type_specifier SEMICOLONtype_specifier : ARRAY LBRACKET type_expression RBRACKET OF type_specifier\n                      | subrange\n                      | FILE OF type_specifier\n                      | SET OF type_specifier\n                      | RECORD field_list case_part END\n                      | OBJECT field_list method_list END                              \n                      | LPAREN id_list RPAREN\n                      | BOOLEAN_LITERAL\n                      | INTEGER\n                      | BYTE\n                      | CHAR\n                      | STRING\n                      | STRING LBRACKET NUMBER RBRACKET\n                      | IDtype_expression : type_expression COMMA subrange\n                       | subrangesubrange : NUMBER DOTDOT NUMBER\n                | NUMBER DOTDOT IDfield_list : field_list field\n                  | field\n                  | emptyfield : id_list COLON type_specifier\n             | id_list COLON type_specifier SEMICOLON\n             | VAR id_list COLON type_specifier\n             | VAR id_list COLON type_specifier SEMICOLON\n             | id_list LPAREN STRING_LITERAL RPAREN\n             | statement\n             | if_statement\n             | case_statement\n             | assignment_statementcase_part : CASE ID COLON type_specifier OF case_list SEMICOLON\n                 | emptycase_list : case_list SEMICOLON case_element\n                 | case_elementcase_list_opt_semicolon : case_list\n                               | case_list SEMICOLONcase_element : NUMBER COLON LPAREN field_list RPAREN\n                    | NUMBER COLON field_listmethod_list : method_list method\n                   | method\n                   | emptymethod : CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON\n              | PROCEDURE ID LPAREN field_list RPAREN SEMICOLON  \n              | FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON\n              | DESTRUCTOR ID SEMICOLONcase_statement : CASE expression OF case_list_opt_semicolon END SEMICOLON\n                      | CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON\n                      | CASE expression OF case_list_opt_semicolon ENDtype_specifier : LONGINTprocedure_declarations : procedure_declaration\n                              | procedure_declarations procedure_declarationprocedure_declaration : PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON\n                             | PROCEDURE ID LPAREN  RPAREN SEMICOLON block SEMICOLONfunction_declaration : FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON\n                            | FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON\n                            | FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON block SEMICOLON\n                            | FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLONfunction_call : ID LPAREN expression_list RPARENfactor : function_callparameter_list : parameter_list SEMICOLON parameter\n                      | parameter\n                      | emptyparameter : ID COLON type_specifiercompound_statement : BEGIN statement_list END\n                            | BEGIN local_var_declarations statement_list END\n                            local_var_declarations : var_declaration\n                             | emptystatement_list : statement_list statement SEMICOLON\n                      | statement_list statementstatement_list : statementstatement : if_statement\n                 | assignment_statement\n                 | while_statement\n                 | procedure_call\n                 | compound_statement\n                 | for_statement\n                 | case_statement\n                 | with_statement\n                 | repeat_statement\n                 | emptywith_statement : WITH variable DO statementif_statement : IF expression THEN statement ELSE statement\n                    | IF expression THEN statement\n                    | IF expression IN statement THEN statement ELSE statement\n                    | IF expression IN statement THEN statementfor_statement : FOR ID COLON_EQUAL expression TO expression DO block\n                     | FOR ID COLON_EQUAL expression DOWNTO expression DO blockassignment_statement : variable COLON_EQUAL expression\n                            | variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON\n                            | variable PLUS COLON_EQUAL expression\n                            | variable MINUS COLON_EQUAL expression\n                            | variable TIMES COLON_EQUAL expression\n                            | variable DIVIDE COLON_EQUAL expression\n                            | ID COLON_EQUAL expressionvariable : ID\n                | variable LBRACKET expression RBRACKET\n                | variable DOT IDvariable : ID LBRACKET index_list RBRACKETindex_list : expression\n                  | index_list COMMA expressionwhile_statement : WHILE expression DO statementprocedure_call : ID LPAREN expression_list RPAREN\n                      | IDexpression_list : expression expression_list_tailexpression_list_tail : COMMA expression expression_list_tail\n                            | emptyexpression_list : emptyexpression : simple_expression relop simple_expression\n                  | simple_expressionsimple_expression : term simple_expression_tailsimple_expression_tail : addop term\n                              | emptyaddop : PLUS\n             | MINUSterm : factor term_tailterm_tail : mulop factor\n                 | emptymulop : TIMES\n             | DIVIDE\n             | DIVexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expressionfactor : LPAREN expression RPARENfactor : variablefactor : NUMBERfactor : STRING_LITERALrelop : LESS\n             | LESS_EQUAL\n             | GREAT\n             | GREAT_EQUAL\n             | EQUAL\n             | DIFFERENTempty :statement : READLNstatement : READLN LPAREN variable RPAREN\n                 | READLN LBRACKET variable RBRACKET\n                 | READLN LPAREN variable_list RPARENvariable_list : variable\n                     | variable_list COMMA variablestatement : WRITE LPAREN expression_list RPARENstatement : WRITELN LPAREN write_arguments RPAREN\n                 | WRITELN LPAREN expression RPARENwrite_arguments : write_argument\n                       | write_arguments COMMA write_argumentwrite_argument : expression\n                      | expression COLON expression\n                      | expression COLON expression COLON expressionstatement : USES ID SEMICOLONconstant_declaration : CONST constant_listrepeat_statement : REPEAT statement_list UNTIL expression SEMICOLONconstant_list : constant\n                     | constant_list constantconstant : ID EQUAL CHARACTER_LITERAL SEMICOLON\n                | ID EQUAL NUMBER SEMICOLON\n                | ID EQUAL STRING_LITERAL SEMICOLON\n                | ID EQUAL BOOLEAN_LITERAL SEMICOLONexpression : expression AND expression\n                  | expression OR expression\n                  | NOT expression'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_sections':([4,5,249,256,257,324,331,362,390,395,396,400,401,427,],[5,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'empty':([4,5,28,47,48,72,82,84,87,92,102,106,111,112,124,136,137,154,183,193,194,222,223,226,236,237,246,249,253,254,256,257,324,331,335,340,341,346,348,362,379,381,382,386,387,388,390,395,396,399,400,401,403,406,407,408,427,],[6,6,51,91,91,91,151,157,151,91,184,184,212,217,91,157,157,91,271,91,91,184,91,91,307,310,151,6,151,151,6,6,6,6,271,91,91,91,157,6,91,157,91,157,157,157,6,6,6,91,6,6,91,91,91,91,6,]),'block':([5,249,256,257,324,331,362,390,395,396,400,401,427,],[8,325,332,333,364,370,391,409,414,415,417,418,432,]),'declaration_section':([5,7,],[9,9,]),'uses_opt':([5,7,],[10,10,]),'constant_declaration':([5,7,],[11,11,]),'type_declaration':([5,7,],[12,12,]),'var_declaration':([5,7,28,],[13,13,50,]),'procedure_declarations':([5,7,],[14,14,]),'function_declaration':([5,7,],[15,15,]),'constructor_declaration':([5,7,],[16,16,]),'method_declaration':([5,7,],[17,17,]),'procedure_declaration':([5,7,14,],[22,22,30,]),'compound_statement':([7,28,47,48,72,84,92,124,136,137,154,193,194,223,226,236,237,340,341,346,348,379,381,382,386,387,388,399,403,406,407,408,],[27,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'id_list':([18,21,40,84,136,137,138,154,159,236,237,348,381,382,386,387,388,403,406,407,408,],[32,42,42,158,158,158,238,158,252,158,158,158,158,158,158,158,158,158,158,158,158,]),'constant_list':([19,],[34,]),'constant':([19,34,],[35,76,]),'type_list':([20,],[37,]),'type_definition':([20,37,],[38,78,]),'declaration_list':([21,],[40,]),'declaration':([21,40,],[41,80,]),'statement_list':([28,48,72,346,],[47,92,124,379,]),'local_var_declarations':([28,],[48,]),'statement':([28,47,48,72,84,92,124,136,137,154,193,194,223,226,236,237,340,341,346,348,379,381,382,386,387,388,399,403,406,407,408,],[49,90,49,49,160,90,90,160,160,160,279,280,293,299,160,160,374,375,49,160,90,160,160,160,160,160,416,160,160,160,160,]),'if_statement':([28,47,48,72,84,92,124,136,137,154,193,194,223,226,236,237,340,341,346,348,379,381,382,386,387,388,399,403,406,407,408,],[52,52,52,52,161,52,52,161,161,161,52,52,52,52,161,161,52,52,52,161,52,161,161,161,161,161,52,161,161,161,161,]),'assignment_statement':([28,47,48,72,84,92,124,136,137,154,193,194,223,226,236,237,340,341,346,348,379,381,382,386,387,388,399,403,406,407,408,],[53,53,53,53,163,53,53,163,163,163,53,53,53,53,163,163,53,53,53,163,53,163,163,163,163,163,53,163,163,163,163,]),'while_statement':([28,47,48,72,84,92,124,136,137,154,193,194,223,226,236,237,340,341,346,348,379,381,382,386,387,388,399,403,406,407,408,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'procedure_call':([28,47,48,72,84,92,124,136,137,154,193,194,223,226,236,237,340,341,346,348,379,381,382,386,387,388,399,403,406,407,408,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'for_statement':([28,47,48,72,84,92,124,136,137,154,193,194,223,226,236,237,340,341,346,348,379,381,382,386,387,388,399,403,406,407,408,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'case_statement':([28,47,48,72,84,92,124,136,137,154,193,194,223,226,236,237,340,341,346,348,379,381,382,386,387,388,399,403,406,407,408,],[58,58,58,58,162,58,58,162,162,162,58,58,58,58,162,162,58,58,58,162,58,162,162,162,162,162,58,162,162,162,162,]),'with_statement':([28,47,48,72,84,92,124,136,137,154,193,194,223,226,236,237,340,341,346,348,379,381,382,386,387,388,399,403,406,407,408,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'repeat_statement':([28,47,48,72,84,92,124,136,137,154,193,194,223,226,236,237,340,341,346,348,379,381,382,386,387,388,399,403,406,407,408,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'variable':([28,47,48,67,68,70,71,72,84,92,93,94,95,100,102,103,105,106,107,110,114,124,136,137,154,176,177,178,179,193,194,195,196,197,198,199,200,201,202,211,216,222,223,224,226,227,236,237,260,270,273,275,278,306,340,341,343,344,346,348,373,379,381,382,386,387,388,399,403,406,407,408,],[62,62,62,115,115,115,122,62,62,62,171,173,115,115,115,115,115,115,115,115,115,62,62,62,62,115,115,115,115,62,62,115,115,115,115,115,115,115,115,115,115,115,62,115,62,115,62,62,334,115,115,115,115,115,62,62,115,115,62,62,115,62,62,62,62,62,62,62,62,62,62,62,]),'expression':([67,68,70,95,100,102,103,105,106,107,110,114,176,177,178,179,195,196,197,198,199,200,201,222,224,227,270,273,275,278,306,343,344,373,],[108,119,121,174,180,183,186,189,183,192,209,221,263,264,265,266,281,282,283,284,285,286,287,183,294,300,335,337,338,339,121,376,377,398,]),'simple_expression':([67,68,70,95,100,102,103,105,106,107,110,114,176,177,178,179,195,196,197,198,199,200,201,202,222,224,227,270,273,275,278,306,343,344,373,],[109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,288,109,109,109,109,109,109,109,109,109,109,109,]),'term':([67,68,70,95,100,102,103,105,106,107,110,114,176,177,178,179,195,196,197,198,199,200,201,202,211,222,224,227,270,273,275,278,306,343,344,373,],[111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,289,111,111,111,111,111,111,111,111,111,111,111,]),'factor':([67,68,70,95,100,102,103,105,106,107,110,114,176,177,178,179,195,196,197,198,199,200,201,202,211,216,222,224,227,270,273,275,278,306,343,344,373,],[112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,290,112,112,112,112,112,112,112,112,112,112,112,]),'function_call':([67,68,70,95,100,102,103,105,106,107,110,114,176,177,178,179,195,196,197,198,199,200,201,202,211,216,222,224,227,270,273,275,278,306,343,344,373,],[113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,]),'type_specifier':([79,81,234,235,242,245,250,320,328,383,385,393,431,],[131,146,303,304,319,322,326,361,367,404,405,413,434,]),'subrange':([79,81,233,234,235,242,245,250,320,328,351,383,385,393,431,],[133,133,302,133,133,133,133,133,133,133,384,133,133,133,133,]),'parameter_list':([82,87,246,253,254,],[148,166,323,329,330,]),'parameter':([82,87,244,246,253,254,],[150,150,321,150,150,150,]),'field_list':([84,136,137,348,381,386,387,388,],[154,236,237,382,403,406,407,408,]),'field':([84,136,137,154,236,237,348,381,382,386,387,388,403,406,407,408,],[156,156,156,248,248,248,156,156,248,156,156,156,248,248,248,248,]),'variable_list':([93,],[172,]),'expression_list':([102,106,222,],[182,190,292,]),'write_arguments':([103,],[185,]),'write_argument':([103,273,],[187,336,]),'index_list':([107,],[191,]),'relop':([109,],[202,]),'simple_expression_tail':([111,],[210,]),'addop':([111,],[211,]),'term_tail':([112,],[215,]),'mulop':([112,],[216,]),'expression_list_tail':([183,335,],[269,372,]),'case_list_opt_semicolon':([225,],[295,]),'case_list':([225,421,],[296,428,]),'case_element':([225,347,421,433,],[297,380,297,380,]),'type_expression':([233,],[301,]),'case_part':([236,],[305,]),'method_list':([237,],[308,]),'method':([237,308,],[309,355,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON declaration_sections block DOT','program',6,'p_program','Parser_MiniPascal.py',21),
  ('declaration_sections -> declaration_sections declaration_section','declaration_sections',2,'p_declaration_sections','Parser_MiniPascal.py',27),
  ('declaration_sections -> empty','declaration_sections',1,'p_declaration_sections','Parser_MiniPascal.py',28),
  ('declaration_section -> uses_opt','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',33),
  ('declaration_section -> constant_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',34),
  ('declaration_section -> type_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',35),
  ('declaration_section -> var_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',36),
  ('declaration_section -> procedure_declarations','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',37),
  ('declaration_section -> function_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',38),
  ('declaration_section -> constructor_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',39),
  ('declaration_section -> method_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',40),
  ('method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block','method_declaration',9,'p_method_declaration','Parser_MiniPascal.py',44),
  ('method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block','method_declaration',9,'p_method_declaration','Parser_MiniPascal.py',45),
  ('method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block','method_declaration',11,'p_method_declaration','Parser_MiniPascal.py',46),
  ('method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block','method_declaration',6,'p_method_declaration','Parser_MiniPascal.py',47),
  ('constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block','constructor_declaration',7,'p_constructor_declaration','Parser_MiniPascal.py',54),
  ('constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block','constructor_declaration',6,'p_constructor_declaration','Parser_MiniPascal.py',55),
  ('uses_opt -> USES id_list SEMICOLON','uses_opt',3,'p_uses_opt','Parser_MiniPascal.py',61),
  ('id_list -> ID','id_list',1,'p_id_list_single','Parser_MiniPascal.py',75),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list_multiple','Parser_MiniPascal.py',79),
  ('var_declaration -> VAR declaration_list','var_declaration',2,'p_var_declaration','Parser_MiniPascal.py',83),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser_MiniPascal.py',87),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','Parser_MiniPascal.py',88),
  ('declaration -> id_list COLON type_specifier SEMICOLON','declaration',4,'p_declaration','Parser_MiniPascal.py',92),
  ('block -> declaration_sections compound_statement','block',2,'p_block','Parser_MiniPascal.py',110),
  ('type_declaration -> TYPE type_list','type_declaration',2,'p_type_declaration','Parser_MiniPascal.py',114),
  ('type_list -> type_definition','type_list',1,'p_type_list','Parser_MiniPascal.py',118),
  ('type_list -> type_list type_definition','type_list',2,'p_type_list','Parser_MiniPascal.py',119),
  ('type_definition -> ID EQUAL type_specifier SEMICOLON','type_definition',4,'p_type_definition','Parser_MiniPascal.py',124),
  ('type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier','type_specifier',6,'p_type_specifier','Parser_MiniPascal.py',139),
  ('type_specifier -> subrange','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',140),
  ('type_specifier -> FILE OF type_specifier','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',141),
  ('type_specifier -> SET OF type_specifier','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',142),
  ('type_specifier -> RECORD field_list case_part END','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',143),
  ('type_specifier -> OBJECT field_list method_list END','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',144),
  ('type_specifier -> LPAREN id_list RPAREN','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',145),
  ('type_specifier -> BOOLEAN_LITERAL','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',146),
  ('type_specifier -> INTEGER','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',147),
  ('type_specifier -> BYTE','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',148),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',149),
  ('type_specifier -> STRING','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',150),
  ('type_specifier -> STRING LBRACKET NUMBER RBRACKET','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',151),
  ('type_specifier -> ID','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',152),
  ('type_expression -> type_expression COMMA subrange','type_expression',3,'p_type_expression','Parser_MiniPascal.py',156),
  ('type_expression -> subrange','type_expression',1,'p_type_expression','Parser_MiniPascal.py',157),
  ('subrange -> NUMBER DOTDOT NUMBER','subrange',3,'p_subrange','Parser_MiniPascal.py',166),
  ('subrange -> NUMBER DOTDOT ID','subrange',3,'p_subrange','Parser_MiniPascal.py',167),
  ('field_list -> field_list field','field_list',2,'p_field_list','Parser_MiniPascal.py',173),
  ('field_list -> field','field_list',1,'p_field_list','Parser_MiniPascal.py',174),
  ('field_list -> empty','field_list',1,'p_field_list','Parser_MiniPascal.py',175),
  ('field -> id_list COLON type_specifier','field',3,'p_field','Parser_MiniPascal.py',187),
  ('field -> id_list COLON type_specifier SEMICOLON','field',4,'p_field','Parser_MiniPascal.py',188),
  ('field -> VAR id_list COLON type_specifier','field',4,'p_field','Parser_MiniPascal.py',189),
  ('field -> VAR id_list COLON type_specifier SEMICOLON','field',5,'p_field','Parser_MiniPascal.py',190),
  ('field -> id_list LPAREN STRING_LITERAL RPAREN','field',4,'p_field','Parser_MiniPascal.py',191),
  ('field -> statement','field',1,'p_field','Parser_MiniPascal.py',192),
  ('field -> if_statement','field',1,'p_field','Parser_MiniPascal.py',193),
  ('field -> case_statement','field',1,'p_field','Parser_MiniPascal.py',194),
  ('field -> assignment_statement','field',1,'p_field','Parser_MiniPascal.py',195),
  ('case_part -> CASE ID COLON type_specifier OF case_list SEMICOLON','case_part',7,'p_case_part','Parser_MiniPascal.py',208),
  ('case_part -> empty','case_part',1,'p_case_part','Parser_MiniPascal.py',209),
  ('case_list -> case_list SEMICOLON case_element','case_list',3,'p_case_list','Parser_MiniPascal.py',218),
  ('case_list -> case_element','case_list',1,'p_case_list','Parser_MiniPascal.py',219),
  ('case_list_opt_semicolon -> case_list','case_list_opt_semicolon',1,'p_case_list_opt_semicolon','Parser_MiniPascal.py',228),
  ('case_list_opt_semicolon -> case_list SEMICOLON','case_list_opt_semicolon',2,'p_case_list_opt_semicolon','Parser_MiniPascal.py',229),
  ('case_element -> NUMBER COLON LPAREN field_list RPAREN','case_element',5,'p_case_element','Parser_MiniPascal.py',236),
  ('case_element -> NUMBER COLON field_list','case_element',3,'p_case_element','Parser_MiniPascal.py',237),
  ('method_list -> method_list method','method_list',2,'p_method_list','Parser_MiniPascal.py',249),
  ('method_list -> method','method_list',1,'p_method_list','Parser_MiniPascal.py',250),
  ('method_list -> empty','method_list',1,'p_method_list','Parser_MiniPascal.py',251),
  ('method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON','method',6,'p_method','Parser_MiniPascal.py',261),
  ('method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON','method',6,'p_method','Parser_MiniPascal.py',262),
  ('method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON','method',8,'p_method','Parser_MiniPascal.py',263),
  ('method -> DESTRUCTOR ID SEMICOLON','method',3,'p_method','Parser_MiniPascal.py',264),
  ('case_statement -> CASE expression OF case_list_opt_semicolon END SEMICOLON','case_statement',6,'p_case_statement','Parser_MiniPascal.py',277),
  ('case_statement -> CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON','case_statement',8,'p_case_statement','Parser_MiniPascal.py',278),
  ('case_statement -> CASE expression OF case_list_opt_semicolon END','case_statement',5,'p_case_statement','Parser_MiniPascal.py',279),
  ('type_specifier -> LONGINT','type_specifier',1,'p_type_specifier_longint','Parser_MiniPascal.py',291),
  ('procedure_declarations -> procedure_declaration','procedure_declarations',1,'p_procedure_declarations','Parser_MiniPascal.py',296),
  ('procedure_declarations -> procedure_declarations procedure_declaration','procedure_declarations',2,'p_procedure_declarations','Parser_MiniPascal.py',297),
  ('procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON','procedure_declaration',8,'p_procedure_declaration','Parser_MiniPascal.py',307),
  ('procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON','procedure_declaration',7,'p_procedure_declaration','Parser_MiniPascal.py',308),
  ('function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON','function_declaration',10,'p_function_declaration','Parser_MiniPascal.py',313),
  ('function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON','function_declaration',10,'p_function_declaration','Parser_MiniPascal.py',314),
  ('function_declaration -> FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON block SEMICOLON','function_declaration',9,'p_function_declaration','Parser_MiniPascal.py',315),
  ('function_declaration -> FUNCTION ID LPAREN RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON','function_declaration',9,'p_function_declaration','Parser_MiniPascal.py',316),
  ('function_call -> ID LPAREN expression_list RPAREN','function_call',4,'p_function_call','Parser_MiniPascal.py',328),
  ('factor -> function_call','factor',1,'p_factor_function_call','Parser_MiniPascal.py',333),
  ('parameter_list -> parameter_list SEMICOLON parameter','parameter_list',3,'p_parameter_list','Parser_MiniPascal.py',338),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','Parser_MiniPascal.py',339),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','Parser_MiniPascal.py',340),
  ('parameter -> ID COLON type_specifier','parameter',3,'p_parameter','Parser_MiniPascal.py',349),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','Parser_MiniPascal.py',356),
  ('compound_statement -> BEGIN local_var_declarations statement_list END','compound_statement',4,'p_compound_statement','Parser_MiniPascal.py',357),
  ('local_var_declarations -> var_declaration','local_var_declarations',1,'p_local_var_declarations','Parser_MiniPascal.py',363),
  ('local_var_declarations -> empty','local_var_declarations',1,'p_local_var_declarations','Parser_MiniPascal.py',364),
  ('statement_list -> statement_list statement SEMICOLON','statement_list',3,'p_statement_list_multi','Parser_MiniPascal.py',369),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_multi','Parser_MiniPascal.py',370),
  ('statement_list -> statement','statement_list',1,'p_statement_list_single','Parser_MiniPascal.py',378),
  ('statement -> if_statement','statement',1,'p_statement','Parser_MiniPascal.py',384),
  ('statement -> assignment_statement','statement',1,'p_statement','Parser_MiniPascal.py',385),
  ('statement -> while_statement','statement',1,'p_statement','Parser_MiniPascal.py',386),
  ('statement -> procedure_call','statement',1,'p_statement','Parser_MiniPascal.py',387),
  ('statement -> compound_statement','statement',1,'p_statement','Parser_MiniPascal.py',388),
  ('statement -> for_statement','statement',1,'p_statement','Parser_MiniPascal.py',389),
  ('statement -> case_statement','statement',1,'p_statement','Parser_MiniPascal.py',390),
  ('statement -> with_statement','statement',1,'p_statement','Parser_MiniPascal.py',391),
  ('statement -> repeat_statement','statement',1,'p_statement','Parser_MiniPascal.py',392),
  ('statement -> empty','statement',1,'p_statement','Parser_MiniPascal.py',393),
  ('with_statement -> WITH variable DO statement','with_statement',4,'p_with_statement','Parser_MiniPascal.py',397),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_if_statement','Parser_MiniPascal.py',402),
  ('if_statement -> IF expression THEN statement','if_statement',4,'p_if_statement','Parser_MiniPascal.py',403),
  ('if_statement -> IF expression IN statement THEN statement ELSE statement','if_statement',8,'p_if_statement','Parser_MiniPascal.py',404),
  ('if_statement -> IF expression IN statement THEN statement','if_statement',6,'p_if_statement','Parser_MiniPascal.py',405),
  ('for_statement -> FOR ID COLON_EQUAL expression TO expression DO block','for_statement',8,'p_for_statement','Parser_MiniPascal.py',420),
  ('for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block','for_statement',8,'p_for_statement','Parser_MiniPascal.py',421),
  ('assignment_statement -> variable COLON_EQUAL expression','assignment_statement',3,'p_assignment_statement','Parser_MiniPascal.py',428),
  ('assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON','assignment_statement',4,'p_assignment_statement','Parser_MiniPascal.py',429),
  ('assignment_statement -> variable PLUS COLON_EQUAL expression','assignment_statement',4,'p_assignment_statement','Parser_MiniPascal.py',430),
  ('assignment_statement -> variable MINUS COLON_EQUAL expression','assignment_statement',4,'p_assignment_statement','Parser_MiniPascal.py',431),
  ('assignment_statement -> variable TIMES COLON_EQUAL expression','assignment_statement',4,'p_assignment_statement','Parser_MiniPascal.py',432),
  ('assignment_statement -> variable DIVIDE COLON_EQUAL expression','assignment_statement',4,'p_assignment_statement','Parser_MiniPascal.py',433),
  ('assignment_statement -> ID COLON_EQUAL expression','assignment_statement',3,'p_assignment_statement','Parser_MiniPascal.py',434),
  ('variable -> ID','variable',1,'p_variable_simple','Parser_MiniPascal.py',451),
  ('variable -> variable LBRACKET expression RBRACKET','variable',4,'p_variable_simple','Parser_MiniPascal.py',452),
  ('variable -> variable DOT ID','variable',3,'p_variable_simple','Parser_MiniPascal.py',453),
  ('variable -> ID LBRACKET index_list RBRACKET','variable',4,'p_variable_index','Parser_MiniPascal.py',470),
  ('index_list -> expression','index_list',1,'p_index_list','Parser_MiniPascal.py',474),
  ('index_list -> index_list COMMA expression','index_list',3,'p_index_list','Parser_MiniPascal.py',475),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','Parser_MiniPascal.py',483),
  ('procedure_call -> ID LPAREN expression_list RPAREN','procedure_call',4,'p_procedure_call','Parser_MiniPascal.py',488),
  ('procedure_call -> ID','procedure_call',1,'p_procedure_call','Parser_MiniPascal.py',489),
  ('expression_list -> expression expression_list_tail','expression_list',2,'p_expression_list_multi','Parser_MiniPascal.py',497),
  ('expression_list_tail -> COMMA expression expression_list_tail','expression_list_tail',3,'p_expression_list_tail','Parser_MiniPascal.py',505),
  ('expression_list_tail -> empty','expression_list_tail',1,'p_expression_list_tail','Parser_MiniPascal.py',506),
  ('expression_list -> empty','expression_list',1,'p_expression_list_empty','Parser_MiniPascal.py',518),
  ('expression -> simple_expression relop simple_expression','expression',3,'p_expression','Parser_MiniPascal.py',523),
  ('expression -> simple_expression','expression',1,'p_expression','Parser_MiniPascal.py',524),
  ('simple_expression -> term simple_expression_tail','simple_expression',2,'p_simple_expression','Parser_MiniPascal.py',532),
  ('simple_expression_tail -> addop term','simple_expression_tail',2,'p_simple_expression_tail','Parser_MiniPascal.py',540),
  ('simple_expression_tail -> empty','simple_expression_tail',1,'p_simple_expression_tail','Parser_MiniPascal.py',541),
  ('addop -> PLUS','addop',1,'p_addop','Parser_MiniPascal.py',550),
  ('addop -> MINUS','addop',1,'p_addop','Parser_MiniPascal.py',551),
  ('term -> factor term_tail','term',2,'p_term','Parser_MiniPascal.py',556),
  ('term_tail -> mulop factor','term_tail',2,'p_term_tail','Parser_MiniPascal.py',564),
  ('term_tail -> empty','term_tail',1,'p_term_tail','Parser_MiniPascal.py',565),
  ('mulop -> TIMES','mulop',1,'p_mulop','Parser_MiniPascal.py',574),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','Parser_MiniPascal.py',575),
  ('mulop -> DIV','mulop',1,'p_mulop','Parser_MiniPascal.py',576),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',580),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',581),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',582),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',583),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',584),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','Parser_MiniPascal.py',589),
  ('factor -> variable','factor',1,'p_factor_variable','Parser_MiniPascal.py',593),
  ('factor -> NUMBER','factor',1,'p_factor_number','Parser_MiniPascal.py',597),
  ('factor -> STRING_LITERAL','factor',1,'p_factor_string','Parser_MiniPascal.py',601),
  ('relop -> LESS','relop',1,'p_relop','Parser_MiniPascal.py',608),
  ('relop -> LESS_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',609),
  ('relop -> GREAT','relop',1,'p_relop','Parser_MiniPascal.py',610),
  ('relop -> GREAT_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',611),
  ('relop -> EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',612),
  ('relop -> DIFFERENT','relop',1,'p_relop','Parser_MiniPascal.py',613),
  ('empty -> <empty>','empty',0,'p_empty','Parser_MiniPascal.py',618),
  ('statement -> READLN','statement',1,'p_statement_readln','Parser_MiniPascal.py',622),
  ('statement -> READLN LPAREN variable RPAREN','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',626),
  ('statement -> READLN LBRACKET variable RBRACKET','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',627),
  ('statement -> READLN LPAREN variable_list RPAREN','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',628),
  ('variable_list -> variable','variable_list',1,'p_variable_list','Parser_MiniPascal.py',632),
  ('variable_list -> variable_list COMMA variable','variable_list',3,'p_variable_list','Parser_MiniPascal.py',633),
  ('statement -> WRITE LPAREN expression_list RPAREN','statement',4,'p_statement_write','Parser_MiniPascal.py',640),
  ('statement -> WRITELN LPAREN write_arguments RPAREN','statement',4,'p_statement_writeln','Parser_MiniPascal.py',644),
  ('statement -> WRITELN LPAREN expression RPAREN','statement',4,'p_statement_writeln','Parser_MiniPascal.py',645),
  ('write_arguments -> write_argument','write_arguments',1,'p_write_arguments','Parser_MiniPascal.py',650),
  ('write_arguments -> write_arguments COMMA write_argument','write_arguments',3,'p_write_arguments','Parser_MiniPascal.py',651),
  ('write_argument -> expression','write_argument',1,'p_write_argument','Parser_MiniPascal.py',658),
  ('write_argument -> expression COLON expression','write_argument',3,'p_write_argument','Parser_MiniPascal.py',659),
  ('write_argument -> expression COLON expression COLON expression','write_argument',5,'p_write_argument','Parser_MiniPascal.py',660),
  ('statement -> USES ID SEMICOLON','statement',3,'p_statement_uses','Parser_MiniPascal.py',670),
  ('constant_declaration -> CONST constant_list','constant_declaration',2,'p_constant_declaration','Parser_MiniPascal.py',675),
  ('repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON','repeat_statement',5,'p_repeat_statement','Parser_MiniPascal.py',679),
  ('constant_list -> constant','constant_list',1,'p_constant_list','Parser_MiniPascal.py',683),
  ('constant_list -> constant_list constant','constant_list',2,'p_constant_list','Parser_MiniPascal.py',684),
  ('constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',692),
  ('constant -> ID EQUAL NUMBER SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',693),
  ('constant -> ID EQUAL STRING_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',694),
  ('constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',695),
  ('expression -> expression AND expression','expression',3,'p_expression_logical','Parser_MiniPascal.py',711),
  ('expression -> expression OR expression','expression',3,'p_expression_logical','Parser_MiniPascal.py',712),
  ('expression -> NOT expression','expression',2,'p_expression_logical','Parser_MiniPascal.py',713),
]
