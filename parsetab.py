
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocELSEAND ARRAY BEGIN BOOLEAN_LITERAL BYTE CASE CHAR CHARACTER_LITERAL COLON COLON_EQUAL COMMA CONST DIFFERENT DIV DIVIDE DO DOT DOTDOT DOWNTO ELSE END EQUAL FALSE FILE FOR FUNCTION GOTO GREAT GREAT_EQUAL ID IF IN INTEGER LABEL LBLOCK LBRACKET LESS LESS_EQUAL LONGINT LPAREN MINUS MOD NIL NOT NUMBER OF OR PACKED PLUS PROCEDURE PROGRAM RBLOCK RBRACKET READLINE READLN RECORD REPEAT RPAREN SEMICOLON SET STRING STRING_LITERAL THEN TIMES TO TRUE TYPE UNTIL USES VAR WHILE WITH WRITE WRITELNprogram : PROGRAM ID SEMICOLON declaration_sections block DOTdeclaration_sections : uses_opt constant_declaration type_declaration var_declaration\n                            | uses_opt constant_declaration type_declaration\n                            | uses_opt constant_declaration var_declaration\n                            | uses_opt constant_declaration\n                            | uses_opt type_declaration var_declaration\n                            | uses_opt type_declaration\n                            | uses_opt var_declaration\n                            | uses_opt\n                            | constant_declaration type_declaration var_declaration\n                            | constant_declaration type_declaration\n                            | constant_declaration var_declaration\n                            | constant_declaration\n                            | type_declaration var_declaration\n                            | type_declaration\n                            | var_declarationuses_opt : USES ID SEMICOLON\n                | emptyvar_declaration : VAR declaration_listdeclaration_list : declaration\n                        | declaration_list declarationdeclaration : id_list COLON type_specifier SEMICOLONblock : declarations compound_statementdeclarations : VAR declaration_list procedure_declarationsdeclarations : VAR declaration_listdeclarations : procedure_declarationsdeclarations : emptyid_list : IDid_list : id_list COMMA IDtype_declaration : TYPE type_listtype_list : type_definition\n                 | type_list type_definitiontype_definition : ID EQUAL type_specifier SEMICOLONtype_specifier : ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier\n                      | INTEGER\n                      | BYTE\n                      | CHAR\n                      | IDtype_specifier : LONGINTprocedure_declarations : procedure_declaration\n                              | procedure_declarations procedure_declarationprocedure_declaration : PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON\n                             | PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOTfunction_declaration : FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLONdeclarations : function_declarationfunction_call : ID LPAREN expression_list RPARENfactor : function_callparameter_list : parameter\n                      | parameter_list SEMICOLON parameterparameter : id_list COLON type_specifier\n                 | VAR id_list COLON type_specifiercompound_statement : BEGIN statement_list ENDstatement_list : statement statement_list_tailstatement_list_tail : SEMICOLON statement statement_list_tail\n                           | emptystatement : if_statement\n                 | assignment_statement\n                 | while_statement\n                 | procedure_call\n                 | compound_statement\n                 | for_statement\n                 | emptyif_statement : IF expression THEN statement ELSE statement\n                 | IF expression THEN statementfor_statement : FOR ID COLON_EQUAL expression TO expression DO statement\n                     | FOR ID COLON_EQUAL expression DOWNTO expression DO statementassignment_statement : variable COLON_EQUAL expressionvariable : IDvariable : ID LBRACKET expression RBRACKETwhile_statement : WHILE expression DO statementprocedure_call : ID LPAREN expression_list RPARENexpression_list : expression expression_list_tailexpression_list_tail : COMMA expression expression_list_tail\n                            | emptyexpression_list : emptyexpression : simple_expression relop simple_expression\n                  | simple_expressionsimple_expression : term simple_expression_tailsimple_expression_tail : addop term\n                              | emptyaddop : PLUS\n             | MINUSterm : factor term_tailterm_tail : mulop factor\n                 | emptymulop : TIMES\n             | DIVIDE\n             | DIVexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expressionfactor : LPAREN expression RPARENfactor : variablefactor : NUMBERfactor : STRING_LITERALrelop : LESS\n             | LESS_EQUAL\n             | GREAT\n             | GREAT_EQUAL\n             | EQUAL\n             | DIFFERENTempty :statement : READLNstatement : READLN LPAREN ID RPAREN\n                 | READLN LBRACKET ID RBRACKETstatement : WRITELN LPAREN expression_list RPARENstatement : WRITE LPAREN expression_list RPARENstatement : USES ID SEMICOLONconstant_declaration : CONST constant_listconstant_list : constant\n                     | constant_list constantconstant : ID EQUAL CHARACTER_LITERAL SEMICOLON\n                | ID EQUAL NUMBER SEMICOLON\n                | ID EQUAL STRING_LITERAL SEMICOLONexpression : expression AND expression\n                  | expression OR expression\n                  | NOT expression'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,41,],[0,-1,]),'ID':([2,10,12,13,14,17,22,23,31,32,34,35,37,38,43,44,53,55,56,57,58,59,73,74,76,77,79,80,96,98,99,100,101,102,103,107,111,116,122,124,125,126,127,128,129,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,157,159,160,162,164,165,166,168,170,171,173,174,183,203,206,208,210,212,213,226,227,229,],[3,30,33,36,40,40,46,47,33,-112,36,-31,40,-20,70,40,-113,-32,85,-21,85,93,104,115,115,118,40,40,70,131,132,115,115,115,115,115,115,115,40,-114,-115,-116,-33,115,-22,70,115,115,115,115,115,115,115,115,-98,-99,-100,-101,-102,-103,115,-81,-82,115,-86,-87,-88,115,70,115,40,85,115,85,85,115,70,115,115,70,70,85,]),'SEMICOLON':([3,30,42,43,61,62,63,64,65,66,67,68,69,82,83,84,85,86,88,89,90,91,92,94,96,104,106,108,109,110,112,113,114,115,119,120,123,130,139,140,155,156,158,161,163,169,170,176,179,180,181,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,201,204,205,210,211,214,215,216,219,226,227,228,230,231,233,],[4,52,-23,-104,96,-56,-57,-58,-59,-60,-61,-62,-105,124,125,126,-38,127,-35,-36,-37,-39,129,-52,-104,139,-77,-104,-104,-47,-95,-96,-97,-68,173,-48,173,96,-110,-104,-119,-78,-80,-83,-85,-67,-104,207,-106,-107,-71,-69,-108,-109,-64,-89,-90,-91,-92,-93,-117,-118,-76,-79,-84,-94,-70,-49,-50,-104,-46,222,-51,223,-63,-104,-104,232,-65,-66,-34,]),'USES':([4,43,96,140,170,210,226,227,],[10,73,73,73,73,73,73,73,]),'CONST':([4,6,11,52,],[12,12,-18,-17,]),'TYPE':([4,6,7,11,24,31,32,52,53,124,125,126,],[13,13,13,-18,13,-111,-112,-17,-113,-114,-115,-116,]),'VAR':([4,5,6,7,8,9,11,24,25,26,27,28,29,31,32,34,35,37,38,48,49,50,51,52,53,55,57,79,80,81,124,125,126,127,129,173,207,222,],[14,17,14,14,14,-16,-18,14,14,-8,14,-12,-14,-111,-112,-30,-31,-19,-20,14,-4,-6,-10,-17,-113,-32,-21,122,122,-2,-114,-115,-116,-33,-22,122,17,17,]),'FUNCTION':([4,5,6,7,8,9,11,24,25,26,27,28,29,31,32,34,35,37,38,48,49,50,51,52,53,55,57,81,124,125,126,127,129,207,222,],[-104,22,-9,-13,-15,-16,-18,-5,-7,-8,-11,-12,-14,-111,-112,-30,-31,-19,-20,-3,-4,-6,-10,-17,-113,-32,-21,-2,-114,-115,-116,-33,-22,22,22,]),'PROCEDURE':([4,5,6,7,8,9,11,18,21,24,25,26,27,28,29,31,32,34,35,37,38,44,45,48,49,50,51,52,53,55,57,78,81,124,125,126,127,129,207,222,223,224,],[-104,23,-9,-13,-15,-16,-18,23,-40,-5,-7,-8,-11,-12,-14,-111,-112,-30,-31,-19,-20,23,-41,-3,-4,-6,-10,-17,-113,-32,-21,23,-2,-114,-115,-116,-33,-22,23,23,-42,-43,]),'BEGIN':([4,5,6,7,8,9,11,16,18,19,20,21,24,25,26,27,28,29,31,32,34,35,37,38,43,44,45,48,49,50,51,52,53,55,57,78,81,96,124,125,126,127,129,140,170,207,210,222,223,224,226,227,232,],[-104,-104,-9,-13,-15,-16,-18,43,-26,-27,-45,-40,-5,-7,-8,-11,-12,-14,-111,-112,-30,-31,-19,-20,43,-25,-41,-3,-4,-6,-10,-17,-113,-32,-21,-24,-2,43,-114,-115,-116,-33,-22,43,43,-104,43,-104,-42,-43,43,43,-44,]),'DOT':([15,42,94,216,],[41,-23,-52,224,]),'EQUAL':([33,36,106,108,109,110,112,113,114,115,156,158,161,163,185,197,198,199,211,],[54,56,153,-104,-104,-47,-95,-96,-97,-68,-78,-80,-83,-85,-69,-79,-84,-94,-46,]),'COLON':([39,40,93,121,172,175,],[58,-28,-29,174,203,206,]),'COMMA':([39,40,93,106,108,109,110,112,113,114,115,121,134,155,156,158,161,163,175,185,189,190,191,192,193,194,195,196,197,198,199,209,211,],[59,-28,-29,-77,-104,-104,-47,-95,-96,-97,-68,59,183,-119,-78,-80,-83,-85,59,-69,-89,-90,-91,-92,-93,-117,-118,-76,-79,-84,-94,183,-46,]),'READLN':([43,96,140,170,210,226,227,],[69,69,69,69,69,69,69,]),'WRITELN':([43,96,140,170,210,226,227,],[71,71,71,71,71,71,71,]),'WRITE':([43,96,140,170,210,226,227,],[72,72,72,72,72,72,72,]),'IF':([43,96,140,170,210,226,227,],[74,74,74,74,74,74,74,]),'WHILE':([43,96,140,170,210,226,227,],[76,76,76,76,76,76,76,]),'FOR':([43,96,140,170,210,226,227,],[77,77,77,77,77,77,77,]),'END':([43,60,61,62,63,64,65,66,67,68,69,94,95,96,97,106,108,109,110,112,113,114,115,130,139,140,155,156,158,161,163,169,170,178,179,180,181,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,201,210,211,219,226,227,230,231,],[-104,94,-104,-56,-57,-58,-59,-60,-61,-62,-105,-52,-53,-104,-55,-77,-104,-104,-47,-95,-96,-97,-68,-104,-110,-104,-119,-78,-80,-83,-85,-67,-104,-54,-106,-107,-71,-69,-108,-109,-64,-89,-90,-91,-92,-93,-117,-118,-76,-79,-84,-94,-70,-104,-46,-63,-104,-104,-65,-66,]),'LPAREN':([46,47,69,70,71,72,74,76,100,101,102,103,107,111,115,116,128,141,142,143,144,145,146,147,148,149,150,151,152,153,154,157,159,160,162,164,165,166,168,171,183,208,212,213,],[79,80,98,100,102,103,111,111,111,111,111,111,111,111,168,111,111,111,111,111,111,111,111,111,111,-98,-99,-100,-101,-102,-103,111,-81,-82,111,-86,-87,-88,111,111,111,111,111,111,]),'CHARACTER_LITERAL':([54,],[82,]),'NUMBER':([54,74,76,100,101,102,103,107,111,116,128,141,142,143,144,145,146,147,148,149,150,151,152,153,154,157,159,160,162,164,165,166,168,171,183,208,212,213,],[83,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,-98,-99,-100,-101,-102,-103,113,-81,-82,113,-86,-87,-88,113,113,113,113,113,113,]),'STRING_LITERAL':([54,74,76,100,101,102,103,107,111,116,128,141,142,143,144,145,146,147,148,149,150,151,152,153,154,157,159,160,162,164,165,166,168,171,183,208,212,213,],[84,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,-98,-99,-100,-101,-102,-103,114,-81,-82,114,-86,-87,-88,114,114,114,114,114,114,]),'ARRAY':([56,58,174,203,206,229,],[87,87,87,87,87,87,]),'INTEGER':([56,58,174,203,206,229,],[88,88,88,88,88,88,]),'BYTE':([56,58,174,203,206,229,],[89,89,89,89,89,89,]),'CHAR':([56,58,174,203,206,229,],[90,90,90,90,90,90,]),'LONGINT':([56,58,174,203,206,229,],[91,91,91,91,91,91,]),'ELSE':([62,63,64,65,66,67,68,69,94,106,108,109,110,112,113,114,115,139,140,155,156,158,161,163,169,170,179,180,181,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,201,210,211,219,226,227,230,231,],[-56,-57,-58,-59,-60,-61,-62,-105,-52,-77,-104,-104,-47,-95,-96,-97,-68,-110,-104,-119,-78,-80,-83,-85,-67,-104,-106,-107,-71,-69,-108,-109,210,-89,-90,-91,-92,-93,-117,-118,-76,-79,-84,-94,-70,-104,-46,-63,-104,-104,-65,-66,]),'LBRACKET':([69,70,87,115,],[99,101,128,101,]),'COLON_EQUAL':([70,75,118,185,],[-68,116,171,-69,]),'NOT':([74,76,100,101,102,103,107,111,116,128,141,142,143,144,145,146,147,168,171,183,208,212,213,],[107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,]),'RPAREN':([85,88,89,90,91,100,102,103,106,108,109,110,112,113,114,115,119,120,123,131,133,134,135,137,138,155,156,158,161,163,167,168,182,184,185,189,190,191,192,193,194,195,196,197,198,199,200,204,205,209,211,215,218,233,],[-38,-35,-36,-37,-39,-104,-104,-104,-77,-104,-104,-47,-95,-96,-97,-68,172,-48,176,179,181,-104,-75,186,187,-119,-78,-80,-83,-85,199,-104,-72,-74,-69,-89,-90,-91,-92,-93,-117,-118,-76,-79,-84,-94,211,-49,-50,-104,-46,-51,-73,-34,]),'THEN':([105,106,108,109,110,112,113,114,115,155,156,158,161,163,185,189,190,191,192,193,194,195,196,197,198,199,211,],[140,-77,-104,-104,-47,-95,-96,-97,-68,-119,-78,-80,-83,-85,-69,-89,-90,-91,-92,-93,-117,-118,-76,-79,-84,-94,-46,]),'PLUS':([105,106,108,109,110,112,113,114,115,117,134,136,155,156,158,161,163,167,169,177,185,189,190,191,192,193,194,195,196,197,198,199,202,209,211,217,220,221,],[141,-77,159,-104,-47,-95,-96,-97,-68,141,141,141,141,-78,-80,-83,-85,141,141,141,-69,141,141,141,141,141,141,141,-76,-79,-84,-94,141,141,-46,141,141,141,]),'MINUS':([105,106,108,109,110,112,113,114,115,117,134,136,155,156,158,161,163,167,169,177,185,189,190,191,192,193,194,195,196,197,198,199,202,209,211,217,220,221,],[142,-77,160,-104,-47,-95,-96,-97,-68,142,142,142,142,-78,-80,-83,-85,142,142,142,-69,142,142,142,142,142,142,142,-76,-79,-84,-94,142,142,-46,142,142,142,]),'TIMES':([105,106,108,109,110,112,113,114,115,117,134,136,155,156,158,161,163,167,169,177,185,189,190,191,192,193,194,195,196,197,198,199,202,209,211,217,220,221,],[143,-77,-104,164,-47,-95,-96,-97,-68,143,143,143,143,-78,-80,-83,-85,143,143,143,-69,143,143,143,143,143,143,143,-76,-79,-84,-94,143,143,-46,143,143,143,]),'DIVIDE':([105,106,108,109,110,112,113,114,115,117,134,136,155,156,158,161,163,167,169,177,185,189,190,191,192,193,194,195,196,197,198,199,202,209,211,217,220,221,],[144,-77,-104,165,-47,-95,-96,-97,-68,144,144,144,144,-78,-80,-83,-85,144,144,144,-69,144,144,144,144,144,144,144,-76,-79,-84,-94,144,144,-46,144,144,144,]),'MOD':([105,106,108,109,110,112,113,114,115,117,134,136,155,156,158,161,163,167,169,177,185,189,190,191,192,193,194,195,196,197,198,199,202,209,211,217,220,221,],[145,-77,-104,-104,-47,-95,-96,-97,-68,145,145,145,145,-78,-80,-83,-85,145,145,145,-69,145,145,145,145,145,145,145,-76,-79,-84,-94,145,145,-46,145,145,145,]),'AND':([105,106,108,109,110,112,113,114,115,117,134,136,155,156,158,161,163,167,169,177,185,189,190,191,192,193,194,195,196,197,198,199,202,209,211,217,220,221,],[146,-77,-104,-104,-47,-95,-96,-97,-68,146,146,146,146,-78,-80,-83,-85,146,146,146,-69,146,146,146,146,146,146,146,-76,-79,-84,-94,146,146,-46,146,146,146,]),'OR':([105,106,108,109,110,112,113,114,115,117,134,136,155,156,158,161,163,167,169,177,185,189,190,191,192,193,194,195,196,197,198,199,202,209,211,217,220,221,],[147,-77,-104,-104,-47,-95,-96,-97,-68,147,147,147,147,-78,-80,-83,-85,147,147,147,-69,147,147,147,147,147,147,147,-76,-79,-84,-94,147,147,-46,147,147,147,]),'DO':([106,108,109,110,112,113,114,115,117,155,156,158,161,163,185,189,190,191,192,193,194,195,196,197,198,199,211,220,221,],[-77,-104,-104,-47,-95,-96,-97,-68,170,-119,-78,-80,-83,-85,-69,-89,-90,-91,-92,-93,-117,-118,-76,-79,-84,-94,-46,226,227,]),'RBRACKET':([106,108,109,110,112,113,114,115,132,136,155,156,158,161,163,185,189,190,191,192,193,194,195,196,197,198,199,211,217,],[-77,-104,-104,-47,-95,-96,-97,-68,180,185,-119,-78,-80,-83,-85,-69,-89,-90,-91,-92,-93,-117,-118,-76,-79,-84,-94,-46,225,]),'DOTDOT':([106,108,109,110,112,113,114,115,155,156,158,161,163,177,185,189,190,191,192,193,194,195,196,197,198,199,211,],[-77,-104,-104,-47,-95,-96,-97,-68,-119,-78,-80,-83,-85,208,-69,-89,-90,-91,-92,-93,-117,-118,-76,-79,-84,-94,-46,]),'TO':([106,108,109,110,112,113,114,115,155,156,158,161,163,185,189,190,191,192,193,194,195,196,197,198,199,202,211,],[-77,-104,-104,-47,-95,-96,-97,-68,-119,-78,-80,-83,-85,-69,-89,-90,-91,-92,-93,-117,-118,-76,-79,-84,-94,212,-46,]),'DOWNTO':([106,108,109,110,112,113,114,115,155,156,158,161,163,185,189,190,191,192,193,194,195,196,197,198,199,202,211,],[-77,-104,-104,-47,-95,-96,-97,-68,-119,-78,-80,-83,-85,-69,-89,-90,-91,-92,-93,-117,-118,-76,-79,-84,-94,213,-46,]),'LESS':([106,108,109,110,112,113,114,115,156,158,161,163,185,197,198,199,211,],[149,-104,-104,-47,-95,-96,-97,-68,-78,-80,-83,-85,-69,-79,-84,-94,-46,]),'LESS_EQUAL':([106,108,109,110,112,113,114,115,156,158,161,163,185,197,198,199,211,],[150,-104,-104,-47,-95,-96,-97,-68,-78,-80,-83,-85,-69,-79,-84,-94,-46,]),'GREAT':([106,108,109,110,112,113,114,115,156,158,161,163,185,197,198,199,211,],[151,-104,-104,-47,-95,-96,-97,-68,-78,-80,-83,-85,-69,-79,-84,-94,-46,]),'GREAT_EQUAL':([106,108,109,110,112,113,114,115,156,158,161,163,185,197,198,199,211,],[152,-104,-104,-47,-95,-96,-97,-68,-78,-80,-83,-85,-69,-79,-84,-94,-46,]),'DIFFERENT':([106,108,109,110,112,113,114,115,156,158,161,163,185,197,198,199,211,],[154,-104,-104,-47,-95,-96,-97,-68,-78,-80,-83,-85,-69,-79,-84,-94,-46,]),'DIV':([109,110,112,113,114,115,185,199,211,],[166,-47,-95,-96,-97,-68,-69,-94,-46,]),'OF':([225,],[229,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_sections':([4,],[5,]),'uses_opt':([4,],[6,]),'constant_declaration':([4,6,],[7,24,]),'type_declaration':([4,6,7,24,],[8,25,27,48,]),'var_declaration':([4,6,7,8,24,25,27,48,],[9,26,28,29,49,50,51,81,]),'empty':([4,5,43,61,96,100,102,103,108,109,130,134,140,168,170,207,209,210,222,226,227,],[11,19,68,97,68,135,135,135,158,163,97,184,68,135,68,19,184,68,19,68,68,]),'block':([5,207,222,],[15,216,228,]),'declarations':([5,207,222,],[16,16,16,]),'procedure_declarations':([5,44,207,222,],[18,78,18,18,]),'function_declaration':([5,207,222,],[20,20,20,]),'procedure_declaration':([5,18,44,78,207,222,],[21,45,21,45,21,21,]),'constant_list':([12,],[31,]),'constant':([12,31,],[32,53,]),'type_list':([13,],[34,]),'type_definition':([13,34,],[35,55,]),'declaration_list':([14,17,],[37,44,]),'declaration':([14,17,37,44,],[38,38,57,57,]),'id_list':([14,17,37,44,79,80,122,173,],[39,39,39,39,121,121,175,121,]),'compound_statement':([16,43,96,140,170,210,226,227,],[42,66,66,66,66,66,66,66,]),'statement_list':([43,],[60,]),'statement':([43,96,140,170,210,226,227,],[61,130,188,201,219,230,231,]),'if_statement':([43,96,140,170,210,226,227,],[62,62,62,62,62,62,62,]),'assignment_statement':([43,96,140,170,210,226,227,],[63,63,63,63,63,63,63,]),'while_statement':([43,96,140,170,210,226,227,],[64,64,64,64,64,64,64,]),'procedure_call':([43,96,140,170,210,226,227,],[65,65,65,65,65,65,65,]),'for_statement':([43,96,140,170,210,226,227,],[67,67,67,67,67,67,67,]),'variable':([43,74,76,96,100,101,102,103,107,111,116,128,140,141,142,143,144,145,146,147,148,157,162,168,170,171,183,208,210,212,213,226,227,],[75,112,112,75,112,112,112,112,112,112,112,112,75,112,112,112,112,112,112,112,112,112,112,112,75,112,112,112,75,112,112,75,75,]),'type_specifier':([56,58,174,203,206,229,],[86,92,205,214,215,233,]),'statement_list_tail':([61,130,],[95,178,]),'expression':([74,76,100,101,102,103,107,111,116,128,141,142,143,144,145,146,147,168,171,183,208,212,213,],[105,117,134,136,134,134,155,167,169,177,189,190,191,192,193,194,195,134,202,209,217,220,221,]),'simple_expression':([74,76,100,101,102,103,107,111,116,128,141,142,143,144,145,146,147,148,168,171,183,208,212,213,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,196,106,106,106,106,106,106,]),'term':([74,76,100,101,102,103,107,111,116,128,141,142,143,144,145,146,147,148,157,168,171,183,208,212,213,],[108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,197,108,108,108,108,108,108,]),'factor':([74,76,100,101,102,103,107,111,116,128,141,142,143,144,145,146,147,148,157,162,168,171,183,208,212,213,],[109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,198,109,109,109,109,109,109,]),'function_call':([74,76,100,101,102,103,107,111,116,128,141,142,143,144,145,146,147,148,157,162,168,171,183,208,212,213,],[110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,]),'parameter_list':([79,80,],[119,123,]),'parameter':([79,80,173,],[120,120,204,]),'expression_list':([100,102,103,168,],[133,137,138,200,]),'relop':([106,],[148,]),'simple_expression_tail':([108,],[156,]),'addop':([108,],[157,]),'term_tail':([109,],[161,]),'mulop':([109,],[162,]),'expression_list_tail':([134,209,],[182,218,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON declaration_sections block DOT','program',6,'p_program','Parser_MiniPascal.py',18),
  ('declaration_sections -> uses_opt constant_declaration type_declaration var_declaration','declaration_sections',4,'p_declaration_sections','Parser_MiniPascal.py',22),
  ('declaration_sections -> uses_opt constant_declaration type_declaration','declaration_sections',3,'p_declaration_sections','Parser_MiniPascal.py',23),
  ('declaration_sections -> uses_opt constant_declaration var_declaration','declaration_sections',3,'p_declaration_sections','Parser_MiniPascal.py',24),
  ('declaration_sections -> uses_opt constant_declaration','declaration_sections',2,'p_declaration_sections','Parser_MiniPascal.py',25),
  ('declaration_sections -> uses_opt type_declaration var_declaration','declaration_sections',3,'p_declaration_sections','Parser_MiniPascal.py',26),
  ('declaration_sections -> uses_opt type_declaration','declaration_sections',2,'p_declaration_sections','Parser_MiniPascal.py',27),
  ('declaration_sections -> uses_opt var_declaration','declaration_sections',2,'p_declaration_sections','Parser_MiniPascal.py',28),
  ('declaration_sections -> uses_opt','declaration_sections',1,'p_declaration_sections','Parser_MiniPascal.py',29),
  ('declaration_sections -> constant_declaration type_declaration var_declaration','declaration_sections',3,'p_declaration_sections','Parser_MiniPascal.py',30),
  ('declaration_sections -> constant_declaration type_declaration','declaration_sections',2,'p_declaration_sections','Parser_MiniPascal.py',31),
  ('declaration_sections -> constant_declaration var_declaration','declaration_sections',2,'p_declaration_sections','Parser_MiniPascal.py',32),
  ('declaration_sections -> constant_declaration','declaration_sections',1,'p_declaration_sections','Parser_MiniPascal.py',33),
  ('declaration_sections -> type_declaration var_declaration','declaration_sections',2,'p_declaration_sections','Parser_MiniPascal.py',34),
  ('declaration_sections -> type_declaration','declaration_sections',1,'p_declaration_sections','Parser_MiniPascal.py',35),
  ('declaration_sections -> var_declaration','declaration_sections',1,'p_declaration_sections','Parser_MiniPascal.py',36),
  ('uses_opt -> USES ID SEMICOLON','uses_opt',3,'p_uses_opt','Parser_MiniPascal.py',40),
  ('uses_opt -> empty','uses_opt',1,'p_uses_opt','Parser_MiniPascal.py',41),
  ('var_declaration -> VAR declaration_list','var_declaration',2,'p_var_declaration','Parser_MiniPascal.py',48),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser_MiniPascal.py',52),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','Parser_MiniPascal.py',53),
  ('declaration -> id_list COLON type_specifier SEMICOLON','declaration',4,'p_declaration','Parser_MiniPascal.py',60),
  ('block -> declarations compound_statement','block',2,'p_block','Parser_MiniPascal.py',65),
  ('declarations -> VAR declaration_list procedure_declarations','declarations',3,'p_declarations_var_proc','Parser_MiniPascal.py',70),
  ('declarations -> VAR declaration_list','declarations',2,'p_declarations_var_only','Parser_MiniPascal.py',74),
  ('declarations -> procedure_declarations','declarations',1,'p_declarations_proc_only','Parser_MiniPascal.py',78),
  ('declarations -> empty','declarations',1,'p_declarations_empty','Parser_MiniPascal.py',82),
  ('id_list -> ID','id_list',1,'p_id_list_single','Parser_MiniPascal.py',87),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list_multi','Parser_MiniPascal.py',91),
  ('type_declaration -> TYPE type_list','type_declaration',2,'p_type_declaration','Parser_MiniPascal.py',95),
  ('type_list -> type_definition','type_list',1,'p_type_list','Parser_MiniPascal.py',99),
  ('type_list -> type_list type_definition','type_list',2,'p_type_list','Parser_MiniPascal.py',100),
  ('type_definition -> ID EQUAL type_specifier SEMICOLON','type_definition',4,'p_type_definition','Parser_MiniPascal.py',107),
  ('type_specifier -> ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier','type_specifier',8,'p_type_specifier','Parser_MiniPascal.py',111),
  ('type_specifier -> INTEGER','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',112),
  ('type_specifier -> BYTE','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',113),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',114),
  ('type_specifier -> ID','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',115),
  ('type_specifier -> LONGINT','type_specifier',1,'p_type_specifier_longint','Parser_MiniPascal.py',131),
  ('procedure_declarations -> procedure_declaration','procedure_declarations',1,'p_procedure_declarations','Parser_MiniPascal.py',136),
  ('procedure_declarations -> procedure_declarations procedure_declaration','procedure_declarations',2,'p_procedure_declarations','Parser_MiniPascal.py',137),
  ('procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON','procedure_declaration',8,'p_procedure_declaration','Parser_MiniPascal.py',147),
  ('procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT','procedure_declaration',8,'p_procedure_declaration','Parser_MiniPascal.py',148),
  ('function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON','function_declaration',10,'p_function_declaration','Parser_MiniPascal.py',152),
  ('declarations -> function_declaration','declarations',1,'p_declarations_func_only','Parser_MiniPascal.py',156),
  ('function_call -> ID LPAREN expression_list RPAREN','function_call',4,'p_function_call','Parser_MiniPascal.py',160),
  ('factor -> function_call','factor',1,'p_factor_function_call','Parser_MiniPascal.py',164),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','Parser_MiniPascal.py',169),
  ('parameter_list -> parameter_list SEMICOLON parameter','parameter_list',3,'p_parameter_list','Parser_MiniPascal.py',170),
  ('parameter -> id_list COLON type_specifier','parameter',3,'p_parameter','Parser_MiniPascal.py',177),
  ('parameter -> VAR id_list COLON type_specifier','parameter',4,'p_parameter','Parser_MiniPascal.py',178),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','Parser_MiniPascal.py',186),
  ('statement_list -> statement statement_list_tail','statement_list',2,'p_statement_list_multi','Parser_MiniPascal.py',191),
  ('statement_list_tail -> SEMICOLON statement statement_list_tail','statement_list_tail',3,'p_statement_list_tail','Parser_MiniPascal.py',195),
  ('statement_list_tail -> empty','statement_list_tail',1,'p_statement_list_tail','Parser_MiniPascal.py',196),
  ('statement -> if_statement','statement',1,'p_statement','Parser_MiniPascal.py',204),
  ('statement -> assignment_statement','statement',1,'p_statement','Parser_MiniPascal.py',205),
  ('statement -> while_statement','statement',1,'p_statement','Parser_MiniPascal.py',206),
  ('statement -> procedure_call','statement',1,'p_statement','Parser_MiniPascal.py',207),
  ('statement -> compound_statement','statement',1,'p_statement','Parser_MiniPascal.py',208),
  ('statement -> for_statement','statement',1,'p_statement','Parser_MiniPascal.py',209),
  ('statement -> empty','statement',1,'p_statement','Parser_MiniPascal.py',210),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_if_statement','Parser_MiniPascal.py',214),
  ('if_statement -> IF expression THEN statement','if_statement',4,'p_if_statement','Parser_MiniPascal.py',215),
  ('for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement','for_statement',8,'p_for_statement','Parser_MiniPascal.py',222),
  ('for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement','for_statement',8,'p_for_statement','Parser_MiniPascal.py',223),
  ('assignment_statement -> variable COLON_EQUAL expression','assignment_statement',3,'p_assignment_statement','Parser_MiniPascal.py',231),
  ('variable -> ID','variable',1,'p_variable_simple','Parser_MiniPascal.py',236),
  ('variable -> ID LBRACKET expression RBRACKET','variable',4,'p_variable_index','Parser_MiniPascal.py',240),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','Parser_MiniPascal.py',245),
  ('procedure_call -> ID LPAREN expression_list RPAREN','procedure_call',4,'p_procedure_call','Parser_MiniPascal.py',250),
  ('expression_list -> expression expression_list_tail','expression_list',2,'p_expression_list_multi','Parser_MiniPascal.py',255),
  ('expression_list_tail -> COMMA expression expression_list_tail','expression_list_tail',3,'p_expression_list_tail','Parser_MiniPascal.py',259),
  ('expression_list_tail -> empty','expression_list_tail',1,'p_expression_list_tail','Parser_MiniPascal.py',260),
  ('expression_list -> empty','expression_list',1,'p_expression_list_empty','Parser_MiniPascal.py',267),
  ('expression -> simple_expression relop simple_expression','expression',3,'p_expression','Parser_MiniPascal.py',272),
  ('expression -> simple_expression','expression',1,'p_expression','Parser_MiniPascal.py',273),
  ('simple_expression -> term simple_expression_tail','simple_expression',2,'p_simple_expression','Parser_MiniPascal.py',281),
  ('simple_expression_tail -> addop term','simple_expression_tail',2,'p_simple_expression_tail','Parser_MiniPascal.py',288),
  ('simple_expression_tail -> empty','simple_expression_tail',1,'p_simple_expression_tail','Parser_MiniPascal.py',289),
  ('addop -> PLUS','addop',1,'p_addop','Parser_MiniPascal.py',296),
  ('addop -> MINUS','addop',1,'p_addop','Parser_MiniPascal.py',297),
  ('term -> factor term_tail','term',2,'p_term','Parser_MiniPascal.py',302),
  ('term_tail -> mulop factor','term_tail',2,'p_term_tail','Parser_MiniPascal.py',309),
  ('term_tail -> empty','term_tail',1,'p_term_tail','Parser_MiniPascal.py',310),
  ('mulop -> TIMES','mulop',1,'p_mulop','Parser_MiniPascal.py',317),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','Parser_MiniPascal.py',318),
  ('mulop -> DIV','mulop',1,'p_mulop','Parser_MiniPascal.py',319),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',326),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',327),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',328),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',329),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',330),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','Parser_MiniPascal.py',337),
  ('factor -> variable','factor',1,'p_factor_variable','Parser_MiniPascal.py',341),
  ('factor -> NUMBER','factor',1,'p_factor_number','Parser_MiniPascal.py',345),
  ('factor -> STRING_LITERAL','factor',1,'p_factor_string','Parser_MiniPascal.py',349),
  ('relop -> LESS','relop',1,'p_relop','Parser_MiniPascal.py',354),
  ('relop -> LESS_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',355),
  ('relop -> GREAT','relop',1,'p_relop','Parser_MiniPascal.py',356),
  ('relop -> GREAT_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',357),
  ('relop -> EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',358),
  ('relop -> DIFFERENT','relop',1,'p_relop','Parser_MiniPascal.py',359),
  ('empty -> <empty>','empty',0,'p_empty','Parser_MiniPascal.py',364),
  ('statement -> READLN','statement',1,'p_statement_readln','Parser_MiniPascal.py',368),
  ('statement -> READLN LPAREN ID RPAREN','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',372),
  ('statement -> READLN LBRACKET ID RBRACKET','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',373),
  ('statement -> WRITELN LPAREN expression_list RPAREN','statement',4,'p_statement_writeln','Parser_MiniPascal.py',377),
  ('statement -> WRITE LPAREN expression_list RPAREN','statement',4,'p_statement_write','Parser_MiniPascal.py',381),
  ('statement -> USES ID SEMICOLON','statement',3,'p_statement_uses','Parser_MiniPascal.py',386),
  ('constant_declaration -> CONST constant_list','constant_declaration',2,'p_constant_declaration','Parser_MiniPascal.py',391),
  ('constant_list -> constant','constant_list',1,'p_constant_list','Parser_MiniPascal.py',395),
  ('constant_list -> constant_list constant','constant_list',2,'p_constant_list','Parser_MiniPascal.py',396),
  ('constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',403),
  ('constant -> ID EQUAL NUMBER SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',404),
  ('constant -> ID EQUAL STRING_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',405),
  ('expression -> expression AND expression','expression',3,'p_expression_logical','Parser_MiniPascal.py',410),
  ('expression -> expression OR expression','expression',3,'p_expression_logical','Parser_MiniPascal.py',411),
  ('expression -> NOT expression','expression',2,'p_expression_logical','Parser_MiniPascal.py',412),
]
