
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY BEGIN BOOLEAN_LITERAL BYTE CASE CHAR CHARACTER_LITERAL COLON COLON_EQUAL COMMA CONST DIFFERENT DIV DIVIDE DO DOT DOTDOT DOWNTO ELSE END EQUAL FALSE FILE FOR FUNCTION GOTO GREAT GREAT_EQUAL ID IF IN INTEGER LABEL LBLOCK LBRACKET LESS LESS_EQUAL LONGINT LPAREN MINUS MOD NIL NOT NUMBER OF OR PACKED PLUS PROCEDURE PROGRAM RBLOCK RBRACKET READLINE READLN RECORD REPEAT RPAREN SEMICOLON SET STRING STRING_LITERAL THEN TIMES TO TRUE TYPE UNTIL USES VAR WHILE WITH WRITE WRITELNprogram : PROGRAM ID SEMICOLON declaration_sections block DOTdeclaration_sections : uses_opt constant_declaration type_declaration var_declaration\n                            | uses_opt constant_declaration type_declaration\n                            | uses_opt constant_declaration var_declaration\n                            | uses_opt constant_declaration\n                            | uses_opt type_declaration var_declaration\n                            | uses_opt type_declaration\n                            | uses_opt var_declaration\n                            | uses_opt\n                            | constant_declaration type_declaration var_declaration\n                            | constant_declaration type_declaration\n                            | constant_declaration var_declaration\n                            | constant_declaration\n                            | type_declaration var_declaration\n                            | type_declaration\n                            | var_declarationuses_opt : USES ID SEMICOLON\n                | emptyvar_declaration : VAR declaration_listblock : declarations compound_statementdeclarations : VAR declaration_list procedure_declarationsdeclarations : VAR declaration_listdeclarations : procedure_declarationsdeclarations : emptydeclaration_list : declaration\n                        | declaration_list declarationdeclaration : id_list COLON type_specifier SEMICOLONid_list : IDid_list : id_list COMMA IDtype_declaration : TYPE type_listtype_list : type_definition\n                 | type_list type_definitiontype_definition : ID EQUAL type_specifier SEMICOLONtype_specifier : ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier\n                      | INTEGER\n                      | IDtype_specifier : LONGINTprocedure_declarations : procedure_declaration\n                              | procedure_declarations procedure_declarationprocedure_declaration : PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLONfunction_declaration : FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLONdeclarations : function_declarationfunction_call : ID LPAREN expression_list RPARENfactor : function_callparameter_list : id_list COLON type_specifiercompound_statement : BEGIN statement_list ENDstatement_list : statement statement_list_tailstatement_list_tail : SEMICOLON statement statement_list_tail\n                           | emptystatement : assignment_statementstatement : if_statementstatement : FOR ID COLON_EQUAL expression TO expression DO statementstatement : while_statementstatement : procedure_callstatement : compound_statementstatement : emptyassignment_statement : variable COLON_EQUAL expressionvariable : IDvariable : ID LBRACKET expression RBRACKETif_statement : IF expression THEN statement ELSE statementwhile_statement : WHILE expression DO statementprocedure_call : ID LPAREN expression_list RPARENexpression_list : expression expression_list_tailexpression_list_tail : COMMA expression expression_list_tail\n                            | emptyexpression_list : emptyexpression : simple_expression relop simple_expression\n                  | simple_expressionsimple_expression : term simple_expression_tailsimple_expression_tail : addop term\n                              | emptyaddop : PLUS\n             | MINUSterm : factor term_tailterm_tail : mulop factor\n                 | emptymulop : TIMES\n             | DIVIDE\n             | DIVexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expressionfactor : LPAREN expression RPARENfactor : variablefactor : NUMBERfactor : STRING_LITERALrelop : LESS\n             | LESS_EQUAL\n             | GREAT\n             | GREAT_EQUAL\n             | EQUAL\n             | DIFFERENTempty :statement : READLNstatement : READLN LPAREN ID RPARENstatement : WRITELN LPAREN expression_list RPARENstatement : WRITE LPAREN expression_list RPARENstatement : USES ID SEMICOLONconstant_declaration : CONST constant_listconstant_list : constant\n                     | constant_list constantconstant : ID EQUAL NUMBER SEMICOLON'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,41,],[0,-1,]),'ID':([2,10,12,13,14,17,22,23,31,32,34,35,37,38,43,44,53,55,56,57,58,59,64,73,75,76,78,79,91,94,95,96,97,98,100,106,115,116,117,118,120,130,131,132,133,134,135,136,137,138,139,140,141,142,144,146,147,149,151,152,153,155,156,158,165,183,186,187,189,200,202,],[3,30,33,36,40,40,46,47,33,-102,36,-31,40,-25,65,40,-103,-32,82,-26,82,88,93,99,110,110,40,40,65,110,110,125,110,110,110,110,-104,-33,110,-27,110,65,110,110,110,110,110,110,-89,-90,-91,-92,-93,-94,110,-72,-73,110,-77,-78,-79,110,65,82,110,82,110,110,65,65,82,]),'SEMICOLON':([3,30,42,43,61,62,63,66,67,68,69,70,81,82,83,85,86,87,89,91,99,102,103,104,105,107,108,109,110,119,128,129,143,145,148,150,156,159,163,167,168,169,170,172,173,174,175,176,177,178,179,180,182,189,190,191,192,196,200,201,203,205,],[4,52,-20,-95,91,-50,-51,-53,-54,-55,-56,-96,115,-36,116,-35,-37,118,-46,-95,128,-68,-95,-95,-44,-86,-87,-88,-58,91,-100,-57,-69,-71,-74,-76,-95,185,-62,-59,-97,-98,-99,-80,-81,-82,-83,-84,-67,-70,-75,-85,-61,-95,-43,197,198,-60,-95,204,-52,-34,]),'USES':([4,43,91,130,156,189,200,],[10,73,73,73,73,73,73,]),'CONST':([4,6,11,52,],[12,12,-18,-17,]),'TYPE':([4,6,7,11,24,31,32,52,53,115,],[13,13,13,-18,13,-101,-102,-17,-103,-104,]),'VAR':([4,5,6,7,8,9,11,24,25,26,27,28,29,31,32,34,35,37,38,48,49,50,51,52,53,55,57,80,115,116,118,185,197,],[14,17,14,14,14,-16,-18,14,14,-8,14,-12,-14,-101,-102,-30,-31,-19,-25,14,-4,-6,-10,-17,-103,-32,-26,-2,-104,-33,-27,17,17,]),'FUNCTION':([4,5,6,7,8,9,11,24,25,26,27,28,29,31,32,34,35,37,38,48,49,50,51,52,53,55,57,80,115,116,118,185,197,],[-95,22,-9,-13,-15,-16,-18,-5,-7,-8,-11,-12,-14,-101,-102,-30,-31,-19,-25,-3,-4,-6,-10,-17,-103,-32,-26,-2,-104,-33,-27,22,22,]),'PROCEDURE':([4,5,6,7,8,9,11,18,21,24,25,26,27,28,29,31,32,34,35,37,38,44,45,48,49,50,51,52,53,55,57,77,80,115,116,118,185,197,198,],[-95,23,-9,-13,-15,-16,-18,23,-38,-5,-7,-8,-11,-12,-14,-101,-102,-30,-31,-19,-25,23,-39,-3,-4,-6,-10,-17,-103,-32,-26,23,-2,-104,-33,-27,23,23,-40,]),'BEGIN':([4,5,6,7,8,9,11,16,18,19,20,21,24,25,26,27,28,29,31,32,34,35,37,38,43,44,45,48,49,50,51,52,53,55,57,77,80,91,115,116,118,130,156,185,189,197,198,200,204,],[-95,-95,-9,-13,-15,-16,-18,43,-23,-24,-42,-38,-5,-7,-8,-11,-12,-14,-101,-102,-30,-31,-19,-25,43,-22,-39,-3,-4,-6,-10,-17,-103,-32,-26,-21,-2,43,-104,-33,-27,43,43,-95,43,-95,-40,43,-41,]),'DOT':([15,42,89,],[41,-20,-46,]),'EQUAL':([33,36,102,103,104,105,107,108,109,110,143,145,148,150,167,178,179,180,190,],[54,56,141,-95,-95,-44,-86,-87,-88,-58,-69,-71,-74,-76,-59,-70,-75,-85,-43,]),'COLON':([39,40,88,113,157,],[58,-28,-29,158,183,]),'COMMA':([39,40,88,102,103,104,105,107,108,109,110,113,122,143,145,148,150,167,172,173,174,175,176,177,178,179,180,188,190,],[59,-28,-29,-68,-95,-95,-44,-86,-87,-88,-58,59,165,-69,-71,-74,-76,-59,-80,-81,-82,-83,-84,-67,-70,-75,-85,165,-43,]),'FOR':([43,91,130,156,189,200,],[64,64,64,64,64,64,]),'READLN':([43,91,130,156,189,200,],[70,70,70,70,70,70,]),'WRITELN':([43,91,130,156,189,200,],[71,71,71,71,71,71,]),'WRITE':([43,91,130,156,189,200,],[72,72,72,72,72,72,]),'IF':([43,91,130,156,189,200,],[75,75,75,75,75,75,]),'WHILE':([43,91,130,156,189,200,],[76,76,76,76,76,76,]),'END':([43,60,61,62,63,66,67,68,69,70,89,90,91,92,102,103,104,105,107,108,109,110,119,128,129,143,145,148,150,156,161,163,167,168,169,170,172,173,174,175,176,177,178,179,180,182,189,190,196,200,203,],[-95,89,-95,-50,-51,-53,-54,-55,-56,-96,-46,-47,-95,-49,-68,-95,-95,-44,-86,-87,-88,-58,-95,-100,-57,-69,-71,-74,-76,-95,-48,-62,-59,-97,-98,-99,-80,-81,-82,-83,-84,-67,-70,-75,-85,-61,-95,-43,-60,-95,-52,]),'LPAREN':([46,47,65,70,71,72,75,76,94,95,97,98,100,106,110,117,120,131,132,133,134,135,136,137,138,139,140,141,142,144,146,147,149,151,152,153,155,165,186,187,],[78,79,94,96,97,98,106,106,106,106,106,106,106,106,155,106,106,106,106,106,106,106,106,-89,-90,-91,-92,-93,-94,106,-72,-73,106,-77,-78,-79,106,106,106,106,]),'NUMBER':([54,75,76,94,95,97,98,100,106,117,120,131,132,133,134,135,136,137,138,139,140,141,142,144,146,147,149,151,152,153,155,165,186,187,],[81,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,-89,-90,-91,-92,-93,-94,108,-72,-73,108,-77,-78,-79,108,108,108,108,]),'ARRAY':([56,58,158,183,202,],[84,84,84,84,84,]),'INTEGER':([56,58,158,183,202,],[85,85,85,85,85,]),'LONGINT':([56,58,158,183,202,],[86,86,86,86,86,]),'ELSE':([62,63,66,67,68,69,70,89,102,103,104,105,107,108,109,110,128,129,130,143,145,148,150,156,163,167,168,169,170,171,172,173,174,175,176,177,178,179,180,182,189,190,196,200,203,],[-50,-51,-53,-54,-55,-56,-96,-46,-68,-95,-95,-44,-86,-87,-88,-58,-100,-57,-95,-69,-71,-74,-76,-95,-62,-59,-97,-98,-99,189,-80,-81,-82,-83,-84,-67,-70,-75,-85,-61,-95,-43,-60,-95,-52,]),'COLON_EQUAL':([65,74,93,167,],[-58,100,120,-59,]),'LBRACKET':([65,84,110,],[95,117,95,]),'STRING_LITERAL':([75,76,94,95,97,98,100,106,117,120,131,132,133,134,135,136,137,138,139,140,141,142,144,146,147,149,151,152,153,155,165,186,187,],[109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,-89,-90,-91,-92,-93,-94,109,-72,-73,109,-77,-78,-79,109,109,109,109,]),'RPAREN':([82,85,86,94,97,98,102,103,104,105,107,108,109,110,112,114,121,122,123,125,126,127,143,145,148,150,154,155,164,166,167,172,173,174,175,176,177,178,179,180,181,184,188,190,195,205,],[-36,-35,-37,-95,-95,-95,-68,-95,-95,-44,-86,-87,-88,-58,157,159,163,-95,-66,168,169,170,-69,-71,-74,-76,180,-95,-63,-65,-59,-80,-81,-82,-83,-84,-67,-70,-75,-85,190,-45,-95,-43,-64,-34,]),'THEN':([101,102,103,104,105,107,108,109,110,143,145,148,150,167,172,173,174,175,176,177,178,179,180,190,],[130,-68,-95,-95,-44,-86,-87,-88,-58,-69,-71,-74,-76,-59,-80,-81,-82,-83,-84,-67,-70,-75,-85,-43,]),'PLUS':([101,102,103,104,105,107,108,109,110,111,122,124,129,143,145,148,150,154,160,162,167,172,173,174,175,176,177,178,179,180,188,190,193,194,],[131,-68,146,-95,-44,-86,-87,-88,-58,131,131,131,131,-69,-71,-74,-76,131,131,131,-59,131,131,131,131,131,-67,-70,-75,-85,131,-43,131,131,]),'MINUS':([101,102,103,104,105,107,108,109,110,111,122,124,129,143,145,148,150,154,160,162,167,172,173,174,175,176,177,178,179,180,188,190,193,194,],[132,-68,147,-95,-44,-86,-87,-88,-58,132,132,132,132,-69,-71,-74,-76,132,132,132,-59,132,132,132,132,132,-67,-70,-75,-85,132,-43,132,132,]),'TIMES':([101,102,103,104,105,107,108,109,110,111,122,124,129,143,145,148,150,154,160,162,167,172,173,174,175,176,177,178,179,180,188,190,193,194,],[133,-68,-95,151,-44,-86,-87,-88,-58,133,133,133,133,-69,-71,-74,-76,133,133,133,-59,133,133,133,133,133,-67,-70,-75,-85,133,-43,133,133,]),'DIVIDE':([101,102,103,104,105,107,108,109,110,111,122,124,129,143,145,148,150,154,160,162,167,172,173,174,175,176,177,178,179,180,188,190,193,194,],[134,-68,-95,152,-44,-86,-87,-88,-58,134,134,134,134,-69,-71,-74,-76,134,134,134,-59,134,134,134,134,134,-67,-70,-75,-85,134,-43,134,134,]),'MOD':([101,102,103,104,105,107,108,109,110,111,122,124,129,143,145,148,150,154,160,162,167,172,173,174,175,176,177,178,179,180,188,190,193,194,],[135,-68,-95,-95,-44,-86,-87,-88,-58,135,135,135,135,-69,-71,-74,-76,135,135,135,-59,135,135,135,135,135,-67,-70,-75,-85,135,-43,135,135,]),'DO':([102,103,104,105,107,108,109,110,111,143,145,148,150,167,172,173,174,175,176,177,178,179,180,190,194,],[-68,-95,-95,-44,-86,-87,-88,-58,156,-69,-71,-74,-76,-59,-80,-81,-82,-83,-84,-67,-70,-75,-85,-43,200,]),'RBRACKET':([102,103,104,105,107,108,109,110,124,143,145,148,150,167,172,173,174,175,176,177,178,179,180,190,193,],[-68,-95,-95,-44,-86,-87,-88,-58,167,-69,-71,-74,-76,-59,-80,-81,-82,-83,-84,-67,-70,-75,-85,-43,199,]),'DOTDOT':([102,103,104,105,107,108,109,110,143,145,148,150,160,167,172,173,174,175,176,177,178,179,180,190,],[-68,-95,-95,-44,-86,-87,-88,-58,-69,-71,-74,-76,186,-59,-80,-81,-82,-83,-84,-67,-70,-75,-85,-43,]),'TO':([102,103,104,105,107,108,109,110,143,145,148,150,162,167,172,173,174,175,176,177,178,179,180,190,],[-68,-95,-95,-44,-86,-87,-88,-58,-69,-71,-74,-76,187,-59,-80,-81,-82,-83,-84,-67,-70,-75,-85,-43,]),'LESS':([102,103,104,105,107,108,109,110,143,145,148,150,167,178,179,180,190,],[137,-95,-95,-44,-86,-87,-88,-58,-69,-71,-74,-76,-59,-70,-75,-85,-43,]),'LESS_EQUAL':([102,103,104,105,107,108,109,110,143,145,148,150,167,178,179,180,190,],[138,-95,-95,-44,-86,-87,-88,-58,-69,-71,-74,-76,-59,-70,-75,-85,-43,]),'GREAT':([102,103,104,105,107,108,109,110,143,145,148,150,167,178,179,180,190,],[139,-95,-95,-44,-86,-87,-88,-58,-69,-71,-74,-76,-59,-70,-75,-85,-43,]),'GREAT_EQUAL':([102,103,104,105,107,108,109,110,143,145,148,150,167,178,179,180,190,],[140,-95,-95,-44,-86,-87,-88,-58,-69,-71,-74,-76,-59,-70,-75,-85,-43,]),'DIFFERENT':([102,103,104,105,107,108,109,110,143,145,148,150,167,178,179,180,190,],[142,-95,-95,-44,-86,-87,-88,-58,-69,-71,-74,-76,-59,-70,-75,-85,-43,]),'DIV':([104,105,107,108,109,110,167,180,190,],[153,-44,-86,-87,-88,-58,-59,-85,-43,]),'OF':([199,],[202,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_sections':([4,],[5,]),'uses_opt':([4,],[6,]),'constant_declaration':([4,6,],[7,24,]),'type_declaration':([4,6,7,24,],[8,25,27,48,]),'var_declaration':([4,6,7,8,24,25,27,48,],[9,26,28,29,49,50,51,80,]),'empty':([4,5,43,61,91,94,97,98,103,104,119,122,130,155,156,185,188,189,197,200,],[11,19,69,92,69,123,123,123,145,150,92,166,69,123,69,19,166,69,19,69,]),'block':([5,185,197,],[15,192,201,]),'declarations':([5,185,197,],[16,16,16,]),'procedure_declarations':([5,44,185,197,],[18,77,18,18,]),'function_declaration':([5,185,197,],[20,20,20,]),'procedure_declaration':([5,18,44,77,185,197,],[21,45,21,45,21,21,]),'constant_list':([12,],[31,]),'constant':([12,31,],[32,53,]),'type_list':([13,],[34,]),'type_definition':([13,34,],[35,55,]),'declaration_list':([14,17,],[37,44,]),'declaration':([14,17,37,44,],[38,38,57,57,]),'id_list':([14,17,37,44,78,79,],[39,39,39,39,113,113,]),'compound_statement':([16,43,91,130,156,189,200,],[42,68,68,68,68,68,68,]),'statement_list':([43,],[60,]),'statement':([43,91,130,156,189,200,],[61,119,171,182,196,203,]),'assignment_statement':([43,91,130,156,189,200,],[62,62,62,62,62,62,]),'if_statement':([43,91,130,156,189,200,],[63,63,63,63,63,63,]),'while_statement':([43,91,130,156,189,200,],[66,66,66,66,66,66,]),'procedure_call':([43,91,130,156,189,200,],[67,67,67,67,67,67,]),'variable':([43,75,76,91,94,95,97,98,100,106,117,120,130,131,132,133,134,135,136,144,149,155,156,165,186,187,189,200,],[74,107,107,74,107,107,107,107,107,107,107,107,74,107,107,107,107,107,107,107,107,107,74,107,107,107,74,74,]),'type_specifier':([56,58,158,183,202,],[83,87,184,191,205,]),'statement_list_tail':([61,119,],[90,161,]),'expression':([75,76,94,95,97,98,100,106,117,120,131,132,133,134,135,155,165,186,187,],[101,111,122,124,122,122,129,154,160,162,172,173,174,175,176,122,188,193,194,]),'simple_expression':([75,76,94,95,97,98,100,106,117,120,131,132,133,134,135,136,155,165,186,187,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,177,102,102,102,102,]),'term':([75,76,94,95,97,98,100,106,117,120,131,132,133,134,135,136,144,155,165,186,187,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,178,103,103,103,103,]),'factor':([75,76,94,95,97,98,100,106,117,120,131,132,133,134,135,136,144,149,155,165,186,187,],[104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,179,104,104,104,104,]),'function_call':([75,76,94,95,97,98,100,106,117,120,131,132,133,134,135,136,144,149,155,165,186,187,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'parameter_list':([78,79,],[112,114,]),'expression_list':([94,97,98,155,],[121,126,127,181,]),'relop':([102,],[136,]),'simple_expression_tail':([103,],[143,]),'addop':([103,],[144,]),'term_tail':([104,],[148,]),'mulop':([104,],[149,]),'expression_list_tail':([122,188,],[164,195,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON declaration_sections block DOT','program',6,'p_program','Parser_MiniPascal.py',12),
  ('declaration_sections -> uses_opt constant_declaration type_declaration var_declaration','declaration_sections',4,'p_declaration_sections','Parser_MiniPascal.py',16),
  ('declaration_sections -> uses_opt constant_declaration type_declaration','declaration_sections',3,'p_declaration_sections','Parser_MiniPascal.py',17),
  ('declaration_sections -> uses_opt constant_declaration var_declaration','declaration_sections',3,'p_declaration_sections','Parser_MiniPascal.py',18),
  ('declaration_sections -> uses_opt constant_declaration','declaration_sections',2,'p_declaration_sections','Parser_MiniPascal.py',19),
  ('declaration_sections -> uses_opt type_declaration var_declaration','declaration_sections',3,'p_declaration_sections','Parser_MiniPascal.py',20),
  ('declaration_sections -> uses_opt type_declaration','declaration_sections',2,'p_declaration_sections','Parser_MiniPascal.py',21),
  ('declaration_sections -> uses_opt var_declaration','declaration_sections',2,'p_declaration_sections','Parser_MiniPascal.py',22),
  ('declaration_sections -> uses_opt','declaration_sections',1,'p_declaration_sections','Parser_MiniPascal.py',23),
  ('declaration_sections -> constant_declaration type_declaration var_declaration','declaration_sections',3,'p_declaration_sections','Parser_MiniPascal.py',24),
  ('declaration_sections -> constant_declaration type_declaration','declaration_sections',2,'p_declaration_sections','Parser_MiniPascal.py',25),
  ('declaration_sections -> constant_declaration var_declaration','declaration_sections',2,'p_declaration_sections','Parser_MiniPascal.py',26),
  ('declaration_sections -> constant_declaration','declaration_sections',1,'p_declaration_sections','Parser_MiniPascal.py',27),
  ('declaration_sections -> type_declaration var_declaration','declaration_sections',2,'p_declaration_sections','Parser_MiniPascal.py',28),
  ('declaration_sections -> type_declaration','declaration_sections',1,'p_declaration_sections','Parser_MiniPascal.py',29),
  ('declaration_sections -> var_declaration','declaration_sections',1,'p_declaration_sections','Parser_MiniPascal.py',30),
  ('uses_opt -> USES ID SEMICOLON','uses_opt',3,'p_uses_opt','Parser_MiniPascal.py',34),
  ('uses_opt -> empty','uses_opt',1,'p_uses_opt','Parser_MiniPascal.py',35),
  ('var_declaration -> VAR declaration_list','var_declaration',2,'p_var_declaration','Parser_MiniPascal.py',42),
  ('block -> declarations compound_statement','block',2,'p_block','Parser_MiniPascal.py',59),
  ('declarations -> VAR declaration_list procedure_declarations','declarations',3,'p_declarations_var_proc','Parser_MiniPascal.py',64),
  ('declarations -> VAR declaration_list','declarations',2,'p_declarations_var_only','Parser_MiniPascal.py',68),
  ('declarations -> procedure_declarations','declarations',1,'p_declarations_proc_only','Parser_MiniPascal.py',72),
  ('declarations -> empty','declarations',1,'p_declarations_empty','Parser_MiniPascal.py',76),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser_MiniPascal.py',81),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','Parser_MiniPascal.py',82),
  ('declaration -> id_list COLON type_specifier SEMICOLON','declaration',4,'p_declaration','Parser_MiniPascal.py',90),
  ('id_list -> ID','id_list',1,'p_id_list_single','Parser_MiniPascal.py',95),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list_multi','Parser_MiniPascal.py',99),
  ('type_declaration -> TYPE type_list','type_declaration',2,'p_type_declaration','Parser_MiniPascal.py',103),
  ('type_list -> type_definition','type_list',1,'p_type_list','Parser_MiniPascal.py',107),
  ('type_list -> type_list type_definition','type_list',2,'p_type_list','Parser_MiniPascal.py',108),
  ('type_definition -> ID EQUAL type_specifier SEMICOLON','type_definition',4,'p_type_definition','Parser_MiniPascal.py',115),
  ('type_specifier -> ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier','type_specifier',8,'p_type_specifier','Parser_MiniPascal.py',119),
  ('type_specifier -> INTEGER','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',120),
  ('type_specifier -> ID','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',121),
  ('type_specifier -> LONGINT','type_specifier',1,'p_type_specifier_longint','Parser_MiniPascal.py',137),
  ('procedure_declarations -> procedure_declaration','procedure_declarations',1,'p_procedure_declarations','Parser_MiniPascal.py',142),
  ('procedure_declarations -> procedure_declarations procedure_declaration','procedure_declarations',2,'p_procedure_declarations','Parser_MiniPascal.py',143),
  ('procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON','procedure_declaration',8,'p_procedure_declaration','Parser_MiniPascal.py',153),
  ('function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON','function_declaration',10,'p_function_declaration','Parser_MiniPascal.py',157),
  ('declarations -> function_declaration','declarations',1,'p_declarations_func_only','Parser_MiniPascal.py',161),
  ('function_call -> ID LPAREN expression_list RPAREN','function_call',4,'p_function_call','Parser_MiniPascal.py',165),
  ('factor -> function_call','factor',1,'p_factor_function_call','Parser_MiniPascal.py',169),
  ('parameter_list -> id_list COLON type_specifier','parameter_list',3,'p_parameter_list','Parser_MiniPascal.py',174),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','Parser_MiniPascal.py',179),
  ('statement_list -> statement statement_list_tail','statement_list',2,'p_statement_list_multi','Parser_MiniPascal.py',184),
  ('statement_list_tail -> SEMICOLON statement statement_list_tail','statement_list_tail',3,'p_statement_list_tail','Parser_MiniPascal.py',188),
  ('statement_list_tail -> empty','statement_list_tail',1,'p_statement_list_tail','Parser_MiniPascal.py',189),
  ('statement -> assignment_statement','statement',1,'p_statement_assignment','Parser_MiniPascal.py',197),
  ('statement -> if_statement','statement',1,'p_statement_if','Parser_MiniPascal.py',201),
  ('statement -> FOR ID COLON_EQUAL expression TO expression DO statement','statement',8,'p_statement_for','Parser_MiniPascal.py',209),
  ('statement -> while_statement','statement',1,'p_statement_while','Parser_MiniPascal.py',214),
  ('statement -> procedure_call','statement',1,'p_statement_proc_call','Parser_MiniPascal.py',218),
  ('statement -> compound_statement','statement',1,'p_statement_compound','Parser_MiniPascal.py',222),
  ('statement -> empty','statement',1,'p_statement_empty','Parser_MiniPascal.py',226),
  ('assignment_statement -> variable COLON_EQUAL expression','assignment_statement',3,'p_assignment_statement','Parser_MiniPascal.py',231),
  ('variable -> ID','variable',1,'p_variable_simple','Parser_MiniPascal.py',236),
  ('variable -> ID LBRACKET expression RBRACKET','variable',4,'p_variable_index','Parser_MiniPascal.py',240),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_if_statement','Parser_MiniPascal.py',245),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','Parser_MiniPascal.py',250),
  ('procedure_call -> ID LPAREN expression_list RPAREN','procedure_call',4,'p_procedure_call','Parser_MiniPascal.py',255),
  ('expression_list -> expression expression_list_tail','expression_list',2,'p_expression_list_multi','Parser_MiniPascal.py',260),
  ('expression_list_tail -> COMMA expression expression_list_tail','expression_list_tail',3,'p_expression_list_tail','Parser_MiniPascal.py',264),
  ('expression_list_tail -> empty','expression_list_tail',1,'p_expression_list_tail','Parser_MiniPascal.py',265),
  ('expression_list -> empty','expression_list',1,'p_expression_list_empty','Parser_MiniPascal.py',272),
  ('expression -> simple_expression relop simple_expression','expression',3,'p_expression','Parser_MiniPascal.py',277),
  ('expression -> simple_expression','expression',1,'p_expression','Parser_MiniPascal.py',278),
  ('simple_expression -> term simple_expression_tail','simple_expression',2,'p_simple_expression','Parser_MiniPascal.py',286),
  ('simple_expression_tail -> addop term','simple_expression_tail',2,'p_simple_expression_tail','Parser_MiniPascal.py',293),
  ('simple_expression_tail -> empty','simple_expression_tail',1,'p_simple_expression_tail','Parser_MiniPascal.py',294),
  ('addop -> PLUS','addop',1,'p_addop','Parser_MiniPascal.py',301),
  ('addop -> MINUS','addop',1,'p_addop','Parser_MiniPascal.py',302),
  ('term -> factor term_tail','term',2,'p_term','Parser_MiniPascal.py',307),
  ('term_tail -> mulop factor','term_tail',2,'p_term_tail','Parser_MiniPascal.py',314),
  ('term_tail -> empty','term_tail',1,'p_term_tail','Parser_MiniPascal.py',315),
  ('mulop -> TIMES','mulop',1,'p_mulop','Parser_MiniPascal.py',322),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','Parser_MiniPascal.py',323),
  ('mulop -> DIV','mulop',1,'p_mulop','Parser_MiniPascal.py',324),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',331),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',332),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',333),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',334),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',335),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','Parser_MiniPascal.py',342),
  ('factor -> variable','factor',1,'p_factor_variable','Parser_MiniPascal.py',346),
  ('factor -> NUMBER','factor',1,'p_factor_number','Parser_MiniPascal.py',350),
  ('factor -> STRING_LITERAL','factor',1,'p_factor_string','Parser_MiniPascal.py',354),
  ('relop -> LESS','relop',1,'p_relop','Parser_MiniPascal.py',359),
  ('relop -> LESS_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',360),
  ('relop -> GREAT','relop',1,'p_relop','Parser_MiniPascal.py',361),
  ('relop -> GREAT_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',362),
  ('relop -> EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',363),
  ('relop -> DIFFERENT','relop',1,'p_relop','Parser_MiniPascal.py',364),
  ('empty -> <empty>','empty',0,'p_empty','Parser_MiniPascal.py',369),
  ('statement -> READLN','statement',1,'p_statement_readln','Parser_MiniPascal.py',373),
  ('statement -> READLN LPAREN ID RPAREN','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',377),
  ('statement -> WRITELN LPAREN expression_list RPAREN','statement',4,'p_statement_writeln','Parser_MiniPascal.py',381),
  ('statement -> WRITE LPAREN expression_list RPAREN','statement',4,'p_statement_write','Parser_MiniPascal.py',385),
  ('statement -> USES ID SEMICOLON','statement',3,'p_statement_uses','Parser_MiniPascal.py',390),
  ('constant_declaration -> CONST constant_list','constant_declaration',2,'p_constant_declaration','Parser_MiniPascal.py',395),
  ('constant_list -> constant','constant_list',1,'p_constant_list','Parser_MiniPascal.py',399),
  ('constant_list -> constant_list constant','constant_list',2,'p_constant_list','Parser_MiniPascal.py',400),
  ('constant -> ID EQUAL NUMBER SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',407),
]
