
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocELSEAND ARRAY BEGIN BOOLEAN_LITERAL BYTE CASE CHAR CHARACTER_LITERAL COLON COLON_EQUAL COMMA CONST CONSTRUCTOR DESTRUCTOR DIFFERENT DIV DIVIDE DO DOT DOTDOT DOWNTO ELSE END EQUAL FALSE FILE FOR FORWARD FUNCTION GOTO GREAT GREAT_EQUAL ID IF IN INTEGER LABEL LBLOCK LBRACKET LESS LESS_EQUAL LONGINT LPAREN MINUS MOD NIL NOT NUMBER OBJECT OF OR PACKED PLUS PROCEDURE PROGRAM RBLOCK RBRACKET READLINE READLN RECORD REPEAT RPAREN SEMICOLON SET STRING STRING_LITERAL SUBRANGE THEN TIMES TO TRUE TYPE UNTIL USES VAR WHILE WITH WRITE WRITELNprogram : PROGRAM ID SEMICOLON declaration_sections block DOTdeclaration_sections : declaration_sections declaration_section\n                            | emptydeclaration_section : uses_opt\n                           | constant_declaration\n                           | type_declaration\n                           | var_declaration\n                           | procedure_declarations\n                           | function_declaration\n                           | constructor_declaration\n                           | method_declarationmethod_declaration : CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block \n                          | PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block \n                          | FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block\n                          | DESTRUCTOR ID DOT ID SEMICOLON blockconstructor_declaration : CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block\n                               | CONSTRUCTOR ID LPAREN RPAREN SEMICOLON blockuses_opt : USES id_list SEMICOLONid_list : ID\n               | id_list COMMA IDvar_declaration : VAR declaration_listdeclaration_list : declaration\n                        | declaration_list declarationdeclaration : id_list COLON type_specifier SEMICOLONblock : declaration_sections compound_statementtype_declaration : TYPE type_listtype_list : type_definition\n                 | type_list type_definitiontype_definition : ID EQUAL type_specifier SEMICOLONtype_specifier : ARRAY LBRACKET type_expression RBRACKET OF type_specifier\n                      | subrange\n                      | FILE OF type_specifier\n                      | SET OF type_specifier\n                      | RECORD field_list case_part END\n                      | OBJECT field_list method_list END                              \n                      | LPAREN id_list RPAREN\n                      | BOOLEAN_LITERAL\n                      | INTEGER\n                      | BYTE\n                      | CHAR\n                      | STRING\n                      | STRING LBRACKET NUMBER RBRACKET\n                      | IDtype_expression : type_expression COMMA subrange\n                       | subrangesubrange : NUMBER DOTDOT NUMBER\n                | NUMBER DOTDOT IDfield_list : field_list field\n                  | field\n                  | emptyfield : id_list COLON type_specifier\n             | id_list COLON type_specifier SEMICOLON\n             | VAR id_list COLON type_specifier\n             | VAR id_list COLON type_specifier SEMICOLON\n             | id_list LPAREN STRING_LITERAL RPAREN\n             | id_list assignment_statementcase_part : CASE ID COLON type_specifier OF case_list SEMICOLON\n                 | emptycase_list : case_list SEMICOLON case_element\n                 | case_elementcase_element : NUMBER COLON LPAREN field_list RPAREN\n                    | NUMBER COLON field_listmethod_list : method_list method\n                   | method\n                   | emptymethod : CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON\n              | PROCEDURE ID LPAREN field_list RPAREN SEMICOLON  \n              | FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON\n              | DESTRUCTOR ID SEMICOLONcase_statement : CASE expression OF case_list END SEMICOLON\n                      | CASE expression OF case_list ENDtype_specifier : LONGINTprocedure_declarations : procedure_declaration\n                              | procedure_declarations procedure_declarationprocedure_declaration : PROCEDURE ID LPAREN field_list RPAREN SEMICOLON block SEMICOLON\n                             | PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON\n                             | PROCEDURE ID SEMICOLON block SEMICOLON\n                             | PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON\n                             | PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON\n                             | PROCEDURE ID SEMICOLON FORWARD SEMICOLONfunction_declaration : FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON\n                            | FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLONfunction_call : ID LPAREN expression_list RPARENfactor : function_callparameter_list : parameter\n                      | parameter_list SEMICOLON parameter\n                      | emptyparameter : id_list COLON type_specifier\n                 | VAR id_list COLON type_specifiercompound_statement : BEGIN statement_list ENDstatement_list : statement statement_list_tailstatement_list_tail : SEMICOLON statement statement_list_tail \n                           | emptystatement : if_statement\n                 | assignment_statement\n                 | while_statement\n                 | procedure_call\n                 | compound_statement\n                 | for_statement\n                 | case_statement\n                 | with_statement\n                 | emptywith_statement : WITH variable DO statementif_statement : IF expression THEN statement ELSE statement\n                    | IF expression THEN statement\n                    | IF expression IN statement THEN statement ELSE statement\n                    | IF expression IN statement THEN statementfor_statement : FOR ID COLON_EQUAL expression TO expression DO statement\n                     | FOR ID COLON_EQUAL expression DOWNTO expression DO statementassignment_statement : variable COLON_EQUAL expression\n                            | variable COLON_EQUAL BOOLEAN_LITERAL\n                            | ID COLON_EQUAL expressionvariable : ID\n                | variable LBRACKET expression RBRACKET\n                | variable DOT IDvariable : ID LBRACKET index_list RBRACKETindex_list : expression\n                  | index_list COMMA expressionwhile_statement : WHILE expression DO statementprocedure_call : ID LPAREN expression_list RPAREN\n                      | IDexpression_list : expression expression_list_tailexpression_list_tail : COMMA expression expression_list_tail\n                            | emptyexpression_list : emptyexpression : simple_expression relop simple_expression\n                  | simple_expressionsimple_expression : term simple_expression_tailsimple_expression_tail : addop term\n                              | emptyaddop : PLUS\n             | MINUSterm : factor term_tailterm_tail : mulop factor\n                 | emptymulop : TIMES\n             | DIVIDE\n             | DIVexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expressionfactor : LPAREN expression RPARENfactor : variablefactor : NUMBERfactor : STRING_LITERALrelop : LESS\n             | LESS_EQUAL\n             | GREAT\n             | GREAT_EQUAL\n             | EQUAL\n             | DIFFERENTempty :statement : READLNstatement : READLN LPAREN variable RPAREN\n                 | READLN LBRACKET variable RBRACKETstatement : WRITE LPAREN expression_list RPARENstatement : WRITELN LPAREN write_arguments RPARENwrite_arguments : write_argument\n                       | write_arguments COMMA write_argumentwrite_argument : expression\n                      | expression COLON expression\n                      | expression COLON expression COLON expressionstatement : USES ID SEMICOLONconstant_declaration : CONST constant_listconstant_list : constant\n                     | constant_list constantconstant : ID EQUAL CHARACTER_LITERAL SEMICOLON\n                | ID EQUAL NUMBER SEMICOLON\n                | ID EQUAL STRING_LITERAL SEMICOLON\n                | ID EQUAL BOOLEAN_LITERAL SEMICOLONexpression : expression AND expression\n                  | expression OR expression\n                  | NOT expression'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,29,],[0,-1,]),'ID':([2,18,19,20,21,23,24,25,26,28,31,33,34,35,37,38,40,41,62,64,65,66,67,68,71,72,74,75,76,77,78,79,80,81,82,83,85,88,90,91,92,93,94,95,96,98,99,100,102,103,104,105,106,107,108,109,110,111,117,122,125,128,129,130,131,132,133,134,135,137,143,145,147,148,149,150,153,161,162,164,172,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,205,206,207,209,210,211,212,213,214,216,217,218,219,222,223,225,226,228,230,232,234,237,238,247,250,253,254,256,257,260,261,262,263,264,265,266,267,268,269,270,280,281,283,288,289,290,291,292,294,295,296,299,303,305,316,317,318,319,320,323,326,328,334,339,340,341,349,356,357,358,360,361,362,363,366,367,373,374,375,376,377,379,380,381,401,],[3,33,36,39,33,43,44,45,46,63,69,-19,36,-167,39,-27,33,-22,97,111,111,113,111,116,117,-168,-28,122,-23,122,33,144,33,151,152,33,157,63,116,116,111,111,164,111,111,111,111,111,-127,111,-154,-154,-84,111,-145,-146,-147,-113,-20,-43,-31,33,33,33,-37,-38,-39,-40,-41,-72,33,33,-49,-50,235,33,33,-110,-111,-115,-112,63,63,111,111,111,111,111,111,111,111,-148,-149,-150,-151,-152,-153,-175,-128,111,-130,-131,-132,-133,111,-135,-136,-137,-138,111,63,111,63,-169,-170,-171,-172,-29,122,122,33,33,295,-24,33,122,33,-48,122,-56,33,33,-114,111,111,111,-116,111,-139,-140,-141,-142,-143,-173,-174,-126,-129,-134,-144,-32,-33,327,330,331,332,333,-36,-46,-47,122,122,-51,122,63,63,-83,111,111,33,-34,-35,-42,-52,-55,-53,111,33,33,122,122,33,33,33,122,-54,63,63,63,33,-30,33,33,33,122,]),'SEMICOLON':([3,27,28,32,33,45,48,49,50,51,52,53,54,55,56,57,58,63,69,78,86,88,97,102,104,105,106,108,109,110,111,117,118,119,120,121,122,123,125,131,132,133,134,135,137,138,139,140,141,146,147,148,154,155,156,157,158,161,162,164,171,172,176,192,193,195,198,200,206,209,228,229,230,234,237,238,239,245,246,247,248,252,255,256,258,260,261,262,263,264,265,266,267,268,269,270,272,274,275,277,280,281,292,294,295,297,298,300,303,306,307,309,310,316,317,318,321,323,326,328,333,334,335,336,339,340,341,342,343,344,345,350,351,354,355,357,367,373,374,375,377,382,383,384,387,388,389,390,392,393,398,404,],[4,-25,-154,70,-19,84,88,-94,-95,-96,-97,-98,-99,-100,-101,-102,-155,-121,84,-154,-90,-154,171,-127,-154,-154,-84,-145,-146,-147,-113,-20,210,211,212,213,-43,214,-31,-37,-38,-39,-40,-41,-72,223,225,-85,-87,231,-49,-50,240,241,242,243,88,-110,-111,-115,-165,-112,-154,-175,-128,-130,-133,-135,-154,-154,-154,301,-48,-56,-154,-154,308,-156,-157,-114,-158,-159,-120,-116,-105,-139,-140,-141,-142,-143,-173,-174,-126,-129,-134,-144,-119,322,-60,-103,-32,-33,-36,-46,-47,-86,-88,225,339,225,225,346,347,-154,-154,-83,354,-154,-34,-35,364,-42,365,-89,-52,-55,367,368,369,370,371,-104,-107,-70,-59,-62,-54,-154,-154,-154,-30,395,396,397,-106,-108,-109,-61,399,400,403,405,]),'USES':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,28,30,34,35,37,38,40,41,70,72,74,76,84,86,88,176,177,206,209,210,211,212,213,214,223,231,240,241,242,243,301,302,308,311,316,317,338,346,347,365,368,369,370,371,373,374,375,385,386,395,396,397,402,],[-154,18,-3,18,-2,-4,-5,-6,-7,-8,-9,-10,-11,-73,-25,62,-74,-166,-167,-26,-27,-21,-22,-18,-168,-28,-23,-154,-90,62,62,62,62,62,-169,-170,-171,-172,-29,-24,-154,-154,-77,-80,-154,-154,-17,-154,-15,62,62,-16,-76,-79,-154,-154,-154,-75,-78,62,62,62,-12,-13,-81,-82,-154,-14,]),'CONST':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,70,72,74,76,84,86,210,211,212,213,214,223,231,240,241,242,243,301,302,308,311,338,346,347,365,368,369,370,371,385,386,395,396,397,402,],[-154,19,-3,19,-2,-4,-5,-6,-7,-8,-9,-10,-11,-73,-25,-74,-166,-167,-26,-27,-21,-22,-18,-168,-28,-23,-154,-90,-169,-170,-171,-172,-29,-24,-154,-154,-77,-80,-154,-154,-17,-154,-15,-16,-76,-79,-154,-154,-154,-75,-78,-12,-13,-81,-82,-154,-14,]),'TYPE':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,70,72,74,76,84,86,210,211,212,213,214,223,231,240,241,242,243,301,302,308,311,338,346,347,365,368,369,370,371,385,386,395,396,397,402,],[-154,20,-3,20,-2,-4,-5,-6,-7,-8,-9,-10,-11,-73,-25,-74,-166,-167,-26,-27,-21,-22,-18,-168,-28,-23,-154,-90,-169,-170,-171,-172,-29,-24,-154,-154,-77,-80,-154,-154,-17,-154,-15,-16,-76,-79,-154,-154,-154,-75,-78,-12,-13,-81,-82,-154,-14,]),'VAR':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,70,72,74,76,78,80,83,84,86,102,104,105,106,108,109,110,111,122,125,128,129,131,132,133,134,135,137,145,147,148,153,161,162,164,172,192,193,195,198,200,210,211,212,213,214,218,219,223,225,228,230,231,234,237,238,240,241,242,243,247,256,260,261,262,263,264,265,266,267,268,269,270,280,281,292,294,295,301,302,303,308,311,318,323,326,328,334,338,339,340,341,346,347,356,357,361,362,363,365,367,368,369,370,371,376,377,379,380,381,385,386,395,396,397,402,],[-154,21,-3,21,-2,-4,-5,-6,-7,-8,-9,-10,-11,-73,-25,-74,-166,-167,-26,-27,-21,-22,-18,-168,-28,-23,143,150,150,-154,-90,-127,-154,-154,-84,-145,-146,-147,-113,-43,-31,150,150,-37,-38,-39,-40,-41,-72,150,-49,-50,150,-110,-111,-115,-112,-175,-128,-130,-133,-135,-169,-170,-171,-172,-29,150,150,-24,143,143,-48,-154,-56,143,143,-154,-77,-80,-154,-114,-116,-139,-140,-141,-142,-143,-173,-174,-126,-129,-134,-144,-32,-33,-36,-46,-47,-154,-17,-51,-154,-15,-83,150,-34,-35,-42,-16,-52,-55,-53,-76,-79,150,150,150,150,150,-154,-54,-154,-154,-75,-78,150,-30,150,150,150,-12,-13,-81,-82,-154,-14,]),'FUNCTION':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,70,72,74,76,84,86,102,104,105,106,108,109,110,111,122,125,129,131,132,133,134,135,137,147,148,161,162,164,172,192,193,195,198,200,210,211,212,213,214,219,223,230,231,234,240,241,242,243,247,256,260,261,262,263,264,265,266,267,268,269,270,280,281,285,286,287,292,294,295,301,302,303,308,311,318,326,328,329,334,338,339,340,341,346,347,364,365,367,368,369,370,371,377,385,386,395,396,397,399,400,402,405,],[-154,23,-3,23,-2,-4,-5,-6,-7,-8,-9,-10,-11,-73,-25,-74,-166,-167,-26,-27,-21,-22,-18,-168,-28,-23,-154,-90,-127,-154,-154,-84,-145,-146,-147,-113,-43,-31,-154,-37,-38,-39,-40,-41,-72,-49,-50,-110,-111,-115,-112,-175,-128,-130,-133,-135,-169,-170,-171,-172,-29,290,-24,-48,-154,-56,-154,-77,-80,-154,-114,-116,-139,-140,-141,-142,-143,-173,-174,-126,-129,-134,-144,-32,-33,290,-64,-65,-36,-46,-47,-154,-17,-51,-154,-15,-83,-34,-35,-63,-42,-16,-52,-55,-53,-76,-79,-69,-154,-54,-154,-154,-75,-78,-30,-12,-13,-81,-82,-154,-66,-67,-14,-68,]),'CONSTRUCTOR':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,70,72,74,76,84,86,102,104,105,106,108,109,110,111,122,125,129,131,132,133,134,135,137,147,148,161,162,164,172,192,193,195,198,200,210,211,212,213,214,219,223,230,231,234,240,241,242,243,247,256,260,261,262,263,264,265,266,267,268,269,270,280,281,285,286,287,292,294,295,301,302,303,308,311,318,326,328,329,334,338,339,340,341,346,347,364,365,367,368,369,370,371,377,385,386,395,396,397,399,400,402,405,],[-154,24,-3,24,-2,-4,-5,-6,-7,-8,-9,-10,-11,-73,-25,-74,-166,-167,-26,-27,-21,-22,-18,-168,-28,-23,-154,-90,-127,-154,-154,-84,-145,-146,-147,-113,-43,-31,-154,-37,-38,-39,-40,-41,-72,-49,-50,-110,-111,-115,-112,-175,-128,-130,-133,-135,-169,-170,-171,-172,-29,288,-24,-48,-154,-56,-154,-77,-80,-154,-114,-116,-139,-140,-141,-142,-143,-173,-174,-126,-129,-134,-144,-32,-33,288,-64,-65,-36,-46,-47,-154,-17,-51,-154,-15,-83,-34,-35,-63,-42,-16,-52,-55,-53,-76,-79,-69,-154,-54,-154,-154,-75,-78,-30,-12,-13,-81,-82,-154,-66,-67,-14,-68,]),'PROCEDURE':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,70,72,74,76,84,86,102,104,105,106,108,109,110,111,122,125,129,131,132,133,134,135,137,147,148,161,162,164,172,192,193,195,198,200,210,211,212,213,214,219,223,230,231,234,240,241,242,243,247,256,260,261,262,263,264,265,266,267,268,269,270,280,281,285,286,287,292,294,295,301,302,303,308,311,318,326,328,329,334,338,339,340,341,346,347,364,365,367,368,369,370,371,377,385,386,395,396,397,399,400,402,405,],[-154,25,-3,25,-2,-4,-5,-6,-7,31,-9,-10,-11,-73,-25,-74,-166,-167,-26,-27,-21,-22,-18,-168,-28,-23,-154,-90,-127,-154,-154,-84,-145,-146,-147,-113,-43,-31,-154,-37,-38,-39,-40,-41,-72,-49,-50,-110,-111,-115,-112,-175,-128,-130,-133,-135,-169,-170,-171,-172,-29,289,-24,-48,-154,-56,-154,-77,-80,-154,-114,-116,-139,-140,-141,-142,-143,-173,-174,-126,-129,-134,-144,-32,-33,289,-64,-65,-36,-46,-47,-154,-17,-51,-154,-15,-83,-34,-35,-63,-42,-16,-52,-55,-53,-76,-79,-69,-154,-54,-154,-154,-75,-78,-30,-12,-13,-81,-82,-154,-66,-67,-14,-68,]),'DESTRUCTOR':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,70,72,74,76,84,86,102,104,105,106,108,109,110,111,122,125,129,131,132,133,134,135,137,147,148,161,162,164,172,192,193,195,198,200,210,211,212,213,214,219,223,230,231,234,240,241,242,243,247,256,260,261,262,263,264,265,266,267,268,269,270,280,281,285,286,287,292,294,295,301,302,303,308,311,318,326,328,329,334,338,339,340,341,346,347,364,365,367,368,369,370,371,377,385,386,395,396,397,399,400,402,405,],[-154,26,-3,26,-2,-4,-5,-6,-7,-8,-9,-10,-11,-73,-25,-74,-166,-167,-26,-27,-21,-22,-18,-168,-28,-23,-154,-90,-127,-154,-154,-84,-145,-146,-147,-113,-43,-31,-154,-37,-38,-39,-40,-41,-72,-49,-50,-110,-111,-115,-112,-175,-128,-130,-133,-135,-169,-170,-171,-172,-29,291,-24,-48,-154,-56,-154,-77,-80,-154,-114,-116,-139,-140,-141,-142,-143,-173,-174,-126,-129,-134,-144,-32,-33,291,-64,-65,-36,-46,-47,-154,-17,-51,-154,-15,-83,-34,-35,-63,-42,-16,-52,-55,-53,-76,-79,-69,-154,-54,-154,-154,-75,-78,-30,-12,-13,-81,-82,-154,-66,-67,-14,-68,]),'BEGIN':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,28,30,34,35,37,38,40,41,70,72,74,76,84,86,88,176,177,206,209,210,211,212,213,214,223,231,240,241,242,243,301,302,308,311,316,317,338,346,347,365,368,369,370,371,373,374,375,385,386,395,396,397,402,],[-154,-154,-3,28,-2,-4,-5,-6,-7,-8,-9,-10,-11,-73,-25,28,-74,-166,-167,-26,-27,-21,-22,-18,-168,-28,-23,-154,-90,28,28,28,28,28,-169,-170,-171,-172,-29,-24,-154,-154,-77,-80,-154,-154,-17,-154,-15,28,28,-16,-76,-79,-154,-154,-154,-75,-78,28,28,28,-12,-13,-81,-82,-154,-14,]),'DOT':([8,27,43,44,45,46,59,63,86,108,111,115,116,159,160,164,235,247,256,],[29,-25,79,81,82,85,94,-113,-90,94,-113,94,-113,94,94,-115,-113,-114,-116,]),'READLN':([28,88,176,177,206,209,316,317,373,374,375,],[58,58,58,58,58,58,58,58,58,58,58,]),'WRITE':([28,88,176,177,206,209,316,317,373,374,375,],[60,60,60,60,60,60,60,60,60,60,60,]),'WRITELN':([28,88,176,177,206,209,316,317,373,374,375,],[61,61,61,61,61,61,61,61,61,61,61,]),'IF':([28,88,176,177,206,209,316,317,373,374,375,],[64,64,64,64,64,64,64,64,64,64,64,]),'WHILE':([28,88,176,177,206,209,316,317,373,374,375,],[65,65,65,65,65,65,65,65,65,65,65,]),'FOR':([28,88,176,177,206,209,316,317,373,374,375,],[66,66,66,66,66,66,66,66,66,66,66,]),'CASE':([28,88,102,104,105,106,108,109,110,111,122,125,128,131,132,133,134,135,137,147,148,161,162,164,172,176,177,192,193,195,198,200,206,209,218,230,234,247,256,260,261,262,263,264,265,266,267,268,269,270,280,281,292,294,295,303,316,317,318,326,328,334,339,340,341,367,373,374,375,377,],[67,67,-127,-154,-154,-84,-145,-146,-147,-113,-43,-31,-154,-37,-38,-39,-40,-41,-72,-49,-50,-110,-111,-115,-112,67,67,-175,-128,-130,-133,-135,67,67,283,-48,-56,-114,-116,-139,-140,-141,-142,-143,-173,-174,-126,-129,-134,-144,-32,-33,-36,-46,-47,-51,67,67,-83,-34,-35,-42,-52,-55,-53,-54,67,67,67,-30,]),'WITH':([28,88,176,177,206,209,316,317,373,374,375,],[68,68,68,68,68,68,68,68,68,68,68,]),'END':([28,47,48,49,50,51,52,53,54,55,56,57,58,63,86,87,88,89,102,104,105,106,108,109,110,111,122,125,128,129,131,132,133,134,135,137,147,148,158,161,162,164,171,172,176,192,193,195,198,200,206,209,218,219,230,234,244,245,246,247,248,252,255,256,258,260,261,262,263,264,265,266,267,268,269,270,272,274,275,277,280,281,282,284,285,286,287,292,294,295,303,316,317,318,321,323,326,328,329,334,339,340,341,350,351,354,355,357,364,367,373,374,375,377,387,388,389,390,399,400,403,405,],[-154,86,-154,-94,-95,-96,-97,-98,-99,-100,-101,-102,-155,-121,-90,-91,-154,-93,-127,-154,-154,-84,-145,-146,-147,-113,-43,-31,-154,-154,-37,-38,-39,-40,-41,-72,-49,-50,-154,-110,-111,-115,-165,-112,-154,-175,-128,-130,-133,-135,-154,-154,-154,-154,-48,-56,-92,-156,-157,-114,-158,-159,-120,-116,-105,-139,-140,-141,-142,-143,-173,-174,-126,-129,-134,-144,-119,321,-60,-103,-32,-33,326,-58,328,-64,-65,-36,-46,-47,-51,-154,-154,-83,-71,-154,-34,-35,-63,-42,-52,-55,-53,-104,-107,-70,-59,-62,-69,-54,-154,-154,-154,-30,-106,-108,-109,-61,-66,-67,-57,-68,]),'COMMA':([32,33,42,102,104,105,106,108,109,110,111,117,142,149,164,166,168,169,170,174,175,192,193,195,198,200,220,227,236,247,256,260,261,262,263,264,265,266,267,268,269,270,278,279,294,295,312,313,314,315,318,359,372,],[71,-19,71,-127,-154,-154,-84,-145,-146,-147,-113,-20,71,71,-115,250,253,-160,-162,257,-117,-175,-128,-130,-133,-135,71,71,71,-114,-116,-139,-140,-141,-142,-143,-173,-174,-126,-129,-134,-144,325,-45,-46,-47,250,-161,-163,-118,-83,-44,-164,]),'COLON':([33,42,102,104,105,106,108,109,110,111,117,142,149,164,170,192,193,195,198,200,224,227,236,247,256,260,261,262,263,264,265,266,267,268,269,270,276,314,318,327,337,394,],[-19,77,-127,-154,-154,-84,-145,-146,-147,-113,-20,226,232,-115,254,-175,-128,-130,-133,-135,296,299,305,-114,-116,-139,-140,-141,-142,-143,-173,-174,-126,-129,-134,-144,323,349,-83,360,366,401,]),'LPAREN':([33,43,44,45,58,60,61,63,64,65,67,69,75,77,92,93,95,96,98,99,100,103,107,111,117,144,149,151,152,178,179,180,181,182,183,184,185,186,187,188,189,190,191,194,196,197,199,201,202,203,205,207,216,217,226,232,250,253,254,257,296,299,305,319,320,323,330,331,332,349,358,360,366,401,],[-19,78,80,83,90,95,96,99,107,107,107,83,130,130,107,107,107,107,107,107,107,107,107,205,-20,228,233,237,238,107,107,107,107,107,107,107,107,-148,-149,-150,-151,-152,-153,107,-131,-132,107,-136,-137,-138,107,107,130,130,130,130,107,107,107,107,130,130,130,107,107,356,361,362,363,107,130,130,130,130,]),'RPAREN':([33,78,80,83,95,99,102,104,105,106,108,109,110,111,116,117,122,125,131,132,133,134,135,137,139,140,141,145,147,148,153,159,161,162,164,165,166,167,168,169,170,172,173,192,193,195,198,200,204,205,220,228,230,234,237,238,247,249,251,256,260,261,262,263,264,265,266,267,268,269,270,271,280,281,292,294,295,297,298,300,303,304,306,307,312,313,314,318,326,328,334,336,339,340,341,348,356,361,362,363,367,372,376,377,379,380,381,],[-19,-154,146,154,-154,-154,-127,-154,-154,-84,-145,-146,-147,-113,-113,-20,-43,-31,-37,-38,-39,-40,-41,-72,224,-85,-87,229,-49,-50,239,245,-110,-111,-115,248,-154,-125,252,-160,-162,-112,255,-175,-128,-130,-133,-135,270,-154,292,-154,-48,-56,-154,-154,-114,-122,-124,-116,-139,-140,-141,-142,-143,-173,-174,-126,-129,-134,-144,318,-32,-33,-36,-46,-47,-86,-88,337,-51,340,342,343,-154,-161,-163,-83,-34,-35,-42,-89,-52,-55,-53,-123,-154,-154,-154,-154,-54,-164,390,-30,392,393,394,]),'EQUAL':([36,39,102,104,105,106,108,109,110,111,164,193,195,198,200,247,256,268,269,270,318,],[73,75,190,-154,-154,-84,-145,-146,-147,-113,-115,-128,-130,-133,-135,-114,-116,-129,-134,-144,-83,]),'ELSE':([49,50,51,52,53,54,55,56,57,58,63,86,102,104,105,106,108,109,110,111,161,162,164,171,172,176,192,193,195,198,200,206,209,245,246,247,248,252,255,256,258,260,261,262,263,264,265,266,267,268,269,270,272,277,316,317,318,321,350,351,354,373,374,375,387,388,389,],[-94,-95,-96,-97,-98,-99,-100,-101,-102,-155,-121,-90,-127,-154,-154,-84,-145,-146,-147,-113,-110,-111,-115,-165,-112,-154,-175,-128,-130,-133,-135,-154,-154,-156,-157,-114,-158,-159,-120,-116,316,-139,-140,-141,-142,-143,-173,-174,-126,-129,-134,-144,-119,-103,-154,-154,-83,-71,-104,373,-70,-154,-154,-154,-106,-108,-109,]),'THEN':([49,50,51,52,53,54,55,56,57,58,63,86,101,102,104,105,106,108,109,110,111,161,162,164,171,172,176,177,192,193,195,198,200,206,209,245,246,247,248,252,255,256,258,259,260,261,262,263,264,265,266,267,268,269,270,272,277,316,317,318,321,350,351,354,373,374,375,387,388,389,],[-94,-95,-96,-97,-98,-99,-100,-101,-102,-155,-121,-90,176,-127,-154,-154,-84,-145,-146,-147,-113,-110,-111,-115,-165,-112,-154,-154,-175,-128,-130,-133,-135,-154,-154,-156,-157,-114,-158,-159,-120,-116,-105,317,-139,-140,-141,-142,-143,-173,-174,-126,-129,-134,-144,-119,-103,-154,-154,-83,-71,-104,-107,-70,-154,-154,-154,-106,-108,-109,]),'LBRACKET':([58,59,63,108,111,115,116,124,135,159,160,164,235,247,256,],[91,93,100,93,100,93,100,215,221,93,93,-115,100,-114,-116,]),'COLON_EQUAL':([59,63,113,164,235,247,256,],[92,98,207,-115,98,-114,-116,]),'NOT':([64,65,67,92,93,95,96,98,99,100,103,107,178,179,180,181,182,183,184,205,207,250,253,254,257,319,320,349,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'NUMBER':([64,65,67,73,75,77,92,93,95,96,98,99,100,103,107,178,179,180,181,182,183,184,185,186,187,188,189,190,191,194,196,197,199,201,202,203,205,207,208,215,216,217,221,222,226,232,250,253,254,257,296,299,305,319,320,322,325,349,358,360,366,391,401,403,],[109,109,109,119,136,136,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,-148,-149,-150,-151,-152,-153,109,-131,-132,109,-136,-137,-138,109,109,276,136,136,136,293,294,136,136,109,109,109,109,136,136,136,109,109,276,136,109,136,136,136,276,136,276,]),'STRING_LITERAL':([64,65,67,73,92,93,95,96,98,99,100,103,107,178,179,180,181,182,183,184,185,186,187,188,189,190,191,194,196,197,199,201,202,203,205,207,233,250,253,254,257,319,320,349,],[110,110,110,120,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,-148,-149,-150,-151,-152,-153,110,-131,-132,110,-136,-137,-138,110,110,304,110,110,110,110,110,110,110,]),'CHARACTER_LITERAL':([73,],[118,]),'BOOLEAN_LITERAL':([73,75,77,92,216,217,226,232,296,299,305,358,360,366,401,],[121,131,131,162,131,131,131,131,131,131,131,131,131,131,131,]),'ARRAY':([75,77,216,217,226,232,296,299,305,358,360,366,401,],[124,124,124,124,124,124,124,124,124,124,124,124,124,]),'FILE':([75,77,216,217,226,232,296,299,305,358,360,366,401,],[126,126,126,126,126,126,126,126,126,126,126,126,126,]),'SET':([75,77,216,217,226,232,296,299,305,358,360,366,401,],[127,127,127,127,127,127,127,127,127,127,127,127,127,]),'RECORD':([75,77,216,217,226,232,296,299,305,358,360,366,401,],[128,128,128,128,128,128,128,128,128,128,128,128,128,]),'OBJECT':([75,77,216,217,226,232,296,299,305,358,360,366,401,],[129,129,129,129,129,129,129,129,129,129,129,129,129,]),'INTEGER':([75,77,216,217,226,232,296,299,305,358,360,366,401,],[132,132,132,132,132,132,132,132,132,132,132,132,132,]),'BYTE':([75,77,216,217,226,232,296,299,305,358,360,366,401,],[133,133,133,133,133,133,133,133,133,133,133,133,133,]),'CHAR':([75,77,216,217,226,232,296,299,305,358,360,366,401,],[134,134,134,134,134,134,134,134,134,134,134,134,134,]),'STRING':([75,77,216,217,226,232,296,299,305,358,360,366,401,],[135,135,135,135,135,135,135,135,135,135,135,135,135,]),'LONGINT':([75,77,216,217,226,232,296,299,305,358,360,366,401,],[137,137,137,137,137,137,137,137,137,137,137,137,137,]),'FORWARD':([84,240,308,365,],[156,310,345,383,]),'IN':([101,102,104,105,106,108,109,110,111,164,192,193,195,198,200,247,256,260,261,262,263,264,265,266,267,268,269,270,318,],[177,-127,-154,-154,-84,-145,-146,-147,-113,-115,-175,-128,-130,-133,-135,-114,-116,-139,-140,-141,-142,-143,-173,-174,-126,-129,-134,-144,-83,]),'PLUS':([101,102,104,105,106,108,109,110,111,112,114,161,163,164,166,170,172,175,192,193,195,198,200,204,247,256,260,261,262,263,264,265,266,267,268,269,270,273,312,314,315,318,352,353,372,],[178,-127,196,-154,-84,-145,-146,-147,-113,178,178,178,178,-115,178,178,178,178,178,-128,-130,-133,-135,178,-114,-116,178,178,178,178,178,178,178,-126,-129,-134,-144,178,178,178,178,-83,178,178,178,]),'MINUS':([101,102,104,105,106,108,109,110,111,112,114,161,163,164,166,170,172,175,192,193,195,198,200,204,247,256,260,261,262,263,264,265,266,267,268,269,270,273,312,314,315,318,352,353,372,],[179,-127,197,-154,-84,-145,-146,-147,-113,179,179,179,179,-115,179,179,179,179,179,-128,-130,-133,-135,179,-114,-116,179,179,179,179,179,179,179,-126,-129,-134,-144,179,179,179,179,-83,179,179,179,]),'TIMES':([101,102,104,105,106,108,109,110,111,112,114,161,163,164,166,170,172,175,192,193,195,198,200,204,247,256,260,261,262,263,264,265,266,267,268,269,270,273,312,314,315,318,352,353,372,],[180,-127,-154,201,-84,-145,-146,-147,-113,180,180,180,180,-115,180,180,180,180,180,-128,-130,-133,-135,180,-114,-116,180,180,180,180,180,180,180,-126,-129,-134,-144,180,180,180,180,-83,180,180,180,]),'DIVIDE':([101,102,104,105,106,108,109,110,111,112,114,161,163,164,166,170,172,175,192,193,195,198,200,204,247,256,260,261,262,263,264,265,266,267,268,269,270,273,312,314,315,318,352,353,372,],[181,-127,-154,202,-84,-145,-146,-147,-113,181,181,181,181,-115,181,181,181,181,181,-128,-130,-133,-135,181,-114,-116,181,181,181,181,181,181,181,-126,-129,-134,-144,181,181,181,181,-83,181,181,181,]),'MOD':([101,102,104,105,106,108,109,110,111,112,114,161,163,164,166,170,172,175,192,193,195,198,200,204,247,256,260,261,262,263,264,265,266,267,268,269,270,273,312,314,315,318,352,353,372,],[182,-127,-154,-154,-84,-145,-146,-147,-113,182,182,182,182,-115,182,182,182,182,182,-128,-130,-133,-135,182,-114,-116,182,182,182,182,182,182,182,-126,-129,-134,-144,182,182,182,182,-83,182,182,182,]),'AND':([101,102,104,105,106,108,109,110,111,112,114,161,163,164,166,170,172,175,192,193,195,198,200,204,247,256,260,261,262,263,264,265,266,267,268,269,270,273,312,314,315,318,352,353,372,],[183,-127,-154,-154,-84,-145,-146,-147,-113,183,183,183,183,-115,183,183,183,183,183,-128,-130,-133,-135,183,-114,-116,183,183,183,183,183,183,183,-126,-129,-134,-144,183,183,183,183,-83,183,183,183,]),'OR':([101,102,104,105,106,108,109,110,111,112,114,161,163,164,166,170,172,175,192,193,195,198,200,204,247,256,260,261,262,263,264,265,266,267,268,269,270,273,312,314,315,318,352,353,372,],[184,-127,-154,-154,-84,-145,-146,-147,-113,184,184,184,184,-115,184,184,184,184,184,-128,-130,-133,-135,184,-114,-116,184,184,184,184,184,184,184,-126,-129,-134,-144,184,184,184,184,-83,184,184,184,]),'DO':([102,104,105,106,108,109,110,111,112,115,116,164,192,193,195,198,200,247,256,260,261,262,263,264,265,266,267,268,269,270,318,352,353,],[-127,-154,-154,-84,-145,-146,-147,-113,206,209,-113,-115,-175,-128,-130,-133,-135,-114,-116,-139,-140,-141,-142,-143,-173,-174,-126,-129,-134,-144,-83,374,375,]),'OF':([102,104,105,106,108,109,110,111,114,122,125,126,127,131,132,133,134,135,137,164,192,193,195,198,200,247,256,260,261,262,263,264,265,266,267,268,269,270,280,281,292,294,295,318,324,326,328,334,377,378,],[-127,-154,-154,-84,-145,-146,-147,-113,208,-43,-31,216,217,-37,-38,-39,-40,-41,-72,-115,-175,-128,-130,-133,-135,-114,-116,-139,-140,-141,-142,-143,-173,-174,-126,-129,-134,-144,-32,-33,-36,-46,-47,-83,358,-34,-35,-42,-30,391,]),'RBRACKET':([102,104,105,106,108,109,110,111,116,160,163,164,174,175,192,193,195,198,200,247,256,260,261,262,263,264,265,266,267,268,269,270,278,279,293,294,295,315,318,359,],[-127,-154,-154,-84,-145,-146,-147,-113,-113,246,247,-115,256,-117,-175,-128,-130,-133,-135,-114,-116,-139,-140,-141,-142,-143,-173,-174,-126,-129,-134,-144,324,-45,334,-46,-47,-118,-83,-44,]),'TO':([102,104,105,106,108,109,110,111,164,192,193,195,198,200,247,256,260,261,262,263,264,265,266,267,268,269,270,273,318,],[-127,-154,-154,-84,-145,-146,-147,-113,-115,-175,-128,-130,-133,-135,-114,-116,-139,-140,-141,-142,-143,-173,-174,-126,-129,-134,-144,319,-83,]),'DOWNTO':([102,104,105,106,108,109,110,111,164,192,193,195,198,200,247,256,260,261,262,263,264,265,266,267,268,269,270,273,318,],[-127,-154,-154,-84,-145,-146,-147,-113,-115,-175,-128,-130,-133,-135,-114,-116,-139,-140,-141,-142,-143,-173,-174,-126,-129,-134,-144,320,-83,]),'LESS':([102,104,105,106,108,109,110,111,164,193,195,198,200,247,256,268,269,270,318,],[186,-154,-154,-84,-145,-146,-147,-113,-115,-128,-130,-133,-135,-114,-116,-129,-134,-144,-83,]),'LESS_EQUAL':([102,104,105,106,108,109,110,111,164,193,195,198,200,247,256,268,269,270,318,],[187,-154,-154,-84,-145,-146,-147,-113,-115,-128,-130,-133,-135,-114,-116,-129,-134,-144,-83,]),'GREAT':([102,104,105,106,108,109,110,111,164,193,195,198,200,247,256,268,269,270,318,],[188,-154,-154,-84,-145,-146,-147,-113,-115,-128,-130,-133,-135,-114,-116,-129,-134,-144,-83,]),'GREAT_EQUAL':([102,104,105,106,108,109,110,111,164,193,195,198,200,247,256,268,269,270,318,],[189,-154,-154,-84,-145,-146,-147,-113,-115,-128,-130,-133,-135,-114,-116,-129,-134,-144,-83,]),'DIFFERENT':([102,104,105,106,108,109,110,111,164,193,195,198,200,247,256,268,269,270,318,],[191,-154,-154,-84,-145,-146,-147,-113,-115,-128,-130,-133,-135,-114,-116,-129,-134,-144,-83,]),'DIV':([105,106,108,109,110,111,164,247,256,270,318,],[203,-84,-145,-146,-147,-113,-115,-114,-116,-144,-83,]),'DOTDOT':([136,],[222,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_sections':([4,5,84,231,240,243,301,308,365,368,369,397,],[5,7,7,7,7,7,7,7,7,7,7,7,]),'empty':([4,5,28,48,78,80,83,84,88,95,99,104,105,128,129,158,166,176,177,205,206,209,218,219,228,231,237,238,240,243,301,308,312,316,317,323,356,361,362,363,365,368,369,373,374,375,397,],[6,6,57,89,141,148,148,6,57,167,167,195,200,148,148,89,251,57,57,167,57,57,284,287,141,6,141,141,6,6,6,6,251,57,57,148,148,148,148,148,6,6,6,57,57,57,6,]),'block':([5,84,231,240,243,301,308,365,368,369,397,],[8,155,302,309,311,338,344,382,385,386,402,]),'declaration_section':([5,7,],[9,9,]),'uses_opt':([5,7,],[10,10,]),'constant_declaration':([5,7,],[11,11,]),'type_declaration':([5,7,],[12,12,]),'var_declaration':([5,7,],[13,13,]),'procedure_declarations':([5,7,],[14,14,]),'function_declaration':([5,7,],[15,15,]),'constructor_declaration':([5,7,],[16,16,]),'method_declaration':([5,7,],[17,17,]),'procedure_declaration':([5,7,14,],[22,22,30,]),'compound_statement':([7,28,88,176,177,206,209,316,317,373,374,375,],[27,53,53,53,53,53,53,53,53,53,53,53,]),'id_list':([18,21,40,78,80,83,128,129,130,143,145,150,153,218,219,225,228,237,238,323,356,357,361,362,363,376,379,380,381,],[32,42,42,142,149,149,149,149,220,227,149,236,149,149,149,142,142,142,142,149,149,149,149,149,149,149,149,149,149,]),'constant_list':([19,],[34,]),'constant':([19,34,],[35,72,]),'type_list':([20,],[37,]),'type_definition':([20,37,],[38,74,]),'declaration_list':([21,],[40,]),'declaration':([21,40,],[41,76,]),'statement_list':([28,],[47,]),'statement':([28,88,176,177,206,209,316,317,373,374,375,],[48,158,258,259,272,277,350,351,387,388,389,]),'if_statement':([28,88,176,177,206,209,316,317,373,374,375,],[49,49,49,49,49,49,49,49,49,49,49,]),'assignment_statement':([28,88,149,176,177,206,209,316,317,373,374,375,],[50,50,234,50,50,50,50,50,50,50,50,50,]),'while_statement':([28,88,176,177,206,209,316,317,373,374,375,],[51,51,51,51,51,51,51,51,51,51,51,]),'procedure_call':([28,88,176,177,206,209,316,317,373,374,375,],[52,52,52,52,52,52,52,52,52,52,52,]),'for_statement':([28,88,176,177,206,209,316,317,373,374,375,],[54,54,54,54,54,54,54,54,54,54,54,]),'case_statement':([28,88,176,177,206,209,316,317,373,374,375,],[55,55,55,55,55,55,55,55,55,55,55,]),'with_statement':([28,88,176,177,206,209,316,317,373,374,375,],[56,56,56,56,56,56,56,56,56,56,56,]),'variable':([28,64,65,67,68,88,90,91,92,93,95,96,98,99,100,103,107,149,176,177,178,179,180,181,182,183,184,185,194,199,205,206,207,209,250,253,254,257,316,317,319,320,349,373,374,375,],[59,108,108,108,115,59,159,160,108,108,108,108,108,108,108,108,108,59,59,59,108,108,108,108,108,108,108,108,108,108,108,59,108,59,108,108,108,108,59,59,108,108,108,59,59,59,]),'statement_list_tail':([48,158,],[87,244,]),'expression':([64,65,67,92,93,95,96,98,99,100,103,107,178,179,180,181,182,183,184,205,207,250,253,254,257,319,320,349,],[101,112,114,161,163,166,170,172,166,175,192,204,260,261,262,263,264,265,266,166,273,312,170,314,315,352,353,372,]),'simple_expression':([64,65,67,92,93,95,96,98,99,100,103,107,178,179,180,181,182,183,184,185,205,207,250,253,254,257,319,320,349,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,267,102,102,102,102,102,102,102,102,102,]),'term':([64,65,67,92,93,95,96,98,99,100,103,107,178,179,180,181,182,183,184,185,194,205,207,250,253,254,257,319,320,349,],[104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,268,104,104,104,104,104,104,104,104,104,]),'factor':([64,65,67,92,93,95,96,98,99,100,103,107,178,179,180,181,182,183,184,185,194,199,205,207,250,253,254,257,319,320,349,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,269,105,105,105,105,105,105,105,105,105,]),'function_call':([64,65,67,92,93,95,96,98,99,100,103,107,178,179,180,181,182,183,184,185,194,199,205,207,250,253,254,257,319,320,349,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'type_specifier':([75,77,216,217,226,232,296,299,305,358,360,366,401,],[123,138,280,281,298,303,335,336,341,377,378,384,404,]),'subrange':([75,77,215,216,217,226,232,296,299,305,325,358,360,366,401,],[125,125,279,125,125,125,125,125,125,125,359,125,125,125,125,]),'parameter_list':([78,228,237,238,],[139,300,306,307,]),'parameter':([78,225,228,237,238,],[140,297,140,140,140,]),'field_list':([80,83,128,129,323,356,361,362,363,],[145,153,218,219,357,376,379,380,381,]),'field':([80,83,128,129,145,153,218,219,323,356,357,361,362,363,376,379,380,381,],[147,147,147,147,230,230,230,230,147,147,230,147,147,147,230,230,230,230,]),'expression_list':([95,99,205,],[165,173,271,]),'write_arguments':([96,],[168,]),'write_argument':([96,253,],[169,313,]),'index_list':([100,],[174,]),'relop':([102,],[185,]),'simple_expression_tail':([104,],[193,]),'addop':([104,],[194,]),'term_tail':([105,],[198,]),'mulop':([105,],[199,]),'expression_list_tail':([166,312,],[249,348,]),'case_list':([208,391,],[274,398,]),'case_element':([208,322,391,403,],[275,355,275,355,]),'type_expression':([215,],[278,]),'case_part':([218,],[282,]),'method_list':([219,],[285,]),'method':([219,285,],[286,329,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON declaration_sections block DOT','program',6,'p_program','Parser_MiniPascal.py',18),
  ('declaration_sections -> declaration_sections declaration_section','declaration_sections',2,'p_declaration_sections','Parser_MiniPascal.py',24),
  ('declaration_sections -> empty','declaration_sections',1,'p_declaration_sections','Parser_MiniPascal.py',25),
  ('declaration_section -> uses_opt','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',29),
  ('declaration_section -> constant_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',30),
  ('declaration_section -> type_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',31),
  ('declaration_section -> var_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',32),
  ('declaration_section -> procedure_declarations','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',33),
  ('declaration_section -> function_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',34),
  ('declaration_section -> constructor_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',35),
  ('declaration_section -> method_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',36),
  ('method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block','method_declaration',9,'p_method_declaration','Parser_MiniPascal.py',40),
  ('method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block','method_declaration',9,'p_method_declaration','Parser_MiniPascal.py',41),
  ('method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block','method_declaration',11,'p_method_declaration','Parser_MiniPascal.py',42),
  ('method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block','method_declaration',6,'p_method_declaration','Parser_MiniPascal.py',43),
  ('constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block','constructor_declaration',7,'p_constructor_declaration','Parser_MiniPascal.py',47),
  ('constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block','constructor_declaration',6,'p_constructor_declaration','Parser_MiniPascal.py',48),
  ('uses_opt -> USES id_list SEMICOLON','uses_opt',3,'p_uses_opt','Parser_MiniPascal.py',52),
  ('id_list -> ID','id_list',1,'p_id_list','Parser_MiniPascal.py',57),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','Parser_MiniPascal.py',58),
  ('var_declaration -> VAR declaration_list','var_declaration',2,'p_var_declaration','Parser_MiniPascal.py',62),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser_MiniPascal.py',66),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','Parser_MiniPascal.py',67),
  ('declaration -> id_list COLON type_specifier SEMICOLON','declaration',4,'p_declaration','Parser_MiniPascal.py',71),
  ('block -> declaration_sections compound_statement','block',2,'p_block','Parser_MiniPascal.py',76),
  ('type_declaration -> TYPE type_list','type_declaration',2,'p_type_declaration','Parser_MiniPascal.py',82),
  ('type_list -> type_definition','type_list',1,'p_type_list','Parser_MiniPascal.py',86),
  ('type_list -> type_list type_definition','type_list',2,'p_type_list','Parser_MiniPascal.py',87),
  ('type_definition -> ID EQUAL type_specifier SEMICOLON','type_definition',4,'p_type_definition','Parser_MiniPascal.py',95),
  ('type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier','type_specifier',6,'p_type_specifier','Parser_MiniPascal.py',99),
  ('type_specifier -> subrange','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',100),
  ('type_specifier -> FILE OF type_specifier','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',101),
  ('type_specifier -> SET OF type_specifier','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',102),
  ('type_specifier -> RECORD field_list case_part END','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',103),
  ('type_specifier -> OBJECT field_list method_list END','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',104),
  ('type_specifier -> LPAREN id_list RPAREN','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',105),
  ('type_specifier -> BOOLEAN_LITERAL','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',106),
  ('type_specifier -> INTEGER','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',107),
  ('type_specifier -> BYTE','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',108),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',109),
  ('type_specifier -> STRING','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',110),
  ('type_specifier -> STRING LBRACKET NUMBER RBRACKET','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',111),
  ('type_specifier -> ID','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',112),
  ('type_expression -> type_expression COMMA subrange','type_expression',3,'p_type_expression','Parser_MiniPascal.py',116),
  ('type_expression -> subrange','type_expression',1,'p_type_expression','Parser_MiniPascal.py',117),
  ('subrange -> NUMBER DOTDOT NUMBER','subrange',3,'p_subrange','Parser_MiniPascal.py',121),
  ('subrange -> NUMBER DOTDOT ID','subrange',3,'p_subrange','Parser_MiniPascal.py',122),
  ('field_list -> field_list field','field_list',2,'p_field_list','Parser_MiniPascal.py',128),
  ('field_list -> field','field_list',1,'p_field_list','Parser_MiniPascal.py',129),
  ('field_list -> empty','field_list',1,'p_field_list','Parser_MiniPascal.py',130),
  ('field -> id_list COLON type_specifier','field',3,'p_field','Parser_MiniPascal.py',134),
  ('field -> id_list COLON type_specifier SEMICOLON','field',4,'p_field','Parser_MiniPascal.py',135),
  ('field -> VAR id_list COLON type_specifier','field',4,'p_field','Parser_MiniPascal.py',136),
  ('field -> VAR id_list COLON type_specifier SEMICOLON','field',5,'p_field','Parser_MiniPascal.py',137),
  ('field -> id_list LPAREN STRING_LITERAL RPAREN','field',4,'p_field','Parser_MiniPascal.py',138),
  ('field -> id_list assignment_statement','field',2,'p_field','Parser_MiniPascal.py',139),
  ('case_part -> CASE ID COLON type_specifier OF case_list SEMICOLON','case_part',7,'p_case_part','Parser_MiniPascal.py',143),
  ('case_part -> empty','case_part',1,'p_case_part','Parser_MiniPascal.py',144),
  ('case_list -> case_list SEMICOLON case_element','case_list',3,'p_case_list','Parser_MiniPascal.py',148),
  ('case_list -> case_element','case_list',1,'p_case_list','Parser_MiniPascal.py',149),
  ('case_element -> NUMBER COLON LPAREN field_list RPAREN','case_element',5,'p_case_element','Parser_MiniPascal.py',153),
  ('case_element -> NUMBER COLON field_list','case_element',3,'p_case_element','Parser_MiniPascal.py',154),
  ('method_list -> method_list method','method_list',2,'p_method_list','Parser_MiniPascal.py',161),
  ('method_list -> method','method_list',1,'p_method_list','Parser_MiniPascal.py',162),
  ('method_list -> empty','method_list',1,'p_method_list','Parser_MiniPascal.py',163),
  ('method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON','method',6,'p_method','Parser_MiniPascal.py',167),
  ('method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON','method',6,'p_method','Parser_MiniPascal.py',168),
  ('method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON','method',8,'p_method','Parser_MiniPascal.py',169),
  ('method -> DESTRUCTOR ID SEMICOLON','method',3,'p_method','Parser_MiniPascal.py',170),
  ('case_statement -> CASE expression OF case_list END SEMICOLON','case_statement',6,'p_case_statement','Parser_MiniPascal.py',176),
  ('case_statement -> CASE expression OF case_list END','case_statement',5,'p_case_statement','Parser_MiniPascal.py',177),
  ('type_specifier -> LONGINT','type_specifier',1,'p_type_specifier_longint','Parser_MiniPascal.py',181),
  ('procedure_declarations -> procedure_declaration','procedure_declarations',1,'p_procedure_declarations','Parser_MiniPascal.py',186),
  ('procedure_declarations -> procedure_declarations procedure_declaration','procedure_declarations',2,'p_procedure_declarations','Parser_MiniPascal.py',187),
  ('procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON block SEMICOLON','procedure_declaration',8,'p_procedure_declaration','Parser_MiniPascal.py',194),
  ('procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON','procedure_declaration',7,'p_procedure_declaration','Parser_MiniPascal.py',195),
  ('procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON','procedure_declaration',5,'p_procedure_declaration','Parser_MiniPascal.py',196),
  ('procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON','procedure_declaration',8,'p_procedure_declaration','Parser_MiniPascal.py',197),
  ('procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON','procedure_declaration',7,'p_procedure_declaration','Parser_MiniPascal.py',198),
  ('procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON','procedure_declaration',5,'p_procedure_declaration','Parser_MiniPascal.py',199),
  ('function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON','function_declaration',10,'p_function_declaration','Parser_MiniPascal.py',207),
  ('function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON','function_declaration',10,'p_function_declaration','Parser_MiniPascal.py',208),
  ('function_call -> ID LPAREN expression_list RPAREN','function_call',4,'p_function_call','Parser_MiniPascal.py',214),
  ('factor -> function_call','factor',1,'p_factor_function_call','Parser_MiniPascal.py',219),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','Parser_MiniPascal.py',224),
  ('parameter_list -> parameter_list SEMICOLON parameter','parameter_list',3,'p_parameter_list','Parser_MiniPascal.py',225),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','Parser_MiniPascal.py',226),
  ('parameter -> id_list COLON type_specifier','parameter',3,'p_parameter','Parser_MiniPascal.py',230),
  ('parameter -> VAR id_list COLON type_specifier','parameter',4,'p_parameter','Parser_MiniPascal.py',231),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','Parser_MiniPascal.py',236),
  ('statement_list -> statement statement_list_tail','statement_list',2,'p_statement_list_multi','Parser_MiniPascal.py',241),
  ('statement_list_tail -> SEMICOLON statement statement_list_tail','statement_list_tail',3,'p_statement_list_tail','Parser_MiniPascal.py',245),
  ('statement_list_tail -> empty','statement_list_tail',1,'p_statement_list_tail','Parser_MiniPascal.py',246),
  ('statement -> if_statement','statement',1,'p_statement','Parser_MiniPascal.py',251),
  ('statement -> assignment_statement','statement',1,'p_statement','Parser_MiniPascal.py',252),
  ('statement -> while_statement','statement',1,'p_statement','Parser_MiniPascal.py',253),
  ('statement -> procedure_call','statement',1,'p_statement','Parser_MiniPascal.py',254),
  ('statement -> compound_statement','statement',1,'p_statement','Parser_MiniPascal.py',255),
  ('statement -> for_statement','statement',1,'p_statement','Parser_MiniPascal.py',256),
  ('statement -> case_statement','statement',1,'p_statement','Parser_MiniPascal.py',257),
  ('statement -> with_statement','statement',1,'p_statement','Parser_MiniPascal.py',258),
  ('statement -> empty','statement',1,'p_statement','Parser_MiniPascal.py',259),
  ('with_statement -> WITH variable DO statement','with_statement',4,'p_with_statement','Parser_MiniPascal.py',263),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_if_statement','Parser_MiniPascal.py',267),
  ('if_statement -> IF expression THEN statement','if_statement',4,'p_if_statement','Parser_MiniPascal.py',268),
  ('if_statement -> IF expression IN statement THEN statement ELSE statement','if_statement',8,'p_if_statement','Parser_MiniPascal.py',269),
  ('if_statement -> IF expression IN statement THEN statement','if_statement',6,'p_if_statement','Parser_MiniPascal.py',270),
  ('for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement','for_statement',8,'p_for_statement','Parser_MiniPascal.py',275),
  ('for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement','for_statement',8,'p_for_statement','Parser_MiniPascal.py',276),
  ('assignment_statement -> variable COLON_EQUAL expression','assignment_statement',3,'p_assignment_statement','Parser_MiniPascal.py',281),
  ('assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL','assignment_statement',3,'p_assignment_statement','Parser_MiniPascal.py',282),
  ('assignment_statement -> ID COLON_EQUAL expression','assignment_statement',3,'p_assignment_statement','Parser_MiniPascal.py',283),
  ('variable -> ID','variable',1,'p_variable_simple','Parser_MiniPascal.py',288),
  ('variable -> variable LBRACKET expression RBRACKET','variable',4,'p_variable_simple','Parser_MiniPascal.py',289),
  ('variable -> variable DOT ID','variable',3,'p_variable_simple','Parser_MiniPascal.py',290),
  ('variable -> ID LBRACKET index_list RBRACKET','variable',4,'p_variable_index','Parser_MiniPascal.py',294),
  ('index_list -> expression','index_list',1,'p_index_list','Parser_MiniPascal.py',298),
  ('index_list -> index_list COMMA expression','index_list',3,'p_index_list','Parser_MiniPascal.py',299),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','Parser_MiniPascal.py',304),
  ('procedure_call -> ID LPAREN expression_list RPAREN','procedure_call',4,'p_procedure_call','Parser_MiniPascal.py',309),
  ('procedure_call -> ID','procedure_call',1,'p_procedure_call','Parser_MiniPascal.py',310),
  ('expression_list -> expression expression_list_tail','expression_list',2,'p_expression_list_multi','Parser_MiniPascal.py',315),
  ('expression_list_tail -> COMMA expression expression_list_tail','expression_list_tail',3,'p_expression_list_tail','Parser_MiniPascal.py',319),
  ('expression_list_tail -> empty','expression_list_tail',1,'p_expression_list_tail','Parser_MiniPascal.py',320),
  ('expression_list -> empty','expression_list',1,'p_expression_list_empty','Parser_MiniPascal.py',324),
  ('expression -> simple_expression relop simple_expression','expression',3,'p_expression','Parser_MiniPascal.py',329),
  ('expression -> simple_expression','expression',1,'p_expression','Parser_MiniPascal.py',330),
  ('simple_expression -> term simple_expression_tail','simple_expression',2,'p_simple_expression','Parser_MiniPascal.py',335),
  ('simple_expression_tail -> addop term','simple_expression_tail',2,'p_simple_expression_tail','Parser_MiniPascal.py',339),
  ('simple_expression_tail -> empty','simple_expression_tail',1,'p_simple_expression_tail','Parser_MiniPascal.py',340),
  ('addop -> PLUS','addop',1,'p_addop','Parser_MiniPascal.py',344),
  ('addop -> MINUS','addop',1,'p_addop','Parser_MiniPascal.py',345),
  ('term -> factor term_tail','term',2,'p_term','Parser_MiniPascal.py',350),
  ('term_tail -> mulop factor','term_tail',2,'p_term_tail','Parser_MiniPascal.py',354),
  ('term_tail -> empty','term_tail',1,'p_term_tail','Parser_MiniPascal.py',355),
  ('mulop -> TIMES','mulop',1,'p_mulop','Parser_MiniPascal.py',359),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','Parser_MiniPascal.py',360),
  ('mulop -> DIV','mulop',1,'p_mulop','Parser_MiniPascal.py',361),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',366),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',367),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',368),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',369),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',370),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','Parser_MiniPascal.py',375),
  ('factor -> variable','factor',1,'p_factor_variable','Parser_MiniPascal.py',379),
  ('factor -> NUMBER','factor',1,'p_factor_number','Parser_MiniPascal.py',383),
  ('factor -> STRING_LITERAL','factor',1,'p_factor_string','Parser_MiniPascal.py',387),
  ('relop -> LESS','relop',1,'p_relop','Parser_MiniPascal.py',394),
  ('relop -> LESS_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',395),
  ('relop -> GREAT','relop',1,'p_relop','Parser_MiniPascal.py',396),
  ('relop -> GREAT_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',397),
  ('relop -> EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',398),
  ('relop -> DIFFERENT','relop',1,'p_relop','Parser_MiniPascal.py',399),
  ('empty -> <empty>','empty',0,'p_empty','Parser_MiniPascal.py',404),
  ('statement -> READLN','statement',1,'p_statement_readln','Parser_MiniPascal.py',408),
  ('statement -> READLN LPAREN variable RPAREN','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',412),
  ('statement -> READLN LBRACKET variable RBRACKET','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',413),
  ('statement -> WRITE LPAREN expression_list RPAREN','statement',4,'p_statement_write','Parser_MiniPascal.py',417),
  ('statement -> WRITELN LPAREN write_arguments RPAREN','statement',4,'p_statement_writeln','Parser_MiniPascal.py',421),
  ('write_arguments -> write_argument','write_arguments',1,'p_write_arguments','Parser_MiniPascal.py',425),
  ('write_arguments -> write_arguments COMMA write_argument','write_arguments',3,'p_write_arguments','Parser_MiniPascal.py',426),
  ('write_argument -> expression','write_argument',1,'p_write_argument','Parser_MiniPascal.py',430),
  ('write_argument -> expression COLON expression','write_argument',3,'p_write_argument','Parser_MiniPascal.py',431),
  ('write_argument -> expression COLON expression COLON expression','write_argument',5,'p_write_argument','Parser_MiniPascal.py',432),
  ('statement -> USES ID SEMICOLON','statement',3,'p_statement_uses','Parser_MiniPascal.py',437),
  ('constant_declaration -> CONST constant_list','constant_declaration',2,'p_constant_declaration','Parser_MiniPascal.py',442),
  ('constant_list -> constant','constant_list',1,'p_constant_list','Parser_MiniPascal.py',446),
  ('constant_list -> constant_list constant','constant_list',2,'p_constant_list','Parser_MiniPascal.py',447),
  ('constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',451),
  ('constant -> ID EQUAL NUMBER SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',452),
  ('constant -> ID EQUAL STRING_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',453),
  ('constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',454),
  ('expression -> expression AND expression','expression',3,'p_expression_logical','Parser_MiniPascal.py',459),
  ('expression -> expression OR expression','expression',3,'p_expression_logical','Parser_MiniPascal.py',460),
  ('expression -> NOT expression','expression',2,'p_expression_logical','Parser_MiniPascal.py',461),
]
