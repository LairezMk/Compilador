
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocELSEAND ARRAY BEGIN BOOLEAN_LITERAL BYTE CASE CHAR CHARACTER_LITERAL COLON COLON_EQUAL COMMA CONST CONSTRUCTOR DESTRUCTOR DIFFERENT DIV DIVIDE DO DOT DOTDOT DOWNTO ELSE END EQUAL FALSE FILE FOR FORWARD FUNCTION GOTO GREAT GREAT_EQUAL ID IF IN INTEGER LABEL LBLOCK LBRACKET LESS LESS_EQUAL LONGINT LPAREN MINUS MOD NIL NOT NUMBER OBJECT OF OR PACKED PLUS PROCEDURE PROGRAM RBLOCK RBRACKET READLINE READLN RECORD REPEAT RPAREN SEMICOLON SET STRING STRING_LITERAL SUBRANGE THEN TIMES TO TRUE TYPE UNTIL USES VAR WHILE WITH WRITE WRITELNprogram : PROGRAM ID SEMICOLON declaration_sections block DOTdeclaration_sections : declaration_sections declaration_section\n                            | emptydeclaration_section : uses_opt\n                           | constant_declaration\n                           | type_declaration\n                           | var_declaration\n                           | procedure_declarations\n                           | function_declaration\n                           | constructor_declaration\n                           | method_declarationmethod_declaration : CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block \n                          | PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block \n                          | FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block\n                          | DESTRUCTOR ID DOT ID SEMICOLON blockconstructor_declaration : CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block\n                               | CONSTRUCTOR ID LPAREN RPAREN SEMICOLON blockuses_opt : USES id_list SEMICOLONid_list : IDid_list : id_list COMMA IDvar_declaration : VAR declaration_listdeclaration_list : declaration\n                        | declaration_list declarationdeclaration : id_list COLON type_specifier SEMICOLONblock : declaration_sections compound_statementtype_declaration : TYPE type_listtype_list : type_definition\n                 | type_list type_definitiontype_definition : ID EQUAL type_specifier SEMICOLONtype_specifier : ARRAY LBRACKET type_expression RBRACKET OF type_specifier\n                      | subrange\n                      | FILE OF type_specifier\n                      | SET OF type_specifier\n                      | RECORD field_list case_part END\n                      | OBJECT field_list method_list END                              \n                      | LPAREN id_list RPAREN\n                      | BOOLEAN_LITERAL\n                      | INTEGER\n                      | BYTE\n                      | CHAR\n                      | STRING\n                      | STRING LBRACKET NUMBER RBRACKET\n                      | IDtype_expression : type_expression COMMA subrange\n                       | subrangesubrange : NUMBER DOTDOT NUMBER\n                | NUMBER DOTDOT IDfield_list : field_list field\n                  | field\n                  | emptyfield : id_list COLON type_specifier\n             | id_list COLON type_specifier SEMICOLON\n             | VAR id_list COLON type_specifier\n             | VAR id_list COLON type_specifier SEMICOLON\n             | id_list LPAREN STRING_LITERAL RPAREN\n             | if_statement\n             | case_statement\n             | assignment_statementcase_part : CASE ID COLON type_specifier OF case_list SEMICOLON\n                 | emptycase_list : case_list SEMICOLON case_element\n                 | case_elementcase_element : NUMBER COLON LPAREN field_list RPAREN\n                    | NUMBER COLON field_listmethod_list : method_list method\n                   | method\n                   | emptymethod : CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON\n              | PROCEDURE ID LPAREN field_list RPAREN SEMICOLON  \n              | FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON\n              | DESTRUCTOR ID SEMICOLONcase_statement : CASE expression OF case_list END SEMICOLON\n                      | CASE expression OF case_list ELSE statement_list END SEMICOLON  \n                      | CASE expression OF case_list ENDtype_specifier : LONGINTprocedure_declarations : procedure_declaration\n                              | procedure_declarations procedure_declarationprocedure_declaration : PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON\n                             | PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON\n                             | PROCEDURE ID SEMICOLON block SEMICOLON\n                             | PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON FORWARD SEMICOLON\n                             | PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON\n                             | PROCEDURE ID SEMICOLON FORWARD SEMICOLONfunction_declaration : FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON\n                            | FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLONfunction_call : ID LPAREN expression_list RPARENfactor : function_callparameter_list : parameter\n                      | parameter_list SEMICOLON parameter\n                      | emptyparameter : ID COLON type_specifiercompound_statement : BEGIN statement_list ENDstatement_list : statement SEMICOLON\n                      | statement_list statement SEMICOLONstatement : if_statement\n                 | assignment_statement\n                 | while_statement\n                 | procedure_call\n                 | compound_statement\n                 | for_statement\n                 | case_statement\n                 | with_statement\n                 | emptywith_statement : WITH variable DO statementif_statement : IF expression THEN statement ELSE statement\n                    | IF expression THEN statement\n                    | IF expression IN statement THEN statement ELSE statement\n                    | IF expression IN statement THEN statementfor_statement : FOR ID COLON_EQUAL expression TO expression DO block\n                     | FOR ID COLON_EQUAL expression DOWNTO expression DO blockassignment_statement : variable COLON_EQUAL expression\n                            | variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON\n                            | variable PLUS COLON_EQUAL expression\n                            | variable MINUS COLON_EQUAL expression\n                            | variable TIMES COLON_EQUAL expression\n                            | variable DIVIDE COLON_EQUAL expression\n                            | ID COLON_EQUAL expressionvariable : ID\n                | variable LBRACKET expression RBRACKET\n                | variable DOT IDvariable : ID LBRACKET index_list RBRACKETindex_list : expression\n                  | index_list COMMA expressionwhile_statement : WHILE expression DO statementprocedure_call : ID LPAREN expression_list RPAREN\n                      | IDexpression_list : expression expression_list_tailexpression_list_tail : COMMA expression expression_list_tail\n                            | emptyexpression_list : emptyexpression : simple_expression relop simple_expression\n                  | simple_expressionsimple_expression : term simple_expression_tailsimple_expression_tail : addop term\n                              | emptyaddop : PLUS\n             | MINUSterm : factor term_tailterm_tail : mulop factor\n                 | emptymulop : TIMES\n             | DIVIDE\n             | DIVexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expressionfactor : LPAREN expression RPARENfactor : variablefactor : NUMBERfactor : STRING_LITERALrelop : LESS\n             | LESS_EQUAL\n             | GREAT\n             | GREAT_EQUAL\n             | EQUAL\n             | DIFFERENTempty :statement : READLNstatement : READLN LPAREN variable RPAREN\n                 | READLN LBRACKET variable RBRACKETstatement : WRITE LPAREN expression_list RPARENstatement : WRITELN LPAREN write_arguments RPARENwrite_arguments : write_argument\n                       | write_arguments COMMA write_argumentwrite_argument : expression\n                      | expression COLON expression\n                      | expression COLON expression COLON expressionstatement : USES ID SEMICOLONconstant_declaration : CONST constant_listconstant_list : constant\n                     | constant_list constantconstant : ID EQUAL CHARACTER_LITERAL SEMICOLON\n                | ID EQUAL NUMBER SEMICOLON\n                | ID EQUAL STRING_LITERAL SEMICOLON\n                | ID EQUAL BOOLEAN_LITERAL SEMICOLONexpression : expression AND expression\n                  | expression OR expression\n                  | NOT expression'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,29,],[0,-1,]),'ID':([2,18,19,20,21,23,24,25,26,27,28,31,34,35,37,38,40,41,47,49,50,51,52,53,54,55,56,57,58,62,63,64,65,66,67,68,71,72,74,75,76,77,78,79,80,81,82,83,85,86,88,89,90,91,96,97,98,99,101,102,103,105,106,107,108,109,110,111,112,113,114,125,128,131,132,133,134,135,136,137,138,140,148,150,151,153,154,155,156,164,167,169,170,171,172,174,181,182,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,215,216,217,219,220,221,222,223,224,226,227,228,229,232,233,234,236,237,239,241,244,245,251,252,253,254,255,256,257,258,259,261,263,264,265,266,267,268,269,271,272,273,274,275,276,277,278,279,280,281,283,288,291,292,294,299,300,301,302,303,305,306,308,313,315,326,327,328,329,330,331,333,334,337,339,345,349,350,351,359,360,361,364,366,367,368,369,371,372,373,374,377,378,384,388,389,391,392,393,399,400,401,402,414,],[3,33,36,39,33,43,44,45,46,-25,63,69,36,-172,39,-27,33,-22,63,-95,-96,-97,-98,-99,-100,-101,-102,-103,-160,100,-126,114,114,116,114,119,120,-173,-28,125,-23,125,142,146,147,157,158,142,163,-92,-93,119,119,114,114,174,114,114,114,114,114,-132,114,-159,-159,-87,114,-150,-151,-152,-118,-43,-31,147,147,33,-37,-38,-39,-40,-41,-75,147,-49,-50,33,-56,-57,-58,-94,-111,114,114,114,114,-120,-170,-117,63,63,114,114,114,114,114,114,114,114,-153,-154,-155,-156,-157,-158,-180,-133,114,-135,-136,-137,-138,114,-140,-141,-142,-143,114,63,114,63,-174,-175,-176,-177,-29,125,125,147,147,306,-24,125,142,142,-48,125,142,142,-161,-162,-112,-113,-114,-115,-116,-119,-163,114,-164,114,114,-125,-121,114,-106,-144,-145,-146,-147,-148,-178,-179,-131,-134,-139,-149,-124,-104,-32,-33,338,341,342,343,344,-36,-46,-47,125,-51,125,63,63,-86,114,114,-74,63,147,-34,-35,-42,-52,-55,-53,114,-105,-108,-72,63,147,147,125,125,147,147,147,125,-54,63,147,-30,147,147,147,-107,-109,-110,-73,125,]),'SEMICOLON':([3,27,28,32,33,45,47,48,49,50,51,52,53,54,55,56,57,58,63,69,78,83,86,87,88,100,105,107,108,109,111,112,113,114,120,121,122,123,124,125,126,128,134,135,136,137,138,140,141,143,144,145,149,150,151,154,155,156,159,160,161,162,163,164,167,168,174,181,182,186,202,203,205,208,210,216,219,237,238,239,244,245,246,251,252,253,254,255,256,257,258,259,263,266,267,269,271,272,273,274,275,276,277,278,279,280,281,283,285,286,288,291,292,303,305,306,307,309,310,313,316,317,319,320,326,327,328,331,333,334,337,339,344,345,346,349,350,351,352,353,354,355,360,361,364,365,366,368,378,384,387,389,394,395,396,399,400,401,402,403,405,406,411,417,],[4,-25,-159,70,-19,84,-159,88,-95,-96,-97,-98,-99,-100,-101,-102,-103,-160,-126,84,-159,-159,-92,164,-93,181,-132,-159,-159,-87,-150,-151,-152,-118,-20,220,221,222,223,-43,224,-31,-37,-38,-39,-40,-41,-75,233,236,-88,-90,240,-49,-50,-56,-57,-58,236,247,248,249,250,-94,-111,253,-120,-170,-117,-159,-180,-133,-135,-138,-140,-159,-159,-159,311,-48,-159,-159,318,-161,-162,-112,-113,-114,-115,-116,-119,-163,-164,-125,-121,-106,-144,-145,-146,-147,-148,-178,-179,-131,-134,-139,-149,-124,332,-62,-104,-32,-33,-36,-46,-47,-91,-89,236,349,236,236,356,357,-159,-159,-86,364,-159,-159,-34,-35,375,-42,376,-52,-55,378,379,380,381,382,-105,-108,-72,-61,-159,-64,-54,-159,402,-30,408,409,410,-107,-109,-110,-73,-63,412,413,416,418,]),'USES':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,28,30,34,35,37,38,40,41,47,70,72,74,76,84,86,88,164,186,187,216,219,220,221,222,223,224,233,240,247,248,249,250,311,312,318,321,326,327,333,348,356,357,366,376,379,380,381,382,384,385,386,397,398,408,409,410,415,],[-159,18,-3,18,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,62,-77,-171,-172,-26,-27,-21,-22,62,-18,-173,-28,-23,-159,-92,-93,-94,62,62,62,62,-174,-175,-176,-177,-29,-24,-159,-159,-80,-83,-159,-159,-17,-159,-15,62,62,62,-16,-79,-82,62,-159,-159,-159,-78,-81,62,-159,-159,-12,-13,-84,-85,-159,-14,]),'CONST':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,70,72,74,76,84,86,220,221,222,223,224,233,240,247,248,249,250,311,312,318,321,348,356,357,376,379,380,381,382,385,386,397,398,408,409,410,415,],[-159,19,-3,19,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,-77,-171,-172,-26,-27,-21,-22,-18,-173,-28,-23,-159,-92,-174,-175,-176,-177,-29,-24,-159,-159,-80,-83,-159,-159,-17,-159,-15,-16,-79,-82,-159,-159,-159,-78,-81,-159,-159,-12,-13,-84,-85,-159,-14,]),'TYPE':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,70,72,74,76,84,86,220,221,222,223,224,233,240,247,248,249,250,311,312,318,321,348,356,357,376,379,380,381,382,385,386,397,398,408,409,410,415,],[-159,20,-3,20,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,-77,-171,-172,-26,-27,-21,-22,-18,-173,-28,-23,-159,-92,-174,-175,-176,-177,-29,-24,-159,-159,-80,-83,-159,-159,-17,-159,-15,-16,-79,-82,-159,-159,-159,-78,-81,-159,-159,-12,-13,-84,-85,-159,-14,]),'VAR':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,49,50,51,52,53,54,55,56,57,58,63,70,72,74,76,80,84,86,105,107,108,109,111,112,113,114,125,128,131,132,134,135,136,137,138,140,148,150,151,154,155,156,167,174,181,182,186,202,203,205,208,210,216,219,220,221,222,223,224,228,229,233,239,240,247,248,249,250,251,252,253,254,255,256,257,258,259,263,266,267,269,271,272,273,274,275,276,277,278,279,280,281,283,288,291,292,303,305,306,311,312,313,318,321,326,327,328,331,334,337,339,345,348,349,350,351,356,357,360,361,364,367,368,372,373,374,376,378,379,380,381,382,384,385,386,388,389,391,392,393,397,398,399,400,401,402,408,409,410,415,],[-159,21,-3,21,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,-77,-171,-172,-26,-27,-21,-22,-95,-96,-97,-98,-99,-100,-101,-102,-103,-160,-126,-18,-173,-28,-23,153,-159,-92,-132,-159,-159,-87,-150,-151,-152,-118,-43,-31,153,153,-37,-38,-39,-40,-41,-75,153,-49,-50,-56,-57,-58,-111,-120,-170,-117,-159,-180,-133,-135,-138,-140,-159,-159,-174,-175,-176,-177,-29,153,153,-24,-48,-159,-159,-80,-83,-159,-161,-162,-112,-113,-114,-115,-116,-119,-163,-164,-125,-121,-106,-144,-145,-146,-147,-148,-178,-179,-131,-134,-139,-149,-124,-104,-32,-33,-36,-46,-47,-159,-17,-51,-159,-15,-159,-159,-86,-74,153,-34,-35,-42,-16,-52,-55,-53,-79,-82,-105,-108,-72,153,153,153,153,153,-159,-54,-159,-159,-78,-81,-159,-159,-159,153,-30,153,153,153,-12,-13,-107,-109,-110,-73,-84,-85,-159,-14,]),'FUNCTION':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,49,50,51,52,53,54,55,56,57,58,63,70,72,74,76,84,86,105,107,108,109,111,112,113,114,125,128,132,134,135,136,137,138,140,150,151,154,155,156,167,174,181,182,186,202,203,205,208,210,216,219,220,221,222,223,224,229,233,239,240,247,248,249,250,251,252,253,254,255,256,257,258,259,263,266,267,269,271,272,273,274,275,276,277,278,279,280,281,283,288,291,292,296,297,298,303,305,306,311,312,313,318,321,326,327,328,331,337,339,340,345,348,349,350,351,356,357,360,361,364,375,376,378,379,380,381,382,384,385,386,389,397,398,399,400,401,402,408,409,410,412,413,415,418,],[-159,23,-3,23,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,-77,-171,-172,-26,-27,-21,-22,-95,-96,-97,-98,-99,-100,-101,-102,-103,-160,-126,-18,-173,-28,-23,-159,-92,-132,-159,-159,-87,-150,-151,-152,-118,-43,-31,-159,-37,-38,-39,-40,-41,-75,-49,-50,-56,-57,-58,-111,-120,-170,-117,-159,-180,-133,-135,-138,-140,-159,-159,-174,-175,-176,-177,-29,301,-24,-48,-159,-159,-80,-83,-159,-161,-162,-112,-113,-114,-115,-116,-119,-163,-164,-125,-121,-106,-144,-145,-146,-147,-148,-178,-179,-131,-134,-139,-149,-124,-104,-32,-33,301,-66,-67,-36,-46,-47,-159,-17,-51,-159,-15,-159,-159,-86,-74,-34,-35,-65,-42,-16,-52,-55,-53,-79,-82,-105,-108,-72,-71,-159,-54,-159,-159,-78,-81,-159,-159,-159,-30,-12,-13,-107,-109,-110,-73,-84,-85,-159,-68,-69,-14,-70,]),'CONSTRUCTOR':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,49,50,51,52,53,54,55,56,57,58,63,70,72,74,76,84,86,105,107,108,109,111,112,113,114,125,128,132,134,135,136,137,138,140,150,151,154,155,156,167,174,181,182,186,202,203,205,208,210,216,219,220,221,222,223,224,229,233,239,240,247,248,249,250,251,252,253,254,255,256,257,258,259,263,266,267,269,271,272,273,274,275,276,277,278,279,280,281,283,288,291,292,296,297,298,303,305,306,311,312,313,318,321,326,327,328,331,337,339,340,345,348,349,350,351,356,357,360,361,364,375,376,378,379,380,381,382,384,385,386,389,397,398,399,400,401,402,408,409,410,412,413,415,418,],[-159,24,-3,24,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,-77,-171,-172,-26,-27,-21,-22,-95,-96,-97,-98,-99,-100,-101,-102,-103,-160,-126,-18,-173,-28,-23,-159,-92,-132,-159,-159,-87,-150,-151,-152,-118,-43,-31,-159,-37,-38,-39,-40,-41,-75,-49,-50,-56,-57,-58,-111,-120,-170,-117,-159,-180,-133,-135,-138,-140,-159,-159,-174,-175,-176,-177,-29,299,-24,-48,-159,-159,-80,-83,-159,-161,-162,-112,-113,-114,-115,-116,-119,-163,-164,-125,-121,-106,-144,-145,-146,-147,-148,-178,-179,-131,-134,-139,-149,-124,-104,-32,-33,299,-66,-67,-36,-46,-47,-159,-17,-51,-159,-15,-159,-159,-86,-74,-34,-35,-65,-42,-16,-52,-55,-53,-79,-82,-105,-108,-72,-71,-159,-54,-159,-159,-78,-81,-159,-159,-159,-30,-12,-13,-107,-109,-110,-73,-84,-85,-159,-68,-69,-14,-70,]),'PROCEDURE':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,49,50,51,52,53,54,55,56,57,58,63,70,72,74,76,84,86,105,107,108,109,111,112,113,114,125,128,132,134,135,136,137,138,140,150,151,154,155,156,167,174,181,182,186,202,203,205,208,210,216,219,220,221,222,223,224,229,233,239,240,247,248,249,250,251,252,253,254,255,256,257,258,259,263,266,267,269,271,272,273,274,275,276,277,278,279,280,281,283,288,291,292,296,297,298,303,305,306,311,312,313,318,321,326,327,328,331,337,339,340,345,348,349,350,351,356,357,360,361,364,375,376,378,379,380,381,382,384,385,386,389,397,398,399,400,401,402,408,409,410,412,413,415,418,],[-159,25,-3,25,-2,-4,-5,-6,-7,31,-9,-10,-11,-76,-25,-77,-171,-172,-26,-27,-21,-22,-95,-96,-97,-98,-99,-100,-101,-102,-103,-160,-126,-18,-173,-28,-23,-159,-92,-132,-159,-159,-87,-150,-151,-152,-118,-43,-31,-159,-37,-38,-39,-40,-41,-75,-49,-50,-56,-57,-58,-111,-120,-170,-117,-159,-180,-133,-135,-138,-140,-159,-159,-174,-175,-176,-177,-29,300,-24,-48,-159,-159,-80,-83,-159,-161,-162,-112,-113,-114,-115,-116,-119,-163,-164,-125,-121,-106,-144,-145,-146,-147,-148,-178,-179,-131,-134,-139,-149,-124,-104,-32,-33,300,-66,-67,-36,-46,-47,-159,-17,-51,-159,-15,-159,-159,-86,-74,-34,-35,-65,-42,-16,-52,-55,-53,-79,-82,-105,-108,-72,-71,-159,-54,-159,-159,-78,-81,-159,-159,-159,-30,-12,-13,-107,-109,-110,-73,-84,-85,-159,-68,-69,-14,-70,]),'DESTRUCTOR':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,49,50,51,52,53,54,55,56,57,58,63,70,72,74,76,84,86,105,107,108,109,111,112,113,114,125,128,132,134,135,136,137,138,140,150,151,154,155,156,167,174,181,182,186,202,203,205,208,210,216,219,220,221,222,223,224,229,233,239,240,247,248,249,250,251,252,253,254,255,256,257,258,259,263,266,267,269,271,272,273,274,275,276,277,278,279,280,281,283,288,291,292,296,297,298,303,305,306,311,312,313,318,321,326,327,328,331,337,339,340,345,348,349,350,351,356,357,360,361,364,375,376,378,379,380,381,382,384,385,386,389,397,398,399,400,401,402,408,409,410,412,413,415,418,],[-159,26,-3,26,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,-77,-171,-172,-26,-27,-21,-22,-95,-96,-97,-98,-99,-100,-101,-102,-103,-160,-126,-18,-173,-28,-23,-159,-92,-132,-159,-159,-87,-150,-151,-152,-118,-43,-31,-159,-37,-38,-39,-40,-41,-75,-49,-50,-56,-57,-58,-111,-120,-170,-117,-159,-180,-133,-135,-138,-140,-159,-159,-174,-175,-176,-177,-29,302,-24,-48,-159,-159,-80,-83,-159,-161,-162,-112,-113,-114,-115,-116,-119,-163,-164,-125,-121,-106,-144,-145,-146,-147,-148,-178,-179,-131,-134,-139,-149,-124,-104,-32,-33,302,-66,-67,-36,-46,-47,-159,-17,-51,-159,-15,-159,-159,-86,-74,-34,-35,-65,-42,-16,-52,-55,-53,-79,-82,-105,-108,-72,-71,-159,-54,-159,-159,-78,-81,-159,-159,-159,-30,-12,-13,-107,-109,-110,-73,-84,-85,-159,-68,-69,-14,-70,]),'BEGIN':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,28,30,34,35,37,38,40,41,47,70,72,74,76,84,86,88,164,186,187,216,219,220,221,222,223,224,233,240,247,248,249,250,311,312,318,321,326,327,333,348,356,357,366,376,379,380,381,382,384,385,386,397,398,408,409,410,415,],[-159,-159,-3,28,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,28,-77,-171,-172,-26,-27,-21,-22,28,-18,-173,-28,-23,-159,-92,-93,-94,28,28,28,28,-174,-175,-176,-177,-29,-24,-159,-159,-80,-83,-159,-159,-17,-159,-15,28,28,28,-16,-79,-82,28,-159,-159,-159,-78,-81,28,-159,-159,-12,-13,-84,-85,-159,-14,]),'DOT':([8,27,43,44,45,46,59,63,86,111,114,118,119,147,165,166,174,258,267,338,],[29,-25,79,81,82,85,97,-118,-92,97,-118,97,-118,-118,97,97,-120,-119,-121,-118,]),'ELSE':([27,49,50,51,52,53,54,55,56,57,58,63,86,105,107,108,109,111,112,113,114,125,128,134,135,136,137,138,140,150,151,154,155,156,167,174,181,182,186,202,203,205,208,210,216,219,239,251,252,253,254,255,256,257,258,259,263,266,267,269,271,272,273,274,275,276,277,278,279,280,281,283,285,286,288,291,292,303,305,306,313,326,327,328,331,334,337,339,345,349,350,351,360,361,364,365,368,378,384,389,399,400,401,402,403,],[-25,-95,-96,-97,-98,-99,-100,-101,-102,-103,-160,-126,-92,-132,-159,-159,-87,-150,-151,-152,-118,-43,-31,-37,-38,-39,-40,-41,-75,-49,-50,-56,-57,-58,-111,-120,-170,-117,-159,-180,-133,-135,-138,-140,-159,-159,-48,-161,-162,-112,-113,-114,-115,-116,-119,-163,-164,-125,-121,326,-144,-145,-146,-147,-148,-178,-179,-131,-134,-139,-149,-124,333,-62,-104,-32,-33,-36,-46,-47,-51,-159,-159,-86,-74,-159,-34,-35,-42,-52,-55,-53,-105,384,-72,-61,-64,-54,-159,-30,-107,-109,-110,-73,-63,]),'RPAREN':([27,33,49,50,51,52,53,54,55,56,57,58,63,78,80,83,86,98,102,105,107,108,109,111,112,113,114,119,120,125,128,134,135,136,137,138,140,143,144,145,148,150,151,154,155,156,159,165,167,174,175,176,177,178,179,180,181,182,183,186,202,203,205,208,210,214,215,216,219,230,237,239,244,245,251,252,253,254,255,256,257,258,259,260,262,263,266,267,269,271,272,273,274,275,276,277,278,279,280,281,282,283,288,291,292,303,305,306,307,309,310,313,314,316,317,322,323,324,326,327,328,331,337,339,345,349,350,351,358,360,361,364,367,372,373,374,378,383,384,388,389,391,392,393,399,400,401,402,],[-25,-19,-95,-96,-97,-98,-99,-100,-101,-102,-103,-160,-126,-159,149,160,-92,-159,-159,-132,-159,-159,-87,-150,-151,-152,-118,-118,-20,-43,-31,-37,-38,-39,-40,-41,-75,235,-88,-90,238,-49,-50,-56,-57,-58,246,251,-111,-120,259,-159,-130,263,-165,-167,-170,-117,266,-159,-180,-133,-135,-138,-140,281,-159,-159,-159,303,-159,-48,-159,-159,-161,-162,-112,-113,-114,-115,-116,-119,-163,-127,-129,-164,-125,-121,-106,-144,-145,-146,-147,-148,-178,-179,-131,-134,-139,-149,328,-124,-104,-32,-33,-36,-46,-47,-91,-89,347,-51,350,352,353,-159,-166,-168,-159,-159,-86,-74,-34,-35,-42,-52,-55,-53,-128,-105,-108,-72,-159,-159,-159,-159,-54,-169,-159,403,-30,405,406,407,-107,-109,-110,-73,]),'IF':([27,28,47,49,50,51,52,53,54,55,56,57,58,63,80,86,88,105,107,108,109,111,112,113,114,125,128,131,132,134,135,136,137,138,140,148,150,151,154,155,156,164,167,174,181,182,186,187,202,203,205,208,210,216,219,228,229,239,251,252,253,254,255,256,257,258,259,263,266,267,269,271,272,273,274,275,276,277,278,279,280,281,283,288,291,292,303,305,306,313,326,327,328,331,333,334,337,339,345,349,350,351,360,361,364,366,367,368,372,373,374,378,384,388,389,391,392,393,399,400,401,402,],[-25,64,64,-95,-96,-97,-98,-99,-100,-101,-102,-103,-160,-126,64,-92,-93,-132,-159,-159,-87,-150,-151,-152,-118,-43,-31,64,64,-37,-38,-39,-40,-41,-75,64,-49,-50,-56,-57,-58,-94,-111,-120,-170,-117,64,64,-180,-133,-135,-138,-140,64,64,64,64,-48,-161,-162,-112,-113,-114,-115,-116,-119,-163,-164,-125,-121,-106,-144,-145,-146,-147,-148,-178,-179,-131,-134,-139,-149,-124,-104,-32,-33,-36,-46,-47,-51,64,64,-86,-74,64,64,-34,-35,-42,-52,-55,-53,-105,-108,-72,64,64,64,64,64,64,-54,64,64,-30,64,64,64,-107,-109,-110,-73,]),'CASE':([27,28,47,49,50,51,52,53,54,55,56,57,58,63,80,86,88,105,107,108,109,111,112,113,114,125,128,131,132,134,135,136,137,138,140,148,150,151,154,155,156,164,167,174,181,182,186,187,202,203,205,208,210,216,219,228,229,239,251,252,253,254,255,256,257,258,259,263,266,267,269,271,272,273,274,275,276,277,278,279,280,281,283,288,291,292,303,305,306,313,326,327,328,331,333,334,337,339,345,349,350,351,360,361,364,366,367,368,372,373,374,378,384,388,389,391,392,393,399,400,401,402,],[-25,67,67,-95,-96,-97,-98,-99,-100,-101,-102,-103,-160,-126,67,-92,-93,-132,-159,-159,-87,-150,-151,-152,-118,-43,-31,67,67,-37,-38,-39,-40,-41,-75,67,-49,-50,-56,-57,-58,-94,-111,-120,-170,-117,67,67,-180,-133,-135,-138,-140,67,67,294,67,-48,-161,-162,-112,-113,-114,-115,-116,-119,-163,-164,-125,-121,-106,-144,-145,-146,-147,-148,-178,-179,-131,-134,-139,-149,-124,-104,-32,-33,-36,-46,-47,-51,67,67,-86,-74,67,67,-34,-35,-42,-52,-55,-53,-105,-108,-72,67,67,67,67,67,67,-54,67,67,-30,67,67,67,-107,-109,-110,-73,]),'END':([27,47,49,50,51,52,53,54,55,56,57,58,63,86,88,105,107,108,109,111,112,113,114,125,128,131,132,134,135,136,137,138,140,150,151,154,155,156,164,167,174,181,182,186,202,203,205,208,210,216,219,228,229,239,251,252,253,254,255,256,257,258,259,263,266,267,269,271,272,273,274,275,276,277,278,279,280,281,283,285,286,288,291,292,293,295,296,297,298,303,305,306,313,326,327,328,331,334,337,339,340,345,349,350,351,360,361,364,365,366,368,375,378,384,389,399,400,401,402,403,412,413,416,418,],[-25,86,-95,-96,-97,-98,-99,-100,-101,-102,-103,-160,-126,-92,-93,-132,-159,-159,-87,-150,-151,-152,-118,-43,-31,-159,-159,-37,-38,-39,-40,-41,-75,-49,-50,-56,-57,-58,-94,-111,-120,-170,-117,-159,-180,-133,-135,-138,-140,-159,-159,-159,-159,-48,-161,-162,-112,-113,-114,-115,-116,-119,-163,-164,-125,-121,-106,-144,-145,-146,-147,-148,-178,-179,-131,-134,-139,-149,-124,331,-62,-104,-32,-33,337,-60,339,-66,-67,-36,-46,-47,-51,-159,-159,-86,-74,-159,-34,-35,-65,-42,-52,-55,-53,-105,-108,-72,-61,387,-64,-71,-54,-159,-30,-107,-109,-110,-73,-63,-68,-69,-59,-70,]),'THEN':([27,49,50,51,52,53,54,55,56,57,58,63,86,104,105,107,108,109,111,112,113,114,167,174,181,182,186,187,202,203,205,208,210,216,219,251,252,253,254,255,256,257,258,259,263,266,267,269,270,271,272,273,274,275,276,277,278,279,280,281,283,288,326,327,328,331,360,361,364,384,399,400,401,402,],[-25,-95,-96,-97,-98,-99,-100,-101,-102,-103,-160,-126,-92,186,-132,-159,-159,-87,-150,-151,-152,-118,-111,-120,-170,-117,-159,-159,-180,-133,-135,-138,-140,-159,-159,-161,-162,-112,-113,-114,-115,-116,-119,-163,-164,-125,-121,-106,327,-144,-145,-146,-147,-148,-178,-179,-131,-134,-139,-149,-124,-104,-159,-159,-86,-74,-105,-108,-72,-159,-107,-109,-110,-73,]),'READLN':([28,47,88,164,186,187,216,219,326,327,333,366,384,],[58,58,-93,-94,58,58,58,58,58,58,58,58,58,]),'WRITE':([28,47,88,164,186,187,216,219,326,327,333,366,384,],[60,60,-93,-94,60,60,60,60,60,60,60,60,60,]),'WRITELN':([28,47,88,164,186,187,216,219,326,327,333,366,384,],[61,61,-93,-94,61,61,61,61,61,61,61,61,61,]),'WHILE':([28,47,88,164,186,187,216,219,326,327,333,366,384,],[65,65,-93,-94,65,65,65,65,65,65,65,65,65,]),'FOR':([28,47,88,164,186,187,216,219,326,327,333,366,384,],[66,66,-93,-94,66,66,66,66,66,66,66,66,66,]),'WITH':([28,47,88,164,186,187,216,219,326,327,333,366,384,],[68,68,-93,-94,68,68,68,68,68,68,68,68,68,]),'COMMA':([32,33,42,105,107,108,109,111,112,113,114,120,147,152,174,176,178,179,180,184,185,202,203,205,208,210,230,243,258,267,271,272,273,274,275,276,277,278,279,280,281,289,290,305,306,322,323,324,325,328,370,383,],[71,-19,71,-132,-159,-159,-87,-150,-151,-152,-118,-20,-19,71,-120,261,264,-165,-167,268,-122,-180,-133,-135,-138,-140,71,71,-119,-121,-144,-145,-146,-147,-148,-178,-179,-131,-134,-139,-149,336,-45,-46,-47,261,-166,-168,-123,-86,-44,-169,]),'COLON':([33,42,105,107,108,109,111,112,113,114,120,142,147,152,174,180,202,203,205,208,210,235,243,258,267,271,272,273,274,275,276,277,278,279,280,281,287,324,328,338,347,407,],[-19,77,-132,-159,-159,-87,-150,-151,-152,-118,-20,234,-19,241,-120,265,-180,-133,-135,-138,-140,308,315,-119,-121,-144,-145,-146,-147,-148,-178,-179,-131,-134,-139,-149,334,359,-86,371,377,414,]),'EQUAL':([36,39,105,107,108,109,111,112,113,114,174,203,205,208,210,258,267,279,280,281,328,338,],[73,75,200,-159,-159,-87,-150,-151,-152,-118,-120,-133,-135,-138,-140,-119,-121,-134,-139,-149,-86,-118,]),'LPAREN':([43,44,45,58,60,61,63,64,65,67,69,75,77,91,96,98,99,101,102,103,106,110,114,120,146,147,152,157,158,169,170,171,172,188,189,190,191,192,193,194,195,196,197,198,199,200,201,204,206,207,209,211,212,213,215,217,226,227,234,241,261,264,265,268,294,308,315,329,330,334,338,341,342,343,359,369,371,377,414,],[78,80,83,89,98,99,102,110,110,110,83,133,133,110,110,110,110,110,110,110,110,110,215,-20,237,-19,242,244,245,110,110,110,110,110,110,110,110,110,110,110,110,-153,-154,-155,-156,-157,-158,110,-136,-137,110,-141,-142,-143,110,110,133,133,133,133,110,110,110,110,110,133,133,110,110,367,215,372,373,374,110,133,133,133,133,]),'LBRACKET':([58,59,63,111,114,118,119,127,138,147,165,166,174,258,267,338,],[90,96,103,96,103,96,103,225,231,103,96,96,-120,-119,-121,103,]),'COLON_EQUAL':([59,63,92,93,94,95,116,147,174,258,267,],[91,101,169,170,171,172,217,101,-120,-119,-121,]),'PLUS':([59,63,104,105,107,108,109,111,112,113,114,115,117,147,167,173,174,176,180,182,185,202,203,205,208,210,214,254,255,256,257,258,267,271,272,273,274,275,276,277,278,279,280,281,284,322,324,325,328,338,362,363,383,],[92,-118,188,-132,206,-159,-87,-150,-151,-152,-118,188,188,-118,188,188,-120,188,188,188,188,188,-133,-135,-138,-140,188,188,188,188,188,-119,-121,188,188,188,188,188,188,188,-131,-134,-139,-149,188,188,188,188,-86,-118,188,188,188,]),'MINUS':([59,63,104,105,107,108,109,111,112,113,114,115,117,147,167,173,174,176,180,182,185,202,203,205,208,210,214,254,255,256,257,258,267,271,272,273,274,275,276,277,278,279,280,281,284,322,324,325,328,338,362,363,383,],[93,-118,189,-132,207,-159,-87,-150,-151,-152,-118,189,189,-118,189,189,-120,189,189,189,189,189,-133,-135,-138,-140,189,189,189,189,189,-119,-121,189,189,189,189,189,189,189,-131,-134,-139,-149,189,189,189,189,-86,-118,189,189,189,]),'TIMES':([59,63,104,105,107,108,109,111,112,113,114,115,117,147,167,173,174,176,180,182,185,202,203,205,208,210,214,254,255,256,257,258,267,271,272,273,274,275,276,277,278,279,280,281,284,322,324,325,328,338,362,363,383,],[94,-118,190,-132,-159,211,-87,-150,-151,-152,-118,190,190,-118,190,190,-120,190,190,190,190,190,-133,-135,-138,-140,190,190,190,190,190,-119,-121,190,190,190,190,190,190,190,-131,-134,-139,-149,190,190,190,190,-86,-118,190,190,190,]),'DIVIDE':([59,63,104,105,107,108,109,111,112,113,114,115,117,147,167,173,174,176,180,182,185,202,203,205,208,210,214,254,255,256,257,258,267,271,272,273,274,275,276,277,278,279,280,281,284,322,324,325,328,338,362,363,383,],[95,-118,191,-132,-159,212,-87,-150,-151,-152,-118,191,191,-118,191,191,-120,191,191,191,191,191,-133,-135,-138,-140,191,191,191,191,191,-119,-121,191,191,191,191,191,191,191,-131,-134,-139,-149,191,191,191,191,-86,-118,191,191,191,]),'NOT':([64,65,67,91,96,98,99,101,102,103,106,110,169,170,171,172,188,189,190,191,192,193,194,215,217,261,264,265,268,294,329,330,359,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'NUMBER':([64,65,67,73,75,77,91,96,98,99,101,102,103,106,110,169,170,171,172,188,189,190,191,192,193,194,195,196,197,198,199,200,201,204,206,207,209,211,212,213,215,217,218,225,226,227,231,232,234,241,261,264,265,268,294,308,315,329,330,332,336,359,369,371,377,404,414,416,],[112,112,112,122,139,139,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,-153,-154,-155,-156,-157,-158,112,-136,-137,112,-141,-142,-143,112,112,287,139,139,139,304,305,139,139,112,112,112,112,112,139,139,112,112,287,139,112,139,139,139,287,139,287,]),'STRING_LITERAL':([64,65,67,73,91,96,98,99,101,102,103,106,110,169,170,171,172,188,189,190,191,192,193,194,195,196,197,198,199,200,201,204,206,207,209,211,212,213,215,217,242,261,264,265,268,294,329,330,359,],[113,113,113,123,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,-153,-154,-155,-156,-157,-158,113,-136,-137,113,-141,-142,-143,113,113,314,113,113,113,113,113,113,113,113,]),'CHARACTER_LITERAL':([73,],[121,]),'BOOLEAN_LITERAL':([73,75,77,91,226,227,234,241,308,315,369,371,377,414,],[124,134,134,168,134,134,134,134,134,134,134,134,134,134,]),'ARRAY':([75,77,226,227,234,241,308,315,369,371,377,414,],[127,127,127,127,127,127,127,127,127,127,127,127,]),'FILE':([75,77,226,227,234,241,308,315,369,371,377,414,],[129,129,129,129,129,129,129,129,129,129,129,129,]),'SET':([75,77,226,227,234,241,308,315,369,371,377,414,],[130,130,130,130,130,130,130,130,130,130,130,130,]),'RECORD':([75,77,226,227,234,241,308,315,369,371,377,414,],[131,131,131,131,131,131,131,131,131,131,131,131,]),'OBJECT':([75,77,226,227,234,241,308,315,369,371,377,414,],[132,132,132,132,132,132,132,132,132,132,132,132,]),'INTEGER':([75,77,226,227,234,241,308,315,369,371,377,414,],[135,135,135,135,135,135,135,135,135,135,135,135,]),'BYTE':([75,77,226,227,234,241,308,315,369,371,377,414,],[136,136,136,136,136,136,136,136,136,136,136,136,]),'CHAR':([75,77,226,227,234,241,308,315,369,371,377,414,],[137,137,137,137,137,137,137,137,137,137,137,137,]),'STRING':([75,77,226,227,234,241,308,315,369,371,377,414,],[138,138,138,138,138,138,138,138,138,138,138,138,]),'LONGINT':([75,77,226,227,234,241,308,315,369,371,377,414,],[140,140,140,140,140,140,140,140,140,140,140,140,]),'FORWARD':([84,247,318,376,],[162,320,355,395,]),'IN':([104,105,107,108,109,111,112,113,114,174,202,203,205,208,210,258,267,271,272,273,274,275,276,277,278,279,280,281,328,],[187,-132,-159,-159,-87,-150,-151,-152,-118,-120,-180,-133,-135,-138,-140,-119,-121,-144,-145,-146,-147,-148,-178,-179,-131,-134,-139,-149,-86,]),'MOD':([104,105,107,108,109,111,112,113,114,115,117,167,173,174,176,180,182,185,202,203,205,208,210,214,254,255,256,257,258,267,271,272,273,274,275,276,277,278,279,280,281,284,322,324,325,328,338,362,363,383,],[192,-132,-159,-159,-87,-150,-151,-152,-118,192,192,192,192,-120,192,192,192,192,192,-133,-135,-138,-140,192,192,192,192,192,-119,-121,192,192,192,192,192,192,192,-131,-134,-139,-149,192,192,192,192,-86,-118,192,192,192,]),'AND':([104,105,107,108,109,111,112,113,114,115,117,167,173,174,176,180,182,185,202,203,205,208,210,214,254,255,256,257,258,267,271,272,273,274,275,276,277,278,279,280,281,284,322,324,325,328,338,362,363,383,],[193,-132,-159,-159,-87,-150,-151,-152,-118,193,193,193,193,-120,193,193,193,193,193,-133,-135,-138,-140,193,193,193,193,193,-119,-121,193,193,193,193,193,193,193,-131,-134,-139,-149,193,193,193,193,-86,-118,193,193,193,]),'OR':([104,105,107,108,109,111,112,113,114,115,117,167,173,174,176,180,182,185,202,203,205,208,210,214,254,255,256,257,258,267,271,272,273,274,275,276,277,278,279,280,281,284,322,324,325,328,338,362,363,383,],[194,-132,-159,-159,-87,-150,-151,-152,-118,194,194,194,194,-120,194,194,194,194,194,-133,-135,-138,-140,194,194,194,194,194,-119,-121,194,194,194,194,194,194,194,-131,-134,-139,-149,194,194,194,194,-86,-118,194,194,194,]),'DO':([105,107,108,109,111,112,113,114,115,118,119,174,202,203,205,208,210,258,267,271,272,273,274,275,276,277,278,279,280,281,328,362,363,],[-132,-159,-159,-87,-150,-151,-152,-118,216,219,-118,-120,-180,-133,-135,-138,-140,-119,-121,-144,-145,-146,-147,-148,-178,-179,-131,-134,-139,-149,-86,385,386,]),'OF':([105,107,108,109,111,112,113,114,117,125,128,129,130,134,135,136,137,138,140,174,202,203,205,208,210,258,267,271,272,273,274,275,276,277,278,279,280,281,291,292,303,305,306,328,335,337,338,339,345,389,390,],[-132,-159,-159,-87,-150,-151,-152,-118,218,-43,-31,226,227,-37,-38,-39,-40,-41,-75,-120,-180,-133,-135,-138,-140,-119,-121,-144,-145,-146,-147,-148,-178,-179,-131,-134,-139,-149,-32,-33,-36,-46,-47,-86,369,-34,-118,-35,-42,-30,404,]),'RBRACKET':([105,107,108,109,111,112,113,114,119,166,173,174,184,185,202,203,205,208,210,258,267,271,272,273,274,275,276,277,278,279,280,281,289,290,304,305,306,325,328,370,],[-132,-159,-159,-87,-150,-151,-152,-118,-118,252,258,-120,267,-122,-180,-133,-135,-138,-140,-119,-121,-144,-145,-146,-147,-148,-178,-179,-131,-134,-139,-149,335,-45,345,-46,-47,-123,-86,-44,]),'TO':([105,107,108,109,111,112,113,114,174,202,203,205,208,210,258,267,271,272,273,274,275,276,277,278,279,280,281,284,328,],[-132,-159,-159,-87,-150,-151,-152,-118,-120,-180,-133,-135,-138,-140,-119,-121,-144,-145,-146,-147,-148,-178,-179,-131,-134,-139,-149,329,-86,]),'DOWNTO':([105,107,108,109,111,112,113,114,174,202,203,205,208,210,258,267,271,272,273,274,275,276,277,278,279,280,281,284,328,],[-132,-159,-159,-87,-150,-151,-152,-118,-120,-180,-133,-135,-138,-140,-119,-121,-144,-145,-146,-147,-148,-178,-179,-131,-134,-139,-149,330,-86,]),'LESS':([105,107,108,109,111,112,113,114,174,203,205,208,210,258,267,279,280,281,328,338,],[196,-159,-159,-87,-150,-151,-152,-118,-120,-133,-135,-138,-140,-119,-121,-134,-139,-149,-86,-118,]),'LESS_EQUAL':([105,107,108,109,111,112,113,114,174,203,205,208,210,258,267,279,280,281,328,338,],[197,-159,-159,-87,-150,-151,-152,-118,-120,-133,-135,-138,-140,-119,-121,-134,-139,-149,-86,-118,]),'GREAT':([105,107,108,109,111,112,113,114,174,203,205,208,210,258,267,279,280,281,328,338,],[198,-159,-159,-87,-150,-151,-152,-118,-120,-133,-135,-138,-140,-119,-121,-134,-139,-149,-86,-118,]),'GREAT_EQUAL':([105,107,108,109,111,112,113,114,174,203,205,208,210,258,267,279,280,281,328,338,],[199,-159,-159,-87,-150,-151,-152,-118,-120,-133,-135,-138,-140,-119,-121,-134,-139,-149,-86,-118,]),'DIFFERENT':([105,107,108,109,111,112,113,114,174,203,205,208,210,258,267,279,280,281,328,338,],[201,-159,-159,-87,-150,-151,-152,-118,-120,-133,-135,-138,-140,-119,-121,-134,-139,-149,-86,-118,]),'DIV':([108,109,111,112,113,114,174,258,267,281,328,338,],[213,-87,-150,-151,-152,-118,-120,-119,-121,-149,-86,-118,]),'DOTDOT':([139,],[232,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_sections':([4,5,84,240,247,250,311,318,376,379,380,385,386,410,],[5,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'empty':([4,5,28,47,78,80,83,84,98,102,107,108,131,132,176,186,187,215,216,219,228,229,237,240,244,245,247,250,311,318,322,326,327,333,334,366,367,372,373,374,376,379,380,384,385,386,410,],[6,6,57,57,145,151,145,6,177,177,205,210,151,151,262,57,57,177,57,57,295,298,145,6,145,145,6,6,6,6,262,57,57,57,151,57,151,151,151,151,6,6,6,57,6,6,6,]),'block':([5,84,240,247,250,311,318,376,379,380,385,386,410,],[8,161,312,319,321,348,354,394,397,398,400,401,415,]),'declaration_section':([5,7,],[9,9,]),'uses_opt':([5,7,],[10,10,]),'constant_declaration':([5,7,],[11,11,]),'type_declaration':([5,7,],[12,12,]),'var_declaration':([5,7,],[13,13,]),'procedure_declarations':([5,7,],[14,14,]),'function_declaration':([5,7,],[15,15,]),'constructor_declaration':([5,7,],[16,16,]),'method_declaration':([5,7,],[17,17,]),'procedure_declaration':([5,7,14,],[22,22,30,]),'compound_statement':([7,28,47,186,187,216,219,326,327,333,366,384,],[27,53,53,53,53,53,53,53,53,53,53,53,]),'id_list':([18,21,40,80,131,132,133,148,153,228,229,334,367,368,372,373,374,388,391,392,393,],[32,42,42,152,152,152,230,152,243,152,152,152,152,152,152,152,152,152,152,152,152,]),'constant_list':([19,],[34,]),'constant':([19,34,],[35,72,]),'type_list':([20,],[37,]),'type_definition':([20,37,],[38,74,]),'declaration_list':([21,],[40,]),'declaration':([21,40,],[41,76,]),'statement_list':([28,333,],[47,366,]),'statement':([28,47,186,187,216,219,326,327,333,366,384,],[48,87,269,270,283,288,360,361,48,87,399,]),'if_statement':([28,47,80,131,132,148,186,187,216,219,228,229,326,327,333,334,366,367,368,372,373,374,384,388,391,392,393,],[49,49,154,154,154,154,49,49,49,49,154,154,49,49,49,154,49,154,154,154,154,154,49,154,154,154,154,]),'assignment_statement':([28,47,80,131,132,148,186,187,216,219,228,229,326,327,333,334,366,367,368,372,373,374,384,388,391,392,393,],[50,50,156,156,156,156,50,50,50,50,156,156,50,50,50,156,50,156,156,156,156,156,50,156,156,156,156,]),'while_statement':([28,47,186,187,216,219,326,327,333,366,384,],[51,51,51,51,51,51,51,51,51,51,51,]),'procedure_call':([28,47,186,187,216,219,326,327,333,366,384,],[52,52,52,52,52,52,52,52,52,52,52,]),'for_statement':([28,47,186,187,216,219,326,327,333,366,384,],[54,54,54,54,54,54,54,54,54,54,54,]),'case_statement':([28,47,80,131,132,148,186,187,216,219,228,229,326,327,333,334,366,367,368,372,373,374,384,388,391,392,393,],[55,55,155,155,155,155,55,55,55,55,155,155,55,55,55,155,55,155,155,155,155,155,55,155,155,155,155,]),'with_statement':([28,47,186,187,216,219,326,327,333,366,384,],[56,56,56,56,56,56,56,56,56,56,56,]),'variable':([28,47,64,65,67,68,80,89,90,91,96,98,99,101,102,103,106,110,131,132,148,169,170,171,172,186,187,188,189,190,191,192,193,194,195,204,209,215,216,217,219,228,229,261,264,265,268,294,326,327,329,330,333,334,359,366,367,368,372,373,374,384,388,391,392,393,],[59,59,111,111,111,118,59,165,166,111,111,111,111,111,111,111,111,111,59,59,59,111,111,111,111,59,59,111,111,111,111,111,111,111,111,111,111,111,59,111,59,59,59,111,111,111,111,111,59,59,111,111,59,59,111,59,59,59,59,59,59,59,59,59,59,59,]),'expression':([64,65,67,91,96,98,99,101,102,103,106,110,169,170,171,172,188,189,190,191,192,193,194,215,217,261,264,265,268,294,329,330,359,],[104,115,117,167,173,176,180,182,176,185,202,214,254,255,256,257,271,272,273,274,275,276,277,176,284,322,180,324,325,117,362,363,383,]),'simple_expression':([64,65,67,91,96,98,99,101,102,103,106,110,169,170,171,172,188,189,190,191,192,193,194,195,215,217,261,264,265,268,294,329,330,359,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,278,105,105,105,105,105,105,105,105,105,105,]),'term':([64,65,67,91,96,98,99,101,102,103,106,110,169,170,171,172,188,189,190,191,192,193,194,195,204,215,217,261,264,265,268,294,329,330,359,],[107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,279,107,107,107,107,107,107,107,107,107,107,]),'factor':([64,65,67,91,96,98,99,101,102,103,106,110,169,170,171,172,188,189,190,191,192,193,194,195,204,209,215,217,261,264,265,268,294,329,330,359,],[108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,280,108,108,108,108,108,108,108,108,108,108,]),'function_call':([64,65,67,91,96,98,99,101,102,103,106,110,169,170,171,172,188,189,190,191,192,193,194,195,204,209,215,217,261,264,265,268,294,329,330,359,],[109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,]),'type_specifier':([75,77,226,227,234,241,308,315,369,371,377,414,],[126,141,291,292,307,313,346,351,389,390,396,417,]),'subrange':([75,77,225,226,227,234,241,308,315,336,369,371,377,414,],[128,128,290,128,128,128,128,128,128,370,128,128,128,128,]),'parameter_list':([78,83,237,244,245,],[143,159,310,316,317,]),'parameter':([78,83,236,237,244,245,],[144,144,309,144,144,144,]),'field_list':([80,131,132,334,367,372,373,374,],[148,228,229,368,388,391,392,393,]),'field':([80,131,132,148,228,229,334,367,368,372,373,374,388,391,392,393,],[150,150,150,239,239,239,150,150,239,150,150,150,239,239,239,239,]),'expression_list':([98,102,215,],[175,183,282,]),'write_arguments':([99,],[178,]),'write_argument':([99,264,],[179,323,]),'index_list':([103,],[184,]),'relop':([105,],[195,]),'simple_expression_tail':([107,],[203,]),'addop':([107,],[204,]),'term_tail':([108,],[208,]),'mulop':([108,],[209,]),'expression_list_tail':([176,322,],[260,358,]),'case_list':([218,404,],[285,411,]),'case_element':([218,332,404,416,],[286,365,286,365,]),'type_expression':([225,],[289,]),'case_part':([228,],[293,]),'method_list':([229,],[296,]),'method':([229,296,],[297,340,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON declaration_sections block DOT','program',6,'p_program','Parser_MiniPascal.py',19),
  ('declaration_sections -> declaration_sections declaration_section','declaration_sections',2,'p_declaration_sections','Parser_MiniPascal.py',25),
  ('declaration_sections -> empty','declaration_sections',1,'p_declaration_sections','Parser_MiniPascal.py',26),
  ('declaration_section -> uses_opt','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',30),
  ('declaration_section -> constant_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',31),
  ('declaration_section -> type_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',32),
  ('declaration_section -> var_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',33),
  ('declaration_section -> procedure_declarations','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',34),
  ('declaration_section -> function_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',35),
  ('declaration_section -> constructor_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',36),
  ('declaration_section -> method_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',37),
  ('method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block','method_declaration',9,'p_method_declaration','Parser_MiniPascal.py',41),
  ('method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block','method_declaration',9,'p_method_declaration','Parser_MiniPascal.py',42),
  ('method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block','method_declaration',11,'p_method_declaration','Parser_MiniPascal.py',43),
  ('method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block','method_declaration',6,'p_method_declaration','Parser_MiniPascal.py',44),
  ('constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block','constructor_declaration',7,'p_constructor_declaration','Parser_MiniPascal.py',48),
  ('constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block','constructor_declaration',6,'p_constructor_declaration','Parser_MiniPascal.py',49),
  ('uses_opt -> USES id_list SEMICOLON','uses_opt',3,'p_uses_opt','Parser_MiniPascal.py',53),
  ('id_list -> ID','id_list',1,'p_id_list_single','Parser_MiniPascal.py',58),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list_multiple','Parser_MiniPascal.py',62),
  ('var_declaration -> VAR declaration_list','var_declaration',2,'p_var_declaration','Parser_MiniPascal.py',66),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser_MiniPascal.py',70),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','Parser_MiniPascal.py',71),
  ('declaration -> id_list COLON type_specifier SEMICOLON','declaration',4,'p_declaration','Parser_MiniPascal.py',75),
  ('block -> declaration_sections compound_statement','block',2,'p_block','Parser_MiniPascal.py',91),
  ('type_declaration -> TYPE type_list','type_declaration',2,'p_type_declaration','Parser_MiniPascal.py',97),
  ('type_list -> type_definition','type_list',1,'p_type_list','Parser_MiniPascal.py',101),
  ('type_list -> type_list type_definition','type_list',2,'p_type_list','Parser_MiniPascal.py',102),
  ('type_definition -> ID EQUAL type_specifier SEMICOLON','type_definition',4,'p_type_definition','Parser_MiniPascal.py',110),
  ('type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier','type_specifier',6,'p_type_specifier','Parser_MiniPascal.py',114),
  ('type_specifier -> subrange','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',115),
  ('type_specifier -> FILE OF type_specifier','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',116),
  ('type_specifier -> SET OF type_specifier','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',117),
  ('type_specifier -> RECORD field_list case_part END','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',118),
  ('type_specifier -> OBJECT field_list method_list END','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',119),
  ('type_specifier -> LPAREN id_list RPAREN','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',120),
  ('type_specifier -> BOOLEAN_LITERAL','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',121),
  ('type_specifier -> INTEGER','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',122),
  ('type_specifier -> BYTE','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',123),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',124),
  ('type_specifier -> STRING','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',125),
  ('type_specifier -> STRING LBRACKET NUMBER RBRACKET','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',126),
  ('type_specifier -> ID','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',127),
  ('type_expression -> type_expression COMMA subrange','type_expression',3,'p_type_expression','Parser_MiniPascal.py',131),
  ('type_expression -> subrange','type_expression',1,'p_type_expression','Parser_MiniPascal.py',132),
  ('subrange -> NUMBER DOTDOT NUMBER','subrange',3,'p_subrange','Parser_MiniPascal.py',136),
  ('subrange -> NUMBER DOTDOT ID','subrange',3,'p_subrange','Parser_MiniPascal.py',137),
  ('field_list -> field_list field','field_list',2,'p_field_list','Parser_MiniPascal.py',143),
  ('field_list -> field','field_list',1,'p_field_list','Parser_MiniPascal.py',144),
  ('field_list -> empty','field_list',1,'p_field_list','Parser_MiniPascal.py',145),
  ('field -> id_list COLON type_specifier','field',3,'p_field','Parser_MiniPascal.py',149),
  ('field -> id_list COLON type_specifier SEMICOLON','field',4,'p_field','Parser_MiniPascal.py',150),
  ('field -> VAR id_list COLON type_specifier','field',4,'p_field','Parser_MiniPascal.py',151),
  ('field -> VAR id_list COLON type_specifier SEMICOLON','field',5,'p_field','Parser_MiniPascal.py',152),
  ('field -> id_list LPAREN STRING_LITERAL RPAREN','field',4,'p_field','Parser_MiniPascal.py',153),
  ('field -> if_statement','field',1,'p_field','Parser_MiniPascal.py',154),
  ('field -> case_statement','field',1,'p_field','Parser_MiniPascal.py',155),
  ('field -> assignment_statement','field',1,'p_field','Parser_MiniPascal.py',156),
  ('case_part -> CASE ID COLON type_specifier OF case_list SEMICOLON','case_part',7,'p_case_part','Parser_MiniPascal.py',160),
  ('case_part -> empty','case_part',1,'p_case_part','Parser_MiniPascal.py',161),
  ('case_list -> case_list SEMICOLON case_element','case_list',3,'p_case_list','Parser_MiniPascal.py',165),
  ('case_list -> case_element','case_list',1,'p_case_list','Parser_MiniPascal.py',166),
  ('case_element -> NUMBER COLON LPAREN field_list RPAREN','case_element',5,'p_case_element','Parser_MiniPascal.py',170),
  ('case_element -> NUMBER COLON field_list','case_element',3,'p_case_element','Parser_MiniPascal.py',171),
  ('method_list -> method_list method','method_list',2,'p_method_list','Parser_MiniPascal.py',178),
  ('method_list -> method','method_list',1,'p_method_list','Parser_MiniPascal.py',179),
  ('method_list -> empty','method_list',1,'p_method_list','Parser_MiniPascal.py',180),
  ('method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON','method',6,'p_method','Parser_MiniPascal.py',184),
  ('method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON','method',6,'p_method','Parser_MiniPascal.py',185),
  ('method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON','method',8,'p_method','Parser_MiniPascal.py',186),
  ('method -> DESTRUCTOR ID SEMICOLON','method',3,'p_method','Parser_MiniPascal.py',187),
  ('case_statement -> CASE expression OF case_list END SEMICOLON','case_statement',6,'p_case_statement','Parser_MiniPascal.py',193),
  ('case_statement -> CASE expression OF case_list ELSE statement_list END SEMICOLON','case_statement',8,'p_case_statement','Parser_MiniPascal.py',194),
  ('case_statement -> CASE expression OF case_list END','case_statement',5,'p_case_statement','Parser_MiniPascal.py',195),
  ('type_specifier -> LONGINT','type_specifier',1,'p_type_specifier_longint','Parser_MiniPascal.py',199),
  ('procedure_declarations -> procedure_declaration','procedure_declarations',1,'p_procedure_declarations','Parser_MiniPascal.py',204),
  ('procedure_declarations -> procedure_declarations procedure_declaration','procedure_declarations',2,'p_procedure_declarations','Parser_MiniPascal.py',205),
  ('procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON','procedure_declaration',8,'p_procedure_declaration','Parser_MiniPascal.py',212),
  ('procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON','procedure_declaration',7,'p_procedure_declaration','Parser_MiniPascal.py',213),
  ('procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON','procedure_declaration',5,'p_procedure_declaration','Parser_MiniPascal.py',214),
  ('procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON FORWARD SEMICOLON','procedure_declaration',8,'p_procedure_declaration','Parser_MiniPascal.py',215),
  ('procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON','procedure_declaration',7,'p_procedure_declaration','Parser_MiniPascal.py',216),
  ('procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON','procedure_declaration',5,'p_procedure_declaration','Parser_MiniPascal.py',217),
  ('function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON','function_declaration',10,'p_function_declaration','Parser_MiniPascal.py',233),
  ('function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON','function_declaration',10,'p_function_declaration','Parser_MiniPascal.py',234),
  ('function_call -> ID LPAREN expression_list RPAREN','function_call',4,'p_function_call','Parser_MiniPascal.py',239),
  ('factor -> function_call','factor',1,'p_factor_function_call','Parser_MiniPascal.py',244),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','Parser_MiniPascal.py',249),
  ('parameter_list -> parameter_list SEMICOLON parameter','parameter_list',3,'p_parameter_list','Parser_MiniPascal.py',250),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','Parser_MiniPascal.py',251),
  ('parameter -> ID COLON type_specifier','parameter',3,'p_parameter','Parser_MiniPascal.py',255),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','Parser_MiniPascal.py',260),
  ('statement_list -> statement SEMICOLON','statement_list',2,'p_statement_list_multi','Parser_MiniPascal.py',265),
  ('statement_list -> statement_list statement SEMICOLON','statement_list',3,'p_statement_list_multi','Parser_MiniPascal.py',266),
  ('statement -> if_statement','statement',1,'p_statement','Parser_MiniPascal.py',276),
  ('statement -> assignment_statement','statement',1,'p_statement','Parser_MiniPascal.py',277),
  ('statement -> while_statement','statement',1,'p_statement','Parser_MiniPascal.py',278),
  ('statement -> procedure_call','statement',1,'p_statement','Parser_MiniPascal.py',279),
  ('statement -> compound_statement','statement',1,'p_statement','Parser_MiniPascal.py',280),
  ('statement -> for_statement','statement',1,'p_statement','Parser_MiniPascal.py',281),
  ('statement -> case_statement','statement',1,'p_statement','Parser_MiniPascal.py',282),
  ('statement -> with_statement','statement',1,'p_statement','Parser_MiniPascal.py',283),
  ('statement -> empty','statement',1,'p_statement','Parser_MiniPascal.py',284),
  ('with_statement -> WITH variable DO statement','with_statement',4,'p_with_statement','Parser_MiniPascal.py',288),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_if_statement','Parser_MiniPascal.py',292),
  ('if_statement -> IF expression THEN statement','if_statement',4,'p_if_statement','Parser_MiniPascal.py',293),
  ('if_statement -> IF expression IN statement THEN statement ELSE statement','if_statement',8,'p_if_statement','Parser_MiniPascal.py',294),
  ('if_statement -> IF expression IN statement THEN statement','if_statement',6,'p_if_statement','Parser_MiniPascal.py',295),
  ('for_statement -> FOR ID COLON_EQUAL expression TO expression DO block','for_statement',8,'p_for_statement','Parser_MiniPascal.py',300),
  ('for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block','for_statement',8,'p_for_statement','Parser_MiniPascal.py',301),
  ('assignment_statement -> variable COLON_EQUAL expression','assignment_statement',3,'p_assignment_statement','Parser_MiniPascal.py',306),
  ('assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON','assignment_statement',4,'p_assignment_statement','Parser_MiniPascal.py',307),
  ('assignment_statement -> variable PLUS COLON_EQUAL expression','assignment_statement',4,'p_assignment_statement','Parser_MiniPascal.py',308),
  ('assignment_statement -> variable MINUS COLON_EQUAL expression','assignment_statement',4,'p_assignment_statement','Parser_MiniPascal.py',309),
  ('assignment_statement -> variable TIMES COLON_EQUAL expression','assignment_statement',4,'p_assignment_statement','Parser_MiniPascal.py',310),
  ('assignment_statement -> variable DIVIDE COLON_EQUAL expression','assignment_statement',4,'p_assignment_statement','Parser_MiniPascal.py',311),
  ('assignment_statement -> ID COLON_EQUAL expression','assignment_statement',3,'p_assignment_statement','Parser_MiniPascal.py',312),
  ('variable -> ID','variable',1,'p_variable_simple','Parser_MiniPascal.py',317),
  ('variable -> variable LBRACKET expression RBRACKET','variable',4,'p_variable_simple','Parser_MiniPascal.py',318),
  ('variable -> variable DOT ID','variable',3,'p_variable_simple','Parser_MiniPascal.py',319),
  ('variable -> ID LBRACKET index_list RBRACKET','variable',4,'p_variable_index','Parser_MiniPascal.py',334),
  ('index_list -> expression','index_list',1,'p_index_list','Parser_MiniPascal.py',338),
  ('index_list -> index_list COMMA expression','index_list',3,'p_index_list','Parser_MiniPascal.py',339),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','Parser_MiniPascal.py',344),
  ('procedure_call -> ID LPAREN expression_list RPAREN','procedure_call',4,'p_procedure_call','Parser_MiniPascal.py',349),
  ('procedure_call -> ID','procedure_call',1,'p_procedure_call','Parser_MiniPascal.py',350),
  ('expression_list -> expression expression_list_tail','expression_list',2,'p_expression_list_multi','Parser_MiniPascal.py',355),
  ('expression_list_tail -> COMMA expression expression_list_tail','expression_list_tail',3,'p_expression_list_tail','Parser_MiniPascal.py',359),
  ('expression_list_tail -> empty','expression_list_tail',1,'p_expression_list_tail','Parser_MiniPascal.py',360),
  ('expression_list -> empty','expression_list',1,'p_expression_list_empty','Parser_MiniPascal.py',364),
  ('expression -> simple_expression relop simple_expression','expression',3,'p_expression','Parser_MiniPascal.py',369),
  ('expression -> simple_expression','expression',1,'p_expression','Parser_MiniPascal.py',370),
  ('simple_expression -> term simple_expression_tail','simple_expression',2,'p_simple_expression','Parser_MiniPascal.py',375),
  ('simple_expression_tail -> addop term','simple_expression_tail',2,'p_simple_expression_tail','Parser_MiniPascal.py',379),
  ('simple_expression_tail -> empty','simple_expression_tail',1,'p_simple_expression_tail','Parser_MiniPascal.py',380),
  ('addop -> PLUS','addop',1,'p_addop','Parser_MiniPascal.py',384),
  ('addop -> MINUS','addop',1,'p_addop','Parser_MiniPascal.py',385),
  ('term -> factor term_tail','term',2,'p_term','Parser_MiniPascal.py',390),
  ('term_tail -> mulop factor','term_tail',2,'p_term_tail','Parser_MiniPascal.py',394),
  ('term_tail -> empty','term_tail',1,'p_term_tail','Parser_MiniPascal.py',395),
  ('mulop -> TIMES','mulop',1,'p_mulop','Parser_MiniPascal.py',399),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','Parser_MiniPascal.py',400),
  ('mulop -> DIV','mulop',1,'p_mulop','Parser_MiniPascal.py',401),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',406),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',407),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',408),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',409),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',410),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','Parser_MiniPascal.py',415),
  ('factor -> variable','factor',1,'p_factor_variable','Parser_MiniPascal.py',419),
  ('factor -> NUMBER','factor',1,'p_factor_number','Parser_MiniPascal.py',423),
  ('factor -> STRING_LITERAL','factor',1,'p_factor_string','Parser_MiniPascal.py',427),
  ('relop -> LESS','relop',1,'p_relop','Parser_MiniPascal.py',434),
  ('relop -> LESS_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',435),
  ('relop -> GREAT','relop',1,'p_relop','Parser_MiniPascal.py',436),
  ('relop -> GREAT_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',437),
  ('relop -> EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',438),
  ('relop -> DIFFERENT','relop',1,'p_relop','Parser_MiniPascal.py',439),
  ('empty -> <empty>','empty',0,'p_empty','Parser_MiniPascal.py',444),
  ('statement -> READLN','statement',1,'p_statement_readln','Parser_MiniPascal.py',448),
  ('statement -> READLN LPAREN variable RPAREN','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',452),
  ('statement -> READLN LBRACKET variable RBRACKET','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',453),
  ('statement -> WRITE LPAREN expression_list RPAREN','statement',4,'p_statement_write','Parser_MiniPascal.py',457),
  ('statement -> WRITELN LPAREN write_arguments RPAREN','statement',4,'p_statement_writeln','Parser_MiniPascal.py',461),
  ('write_arguments -> write_argument','write_arguments',1,'p_write_arguments','Parser_MiniPascal.py',466),
  ('write_arguments -> write_arguments COMMA write_argument','write_arguments',3,'p_write_arguments','Parser_MiniPascal.py',467),
  ('write_argument -> expression','write_argument',1,'p_write_argument','Parser_MiniPascal.py',471),
  ('write_argument -> expression COLON expression','write_argument',3,'p_write_argument','Parser_MiniPascal.py',472),
  ('write_argument -> expression COLON expression COLON expression','write_argument',5,'p_write_argument','Parser_MiniPascal.py',473),
  ('statement -> USES ID SEMICOLON','statement',3,'p_statement_uses','Parser_MiniPascal.py',478),
  ('constant_declaration -> CONST constant_list','constant_declaration',2,'p_constant_declaration','Parser_MiniPascal.py',483),
  ('constant_list -> constant','constant_list',1,'p_constant_list','Parser_MiniPascal.py',487),
  ('constant_list -> constant_list constant','constant_list',2,'p_constant_list','Parser_MiniPascal.py',488),
  ('constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',492),
  ('constant -> ID EQUAL NUMBER SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',493),
  ('constant -> ID EQUAL STRING_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',494),
  ('constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',495),
  ('expression -> expression AND expression','expression',3,'p_expression_logical','Parser_MiniPascal.py',511),
  ('expression -> expression OR expression','expression',3,'p_expression_logical','Parser_MiniPascal.py',512),
  ('expression -> NOT expression','expression',2,'p_expression_logical','Parser_MiniPascal.py',513),
]
