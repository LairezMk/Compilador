
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocELSEAND ARRAY BEGIN BOOLEAN_LITERAL BYTE CASE CHAR CHARACTER_LITERAL COLON COLON_EQUAL COMMA CONST CONSTRUCTOR DESTRUCTOR DIFFERENT DIV DIVIDE DO DOT DOTDOT DOWNTO ELSE END EQUAL FALSE FILE FOR FORWARD FUNCTION GOTO GREAT GREAT_EQUAL ID IF IN INTEGER LABEL LBLOCK LBRACKET LESS LESS_EQUAL LONGINT LPAREN MINUS MOD NIL NOT NUMBER OBJECT OF OR PACKED PLUS PROCEDURE PROGRAM RBLOCK RBRACKET READLINE READLN RECORD REPEAT RPAREN SEMICOLON SET STRING STRING_LITERAL SUBRANGE THEN TIMES TO TRUE TYPE UNTIL USES VAR WHILE WITH WRITE WRITELNprogram : PROGRAM ID SEMICOLON declaration_sections block DOTdeclaration_sections : declaration_sections declaration_section\n                            | emptydeclaration_section : uses_opt\n                           | constant_declaration\n                           | type_declaration\n                           | var_declaration\n                           | procedure_declarations\n                           | function_declaration\n                           | constructor_declaration\n                           | method_declarationmethod_declaration : CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block \n                          | PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block \n                          | FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block\n                          | DESTRUCTOR ID DOT ID SEMICOLON blockconstructor_declaration : CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block\n                               | CONSTRUCTOR ID LPAREN RPAREN SEMICOLON blockuses_opt : USES id_list SEMICOLONid_list : ID\n               | id_list COMMA IDvar_declaration : VAR declaration_listdeclaration_list : declaration\n                        | declaration_list declarationdeclaration : id_list COLON type_specifier SEMICOLONblock : declaration_sections compound_statementtype_declaration : TYPE type_listtype_list : type_definition\n                 | type_list type_definitiontype_definition : ID EQUAL type_specifier SEMICOLONtype_specifier : ARRAY LBRACKET type_expression RBRACKET OF type_specifier\n                      | subrange\n                      | FILE OF type_specifier\n                      | SET OF type_specifier\n                      | RECORD field_list case_part END\n                      | OBJECT field_list method_list END                              \n                      | LPAREN id_list RPAREN\n                      | BOOLEAN_LITERAL\n                      | INTEGER\n                      | BYTE\n                      | CHAR\n                      | STRING\n                      | STRING LBRACKET NUMBER RBRACKET\n                      | IDtype_expression : type_expression COMMA subrange\n                       | subrangesubrange : NUMBER DOTDOT NUMBER\n                | NUMBER DOTDOT IDfield_list : field_list field\n                  | field\n                  | emptyfield : id_list COLON type_specifier\n             | id_list COLON type_specifier SEMICOLON\n             | VAR id_list COLON type_specifier\n             | VAR id_list COLON type_specifier SEMICOLON\n             | id_list LPAREN STRING_LITERAL RPAREN\n             | if_statement\n             | case_statement\n             | assignment_statementcase_part : CASE ID COLON type_specifier OF case_list SEMICOLON\n                 | emptycase_list : case_list SEMICOLON case_element\n                 | case_elementcase_element : NUMBER COLON LPAREN field_list RPAREN\n                    | NUMBER COLON field_listmethod_list : method_list method\n                   | method\n                   | emptymethod : CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON\n              | PROCEDURE ID LPAREN field_list RPAREN SEMICOLON  \n              | FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON\n              | DESTRUCTOR ID SEMICOLONcase_statement : CASE expression OF case_list END SEMICOLON\n                      | CASE expression OF case_list ELSE statement_list END SEMICOLON  \n                      | CASE expression OF case_list ENDtype_specifier : LONGINTprocedure_declarations : procedure_declaration\n                              | procedure_declarations procedure_declarationprocedure_declaration : PROCEDURE ID LPAREN field_list RPAREN SEMICOLON block SEMICOLON\n                             | PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON\n                             | PROCEDURE ID SEMICOLON block SEMICOLON\n                             | PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON\n                             | PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON\n                             | PROCEDURE ID SEMICOLON FORWARD SEMICOLONfunction_declaration : FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON\n                            | FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLONfunction_call : ID LPAREN expression_list RPARENfactor : function_callparameter_list : parameter\n                      | parameter_list SEMICOLON parameter\n                      | emptyparameter : id_list COLON type_specifier\n                 | VAR id_list COLON type_specifiercompound_statement : BEGIN statement_list ENDstatement_list : statement SEMICOLON\n                      | statement_list statement SEMICOLONstatement : if_statement\n                 | assignment_statement\n                 | while_statement\n                 | procedure_call\n                 | compound_statement\n                 | for_statement\n                 | case_statement\n                 | with_statement\n                 | emptywith_statement : WITH variable DO statementif_statement : IF expression THEN statement ELSE statement\n                    | IF expression THEN statement\n                    | IF expression IN statement THEN statement ELSE statement\n                    | IF expression IN statement THEN statementfor_statement : FOR ID COLON_EQUAL expression TO expression DO block\n                     | FOR ID COLON_EQUAL expression DOWNTO expression DO blockassignment_statement : variable COLON_EQUAL expression\n                            | variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON\n                            | variable PLUS COLON_EQUAL expression\n                            | variable MINUS COLON_EQUAL expression\n                            | variable TIMES COLON_EQUAL expression\n                            | variable DIVIDE COLON_EQUAL expression\n                            | ID COLON_EQUAL expressionvariable : ID\n                | variable LBRACKET expression RBRACKET\n                | variable DOT IDvariable : ID LBRACKET index_list RBRACKETindex_list : expression\n                  | index_list COMMA expressionwhile_statement : WHILE expression DO statementprocedure_call : ID LPAREN expression_list RPAREN\n                      | IDexpression_list : expression expression_list_tailexpression_list_tail : COMMA expression expression_list_tail\n                            | emptyexpression_list : emptyexpression : simple_expression relop simple_expression\n                  | simple_expressionsimple_expression : term simple_expression_tailsimple_expression_tail : addop term\n                              | emptyaddop : PLUS\n             | MINUSterm : factor term_tailterm_tail : mulop factor\n                 | emptymulop : TIMES\n             | DIVIDE\n             | DIVexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expressionfactor : LPAREN expression RPARENfactor : variablefactor : NUMBERfactor : STRING_LITERALrelop : LESS\n             | LESS_EQUAL\n             | GREAT\n             | GREAT_EQUAL\n             | EQUAL\n             | DIFFERENTempty :statement : READLNstatement : READLN LPAREN variable RPAREN\n                 | READLN LBRACKET variable RBRACKETstatement : WRITE LPAREN expression_list RPARENstatement : WRITELN LPAREN write_arguments RPARENwrite_arguments : write_argument\n                       | write_arguments COMMA write_argumentwrite_argument : expression\n                      | expression COLON expression\n                      | expression COLON expression COLON expressionstatement : USES ID SEMICOLONconstant_declaration : CONST constant_listconstant_list : constant\n                     | constant_list constantconstant : ID EQUAL CHARACTER_LITERAL SEMICOLON\n                | ID EQUAL NUMBER SEMICOLON\n                | ID EQUAL STRING_LITERAL SEMICOLON\n                | ID EQUAL BOOLEAN_LITERAL SEMICOLONexpression : expression AND expression\n                  | expression OR expression\n                  | NOT expression'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,29,],[0,-1,]),'ID':([2,18,19,20,21,23,24,25,26,27,28,31,34,35,37,38,40,41,47,49,50,51,52,53,54,55,56,57,58,62,63,64,65,66,67,68,71,72,74,75,76,77,78,79,80,81,82,83,85,86,88,89,90,91,96,97,98,99,101,102,103,105,106,107,108,109,110,111,112,113,114,125,128,131,132,133,134,135,136,137,138,140,146,149,151,152,154,155,156,157,160,165,168,170,171,172,173,175,182,183,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,220,221,222,223,224,225,227,228,229,230,233,234,236,237,239,241,243,246,247,253,254,255,256,257,258,259,260,261,263,265,266,267,268,269,270,271,273,274,275,276,277,278,279,280,281,282,283,285,290,293,294,296,301,302,303,304,305,307,308,309,312,316,318,329,330,331,332,333,334,336,337,340,342,348,353,354,355,363,364,365,368,370,371,372,373,375,376,377,378,381,382,388,392,393,395,396,397,403,404,405,406,418,],[3,33,36,39,33,43,44,45,46,-25,63,69,36,-173,39,-27,33,-22,63,-96,-97,-98,-99,-100,-101,-102,-103,-104,-161,100,-127,114,114,116,114,119,120,-174,-28,125,-23,125,33,147,148,158,159,148,164,-93,-94,119,119,114,114,175,114,114,114,114,114,-133,114,-160,-160,-87,114,-151,-152,-153,-119,-43,-31,148,148,33,-37,-38,-39,-40,-41,-75,33,148,-49,-50,33,-56,-57,-58,148,-95,-112,114,114,114,114,-121,-171,-118,63,63,114,114,114,114,114,114,114,114,-154,-155,-156,-157,-158,-159,-181,-134,114,-136,-137,-138,-139,114,-141,-142,-143,-144,114,63,114,63,-175,-176,-177,-178,-29,125,125,148,148,308,-24,33,125,33,-48,125,33,33,-162,-163,-113,-114,-115,-116,-117,-120,-164,114,-165,114,114,-126,-122,114,-107,-145,-146,-147,-148,-149,-179,-180,-132,-135,-140,-150,-125,-105,-32,-33,341,344,345,346,347,-36,-46,-47,125,125,-51,125,63,63,-86,114,114,-74,63,148,-34,-35,-42,-52,-55,-53,114,-106,-109,-72,63,148,148,125,125,148,148,148,125,-54,63,148,-30,148,148,148,-108,-110,-111,-73,125,]),'SEMICOLON':([3,27,28,32,33,45,47,48,49,50,51,52,53,54,55,56,57,58,63,69,78,86,87,88,100,105,107,108,109,111,112,113,114,120,121,122,123,124,125,126,128,134,135,136,137,138,140,141,142,143,144,150,151,152,155,156,157,161,162,163,164,165,168,169,175,182,183,187,203,204,206,209,211,217,220,239,240,241,246,247,248,253,254,255,256,257,258,259,260,261,265,268,269,271,273,274,275,276,277,278,279,280,281,282,283,285,287,288,290,293,294,305,307,308,310,311,313,316,319,320,322,323,329,330,331,334,336,337,340,342,347,348,349,350,353,354,355,356,357,358,359,364,365,368,369,370,372,382,388,391,393,398,399,400,403,404,405,406,407,409,410,415,421,],[4,-25,-160,70,-19,84,-160,88,-96,-97,-98,-99,-100,-101,-102,-103,-104,-161,-127,84,-160,-93,165,-94,182,-133,-160,-160,-87,-151,-152,-153,-119,-20,221,222,223,224,-43,225,-31,-37,-38,-39,-40,-41,-75,234,236,-88,-90,242,-49,-50,-56,-57,-58,249,250,251,252,-95,-112,255,-121,-171,-118,-160,-181,-134,-136,-139,-141,-160,-160,-160,314,-48,-160,-160,321,-162,-163,-113,-114,-115,-116,-117,-120,-164,-165,-126,-122,-107,-145,-146,-147,-148,-149,-179,-180,-132,-135,-140,-150,-125,335,-62,-105,-32,-33,-36,-46,-47,-89,-91,236,353,236,236,360,361,-160,-160,-86,368,-160,-160,-34,-35,379,-42,380,-92,-52,-55,382,383,384,385,386,-106,-109,-72,-61,-160,-64,-54,-160,406,-30,412,413,414,-108,-110,-111,-73,-63,416,417,420,422,]),'USES':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,28,30,34,35,37,38,40,41,47,70,72,74,76,84,86,88,165,187,188,217,220,221,222,223,224,225,234,242,249,250,251,252,314,315,321,324,329,330,336,352,360,361,370,380,383,384,385,386,388,389,390,401,402,412,413,414,419,],[-160,18,-3,18,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,62,-77,-172,-173,-26,-27,-21,-22,62,-18,-174,-28,-23,-160,-93,-94,-95,62,62,62,62,-175,-176,-177,-178,-29,-24,-160,-160,-80,-83,-160,-160,-17,-160,-15,62,62,62,-16,-79,-82,62,-160,-160,-160,-78,-81,62,-160,-160,-12,-13,-84,-85,-160,-14,]),'CONST':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,70,72,74,76,84,86,221,222,223,224,225,234,242,249,250,251,252,314,315,321,324,352,360,361,380,383,384,385,386,389,390,401,402,412,413,414,419,],[-160,19,-3,19,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,-77,-172,-173,-26,-27,-21,-22,-18,-174,-28,-23,-160,-93,-175,-176,-177,-178,-29,-24,-160,-160,-80,-83,-160,-160,-17,-160,-15,-16,-79,-82,-160,-160,-160,-78,-81,-160,-160,-12,-13,-84,-85,-160,-14,]),'TYPE':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,70,72,74,76,84,86,221,222,223,224,225,234,242,249,250,251,252,314,315,321,324,352,360,361,380,383,384,385,386,389,390,401,402,412,413,414,419,],[-160,20,-3,20,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,-77,-172,-173,-26,-27,-21,-22,-18,-174,-28,-23,-160,-93,-175,-176,-177,-178,-29,-24,-160,-160,-80,-83,-160,-160,-17,-160,-15,-16,-79,-82,-160,-160,-160,-78,-81,-160,-160,-12,-13,-84,-85,-160,-14,]),'VAR':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,49,50,51,52,53,54,55,56,57,58,63,70,72,74,76,78,80,83,84,86,105,107,108,109,111,112,113,114,125,128,131,132,134,135,136,137,138,140,149,151,152,155,156,157,160,168,175,182,183,187,203,204,206,209,211,217,220,221,222,223,224,225,229,230,234,236,239,241,242,246,247,249,250,251,252,253,254,255,256,257,258,259,260,261,265,268,269,271,273,274,275,276,277,278,279,280,281,282,283,285,290,293,294,305,307,308,314,315,316,321,324,329,330,331,334,337,340,342,348,352,353,354,355,360,361,364,365,368,371,372,376,377,378,380,382,383,384,385,386,388,389,390,392,393,395,396,397,401,402,403,404,405,406,412,413,414,419,],[-160,21,-3,21,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,-77,-172,-173,-26,-27,-21,-22,-96,-97,-98,-99,-100,-101,-102,-103,-104,-161,-127,-18,-174,-28,-23,146,154,154,-160,-93,-133,-160,-160,-87,-151,-152,-153,-119,-43,-31,154,154,-37,-38,-39,-40,-41,-75,154,-49,-50,-56,-57,-58,154,-112,-121,-171,-118,-160,-181,-134,-136,-139,-141,-160,-160,-175,-176,-177,-178,-29,154,154,-24,146,146,-48,-160,146,146,-160,-80,-83,-160,-162,-163,-113,-114,-115,-116,-117,-120,-164,-165,-126,-122,-107,-145,-146,-147,-148,-149,-179,-180,-132,-135,-140,-150,-125,-105,-32,-33,-36,-46,-47,-160,-17,-51,-160,-15,-160,-160,-86,-74,154,-34,-35,-42,-16,-52,-55,-53,-79,-82,-106,-109,-72,154,154,154,154,154,-160,-54,-160,-160,-78,-81,-160,-160,-160,154,-30,154,154,154,-12,-13,-108,-110,-111,-73,-84,-85,-160,-14,]),'FUNCTION':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,49,50,51,52,53,54,55,56,57,58,63,70,72,74,76,84,86,105,107,108,109,111,112,113,114,125,128,132,134,135,136,137,138,140,151,152,155,156,157,168,175,182,183,187,203,204,206,209,211,217,220,221,222,223,224,225,230,234,241,242,249,250,251,252,253,254,255,256,257,258,259,260,261,265,268,269,271,273,274,275,276,277,278,279,280,281,282,283,285,290,293,294,298,299,300,305,307,308,314,315,316,321,324,329,330,331,334,340,342,343,348,352,353,354,355,360,361,364,365,368,379,380,382,383,384,385,386,388,389,390,393,401,402,403,404,405,406,412,413,414,416,417,419,422,],[-160,23,-3,23,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,-77,-172,-173,-26,-27,-21,-22,-96,-97,-98,-99,-100,-101,-102,-103,-104,-161,-127,-18,-174,-28,-23,-160,-93,-133,-160,-160,-87,-151,-152,-153,-119,-43,-31,-160,-37,-38,-39,-40,-41,-75,-49,-50,-56,-57,-58,-112,-121,-171,-118,-160,-181,-134,-136,-139,-141,-160,-160,-175,-176,-177,-178,-29,303,-24,-48,-160,-160,-80,-83,-160,-162,-163,-113,-114,-115,-116,-117,-120,-164,-165,-126,-122,-107,-145,-146,-147,-148,-149,-179,-180,-132,-135,-140,-150,-125,-105,-32,-33,303,-66,-67,-36,-46,-47,-160,-17,-51,-160,-15,-160,-160,-86,-74,-34,-35,-65,-42,-16,-52,-55,-53,-79,-82,-106,-109,-72,-71,-160,-54,-160,-160,-78,-81,-160,-160,-160,-30,-12,-13,-108,-110,-111,-73,-84,-85,-160,-68,-69,-14,-70,]),'CONSTRUCTOR':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,49,50,51,52,53,54,55,56,57,58,63,70,72,74,76,84,86,105,107,108,109,111,112,113,114,125,128,132,134,135,136,137,138,140,151,152,155,156,157,168,175,182,183,187,203,204,206,209,211,217,220,221,222,223,224,225,230,234,241,242,249,250,251,252,253,254,255,256,257,258,259,260,261,265,268,269,271,273,274,275,276,277,278,279,280,281,282,283,285,290,293,294,298,299,300,305,307,308,314,315,316,321,324,329,330,331,334,340,342,343,348,352,353,354,355,360,361,364,365,368,379,380,382,383,384,385,386,388,389,390,393,401,402,403,404,405,406,412,413,414,416,417,419,422,],[-160,24,-3,24,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,-77,-172,-173,-26,-27,-21,-22,-96,-97,-98,-99,-100,-101,-102,-103,-104,-161,-127,-18,-174,-28,-23,-160,-93,-133,-160,-160,-87,-151,-152,-153,-119,-43,-31,-160,-37,-38,-39,-40,-41,-75,-49,-50,-56,-57,-58,-112,-121,-171,-118,-160,-181,-134,-136,-139,-141,-160,-160,-175,-176,-177,-178,-29,301,-24,-48,-160,-160,-80,-83,-160,-162,-163,-113,-114,-115,-116,-117,-120,-164,-165,-126,-122,-107,-145,-146,-147,-148,-149,-179,-180,-132,-135,-140,-150,-125,-105,-32,-33,301,-66,-67,-36,-46,-47,-160,-17,-51,-160,-15,-160,-160,-86,-74,-34,-35,-65,-42,-16,-52,-55,-53,-79,-82,-106,-109,-72,-71,-160,-54,-160,-160,-78,-81,-160,-160,-160,-30,-12,-13,-108,-110,-111,-73,-84,-85,-160,-68,-69,-14,-70,]),'PROCEDURE':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,49,50,51,52,53,54,55,56,57,58,63,70,72,74,76,84,86,105,107,108,109,111,112,113,114,125,128,132,134,135,136,137,138,140,151,152,155,156,157,168,175,182,183,187,203,204,206,209,211,217,220,221,222,223,224,225,230,234,241,242,249,250,251,252,253,254,255,256,257,258,259,260,261,265,268,269,271,273,274,275,276,277,278,279,280,281,282,283,285,290,293,294,298,299,300,305,307,308,314,315,316,321,324,329,330,331,334,340,342,343,348,352,353,354,355,360,361,364,365,368,379,380,382,383,384,385,386,388,389,390,393,401,402,403,404,405,406,412,413,414,416,417,419,422,],[-160,25,-3,25,-2,-4,-5,-6,-7,31,-9,-10,-11,-76,-25,-77,-172,-173,-26,-27,-21,-22,-96,-97,-98,-99,-100,-101,-102,-103,-104,-161,-127,-18,-174,-28,-23,-160,-93,-133,-160,-160,-87,-151,-152,-153,-119,-43,-31,-160,-37,-38,-39,-40,-41,-75,-49,-50,-56,-57,-58,-112,-121,-171,-118,-160,-181,-134,-136,-139,-141,-160,-160,-175,-176,-177,-178,-29,302,-24,-48,-160,-160,-80,-83,-160,-162,-163,-113,-114,-115,-116,-117,-120,-164,-165,-126,-122,-107,-145,-146,-147,-148,-149,-179,-180,-132,-135,-140,-150,-125,-105,-32,-33,302,-66,-67,-36,-46,-47,-160,-17,-51,-160,-15,-160,-160,-86,-74,-34,-35,-65,-42,-16,-52,-55,-53,-79,-82,-106,-109,-72,-71,-160,-54,-160,-160,-78,-81,-160,-160,-160,-30,-12,-13,-108,-110,-111,-73,-84,-85,-160,-68,-69,-14,-70,]),'DESTRUCTOR':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,49,50,51,52,53,54,55,56,57,58,63,70,72,74,76,84,86,105,107,108,109,111,112,113,114,125,128,132,134,135,136,137,138,140,151,152,155,156,157,168,175,182,183,187,203,204,206,209,211,217,220,221,222,223,224,225,230,234,241,242,249,250,251,252,253,254,255,256,257,258,259,260,261,265,268,269,271,273,274,275,276,277,278,279,280,281,282,283,285,290,293,294,298,299,300,305,307,308,314,315,316,321,324,329,330,331,334,340,342,343,348,352,353,354,355,360,361,364,365,368,379,380,382,383,384,385,386,388,389,390,393,401,402,403,404,405,406,412,413,414,416,417,419,422,],[-160,26,-3,26,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,-77,-172,-173,-26,-27,-21,-22,-96,-97,-98,-99,-100,-101,-102,-103,-104,-161,-127,-18,-174,-28,-23,-160,-93,-133,-160,-160,-87,-151,-152,-153,-119,-43,-31,-160,-37,-38,-39,-40,-41,-75,-49,-50,-56,-57,-58,-112,-121,-171,-118,-160,-181,-134,-136,-139,-141,-160,-160,-175,-176,-177,-178,-29,304,-24,-48,-160,-160,-80,-83,-160,-162,-163,-113,-114,-115,-116,-117,-120,-164,-165,-126,-122,-107,-145,-146,-147,-148,-149,-179,-180,-132,-135,-140,-150,-125,-105,-32,-33,304,-66,-67,-36,-46,-47,-160,-17,-51,-160,-15,-160,-160,-86,-74,-34,-35,-65,-42,-16,-52,-55,-53,-79,-82,-106,-109,-72,-71,-160,-54,-160,-160,-78,-81,-160,-160,-160,-30,-12,-13,-108,-110,-111,-73,-84,-85,-160,-68,-69,-14,-70,]),'BEGIN':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,28,30,34,35,37,38,40,41,47,70,72,74,76,84,86,88,165,187,188,217,220,221,222,223,224,225,234,242,249,250,251,252,314,315,321,324,329,330,336,352,360,361,370,380,383,384,385,386,388,389,390,401,402,412,413,414,419,],[-160,-160,-3,28,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,28,-77,-172,-173,-26,-27,-21,-22,28,-18,-174,-28,-23,-160,-93,-94,-95,28,28,28,28,-175,-176,-177,-178,-29,-24,-160,-160,-80,-83,-160,-160,-17,-160,-15,28,28,28,-16,-79,-82,28,-160,-160,-160,-78,-81,28,-160,-160,-12,-13,-84,-85,-160,-14,]),'DOT':([8,27,43,44,45,46,59,63,86,111,114,118,119,148,166,167,175,260,269,341,],[29,-25,79,81,82,85,97,-119,-93,97,-119,97,-119,-119,97,97,-121,-120,-122,-119,]),'ELSE':([27,49,50,51,52,53,54,55,56,57,58,63,86,105,107,108,109,111,112,113,114,125,128,134,135,136,137,138,140,151,152,155,156,157,168,175,182,183,187,203,204,206,209,211,217,220,241,253,254,255,256,257,258,259,260,261,265,268,269,271,273,274,275,276,277,278,279,280,281,282,283,285,287,288,290,293,294,305,307,308,316,329,330,331,334,337,340,342,348,353,354,355,364,365,368,369,372,382,388,393,403,404,405,406,407,],[-25,-96,-97,-98,-99,-100,-101,-102,-103,-104,-161,-127,-93,-133,-160,-160,-87,-151,-152,-153,-119,-43,-31,-37,-38,-39,-40,-41,-75,-49,-50,-56,-57,-58,-112,-121,-171,-118,-160,-181,-134,-136,-139,-141,-160,-160,-48,-162,-163,-113,-114,-115,-116,-117,-120,-164,-165,-126,-122,329,-145,-146,-147,-148,-149,-179,-180,-132,-135,-140,-150,-125,336,-62,-105,-32,-33,-36,-46,-47,-51,-160,-160,-86,-74,-160,-34,-35,-42,-52,-55,-53,-106,388,-72,-61,-64,-54,-160,-30,-108,-110,-111,-73,-63,]),'RPAREN':([27,33,49,50,51,52,53,54,55,56,57,58,63,78,80,83,86,98,102,105,107,108,109,111,112,113,114,119,120,125,128,134,135,136,137,138,140,142,143,144,149,151,152,155,156,157,160,166,168,175,176,177,178,179,180,181,182,183,184,187,203,204,206,209,211,215,216,217,220,231,239,241,246,247,253,254,255,256,257,258,259,260,261,262,264,265,268,269,271,273,274,275,276,277,278,279,280,281,282,283,284,285,290,293,294,305,307,308,310,311,313,316,317,319,320,325,326,327,329,330,331,334,340,342,348,350,353,354,355,362,364,365,368,371,376,377,378,382,387,388,392,393,395,396,397,403,404,405,406,],[-25,-19,-96,-97,-98,-99,-100,-101,-102,-103,-104,-161,-127,-160,150,161,-93,-160,-160,-133,-160,-160,-87,-151,-152,-153,-119,-119,-20,-43,-31,-37,-38,-39,-40,-41,-75,235,-88,-90,240,-49,-50,-56,-57,-58,248,253,-112,-121,261,-160,-131,265,-166,-168,-171,-118,268,-160,-181,-134,-136,-139,-141,283,-160,-160,-160,305,-160,-48,-160,-160,-162,-163,-113,-114,-115,-116,-117,-120,-164,-128,-130,-165,-126,-122,-107,-145,-146,-147,-148,-149,-179,-180,-132,-135,-140,-150,331,-125,-105,-32,-33,-36,-46,-47,-89,-91,351,-51,354,356,357,-160,-167,-169,-160,-160,-86,-74,-34,-35,-42,-92,-52,-55,-53,-129,-106,-109,-72,-160,-160,-160,-160,-54,-170,-160,407,-30,409,410,411,-108,-110,-111,-73,]),'IF':([27,28,47,49,50,51,52,53,54,55,56,57,58,63,80,83,86,88,105,107,108,109,111,112,113,114,125,128,131,132,134,135,136,137,138,140,149,151,152,155,156,157,160,165,168,175,182,183,187,188,203,204,206,209,211,217,220,229,230,241,253,254,255,256,257,258,259,260,261,265,268,269,271,273,274,275,276,277,278,279,280,281,282,283,285,290,293,294,305,307,308,316,329,330,331,334,336,337,340,342,348,353,354,355,364,365,368,370,371,372,376,377,378,382,388,392,393,395,396,397,403,404,405,406,],[-25,64,64,-96,-97,-98,-99,-100,-101,-102,-103,-104,-161,-127,64,64,-93,-94,-133,-160,-160,-87,-151,-152,-153,-119,-43,-31,64,64,-37,-38,-39,-40,-41,-75,64,-49,-50,-56,-57,-58,64,-95,-112,-121,-171,-118,64,64,-181,-134,-136,-139,-141,64,64,64,64,-48,-162,-163,-113,-114,-115,-116,-117,-120,-164,-165,-126,-122,-107,-145,-146,-147,-148,-149,-179,-180,-132,-135,-140,-150,-125,-105,-32,-33,-36,-46,-47,-51,64,64,-86,-74,64,64,-34,-35,-42,-52,-55,-53,-106,-109,-72,64,64,64,64,64,64,-54,64,64,-30,64,64,64,-108,-110,-111,-73,]),'CASE':([27,28,47,49,50,51,52,53,54,55,56,57,58,63,80,83,86,88,105,107,108,109,111,112,113,114,125,128,131,132,134,135,136,137,138,140,149,151,152,155,156,157,160,165,168,175,182,183,187,188,203,204,206,209,211,217,220,229,230,241,253,254,255,256,257,258,259,260,261,265,268,269,271,273,274,275,276,277,278,279,280,281,282,283,285,290,293,294,305,307,308,316,329,330,331,334,336,337,340,342,348,353,354,355,364,365,368,370,371,372,376,377,378,382,388,392,393,395,396,397,403,404,405,406,],[-25,67,67,-96,-97,-98,-99,-100,-101,-102,-103,-104,-161,-127,67,67,-93,-94,-133,-160,-160,-87,-151,-152,-153,-119,-43,-31,67,67,-37,-38,-39,-40,-41,-75,67,-49,-50,-56,-57,-58,67,-95,-112,-121,-171,-118,67,67,-181,-134,-136,-139,-141,67,67,296,67,-48,-162,-163,-113,-114,-115,-116,-117,-120,-164,-165,-126,-122,-107,-145,-146,-147,-148,-149,-179,-180,-132,-135,-140,-150,-125,-105,-32,-33,-36,-46,-47,-51,67,67,-86,-74,67,67,-34,-35,-42,-52,-55,-53,-106,-109,-72,67,67,67,67,67,67,-54,67,67,-30,67,67,67,-108,-110,-111,-73,]),'END':([27,47,49,50,51,52,53,54,55,56,57,58,63,86,88,105,107,108,109,111,112,113,114,125,128,131,132,134,135,136,137,138,140,151,152,155,156,157,165,168,175,182,183,187,203,204,206,209,211,217,220,229,230,241,253,254,255,256,257,258,259,260,261,265,268,269,271,273,274,275,276,277,278,279,280,281,282,283,285,287,288,290,293,294,295,297,298,299,300,305,307,308,316,329,330,331,334,337,340,342,343,348,353,354,355,364,365,368,369,370,372,379,382,388,393,403,404,405,406,407,416,417,420,422,],[-25,86,-96,-97,-98,-99,-100,-101,-102,-103,-104,-161,-127,-93,-94,-133,-160,-160,-87,-151,-152,-153,-119,-43,-31,-160,-160,-37,-38,-39,-40,-41,-75,-49,-50,-56,-57,-58,-95,-112,-121,-171,-118,-160,-181,-134,-136,-139,-141,-160,-160,-160,-160,-48,-162,-163,-113,-114,-115,-116,-117,-120,-164,-165,-126,-122,-107,-145,-146,-147,-148,-149,-179,-180,-132,-135,-140,-150,-125,334,-62,-105,-32,-33,340,-60,342,-66,-67,-36,-46,-47,-51,-160,-160,-86,-74,-160,-34,-35,-65,-42,-52,-55,-53,-106,-109,-72,-61,391,-64,-71,-54,-160,-30,-108,-110,-111,-73,-63,-68,-69,-59,-70,]),'THEN':([27,49,50,51,52,53,54,55,56,57,58,63,86,104,105,107,108,109,111,112,113,114,168,175,182,183,187,188,203,204,206,209,211,217,220,253,254,255,256,257,258,259,260,261,265,268,269,271,272,273,274,275,276,277,278,279,280,281,282,283,285,290,329,330,331,334,364,365,368,388,403,404,405,406,],[-25,-96,-97,-98,-99,-100,-101,-102,-103,-104,-161,-127,-93,187,-133,-160,-160,-87,-151,-152,-153,-119,-112,-121,-171,-118,-160,-160,-181,-134,-136,-139,-141,-160,-160,-162,-163,-113,-114,-115,-116,-117,-120,-164,-165,-126,-122,-107,330,-145,-146,-147,-148,-149,-179,-180,-132,-135,-140,-150,-125,-105,-160,-160,-86,-74,-106,-109,-72,-160,-108,-110,-111,-73,]),'READLN':([28,47,88,165,187,188,217,220,329,330,336,370,388,],[58,58,-94,-95,58,58,58,58,58,58,58,58,58,]),'WRITE':([28,47,88,165,187,188,217,220,329,330,336,370,388,],[60,60,-94,-95,60,60,60,60,60,60,60,60,60,]),'WRITELN':([28,47,88,165,187,188,217,220,329,330,336,370,388,],[61,61,-94,-95,61,61,61,61,61,61,61,61,61,]),'WHILE':([28,47,88,165,187,188,217,220,329,330,336,370,388,],[65,65,-94,-95,65,65,65,65,65,65,65,65,65,]),'FOR':([28,47,88,165,187,188,217,220,329,330,336,370,388,],[66,66,-94,-95,66,66,66,66,66,66,66,66,66,]),'WITH':([28,47,88,165,187,188,217,220,329,330,336,370,388,],[68,68,-94,-95,68,68,68,68,68,68,68,68,68,]),'COMMA':([32,33,42,105,107,108,109,111,112,113,114,120,145,148,153,175,177,179,180,181,185,186,203,204,206,209,211,231,238,245,260,269,273,274,275,276,277,278,279,280,281,282,283,291,292,307,308,325,326,327,328,331,374,387,],[71,-19,71,-133,-160,-160,-87,-151,-152,-153,-119,-20,71,-19,71,-121,263,266,-166,-168,270,-123,-181,-134,-136,-139,-141,71,71,71,-120,-122,-145,-146,-147,-148,-149,-179,-180,-132,-135,-140,-150,339,-45,-46,-47,263,-167,-169,-124,-86,-44,-170,]),'COLON':([33,42,105,107,108,109,111,112,113,114,120,145,148,153,175,181,203,204,206,209,211,235,238,245,260,269,273,274,275,276,277,278,279,280,281,282,283,289,327,331,341,351,411,],[-19,77,-133,-160,-160,-87,-151,-152,-153,-119,-20,237,-19,243,-121,267,-181,-134,-136,-139,-141,309,312,318,-120,-122,-145,-146,-147,-148,-149,-179,-180,-132,-135,-140,-150,337,363,-86,375,381,418,]),'EQUAL':([36,39,105,107,108,109,111,112,113,114,175,204,206,209,211,260,269,281,282,283,331,341,],[73,75,201,-160,-160,-87,-151,-152,-153,-119,-121,-134,-136,-139,-141,-120,-122,-135,-140,-150,-86,-119,]),'LPAREN':([43,44,45,58,60,61,63,64,65,67,69,75,77,91,96,98,99,101,102,103,106,110,114,120,147,148,153,158,159,170,171,172,173,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,207,208,210,212,213,214,216,218,227,228,237,243,263,266,267,270,296,309,312,318,332,333,337,341,344,345,346,363,373,375,381,418,],[78,80,83,89,98,99,102,110,110,110,83,133,133,110,110,110,110,110,110,110,110,110,216,-20,239,-19,244,246,247,110,110,110,110,110,110,110,110,110,110,110,110,-154,-155,-156,-157,-158,-159,110,-137,-138,110,-142,-143,-144,110,110,133,133,133,133,110,110,110,110,110,133,133,133,110,110,371,216,376,377,378,110,133,133,133,133,]),'LBRACKET':([58,59,63,111,114,118,119,127,138,148,166,167,175,260,269,341,],[90,96,103,96,103,96,103,226,232,103,96,96,-121,-120,-122,103,]),'COLON_EQUAL':([59,63,92,93,94,95,116,148,175,260,269,],[91,101,170,171,172,173,218,101,-121,-120,-122,]),'PLUS':([59,63,104,105,107,108,109,111,112,113,114,115,117,148,168,174,175,177,181,183,186,203,204,206,209,211,215,256,257,258,259,260,269,273,274,275,276,277,278,279,280,281,282,283,286,325,327,328,331,341,366,367,387,],[92,-119,189,-133,207,-160,-87,-151,-152,-153,-119,189,189,-119,189,189,-121,189,189,189,189,189,-134,-136,-139,-141,189,189,189,189,189,-120,-122,189,189,189,189,189,189,189,-132,-135,-140,-150,189,189,189,189,-86,-119,189,189,189,]),'MINUS':([59,63,104,105,107,108,109,111,112,113,114,115,117,148,168,174,175,177,181,183,186,203,204,206,209,211,215,256,257,258,259,260,269,273,274,275,276,277,278,279,280,281,282,283,286,325,327,328,331,341,366,367,387,],[93,-119,190,-133,208,-160,-87,-151,-152,-153,-119,190,190,-119,190,190,-121,190,190,190,190,190,-134,-136,-139,-141,190,190,190,190,190,-120,-122,190,190,190,190,190,190,190,-132,-135,-140,-150,190,190,190,190,-86,-119,190,190,190,]),'TIMES':([59,63,104,105,107,108,109,111,112,113,114,115,117,148,168,174,175,177,181,183,186,203,204,206,209,211,215,256,257,258,259,260,269,273,274,275,276,277,278,279,280,281,282,283,286,325,327,328,331,341,366,367,387,],[94,-119,191,-133,-160,212,-87,-151,-152,-153,-119,191,191,-119,191,191,-121,191,191,191,191,191,-134,-136,-139,-141,191,191,191,191,191,-120,-122,191,191,191,191,191,191,191,-132,-135,-140,-150,191,191,191,191,-86,-119,191,191,191,]),'DIVIDE':([59,63,104,105,107,108,109,111,112,113,114,115,117,148,168,174,175,177,181,183,186,203,204,206,209,211,215,256,257,258,259,260,269,273,274,275,276,277,278,279,280,281,282,283,286,325,327,328,331,341,366,367,387,],[95,-119,192,-133,-160,213,-87,-151,-152,-153,-119,192,192,-119,192,192,-121,192,192,192,192,192,-134,-136,-139,-141,192,192,192,192,192,-120,-122,192,192,192,192,192,192,192,-132,-135,-140,-150,192,192,192,192,-86,-119,192,192,192,]),'NOT':([64,65,67,91,96,98,99,101,102,103,106,110,170,171,172,173,189,190,191,192,193,194,195,216,218,263,266,267,270,296,332,333,363,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'NUMBER':([64,65,67,73,75,77,91,96,98,99,101,102,103,106,110,170,171,172,173,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,207,208,210,212,213,214,216,218,219,226,227,228,232,233,237,243,263,266,267,270,296,309,312,318,332,333,335,339,363,373,375,381,408,418,420,],[112,112,112,122,139,139,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,-154,-155,-156,-157,-158,-159,112,-137,-138,112,-142,-143,-144,112,112,289,139,139,139,306,307,139,139,112,112,112,112,112,139,139,139,112,112,289,139,112,139,139,139,289,139,289,]),'STRING_LITERAL':([64,65,67,73,91,96,98,99,101,102,103,106,110,170,171,172,173,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,207,208,210,212,213,214,216,218,244,263,266,267,270,296,332,333,363,],[113,113,113,123,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,-154,-155,-156,-157,-158,-159,113,-137,-138,113,-142,-143,-144,113,113,317,113,113,113,113,113,113,113,113,]),'CHARACTER_LITERAL':([73,],[121,]),'BOOLEAN_LITERAL':([73,75,77,91,227,228,237,243,309,312,318,373,375,381,418,],[124,134,134,169,134,134,134,134,134,134,134,134,134,134,134,]),'ARRAY':([75,77,227,228,237,243,309,312,318,373,375,381,418,],[127,127,127,127,127,127,127,127,127,127,127,127,127,]),'FILE':([75,77,227,228,237,243,309,312,318,373,375,381,418,],[129,129,129,129,129,129,129,129,129,129,129,129,129,]),'SET':([75,77,227,228,237,243,309,312,318,373,375,381,418,],[130,130,130,130,130,130,130,130,130,130,130,130,130,]),'RECORD':([75,77,227,228,237,243,309,312,318,373,375,381,418,],[131,131,131,131,131,131,131,131,131,131,131,131,131,]),'OBJECT':([75,77,227,228,237,243,309,312,318,373,375,381,418,],[132,132,132,132,132,132,132,132,132,132,132,132,132,]),'INTEGER':([75,77,227,228,237,243,309,312,318,373,375,381,418,],[135,135,135,135,135,135,135,135,135,135,135,135,135,]),'BYTE':([75,77,227,228,237,243,309,312,318,373,375,381,418,],[136,136,136,136,136,136,136,136,136,136,136,136,136,]),'CHAR':([75,77,227,228,237,243,309,312,318,373,375,381,418,],[137,137,137,137,137,137,137,137,137,137,137,137,137,]),'STRING':([75,77,227,228,237,243,309,312,318,373,375,381,418,],[138,138,138,138,138,138,138,138,138,138,138,138,138,]),'LONGINT':([75,77,227,228,237,243,309,312,318,373,375,381,418,],[140,140,140,140,140,140,140,140,140,140,140,140,140,]),'FORWARD':([84,249,321,380,],[163,323,359,399,]),'IN':([104,105,107,108,109,111,112,113,114,175,203,204,206,209,211,260,269,273,274,275,276,277,278,279,280,281,282,283,331,],[188,-133,-160,-160,-87,-151,-152,-153,-119,-121,-181,-134,-136,-139,-141,-120,-122,-145,-146,-147,-148,-149,-179,-180,-132,-135,-140,-150,-86,]),'MOD':([104,105,107,108,109,111,112,113,114,115,117,168,174,175,177,181,183,186,203,204,206,209,211,215,256,257,258,259,260,269,273,274,275,276,277,278,279,280,281,282,283,286,325,327,328,331,341,366,367,387,],[193,-133,-160,-160,-87,-151,-152,-153,-119,193,193,193,193,-121,193,193,193,193,193,-134,-136,-139,-141,193,193,193,193,193,-120,-122,193,193,193,193,193,193,193,-132,-135,-140,-150,193,193,193,193,-86,-119,193,193,193,]),'AND':([104,105,107,108,109,111,112,113,114,115,117,168,174,175,177,181,183,186,203,204,206,209,211,215,256,257,258,259,260,269,273,274,275,276,277,278,279,280,281,282,283,286,325,327,328,331,341,366,367,387,],[194,-133,-160,-160,-87,-151,-152,-153,-119,194,194,194,194,-121,194,194,194,194,194,-134,-136,-139,-141,194,194,194,194,194,-120,-122,194,194,194,194,194,194,194,-132,-135,-140,-150,194,194,194,194,-86,-119,194,194,194,]),'OR':([104,105,107,108,109,111,112,113,114,115,117,168,174,175,177,181,183,186,203,204,206,209,211,215,256,257,258,259,260,269,273,274,275,276,277,278,279,280,281,282,283,286,325,327,328,331,341,366,367,387,],[195,-133,-160,-160,-87,-151,-152,-153,-119,195,195,195,195,-121,195,195,195,195,195,-134,-136,-139,-141,195,195,195,195,195,-120,-122,195,195,195,195,195,195,195,-132,-135,-140,-150,195,195,195,195,-86,-119,195,195,195,]),'DO':([105,107,108,109,111,112,113,114,115,118,119,175,203,204,206,209,211,260,269,273,274,275,276,277,278,279,280,281,282,283,331,366,367,],[-133,-160,-160,-87,-151,-152,-153,-119,217,220,-119,-121,-181,-134,-136,-139,-141,-120,-122,-145,-146,-147,-148,-149,-179,-180,-132,-135,-140,-150,-86,389,390,]),'OF':([105,107,108,109,111,112,113,114,117,125,128,129,130,134,135,136,137,138,140,175,203,204,206,209,211,260,269,273,274,275,276,277,278,279,280,281,282,283,293,294,305,307,308,331,338,340,341,342,348,393,394,],[-133,-160,-160,-87,-151,-152,-153,-119,219,-43,-31,227,228,-37,-38,-39,-40,-41,-75,-121,-181,-134,-136,-139,-141,-120,-122,-145,-146,-147,-148,-149,-179,-180,-132,-135,-140,-150,-32,-33,-36,-46,-47,-86,373,-34,-119,-35,-42,-30,408,]),'RBRACKET':([105,107,108,109,111,112,113,114,119,167,174,175,185,186,203,204,206,209,211,260,269,273,274,275,276,277,278,279,280,281,282,283,291,292,306,307,308,328,331,374,],[-133,-160,-160,-87,-151,-152,-153,-119,-119,254,260,-121,269,-123,-181,-134,-136,-139,-141,-120,-122,-145,-146,-147,-148,-149,-179,-180,-132,-135,-140,-150,338,-45,348,-46,-47,-124,-86,-44,]),'TO':([105,107,108,109,111,112,113,114,175,203,204,206,209,211,260,269,273,274,275,276,277,278,279,280,281,282,283,286,331,],[-133,-160,-160,-87,-151,-152,-153,-119,-121,-181,-134,-136,-139,-141,-120,-122,-145,-146,-147,-148,-149,-179,-180,-132,-135,-140,-150,332,-86,]),'DOWNTO':([105,107,108,109,111,112,113,114,175,203,204,206,209,211,260,269,273,274,275,276,277,278,279,280,281,282,283,286,331,],[-133,-160,-160,-87,-151,-152,-153,-119,-121,-181,-134,-136,-139,-141,-120,-122,-145,-146,-147,-148,-149,-179,-180,-132,-135,-140,-150,333,-86,]),'LESS':([105,107,108,109,111,112,113,114,175,204,206,209,211,260,269,281,282,283,331,341,],[197,-160,-160,-87,-151,-152,-153,-119,-121,-134,-136,-139,-141,-120,-122,-135,-140,-150,-86,-119,]),'LESS_EQUAL':([105,107,108,109,111,112,113,114,175,204,206,209,211,260,269,281,282,283,331,341,],[198,-160,-160,-87,-151,-152,-153,-119,-121,-134,-136,-139,-141,-120,-122,-135,-140,-150,-86,-119,]),'GREAT':([105,107,108,109,111,112,113,114,175,204,206,209,211,260,269,281,282,283,331,341,],[199,-160,-160,-87,-151,-152,-153,-119,-121,-134,-136,-139,-141,-120,-122,-135,-140,-150,-86,-119,]),'GREAT_EQUAL':([105,107,108,109,111,112,113,114,175,204,206,209,211,260,269,281,282,283,331,341,],[200,-160,-160,-87,-151,-152,-153,-119,-121,-134,-136,-139,-141,-120,-122,-135,-140,-150,-86,-119,]),'DIFFERENT':([105,107,108,109,111,112,113,114,175,204,206,209,211,260,269,281,282,283,331,341,],[202,-160,-160,-87,-151,-152,-153,-119,-121,-134,-136,-139,-141,-120,-122,-135,-140,-150,-86,-119,]),'DIV':([108,109,111,112,113,114,175,260,269,283,331,341,],[214,-87,-151,-152,-153,-119,-121,-120,-122,-150,-86,-119,]),'DOTDOT':([139,],[233,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_sections':([4,5,84,242,249,252,314,321,380,383,384,389,390,414,],[5,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'empty':([4,5,28,47,78,80,83,84,98,102,107,108,131,132,177,187,188,216,217,220,229,230,239,242,246,247,249,252,314,321,325,329,330,336,337,370,371,376,377,378,380,383,384,388,389,390,414,],[6,6,57,57,144,152,152,6,178,178,206,211,152,152,264,57,57,178,57,57,297,300,144,6,144,144,6,6,6,6,264,57,57,57,152,57,152,152,152,152,6,6,6,57,6,6,6,]),'block':([5,84,242,249,252,314,321,380,383,384,389,390,414,],[8,162,315,322,324,352,358,398,401,402,404,405,419,]),'declaration_section':([5,7,],[9,9,]),'uses_opt':([5,7,],[10,10,]),'constant_declaration':([5,7,],[11,11,]),'type_declaration':([5,7,],[12,12,]),'var_declaration':([5,7,],[13,13,]),'procedure_declarations':([5,7,],[14,14,]),'function_declaration':([5,7,],[15,15,]),'constructor_declaration':([5,7,],[16,16,]),'method_declaration':([5,7,],[17,17,]),'procedure_declaration':([5,7,14,],[22,22,30,]),'compound_statement':([7,28,47,187,188,217,220,329,330,336,370,388,],[27,53,53,53,53,53,53,53,53,53,53,53,]),'id_list':([18,21,40,78,80,83,131,132,133,146,149,154,160,229,230,236,239,246,247,337,371,372,376,377,378,392,395,396,397,],[32,42,42,145,153,153,153,153,231,238,153,245,153,153,153,145,145,145,145,153,153,153,153,153,153,153,153,153,153,]),'constant_list':([19,],[34,]),'constant':([19,34,],[35,72,]),'type_list':([20,],[37,]),'type_definition':([20,37,],[38,74,]),'declaration_list':([21,],[40,]),'declaration':([21,40,],[41,76,]),'statement_list':([28,336,],[47,370,]),'statement':([28,47,187,188,217,220,329,330,336,370,388,],[48,87,271,272,285,290,364,365,48,87,403,]),'if_statement':([28,47,80,83,131,132,149,160,187,188,217,220,229,230,329,330,336,337,370,371,372,376,377,378,388,392,395,396,397,],[49,49,155,155,155,155,155,155,49,49,49,49,155,155,49,49,49,155,49,155,155,155,155,155,49,155,155,155,155,]),'assignment_statement':([28,47,80,83,131,132,149,160,187,188,217,220,229,230,329,330,336,337,370,371,372,376,377,378,388,392,395,396,397,],[50,50,157,157,157,157,157,157,50,50,50,50,157,157,50,50,50,157,50,157,157,157,157,157,50,157,157,157,157,]),'while_statement':([28,47,187,188,217,220,329,330,336,370,388,],[51,51,51,51,51,51,51,51,51,51,51,]),'procedure_call':([28,47,187,188,217,220,329,330,336,370,388,],[52,52,52,52,52,52,52,52,52,52,52,]),'for_statement':([28,47,187,188,217,220,329,330,336,370,388,],[54,54,54,54,54,54,54,54,54,54,54,]),'case_statement':([28,47,80,83,131,132,149,160,187,188,217,220,229,230,329,330,336,337,370,371,372,376,377,378,388,392,395,396,397,],[55,55,156,156,156,156,156,156,55,55,55,55,156,156,55,55,55,156,55,156,156,156,156,156,55,156,156,156,156,]),'with_statement':([28,47,187,188,217,220,329,330,336,370,388,],[56,56,56,56,56,56,56,56,56,56,56,]),'variable':([28,47,64,65,67,68,80,83,89,90,91,96,98,99,101,102,103,106,110,131,132,149,160,170,171,172,173,187,188,189,190,191,192,193,194,195,196,205,210,216,217,218,220,229,230,263,266,267,270,296,329,330,332,333,336,337,363,370,371,372,376,377,378,388,392,395,396,397,],[59,59,111,111,111,118,59,59,166,167,111,111,111,111,111,111,111,111,111,59,59,59,59,111,111,111,111,59,59,111,111,111,111,111,111,111,111,111,111,111,59,111,59,59,59,111,111,111,111,111,59,59,111,111,59,59,111,59,59,59,59,59,59,59,59,59,59,59,]),'expression':([64,65,67,91,96,98,99,101,102,103,106,110,170,171,172,173,189,190,191,192,193,194,195,216,218,263,266,267,270,296,332,333,363,],[104,115,117,168,174,177,181,183,177,186,203,215,256,257,258,259,273,274,275,276,277,278,279,177,286,325,181,327,328,117,366,367,387,]),'simple_expression':([64,65,67,91,96,98,99,101,102,103,106,110,170,171,172,173,189,190,191,192,193,194,195,196,216,218,263,266,267,270,296,332,333,363,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,280,105,105,105,105,105,105,105,105,105,105,]),'term':([64,65,67,91,96,98,99,101,102,103,106,110,170,171,172,173,189,190,191,192,193,194,195,196,205,216,218,263,266,267,270,296,332,333,363,],[107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,281,107,107,107,107,107,107,107,107,107,107,]),'factor':([64,65,67,91,96,98,99,101,102,103,106,110,170,171,172,173,189,190,191,192,193,194,195,196,205,210,216,218,263,266,267,270,296,332,333,363,],[108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,282,108,108,108,108,108,108,108,108,108,108,]),'function_call':([64,65,67,91,96,98,99,101,102,103,106,110,170,171,172,173,189,190,191,192,193,194,195,196,205,210,216,218,263,266,267,270,296,332,333,363,],[109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,]),'type_specifier':([75,77,227,228,237,243,309,312,318,373,375,381,418,],[126,141,293,294,311,316,349,350,355,393,394,400,421,]),'subrange':([75,77,226,227,228,237,243,309,312,318,339,373,375,381,418,],[128,128,292,128,128,128,128,128,128,128,374,128,128,128,128,]),'parameter_list':([78,239,246,247,],[142,313,319,320,]),'parameter':([78,236,239,246,247,],[143,310,143,143,143,]),'field_list':([80,83,131,132,337,371,376,377,378,],[149,160,229,230,372,392,395,396,397,]),'field':([80,83,131,132,149,160,229,230,337,371,372,376,377,378,392,395,396,397,],[151,151,151,151,241,241,241,241,151,151,241,151,151,151,241,241,241,241,]),'expression_list':([98,102,216,],[176,184,284,]),'write_arguments':([99,],[179,]),'write_argument':([99,266,],[180,326,]),'index_list':([103,],[185,]),'relop':([105,],[196,]),'simple_expression_tail':([107,],[204,]),'addop':([107,],[205,]),'term_tail':([108,],[209,]),'mulop':([108,],[210,]),'expression_list_tail':([177,325,],[262,362,]),'case_list':([219,408,],[287,415,]),'case_element':([219,335,408,420,],[288,369,288,369,]),'type_expression':([226,],[291,]),'case_part':([229,],[295,]),'method_list':([230,],[298,]),'method':([230,298,],[299,343,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON declaration_sections block DOT','program',6,'p_program','Parser_MiniPascal.py',18),
  ('declaration_sections -> declaration_sections declaration_section','declaration_sections',2,'p_declaration_sections','Parser_MiniPascal.py',24),
  ('declaration_sections -> empty','declaration_sections',1,'p_declaration_sections','Parser_MiniPascal.py',25),
  ('declaration_section -> uses_opt','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',29),
  ('declaration_section -> constant_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',30),
  ('declaration_section -> type_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',31),
  ('declaration_section -> var_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',32),
  ('declaration_section -> procedure_declarations','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',33),
  ('declaration_section -> function_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',34),
  ('declaration_section -> constructor_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',35),
  ('declaration_section -> method_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',36),
  ('method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block','method_declaration',9,'p_method_declaration','Parser_MiniPascal.py',40),
  ('method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block','method_declaration',9,'p_method_declaration','Parser_MiniPascal.py',41),
  ('method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block','method_declaration',11,'p_method_declaration','Parser_MiniPascal.py',42),
  ('method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block','method_declaration',6,'p_method_declaration','Parser_MiniPascal.py',43),
  ('constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block','constructor_declaration',7,'p_constructor_declaration','Parser_MiniPascal.py',47),
  ('constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block','constructor_declaration',6,'p_constructor_declaration','Parser_MiniPascal.py',48),
  ('uses_opt -> USES id_list SEMICOLON','uses_opt',3,'p_uses_opt','Parser_MiniPascal.py',52),
  ('id_list -> ID','id_list',1,'p_id_list','Parser_MiniPascal.py',57),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','Parser_MiniPascal.py',58),
  ('var_declaration -> VAR declaration_list','var_declaration',2,'p_var_declaration','Parser_MiniPascal.py',62),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser_MiniPascal.py',66),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','Parser_MiniPascal.py',67),
  ('declaration -> id_list COLON type_specifier SEMICOLON','declaration',4,'p_declaration','Parser_MiniPascal.py',71),
  ('block -> declaration_sections compound_statement','block',2,'p_block','Parser_MiniPascal.py',76),
  ('type_declaration -> TYPE type_list','type_declaration',2,'p_type_declaration','Parser_MiniPascal.py',82),
  ('type_list -> type_definition','type_list',1,'p_type_list','Parser_MiniPascal.py',86),
  ('type_list -> type_list type_definition','type_list',2,'p_type_list','Parser_MiniPascal.py',87),
  ('type_definition -> ID EQUAL type_specifier SEMICOLON','type_definition',4,'p_type_definition','Parser_MiniPascal.py',95),
  ('type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier','type_specifier',6,'p_type_specifier','Parser_MiniPascal.py',99),
  ('type_specifier -> subrange','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',100),
  ('type_specifier -> FILE OF type_specifier','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',101),
  ('type_specifier -> SET OF type_specifier','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',102),
  ('type_specifier -> RECORD field_list case_part END','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',103),
  ('type_specifier -> OBJECT field_list method_list END','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',104),
  ('type_specifier -> LPAREN id_list RPAREN','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',105),
  ('type_specifier -> BOOLEAN_LITERAL','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',106),
  ('type_specifier -> INTEGER','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',107),
  ('type_specifier -> BYTE','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',108),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',109),
  ('type_specifier -> STRING','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',110),
  ('type_specifier -> STRING LBRACKET NUMBER RBRACKET','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',111),
  ('type_specifier -> ID','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',112),
  ('type_expression -> type_expression COMMA subrange','type_expression',3,'p_type_expression','Parser_MiniPascal.py',116),
  ('type_expression -> subrange','type_expression',1,'p_type_expression','Parser_MiniPascal.py',117),
  ('subrange -> NUMBER DOTDOT NUMBER','subrange',3,'p_subrange','Parser_MiniPascal.py',121),
  ('subrange -> NUMBER DOTDOT ID','subrange',3,'p_subrange','Parser_MiniPascal.py',122),
  ('field_list -> field_list field','field_list',2,'p_field_list','Parser_MiniPascal.py',128),
  ('field_list -> field','field_list',1,'p_field_list','Parser_MiniPascal.py',129),
  ('field_list -> empty','field_list',1,'p_field_list','Parser_MiniPascal.py',130),
  ('field -> id_list COLON type_specifier','field',3,'p_field','Parser_MiniPascal.py',134),
  ('field -> id_list COLON type_specifier SEMICOLON','field',4,'p_field','Parser_MiniPascal.py',135),
  ('field -> VAR id_list COLON type_specifier','field',4,'p_field','Parser_MiniPascal.py',136),
  ('field -> VAR id_list COLON type_specifier SEMICOLON','field',5,'p_field','Parser_MiniPascal.py',137),
  ('field -> id_list LPAREN STRING_LITERAL RPAREN','field',4,'p_field','Parser_MiniPascal.py',138),
  ('field -> if_statement','field',1,'p_field','Parser_MiniPascal.py',139),
  ('field -> case_statement','field',1,'p_field','Parser_MiniPascal.py',140),
  ('field -> assignment_statement','field',1,'p_field','Parser_MiniPascal.py',141),
  ('case_part -> CASE ID COLON type_specifier OF case_list SEMICOLON','case_part',7,'p_case_part','Parser_MiniPascal.py',145),
  ('case_part -> empty','case_part',1,'p_case_part','Parser_MiniPascal.py',146),
  ('case_list -> case_list SEMICOLON case_element','case_list',3,'p_case_list','Parser_MiniPascal.py',150),
  ('case_list -> case_element','case_list',1,'p_case_list','Parser_MiniPascal.py',151),
  ('case_element -> NUMBER COLON LPAREN field_list RPAREN','case_element',5,'p_case_element','Parser_MiniPascal.py',155),
  ('case_element -> NUMBER COLON field_list','case_element',3,'p_case_element','Parser_MiniPascal.py',156),
  ('method_list -> method_list method','method_list',2,'p_method_list','Parser_MiniPascal.py',163),
  ('method_list -> method','method_list',1,'p_method_list','Parser_MiniPascal.py',164),
  ('method_list -> empty','method_list',1,'p_method_list','Parser_MiniPascal.py',165),
  ('method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON','method',6,'p_method','Parser_MiniPascal.py',169),
  ('method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON','method',6,'p_method','Parser_MiniPascal.py',170),
  ('method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON','method',8,'p_method','Parser_MiniPascal.py',171),
  ('method -> DESTRUCTOR ID SEMICOLON','method',3,'p_method','Parser_MiniPascal.py',172),
  ('case_statement -> CASE expression OF case_list END SEMICOLON','case_statement',6,'p_case_statement','Parser_MiniPascal.py',178),
  ('case_statement -> CASE expression OF case_list ELSE statement_list END SEMICOLON','case_statement',8,'p_case_statement','Parser_MiniPascal.py',179),
  ('case_statement -> CASE expression OF case_list END','case_statement',5,'p_case_statement','Parser_MiniPascal.py',180),
  ('type_specifier -> LONGINT','type_specifier',1,'p_type_specifier_longint','Parser_MiniPascal.py',184),
  ('procedure_declarations -> procedure_declaration','procedure_declarations',1,'p_procedure_declarations','Parser_MiniPascal.py',189),
  ('procedure_declarations -> procedure_declarations procedure_declaration','procedure_declarations',2,'p_procedure_declarations','Parser_MiniPascal.py',190),
  ('procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON block SEMICOLON','procedure_declaration',8,'p_procedure_declaration','Parser_MiniPascal.py',197),
  ('procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON','procedure_declaration',7,'p_procedure_declaration','Parser_MiniPascal.py',198),
  ('procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON','procedure_declaration',5,'p_procedure_declaration','Parser_MiniPascal.py',199),
  ('procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON','procedure_declaration',8,'p_procedure_declaration','Parser_MiniPascal.py',200),
  ('procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON','procedure_declaration',7,'p_procedure_declaration','Parser_MiniPascal.py',201),
  ('procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON','procedure_declaration',5,'p_procedure_declaration','Parser_MiniPascal.py',202),
  ('function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON','function_declaration',10,'p_function_declaration','Parser_MiniPascal.py',210),
  ('function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON','function_declaration',10,'p_function_declaration','Parser_MiniPascal.py',211),
  ('function_call -> ID LPAREN expression_list RPAREN','function_call',4,'p_function_call','Parser_MiniPascal.py',217),
  ('factor -> function_call','factor',1,'p_factor_function_call','Parser_MiniPascal.py',222),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','Parser_MiniPascal.py',227),
  ('parameter_list -> parameter_list SEMICOLON parameter','parameter_list',3,'p_parameter_list','Parser_MiniPascal.py',228),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','Parser_MiniPascal.py',229),
  ('parameter -> id_list COLON type_specifier','parameter',3,'p_parameter','Parser_MiniPascal.py',233),
  ('parameter -> VAR id_list COLON type_specifier','parameter',4,'p_parameter','Parser_MiniPascal.py',234),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','Parser_MiniPascal.py',239),
  ('statement_list -> statement SEMICOLON','statement_list',2,'p_statement_list_multi','Parser_MiniPascal.py',244),
  ('statement_list -> statement_list statement SEMICOLON','statement_list',3,'p_statement_list_multi','Parser_MiniPascal.py',245),
  ('statement -> if_statement','statement',1,'p_statement','Parser_MiniPascal.py',255),
  ('statement -> assignment_statement','statement',1,'p_statement','Parser_MiniPascal.py',256),
  ('statement -> while_statement','statement',1,'p_statement','Parser_MiniPascal.py',257),
  ('statement -> procedure_call','statement',1,'p_statement','Parser_MiniPascal.py',258),
  ('statement -> compound_statement','statement',1,'p_statement','Parser_MiniPascal.py',259),
  ('statement -> for_statement','statement',1,'p_statement','Parser_MiniPascal.py',260),
  ('statement -> case_statement','statement',1,'p_statement','Parser_MiniPascal.py',261),
  ('statement -> with_statement','statement',1,'p_statement','Parser_MiniPascal.py',262),
  ('statement -> empty','statement',1,'p_statement','Parser_MiniPascal.py',263),
  ('with_statement -> WITH variable DO statement','with_statement',4,'p_with_statement','Parser_MiniPascal.py',267),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_if_statement','Parser_MiniPascal.py',271),
  ('if_statement -> IF expression THEN statement','if_statement',4,'p_if_statement','Parser_MiniPascal.py',272),
  ('if_statement -> IF expression IN statement THEN statement ELSE statement','if_statement',8,'p_if_statement','Parser_MiniPascal.py',273),
  ('if_statement -> IF expression IN statement THEN statement','if_statement',6,'p_if_statement','Parser_MiniPascal.py',274),
  ('for_statement -> FOR ID COLON_EQUAL expression TO expression DO block','for_statement',8,'p_for_statement','Parser_MiniPascal.py',279),
  ('for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block','for_statement',8,'p_for_statement','Parser_MiniPascal.py',280),
  ('assignment_statement -> variable COLON_EQUAL expression','assignment_statement',3,'p_assignment_statement','Parser_MiniPascal.py',285),
  ('assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON','assignment_statement',4,'p_assignment_statement','Parser_MiniPascal.py',286),
  ('assignment_statement -> variable PLUS COLON_EQUAL expression','assignment_statement',4,'p_assignment_statement','Parser_MiniPascal.py',287),
  ('assignment_statement -> variable MINUS COLON_EQUAL expression','assignment_statement',4,'p_assignment_statement','Parser_MiniPascal.py',288),
  ('assignment_statement -> variable TIMES COLON_EQUAL expression','assignment_statement',4,'p_assignment_statement','Parser_MiniPascal.py',289),
  ('assignment_statement -> variable DIVIDE COLON_EQUAL expression','assignment_statement',4,'p_assignment_statement','Parser_MiniPascal.py',290),
  ('assignment_statement -> ID COLON_EQUAL expression','assignment_statement',3,'p_assignment_statement','Parser_MiniPascal.py',291),
  ('variable -> ID','variable',1,'p_variable_simple','Parser_MiniPascal.py',296),
  ('variable -> variable LBRACKET expression RBRACKET','variable',4,'p_variable_simple','Parser_MiniPascal.py',297),
  ('variable -> variable DOT ID','variable',3,'p_variable_simple','Parser_MiniPascal.py',298),
  ('variable -> ID LBRACKET index_list RBRACKET','variable',4,'p_variable_index','Parser_MiniPascal.py',302),
  ('index_list -> expression','index_list',1,'p_index_list','Parser_MiniPascal.py',306),
  ('index_list -> index_list COMMA expression','index_list',3,'p_index_list','Parser_MiniPascal.py',307),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','Parser_MiniPascal.py',312),
  ('procedure_call -> ID LPAREN expression_list RPAREN','procedure_call',4,'p_procedure_call','Parser_MiniPascal.py',317),
  ('procedure_call -> ID','procedure_call',1,'p_procedure_call','Parser_MiniPascal.py',318),
  ('expression_list -> expression expression_list_tail','expression_list',2,'p_expression_list_multi','Parser_MiniPascal.py',323),
  ('expression_list_tail -> COMMA expression expression_list_tail','expression_list_tail',3,'p_expression_list_tail','Parser_MiniPascal.py',327),
  ('expression_list_tail -> empty','expression_list_tail',1,'p_expression_list_tail','Parser_MiniPascal.py',328),
  ('expression_list -> empty','expression_list',1,'p_expression_list_empty','Parser_MiniPascal.py',332),
  ('expression -> simple_expression relop simple_expression','expression',3,'p_expression','Parser_MiniPascal.py',337),
  ('expression -> simple_expression','expression',1,'p_expression','Parser_MiniPascal.py',338),
  ('simple_expression -> term simple_expression_tail','simple_expression',2,'p_simple_expression','Parser_MiniPascal.py',343),
  ('simple_expression_tail -> addop term','simple_expression_tail',2,'p_simple_expression_tail','Parser_MiniPascal.py',347),
  ('simple_expression_tail -> empty','simple_expression_tail',1,'p_simple_expression_tail','Parser_MiniPascal.py',348),
  ('addop -> PLUS','addop',1,'p_addop','Parser_MiniPascal.py',352),
  ('addop -> MINUS','addop',1,'p_addop','Parser_MiniPascal.py',353),
  ('term -> factor term_tail','term',2,'p_term','Parser_MiniPascal.py',358),
  ('term_tail -> mulop factor','term_tail',2,'p_term_tail','Parser_MiniPascal.py',362),
  ('term_tail -> empty','term_tail',1,'p_term_tail','Parser_MiniPascal.py',363),
  ('mulop -> TIMES','mulop',1,'p_mulop','Parser_MiniPascal.py',367),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','Parser_MiniPascal.py',368),
  ('mulop -> DIV','mulop',1,'p_mulop','Parser_MiniPascal.py',369),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',374),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',375),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',376),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',377),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',378),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','Parser_MiniPascal.py',383),
  ('factor -> variable','factor',1,'p_factor_variable','Parser_MiniPascal.py',387),
  ('factor -> NUMBER','factor',1,'p_factor_number','Parser_MiniPascal.py',391),
  ('factor -> STRING_LITERAL','factor',1,'p_factor_string','Parser_MiniPascal.py',395),
  ('relop -> LESS','relop',1,'p_relop','Parser_MiniPascal.py',402),
  ('relop -> LESS_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',403),
  ('relop -> GREAT','relop',1,'p_relop','Parser_MiniPascal.py',404),
  ('relop -> GREAT_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',405),
  ('relop -> EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',406),
  ('relop -> DIFFERENT','relop',1,'p_relop','Parser_MiniPascal.py',407),
  ('empty -> <empty>','empty',0,'p_empty','Parser_MiniPascal.py',412),
  ('statement -> READLN','statement',1,'p_statement_readln','Parser_MiniPascal.py',416),
  ('statement -> READLN LPAREN variable RPAREN','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',420),
  ('statement -> READLN LBRACKET variable RBRACKET','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',421),
  ('statement -> WRITE LPAREN expression_list RPAREN','statement',4,'p_statement_write','Parser_MiniPascal.py',425),
  ('statement -> WRITELN LPAREN write_arguments RPAREN','statement',4,'p_statement_writeln','Parser_MiniPascal.py',429),
  ('write_arguments -> write_argument','write_arguments',1,'p_write_arguments','Parser_MiniPascal.py',434),
  ('write_arguments -> write_arguments COMMA write_argument','write_arguments',3,'p_write_arguments','Parser_MiniPascal.py',435),
  ('write_argument -> expression','write_argument',1,'p_write_argument','Parser_MiniPascal.py',439),
  ('write_argument -> expression COLON expression','write_argument',3,'p_write_argument','Parser_MiniPascal.py',440),
  ('write_argument -> expression COLON expression COLON expression','write_argument',5,'p_write_argument','Parser_MiniPascal.py',441),
  ('statement -> USES ID SEMICOLON','statement',3,'p_statement_uses','Parser_MiniPascal.py',446),
  ('constant_declaration -> CONST constant_list','constant_declaration',2,'p_constant_declaration','Parser_MiniPascal.py',451),
  ('constant_list -> constant','constant_list',1,'p_constant_list','Parser_MiniPascal.py',455),
  ('constant_list -> constant_list constant','constant_list',2,'p_constant_list','Parser_MiniPascal.py',456),
  ('constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',460),
  ('constant -> ID EQUAL NUMBER SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',461),
  ('constant -> ID EQUAL STRING_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',462),
  ('constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',463),
  ('expression -> expression AND expression','expression',3,'p_expression_logical','Parser_MiniPascal.py',468),
  ('expression -> expression OR expression','expression',3,'p_expression_logical','Parser_MiniPascal.py',469),
  ('expression -> NOT expression','expression',2,'p_expression_logical','Parser_MiniPascal.py',470),
]
