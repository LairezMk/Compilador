
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocELSEAND ARRAY BEGIN BOOLEAN_LITERAL BYTE CASE CHAR CHARACTER_LITERAL COLON COLON_EQUAL COMMA CONST CONSTRUCTOR DESTRUCTOR DIFFERENT DIV DIVIDE DO DOT DOTDOT DOWNTO ELSE END EQUAL FALSE FILE FOR FORWARD FUNCTION GOTO GREAT GREAT_EQUAL ID IF IN INTEGER LABEL LBLOCK LBRACKET LESS LESS_EQUAL LONGINT LPAREN MINUS MOD NIL NOT NUMBER OBJECT OF OR PACKED PLUS PROCEDURE PROGRAM RBLOCK RBRACKET READLINE READLN RECORD REPEAT RPAREN SEMICOLON SET STRING STRING_LITERAL SUBRANGE THEN TIMES TO TRUE TYPE UNTIL USES VAR WHILE WITH WRITE WRITELNprogram : PROGRAM ID SEMICOLON declaration_sections block DOTdeclaration_sections : declaration_sections declaration_section\n                            | emptydeclaration_section : uses_opt\n                           | constant_declaration\n                           | type_declaration\n                           | var_declaration\n                           | procedure_declarations\n                           | function_declaration\n                           | constructor_declaration\n                           | method_declarationmethod_declaration : CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block \n                          | PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block \n                          | FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block\n                          | DESTRUCTOR ID DOT ID SEMICOLON blockconstructor_declaration : CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block\n                               | CONSTRUCTOR ID LPAREN RPAREN SEMICOLON blockuses_opt : USES id_list SEMICOLONid_list : IDid_list : id_list COMMA IDvar_declaration : VAR declaration_listdeclaration_list : declaration\n                        | declaration_list declarationdeclaration : id_list COLON type_specifier SEMICOLONblock : declaration_sections compound_statementtype_declaration : TYPE type_listtype_list : type_definition\n                 | type_list type_definitiontype_definition : ID EQUAL type_specifier SEMICOLONtype_specifier : ARRAY LBRACKET type_expression RBRACKET OF type_specifier\n                      | subrange\n                      | FILE OF type_specifier\n                      | SET OF type_specifier\n                      | RECORD field_list case_part END\n                      | OBJECT field_list method_list END                              \n                      | LPAREN id_list RPAREN\n                      | BOOLEAN_LITERAL\n                      | INTEGER\n                      | BYTE\n                      | CHAR\n                      | STRING\n                      | STRING LBRACKET NUMBER RBRACKET\n                      | IDtype_expression : type_expression COMMA subrange\n                       | subrangesubrange : NUMBER DOTDOT NUMBER\n                | NUMBER DOTDOT IDfield_list : field_list field\n                  | field\n                  | emptyfield : id_list COLON type_specifier\n             | id_list COLON type_specifier SEMICOLON\n             | VAR id_list COLON type_specifier\n             | VAR id_list COLON type_specifier SEMICOLON\n             | id_list LPAREN STRING_LITERAL RPAREN\n             | statement\n             | if_statement\n             | case_statement\n             | assignment_statementcase_part : CASE ID COLON type_specifier OF case_list SEMICOLON\n                 | emptycase_list : case_list SEMICOLON case_element\n                 | case_elementcase_list_opt_semicolon : case_list\n                               | case_list SEMICOLONcase_element : NUMBER COLON LPAREN field_list RPAREN\n                    | NUMBER COLON field_listmethod_list : method_list method\n                   | method\n                   | emptymethod : CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON\n              | PROCEDURE ID LPAREN field_list RPAREN SEMICOLON  \n              | FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON\n              | DESTRUCTOR ID SEMICOLONcase_statement : CASE expression OF case_list_opt_semicolon END SEMICOLON\n                      | CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON\n                      | CASE expression OF case_list_opt_semicolon ENDtype_specifier : LONGINTprocedure_declarations : procedure_declaration\n                              | procedure_declarations procedure_declarationprocedure_declaration : PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON\n                             | PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON\n                             | PROCEDURE ID SEMICOLON block SEMICOLON\n                             | PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON FORWARD SEMICOLON\n                             | PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON\n                             | PROCEDURE ID SEMICOLON FORWARD SEMICOLONfunction_declaration : FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON\n                            | FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLONfunction_call : ID LPAREN expression_list RPARENfactor : function_callparameter_list : parameter\n                      | parameter_list SEMICOLON parameter\n                      | emptyparameter : ID COLON type_specifiercompound_statement : BEGIN statement_list END\n                            | BEGIN local_var_declarations statement_list END\n                            local_var_declarations : var_declaration\n                             | emptystatement_list : statement_list statement SEMICOLON\n                      | statement_list statementstatement_list : statementstatement : if_statement\n                 | assignment_statement\n                 | while_statement\n                 | procedure_call\n                 | compound_statement\n                 | for_statement\n                 | case_statement\n                 | with_statement\n                 | repeat_statement\n                 | emptywith_statement : WITH variable DO statementif_statement : IF expression THEN statement ELSE statement\n                    | IF expression THEN statement\n                    | IF expression IN statement THEN statement ELSE statement\n                    | IF expression IN statement THEN statementfor_statement : FOR ID COLON_EQUAL expression TO expression DO block\n                     | FOR ID COLON_EQUAL expression DOWNTO expression DO blockassignment_statement : variable COLON_EQUAL expression\n                            | variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON\n                            | variable PLUS COLON_EQUAL expression\n                            | variable MINUS COLON_EQUAL expression\n                            | variable TIMES COLON_EQUAL expression\n                            | variable DIVIDE COLON_EQUAL expression\n                            | ID COLON_EQUAL expressionvariable : ID\n                | variable LBRACKET expression RBRACKET\n                | variable DOT IDvariable : ID LBRACKET index_list RBRACKETindex_list : expression\n                  | index_list COMMA expressionwhile_statement : WHILE expression DO statementprocedure_call : ID LPAREN expression_list RPAREN\n                      | IDexpression_list : expression expression_list_tailexpression_list_tail : COMMA expression expression_list_tail\n                            | emptyexpression_list : emptyexpression : simple_expression relop simple_expression\n                  | simple_expressionsimple_expression : term simple_expression_tailsimple_expression_tail : addop term\n                              | emptyaddop : PLUS\n             | MINUSterm : factor term_tailterm_tail : mulop factor\n                 | emptymulop : TIMES\n             | DIVIDE\n             | DIVexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expressionfactor : LPAREN expression RPARENfactor : variablefactor : NUMBERfactor : STRING_LITERALrelop : LESS\n             | LESS_EQUAL\n             | GREAT\n             | GREAT_EQUAL\n             | EQUAL\n             | DIFFERENTempty :statement : READLNstatement : READLN LPAREN variable RPAREN\n                 | READLN LBRACKET variable RBRACKET\n                 | READLN LPAREN variable_list RPARENvariable_list : variable\n                     | variable_list COMMA variablestatement : WRITE LPAREN expression_list RPARENstatement : WRITELN LPAREN write_arguments RPAREN\n                 | WRITELN LPAREN expression RPARENwrite_arguments : write_argument\n                       | write_arguments COMMA write_argumentwrite_argument : expression\n                      | expression COLON expression\n                      | expression COLON expression COLON expressionstatement : USES ID SEMICOLONconstant_declaration : CONST constant_listrepeat_statement : REPEAT statement_list UNTIL expression SEMICOLONconstant_list : constant\n                     | constant_list constantconstant : ID EQUAL CHARACTER_LITERAL SEMICOLON\n                | ID EQUAL NUMBER SEMICOLON\n                | ID EQUAL STRING_LITERAL SEMICOLON\n                | ID EQUAL BOOLEAN_LITERAL SEMICOLONexpression : expression AND expression\n                  | expression OR expression\n                  | NOT expression'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_sections':([4,5,88,250,257,260,326,333,394,397,398,403,404,428,],[5,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'empty':([4,5,28,47,48,72,82,84,87,88,93,103,107,112,113,125,137,138,154,185,195,196,224,225,228,238,239,247,250,254,255,257,260,326,333,338,343,344,349,351,383,385,386,390,391,392,394,397,398,402,403,404,406,409,410,411,428,],[6,6,51,92,92,92,151,157,151,6,92,186,186,214,219,92,157,157,92,274,92,92,186,92,92,310,313,151,6,151,151,6,6,6,6,274,92,92,92,157,92,157,92,157,157,157,6,6,6,92,6,6,92,92,92,92,6,]),'block':([5,88,250,257,260,326,333,394,397,398,403,404,428,],[8,168,327,334,336,366,372,412,415,416,418,419,433,]),'declaration_section':([5,7,],[9,9,]),'uses_opt':([5,7,],[10,10,]),'constant_declaration':([5,7,],[11,11,]),'type_declaration':([5,7,],[12,12,]),'var_declaration':([5,7,28,],[13,13,50,]),'procedure_declarations':([5,7,],[14,14,]),'function_declaration':([5,7,],[15,15,]),'constructor_declaration':([5,7,],[16,16,]),'method_declaration':([5,7,],[17,17,]),'procedure_declaration':([5,7,14,],[22,22,30,]),'compound_statement':([7,28,47,48,72,84,93,125,137,138,154,195,196,225,228,238,239,343,344,349,351,383,385,386,390,391,392,402,406,409,410,411,],[27,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'id_list':([18,21,40,84,137,138,139,154,159,238,239,351,385,386,390,391,392,406,409,410,411,],[32,42,42,158,158,158,240,158,253,158,158,158,158,158,158,158,158,158,158,158,158,]),'constant_list':([19,],[34,]),'constant':([19,34,],[35,76,]),'type_list':([20,],[37,]),'type_definition':([20,37,],[38,78,]),'declaration_list':([21,],[40,]),'declaration':([21,40,],[41,80,]),'statement_list':([28,48,72,349,],[47,93,125,383,]),'local_var_declarations':([28,],[48,]),'statement':([28,47,48,72,84,93,125,137,138,154,195,196,225,228,238,239,343,344,349,351,383,385,386,390,391,392,402,406,409,410,411,],[49,91,49,49,160,91,91,160,160,160,282,283,296,302,160,160,378,379,49,160,91,160,160,160,160,160,417,160,160,160,160,]),'if_statement':([28,47,48,72,84,93,125,137,138,154,195,196,225,228,238,239,343,344,349,351,383,385,386,390,391,392,402,406,409,410,411,],[52,52,52,52,161,52,52,161,161,161,52,52,52,52,161,161,52,52,52,161,52,161,161,161,161,161,52,161,161,161,161,]),'assignment_statement':([28,47,48,72,84,93,125,137,138,154,195,196,225,228,238,239,343,344,349,351,383,385,386,390,391,392,402,406,409,410,411,],[53,53,53,53,163,53,53,163,163,163,53,53,53,53,163,163,53,53,53,163,53,163,163,163,163,163,53,163,163,163,163,]),'while_statement':([28,47,48,72,84,93,125,137,138,154,195,196,225,228,238,239,343,344,349,351,383,385,386,390,391,392,402,406,409,410,411,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'procedure_call':([28,47,48,72,84,93,125,137,138,154,195,196,225,228,238,239,343,344,349,351,383,385,386,390,391,392,402,406,409,410,411,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'for_statement':([28,47,48,72,84,93,125,137,138,154,195,196,225,228,238,239,343,344,349,351,383,385,386,390,391,392,402,406,409,410,411,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'case_statement':([28,47,48,72,84,93,125,137,138,154,195,196,225,228,238,239,343,344,349,351,383,385,386,390,391,392,402,406,409,410,411,],[58,58,58,58,162,58,58,162,162,162,58,58,58,58,162,162,58,58,58,162,58,162,162,162,162,162,58,162,162,162,162,]),'with_statement':([28,47,48,72,84,93,125,137,138,154,195,196,225,228,238,239,343,344,349,351,383,385,386,390,391,392,402,406,409,410,411,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'repeat_statement':([28,47,48,72,84,93,125,137,138,154,195,196,225,228,238,239,343,344,349,351,383,385,386,390,391,392,402,406,409,410,411,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'variable':([28,47,48,67,68,70,71,72,84,93,94,95,96,101,103,104,106,107,108,111,115,125,137,138,154,178,179,180,181,195,196,197,198,199,200,201,202,203,204,213,218,224,225,226,228,229,238,239,263,273,276,278,281,309,343,344,346,347,349,351,377,383,385,386,390,391,392,402,406,409,410,411,],[62,62,62,116,116,116,123,62,62,62,173,175,116,116,116,116,116,116,116,116,116,62,62,62,62,116,116,116,116,62,62,116,116,116,116,116,116,116,116,116,116,116,62,116,62,116,62,62,337,116,116,116,116,116,62,62,116,116,62,62,116,62,62,62,62,62,62,62,62,62,62,62,]),'expression':([67,68,70,96,101,103,104,106,107,108,111,115,178,179,180,181,197,198,199,200,201,202,203,224,226,229,273,276,278,281,309,346,347,377,],[109,120,122,176,182,185,188,191,185,194,211,223,266,267,268,269,284,285,286,287,288,289,290,185,297,303,338,340,341,342,122,380,381,401,]),'simple_expression':([67,68,70,96,101,103,104,106,107,108,111,115,178,179,180,181,197,198,199,200,201,202,203,204,224,226,229,273,276,278,281,309,346,347,377,],[110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,291,110,110,110,110,110,110,110,110,110,110,110,]),'term':([67,68,70,96,101,103,104,106,107,108,111,115,178,179,180,181,197,198,199,200,201,202,203,204,213,224,226,229,273,276,278,281,309,346,347,377,],[112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,292,112,112,112,112,112,112,112,112,112,112,112,]),'factor':([67,68,70,96,101,103,104,106,107,108,111,115,178,179,180,181,197,198,199,200,201,202,203,204,213,218,224,226,229,273,276,278,281,309,346,347,377,],[113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,293,113,113,113,113,113,113,113,113,113,113,113,]),'function_call':([67,68,70,96,101,103,104,106,107,108,111,115,178,179,180,181,197,198,199,200,201,202,203,204,213,218,224,226,229,273,276,278,281,309,346,347,377,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'type_specifier':([79,81,236,237,244,251,323,330,387,389,395,432,],[132,147,306,307,322,328,364,369,407,408,414,435,]),'subrange':([79,81,235,236,237,244,251,323,330,354,387,389,395,432,],[134,134,305,134,134,134,134,134,134,388,134,134,134,134,]),'parameter_list':([82,87,247,254,255,],[149,166,325,331,332,]),'parameter':([82,87,246,247,254,255,],[150,150,324,150,150,150,]),'field_list':([84,137,138,351,385,390,391,392,],[154,238,239,386,406,409,410,411,]),'field':([84,137,138,154,238,239,351,385,386,390,391,392,406,409,410,411,],[156,156,156,249,249,249,156,156,249,156,156,156,249,249,249,249,]),'variable_list':([94,],[174,]),'expression_list':([103,107,224,],[184,192,295,]),'write_arguments':([104,],[187,]),'write_argument':([104,276,],[189,339,]),'index_list':([108,],[193,]),'relop':([110,],[204,]),'simple_expression_tail':([112,],[212,]),'addop':([112,],[213,]),'term_tail':([113,],[217,]),'mulop':([113,],[218,]),'expression_list_tail':([185,338,],[272,376,]),'case_list_opt_semicolon':([227,],[298,]),'case_list':([227,422,],[299,429,]),'case_element':([227,350,422,434,],[300,384,300,384,]),'type_expression':([235,],[304,]),'case_part':([238,],[308,]),'method_list':([239,],[311,]),'method':([239,311,],[312,358,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON declaration_sections block DOT','program',6,'p_program','Parser_MiniPascal.py',19),
  ('declaration_sections -> declaration_sections declaration_section','declaration_sections',2,'p_declaration_sections','Parser_MiniPascal.py',25),
  ('declaration_sections -> empty','declaration_sections',1,'p_declaration_sections','Parser_MiniPascal.py',26),
  ('declaration_section -> uses_opt','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',31),
  ('declaration_section -> constant_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',32),
  ('declaration_section -> type_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',33),
  ('declaration_section -> var_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',34),
  ('declaration_section -> procedure_declarations','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',35),
  ('declaration_section -> function_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',36),
  ('declaration_section -> constructor_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',37),
  ('declaration_section -> method_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',38),
  ('method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block','method_declaration',9,'p_method_declaration','Parser_MiniPascal.py',42),
  ('method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block','method_declaration',9,'p_method_declaration','Parser_MiniPascal.py',43),
  ('method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block','method_declaration',11,'p_method_declaration','Parser_MiniPascal.py',44),
  ('method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block','method_declaration',6,'p_method_declaration','Parser_MiniPascal.py',45),
  ('constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block','constructor_declaration',7,'p_constructor_declaration','Parser_MiniPascal.py',52),
  ('constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block','constructor_declaration',6,'p_constructor_declaration','Parser_MiniPascal.py',53),
  ('uses_opt -> USES id_list SEMICOLON','uses_opt',3,'p_uses_opt','Parser_MiniPascal.py',59),
  ('id_list -> ID','id_list',1,'p_id_list_single','Parser_MiniPascal.py',73),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list_multiple','Parser_MiniPascal.py',77),
  ('var_declaration -> VAR declaration_list','var_declaration',2,'p_var_declaration','Parser_MiniPascal.py',81),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser_MiniPascal.py',85),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','Parser_MiniPascal.py',86),
  ('declaration -> id_list COLON type_specifier SEMICOLON','declaration',4,'p_declaration','Parser_MiniPascal.py',90),
  ('block -> declaration_sections compound_statement','block',2,'p_block','Parser_MiniPascal.py',108),
  ('type_declaration -> TYPE type_list','type_declaration',2,'p_type_declaration','Parser_MiniPascal.py',112),
  ('type_list -> type_definition','type_list',1,'p_type_list','Parser_MiniPascal.py',116),
  ('type_list -> type_list type_definition','type_list',2,'p_type_list','Parser_MiniPascal.py',117),
  ('type_definition -> ID EQUAL type_specifier SEMICOLON','type_definition',4,'p_type_definition','Parser_MiniPascal.py',122),
  ('type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier','type_specifier',6,'p_type_specifier','Parser_MiniPascal.py',137),
  ('type_specifier -> subrange','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',138),
  ('type_specifier -> FILE OF type_specifier','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',139),
  ('type_specifier -> SET OF type_specifier','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',140),
  ('type_specifier -> RECORD field_list case_part END','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',141),
  ('type_specifier -> OBJECT field_list method_list END','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',142),
  ('type_specifier -> LPAREN id_list RPAREN','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',143),
  ('type_specifier -> BOOLEAN_LITERAL','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',144),
  ('type_specifier -> INTEGER','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',145),
  ('type_specifier -> BYTE','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',146),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',147),
  ('type_specifier -> STRING','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',148),
  ('type_specifier -> STRING LBRACKET NUMBER RBRACKET','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',149),
  ('type_specifier -> ID','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',150),
  ('type_expression -> type_expression COMMA subrange','type_expression',3,'p_type_expression','Parser_MiniPascal.py',154),
  ('type_expression -> subrange','type_expression',1,'p_type_expression','Parser_MiniPascal.py',155),
  ('subrange -> NUMBER DOTDOT NUMBER','subrange',3,'p_subrange','Parser_MiniPascal.py',164),
  ('subrange -> NUMBER DOTDOT ID','subrange',3,'p_subrange','Parser_MiniPascal.py',165),
  ('field_list -> field_list field','field_list',2,'p_field_list','Parser_MiniPascal.py',171),
  ('field_list -> field','field_list',1,'p_field_list','Parser_MiniPascal.py',172),
  ('field_list -> empty','field_list',1,'p_field_list','Parser_MiniPascal.py',173),
  ('field -> id_list COLON type_specifier','field',3,'p_field','Parser_MiniPascal.py',185),
  ('field -> id_list COLON type_specifier SEMICOLON','field',4,'p_field','Parser_MiniPascal.py',186),
  ('field -> VAR id_list COLON type_specifier','field',4,'p_field','Parser_MiniPascal.py',187),
  ('field -> VAR id_list COLON type_specifier SEMICOLON','field',5,'p_field','Parser_MiniPascal.py',188),
  ('field -> id_list LPAREN STRING_LITERAL RPAREN','field',4,'p_field','Parser_MiniPascal.py',189),
  ('field -> statement','field',1,'p_field','Parser_MiniPascal.py',190),
  ('field -> if_statement','field',1,'p_field','Parser_MiniPascal.py',191),
  ('field -> case_statement','field',1,'p_field','Parser_MiniPascal.py',192),
  ('field -> assignment_statement','field',1,'p_field','Parser_MiniPascal.py',193),
  ('case_part -> CASE ID COLON type_specifier OF case_list SEMICOLON','case_part',7,'p_case_part','Parser_MiniPascal.py',206),
  ('case_part -> empty','case_part',1,'p_case_part','Parser_MiniPascal.py',207),
  ('case_list -> case_list SEMICOLON case_element','case_list',3,'p_case_list','Parser_MiniPascal.py',216),
  ('case_list -> case_element','case_list',1,'p_case_list','Parser_MiniPascal.py',217),
  ('case_list_opt_semicolon -> case_list','case_list_opt_semicolon',1,'p_case_list_opt_semicolon','Parser_MiniPascal.py',226),
  ('case_list_opt_semicolon -> case_list SEMICOLON','case_list_opt_semicolon',2,'p_case_list_opt_semicolon','Parser_MiniPascal.py',227),
  ('case_element -> NUMBER COLON LPAREN field_list RPAREN','case_element',5,'p_case_element','Parser_MiniPascal.py',234),
  ('case_element -> NUMBER COLON field_list','case_element',3,'p_case_element','Parser_MiniPascal.py',235),
  ('method_list -> method_list method','method_list',2,'p_method_list','Parser_MiniPascal.py',247),
  ('method_list -> method','method_list',1,'p_method_list','Parser_MiniPascal.py',248),
  ('method_list -> empty','method_list',1,'p_method_list','Parser_MiniPascal.py',249),
  ('method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON','method',6,'p_method','Parser_MiniPascal.py',259),
  ('method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON','method',6,'p_method','Parser_MiniPascal.py',260),
  ('method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON','method',8,'p_method','Parser_MiniPascal.py',261),
  ('method -> DESTRUCTOR ID SEMICOLON','method',3,'p_method','Parser_MiniPascal.py',262),
  ('case_statement -> CASE expression OF case_list_opt_semicolon END SEMICOLON','case_statement',6,'p_case_statement','Parser_MiniPascal.py',275),
  ('case_statement -> CASE expression OF case_list_opt_semicolon ELSE statement_list END SEMICOLON','case_statement',8,'p_case_statement','Parser_MiniPascal.py',276),
  ('case_statement -> CASE expression OF case_list_opt_semicolon END','case_statement',5,'p_case_statement','Parser_MiniPascal.py',277),
  ('type_specifier -> LONGINT','type_specifier',1,'p_type_specifier_longint','Parser_MiniPascal.py',289),
  ('procedure_declarations -> procedure_declaration','procedure_declarations',1,'p_procedure_declarations','Parser_MiniPascal.py',294),
  ('procedure_declarations -> procedure_declarations procedure_declaration','procedure_declarations',2,'p_procedure_declarations','Parser_MiniPascal.py',295),
  ('procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON','procedure_declaration',8,'p_procedure_declaration','Parser_MiniPascal.py',305),
  ('procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON','procedure_declaration',7,'p_procedure_declaration','Parser_MiniPascal.py',306),
  ('procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON','procedure_declaration',5,'p_procedure_declaration','Parser_MiniPascal.py',307),
  ('procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON FORWARD SEMICOLON','procedure_declaration',8,'p_procedure_declaration','Parser_MiniPascal.py',308),
  ('procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON','procedure_declaration',7,'p_procedure_declaration','Parser_MiniPascal.py',309),
  ('procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON','procedure_declaration',5,'p_procedure_declaration','Parser_MiniPascal.py',310),
  ('function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON','function_declaration',10,'p_function_declaration','Parser_MiniPascal.py',324),
  ('function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON','function_declaration',10,'p_function_declaration','Parser_MiniPascal.py',325),
  ('function_call -> ID LPAREN expression_list RPAREN','function_call',4,'p_function_call','Parser_MiniPascal.py',337),
  ('factor -> function_call','factor',1,'p_factor_function_call','Parser_MiniPascal.py',342),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','Parser_MiniPascal.py',347),
  ('parameter_list -> parameter_list SEMICOLON parameter','parameter_list',3,'p_parameter_list','Parser_MiniPascal.py',348),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','Parser_MiniPascal.py',349),
  ('parameter -> ID COLON type_specifier','parameter',3,'p_parameter','Parser_MiniPascal.py',358),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','Parser_MiniPascal.py',363),
  ('compound_statement -> BEGIN local_var_declarations statement_list END','compound_statement',4,'p_compound_statement','Parser_MiniPascal.py',364),
  ('local_var_declarations -> var_declaration','local_var_declarations',1,'p_local_var_declarations','Parser_MiniPascal.py',370),
  ('local_var_declarations -> empty','local_var_declarations',1,'p_local_var_declarations','Parser_MiniPascal.py',371),
  ('statement_list -> statement_list statement SEMICOLON','statement_list',3,'p_statement_list_multi','Parser_MiniPascal.py',376),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_multi','Parser_MiniPascal.py',377),
  ('statement_list -> statement','statement_list',1,'p_statement_list_single','Parser_MiniPascal.py',385),
  ('statement -> if_statement','statement',1,'p_statement','Parser_MiniPascal.py',391),
  ('statement -> assignment_statement','statement',1,'p_statement','Parser_MiniPascal.py',392),
  ('statement -> while_statement','statement',1,'p_statement','Parser_MiniPascal.py',393),
  ('statement -> procedure_call','statement',1,'p_statement','Parser_MiniPascal.py',394),
  ('statement -> compound_statement','statement',1,'p_statement','Parser_MiniPascal.py',395),
  ('statement -> for_statement','statement',1,'p_statement','Parser_MiniPascal.py',396),
  ('statement -> case_statement','statement',1,'p_statement','Parser_MiniPascal.py',397),
  ('statement -> with_statement','statement',1,'p_statement','Parser_MiniPascal.py',398),
  ('statement -> repeat_statement','statement',1,'p_statement','Parser_MiniPascal.py',399),
  ('statement -> empty','statement',1,'p_statement','Parser_MiniPascal.py',400),
  ('with_statement -> WITH variable DO statement','with_statement',4,'p_with_statement','Parser_MiniPascal.py',404),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_if_statement','Parser_MiniPascal.py',409),
  ('if_statement -> IF expression THEN statement','if_statement',4,'p_if_statement','Parser_MiniPascal.py',410),
  ('if_statement -> IF expression IN statement THEN statement ELSE statement','if_statement',8,'p_if_statement','Parser_MiniPascal.py',411),
  ('if_statement -> IF expression IN statement THEN statement','if_statement',6,'p_if_statement','Parser_MiniPascal.py',412),
  ('for_statement -> FOR ID COLON_EQUAL expression TO expression DO block','for_statement',8,'p_for_statement','Parser_MiniPascal.py',427),
  ('for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block','for_statement',8,'p_for_statement','Parser_MiniPascal.py',428),
  ('assignment_statement -> variable COLON_EQUAL expression','assignment_statement',3,'p_assignment_statement','Parser_MiniPascal.py',435),
  ('assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON','assignment_statement',4,'p_assignment_statement','Parser_MiniPascal.py',436),
  ('assignment_statement -> variable PLUS COLON_EQUAL expression','assignment_statement',4,'p_assignment_statement','Parser_MiniPascal.py',437),
  ('assignment_statement -> variable MINUS COLON_EQUAL expression','assignment_statement',4,'p_assignment_statement','Parser_MiniPascal.py',438),
  ('assignment_statement -> variable TIMES COLON_EQUAL expression','assignment_statement',4,'p_assignment_statement','Parser_MiniPascal.py',439),
  ('assignment_statement -> variable DIVIDE COLON_EQUAL expression','assignment_statement',4,'p_assignment_statement','Parser_MiniPascal.py',440),
  ('assignment_statement -> ID COLON_EQUAL expression','assignment_statement',3,'p_assignment_statement','Parser_MiniPascal.py',441),
  ('variable -> ID','variable',1,'p_variable_simple','Parser_MiniPascal.py',458),
  ('variable -> variable LBRACKET expression RBRACKET','variable',4,'p_variable_simple','Parser_MiniPascal.py',459),
  ('variable -> variable DOT ID','variable',3,'p_variable_simple','Parser_MiniPascal.py',460),
  ('variable -> ID LBRACKET index_list RBRACKET','variable',4,'p_variable_index','Parser_MiniPascal.py',475),
  ('index_list -> expression','index_list',1,'p_index_list','Parser_MiniPascal.py',479),
  ('index_list -> index_list COMMA expression','index_list',3,'p_index_list','Parser_MiniPascal.py',480),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','Parser_MiniPascal.py',488),
  ('procedure_call -> ID LPAREN expression_list RPAREN','procedure_call',4,'p_procedure_call','Parser_MiniPascal.py',493),
  ('procedure_call -> ID','procedure_call',1,'p_procedure_call','Parser_MiniPascal.py',494),
  ('expression_list -> expression expression_list_tail','expression_list',2,'p_expression_list_multi','Parser_MiniPascal.py',502),
  ('expression_list_tail -> COMMA expression expression_list_tail','expression_list_tail',3,'p_expression_list_tail','Parser_MiniPascal.py',510),
  ('expression_list_tail -> empty','expression_list_tail',1,'p_expression_list_tail','Parser_MiniPascal.py',511),
  ('expression_list -> empty','expression_list',1,'p_expression_list_empty','Parser_MiniPascal.py',523),
  ('expression -> simple_expression relop simple_expression','expression',3,'p_expression','Parser_MiniPascal.py',528),
  ('expression -> simple_expression','expression',1,'p_expression','Parser_MiniPascal.py',529),
  ('simple_expression -> term simple_expression_tail','simple_expression',2,'p_simple_expression','Parser_MiniPascal.py',537),
  ('simple_expression_tail -> addop term','simple_expression_tail',2,'p_simple_expression_tail','Parser_MiniPascal.py',545),
  ('simple_expression_tail -> empty','simple_expression_tail',1,'p_simple_expression_tail','Parser_MiniPascal.py',546),
  ('addop -> PLUS','addop',1,'p_addop','Parser_MiniPascal.py',555),
  ('addop -> MINUS','addop',1,'p_addop','Parser_MiniPascal.py',556),
  ('term -> factor term_tail','term',2,'p_term','Parser_MiniPascal.py',561),
  ('term_tail -> mulop factor','term_tail',2,'p_term_tail','Parser_MiniPascal.py',569),
  ('term_tail -> empty','term_tail',1,'p_term_tail','Parser_MiniPascal.py',570),
  ('mulop -> TIMES','mulop',1,'p_mulop','Parser_MiniPascal.py',579),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','Parser_MiniPascal.py',580),
  ('mulop -> DIV','mulop',1,'p_mulop','Parser_MiniPascal.py',581),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',585),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',586),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',587),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',588),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',589),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','Parser_MiniPascal.py',594),
  ('factor -> variable','factor',1,'p_factor_variable','Parser_MiniPascal.py',598),
  ('factor -> NUMBER','factor',1,'p_factor_number','Parser_MiniPascal.py',602),
  ('factor -> STRING_LITERAL','factor',1,'p_factor_string','Parser_MiniPascal.py',606),
  ('relop -> LESS','relop',1,'p_relop','Parser_MiniPascal.py',613),
  ('relop -> LESS_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',614),
  ('relop -> GREAT','relop',1,'p_relop','Parser_MiniPascal.py',615),
  ('relop -> GREAT_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',616),
  ('relop -> EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',617),
  ('relop -> DIFFERENT','relop',1,'p_relop','Parser_MiniPascal.py',618),
  ('empty -> <empty>','empty',0,'p_empty','Parser_MiniPascal.py',623),
  ('statement -> READLN','statement',1,'p_statement_readln','Parser_MiniPascal.py',627),
  ('statement -> READLN LPAREN variable RPAREN','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',631),
  ('statement -> READLN LBRACKET variable RBRACKET','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',632),
  ('statement -> READLN LPAREN variable_list RPAREN','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',633),
  ('variable_list -> variable','variable_list',1,'p_variable_list','Parser_MiniPascal.py',637),
  ('variable_list -> variable_list COMMA variable','variable_list',3,'p_variable_list','Parser_MiniPascal.py',638),
  ('statement -> WRITE LPAREN expression_list RPAREN','statement',4,'p_statement_write','Parser_MiniPascal.py',645),
  ('statement -> WRITELN LPAREN write_arguments RPAREN','statement',4,'p_statement_writeln','Parser_MiniPascal.py',649),
  ('statement -> WRITELN LPAREN expression RPAREN','statement',4,'p_statement_writeln','Parser_MiniPascal.py',650),
  ('write_arguments -> write_argument','write_arguments',1,'p_write_arguments','Parser_MiniPascal.py',655),
  ('write_arguments -> write_arguments COMMA write_argument','write_arguments',3,'p_write_arguments','Parser_MiniPascal.py',656),
  ('write_argument -> expression','write_argument',1,'p_write_argument','Parser_MiniPascal.py',663),
  ('write_argument -> expression COLON expression','write_argument',3,'p_write_argument','Parser_MiniPascal.py',664),
  ('write_argument -> expression COLON expression COLON expression','write_argument',5,'p_write_argument','Parser_MiniPascal.py',665),
  ('statement -> USES ID SEMICOLON','statement',3,'p_statement_uses','Parser_MiniPascal.py',675),
  ('constant_declaration -> CONST constant_list','constant_declaration',2,'p_constant_declaration','Parser_MiniPascal.py',680),
  ('repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON','repeat_statement',5,'p_repeat_statement','Parser_MiniPascal.py',684),
  ('constant_list -> constant','constant_list',1,'p_constant_list','Parser_MiniPascal.py',688),
  ('constant_list -> constant_list constant','constant_list',2,'p_constant_list','Parser_MiniPascal.py',689),
  ('constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',697),
  ('constant -> ID EQUAL NUMBER SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',698),
  ('constant -> ID EQUAL STRING_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',699),
  ('constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',700),
  ('expression -> expression AND expression','expression',3,'p_expression_logical','Parser_MiniPascal.py',716),
  ('expression -> expression OR expression','expression',3,'p_expression_logical','Parser_MiniPascal.py',717),
  ('expression -> NOT expression','expression',2,'p_expression_logical','Parser_MiniPascal.py',718),
]
