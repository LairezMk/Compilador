
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocELSEAND ARRAY BEGIN BOOLEAN_LITERAL BYTE CASE CHAR CHARACTER_LITERAL COLON COLON_EQUAL COMMA CONST CONSTRUCTOR DESTRUCTOR DIFFERENT DIV DIVIDE DO DOT DOTDOT DOWNTO ELSE END EQUAL FALSE FILE FOR FUNCTION GOTO GREAT GREAT_EQUAL ID IF IN INTEGER LABEL LBLOCK LBRACKET LESS LESS_EQUAL LONGINT LPAREN MINUS MOD NIL NOT NUMBER OBJECT OF OR PACKED PLUS PROCEDURE PROGRAM RBLOCK RBRACKET READLINE READLN RECORD REPEAT RPAREN SEMICOLON SET STRING STRING_LITERAL SUBRANGE THEN TIMES TO TRUE TYPE UNTIL USES VAR WHILE WITH WRITE WRITELNprogram : PROGRAM ID SEMICOLON declaration_sections block DOTdeclaration_sections : declaration_sections declaration_section\n                            | emptydeclaration_section : uses_opt\n                           | constant_declaration\n                           | type_declaration\n                           | var_declaration\n                           | procedure_declaration\n                           | function_declarationuses_opt : USES id_list SEMICOLONid_list : ID\n               | id_list COMMA IDvar_declaration : VAR declaration_listdeclaration_list : declaration\n                        | declaration_list declarationdeclaration : id_list COLON type_specifier SEMICOLONblock : declaration_sections compound_statementtype_declaration : TYPE type_listtype_list : type_definition\n                 | type_list type_definitiontype_definition : ID EQUAL type_specifier SEMICOLONtype_specifier : ARRAY LBRACKET type_expression RBRACKET OF type_specifier\n                      | subrange\n                      | FILE OF type_specifier\n                      | SET OF type_specifier\n                      | RECORD field_list case_part END\n                      | OBJECT field_list method_list END                              \n                      | LPAREN id_list RPAREN\n                      | BOOLEAN_LITERAL\n                      | INTEGER\n                      | BYTE\n                      | CHAR\n                      | STRING LBRACKET NUMBER RBRACKET\n                      | IDtype_expression : type_expression COMMA subrange\n                       | subrangesubrange : NUMBER DOTDOT NUMBERfield_list : field_list field\n                  | fieldfield : id_list COLON type_specifier SEMICOLON\n             | id_list COLON type_specifiercase_part : CASE ID COLON type_specifier OF case_list SEMICOLON\n                 | emptycase_list : case_list SEMICOLON case_element\n                 | case_elementcase_element : NUMBER COLON LPAREN field_list RPARENmethod_list : method_list method\n                   | method\n                   | emptymethod : CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON\n              | PROCEDURE ID LPAREN field_list RPAREN SEMICOLON\n              | FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON\n              | DESTRUCTOR ID SEMICOLONtype_specifier : LONGINTprocedure_declarations : procedure_declaration\n                              | procedure_declarations procedure_declarationprocedure_declaration : PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON\n                             | PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOTfunction_declaration : FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLONfunction_call : ID LPAREN expression_list RPARENfactor : function_callparameter_list : parameter\n                      | parameter_list SEMICOLON parameterparameter : id_list COLON type_specifier\n                 | VAR id_list COLON type_specifiercompound_statement : BEGIN statement_list ENDstatement_list : statement statement_list_tailstatement_list_tail : SEMICOLON statement statement_list_tail\n                           | emptystatement : if_statement\n                 | assignment_statement\n                 | while_statement\n                 | procedure_call\n                 | compound_statement\n                 | for_statement\n                 | emptyif_statement : IF expression THEN statement ELSE statement\n                 | IF expression THEN statementfor_statement : FOR ID COLON_EQUAL expression TO expression DO statement\n                     | FOR ID COLON_EQUAL expression DOWNTO expression DO statementassignment_statement : variable COLON_EQUAL expressionvariable : IDvariable : ID LBRACKET expression RBRACKETwhile_statement : WHILE expression DO statementprocedure_call : ID LPAREN expression_list RPARENexpression_list : expression expression_list_tailexpression_list_tail : COMMA expression expression_list_tail\n                            | emptyexpression_list : emptyexpression : simple_expression relop simple_expression\n                  | simple_expressionsimple_expression : term simple_expression_tailsimple_expression_tail : addop term\n                              | emptyaddop : PLUS\n             | MINUSterm : factor term_tailterm_tail : mulop factor\n                 | emptymulop : TIMES\n             | DIVIDE\n             | DIVexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expressionfactor : LPAREN expression RPARENfactor : variablefactor : NUMBERfactor : STRING_LITERALrelop : LESS\n             | LESS_EQUAL\n             | GREAT\n             | GREAT_EQUAL\n             | EQUAL\n             | DIFFERENTempty :statement : READLNstatement : READLN LPAREN variable RPAREN\n                 | READLN LBRACKET variable RBRACKETstatement : WRITELN LPAREN expression_list RPARENstatement : WRITE LPAREN expression_list RPARENstatement : USES ID SEMICOLONconstant_declaration : CONST constant_listconstant_list : constant\n                     | constant_list constantconstant : ID EQUAL CHARACTER_LITERAL SEMICOLON\n                | ID EQUAL NUMBER SEMICOLON\n                | ID EQUAL STRING_LITERAL SEMICOLON\n                | ID EQUAL BOOLEAN_LITERAL SEMICOLONexpression : expression AND expression\n                  | expression OR expression\n                  | NOT expression'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,24,],[0,-1,]),'ID':([2,16,17,18,19,20,21,23,27,28,30,31,33,34,51,53,54,55,57,58,60,61,62,63,64,65,68,70,71,72,73,74,76,77,80,84,96,99,102,103,104,105,106,107,108,111,116,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,147,149,150,152,154,155,156,158,159,160,161,162,163,164,165,167,168,169,170,172,176,178,179,187,209,210,212,213,215,219,220,221,222,223,225,229,230,232,234,235,238,240,241,247,255,257,258,259,260,261,266,267,268,270,271,272,286,291,293,],[3,26,29,32,26,36,37,52,29,-126,32,-19,26,-14,75,88,88,90,91,-127,-20,96,-15,96,26,26,52,120,120,88,88,88,88,88,88,88,-34,-23,26,26,26,-29,-30,-31,-32,-54,26,52,88,88,88,88,88,88,88,88,-112,-113,-114,-115,-116,-117,88,-95,-96,88,-100,-101,-102,88,52,88,-128,-129,-130,-131,-21,96,96,26,-39,26,-16,26,96,88,-24,-25,-38,239,96,243,244,245,246,-28,-37,96,96,52,88,88,-26,-41,-27,-33,96,96,-40,26,26,26,52,52,-22,26,26,26,96,26,26,]),'SEMICOLON':([3,22,23,25,26,39,40,41,42,43,44,45,46,47,66,68,75,79,81,82,83,85,86,87,88,91,92,93,94,95,96,97,99,105,106,107,108,111,112,113,114,117,118,122,127,130,145,146,148,151,153,159,177,183,184,185,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,205,209,210,223,225,227,228,232,233,238,240,241,246,247,248,249,250,252,266,267,268,273,274,275,277,278,281,282,289,290,294,],[4,-17,-118,56,-11,68,-70,-71,-72,-73,-74,-75,-76,-119,-66,-118,127,-91,-118,-118,-61,-109,-110,-111,-82,-12,161,162,163,164,-34,165,-23,-29,-30,-31,-32,-54,176,178,-62,178,68,-81,-124,-118,-134,-92,-94,-97,-99,-118,226,-120,-121,-122,-123,-85,-83,-78,-103,-104,-105,-106,-107,-132,-133,-90,-93,-98,-108,-84,-24,-25,-28,-37,-63,-64,-118,-60,-26,258,-27,262,-33,263,-65,265,-77,-118,-118,-22,280,-79,-80,284,285,287,-45,292,-44,-46,]),'USES':([4,5,6,7,9,10,11,12,13,14,15,23,27,28,30,31,33,34,56,58,60,62,68,130,159,161,162,163,164,165,176,226,232,263,264,265,266,267,280,],[-118,16,-3,16,-2,-4,-5,-6,-7,-8,-9,51,-125,-126,-18,-19,-13,-14,-10,-127,-20,-15,51,51,51,-128,-129,-130,-131,-21,-16,-118,51,-57,-58,-118,51,51,-59,]),'CONST':([4,5,6,7,9,10,11,12,13,14,15,27,28,30,31,33,34,56,58,60,62,161,162,163,164,165,176,226,263,264,265,280,],[-118,17,-3,17,-2,-4,-5,-6,-7,-8,-9,-125,-126,-18,-19,-13,-14,-10,-127,-20,-15,-128,-129,-130,-131,-21,-16,-118,-57,-58,-118,-59,]),'TYPE':([4,5,6,7,9,10,11,12,13,14,15,27,28,30,31,33,34,56,58,60,62,161,162,163,164,165,176,226,263,264,265,280,],[-118,18,-3,18,-2,-4,-5,-6,-7,-8,-9,-125,-126,-18,-19,-13,-14,-10,-127,-20,-15,-128,-129,-130,-131,-21,-16,-118,-57,-58,-118,-59,]),'VAR':([4,5,6,7,9,10,11,12,13,14,15,27,28,30,31,33,34,56,58,60,62,64,65,161,162,163,164,165,176,178,226,263,264,265,280,],[-118,19,-3,19,-2,-4,-5,-6,-7,-8,-9,-125,-126,-18,-19,-13,-14,-10,-127,-20,-15,116,116,-128,-129,-130,-131,-21,-16,116,-118,-57,-58,-118,-59,]),'PROCEDURE':([4,5,6,7,9,10,11,12,13,14,15,27,28,30,31,33,34,56,58,60,62,96,99,105,106,107,108,111,161,162,163,164,165,170,172,176,209,210,212,216,217,218,223,225,226,238,240,241,242,247,258,262,263,264,265,268,280,284,285,292,],[-118,20,-3,20,-2,-4,-5,-6,-7,-8,-9,-125,-126,-18,-19,-13,-14,-10,-127,-20,-15,-34,-23,-29,-30,-31,-32,-54,-128,-129,-130,-131,-21,-39,220,-16,-24,-25,-38,220,-48,-49,-28,-37,-118,-26,-41,-27,-47,-33,-40,-53,-57,-58,-118,-22,-59,-50,-51,-52,]),'FUNCTION':([4,5,6,7,9,10,11,12,13,14,15,27,28,30,31,33,34,56,58,60,62,96,99,105,106,107,108,111,161,162,163,164,165,170,172,176,209,210,212,216,217,218,223,225,226,238,240,241,242,247,258,262,263,264,265,268,280,284,285,292,],[-118,21,-3,21,-2,-4,-5,-6,-7,-8,-9,-125,-126,-18,-19,-13,-14,-10,-127,-20,-15,-34,-23,-29,-30,-31,-32,-54,-128,-129,-130,-131,-21,-39,221,-16,-24,-25,-38,221,-48,-49,-28,-37,-118,-26,-41,-27,-47,-33,-40,-53,-57,-58,-118,-22,-59,-50,-51,-52,]),'BEGIN':([4,5,6,7,9,10,11,12,13,14,15,23,27,28,30,31,33,34,56,58,60,62,68,130,159,161,162,163,164,165,176,226,232,263,264,265,266,267,280,],[-118,-118,-3,23,-2,-4,-5,-6,-7,-8,-9,23,-125,-126,-18,-19,-13,-14,-10,-127,-20,-15,23,23,23,-128,-129,-130,-131,-21,-16,-118,23,-57,-58,-118,23,23,-59,]),'DOT':([8,22,66,248,],[24,-17,-66,264,]),'READLN':([23,68,130,159,232,266,267,],[47,47,47,47,47,47,47,]),'WRITELN':([23,68,130,159,232,266,267,],[49,49,49,49,49,49,49,]),'WRITE':([23,68,130,159,232,266,267,],[50,50,50,50,50,50,50,]),'IF':([23,68,130,159,232,266,267,],[53,53,53,53,53,53,53,]),'WHILE':([23,68,130,159,232,266,267,],[54,54,54,54,54,54,54,]),'FOR':([23,68,130,159,232,266,267,],[55,55,55,55,55,55,55,]),'END':([23,38,39,40,41,42,43,44,45,46,47,66,67,68,69,79,81,82,83,85,86,87,88,96,99,105,106,107,108,111,118,122,127,130,145,146,148,151,153,159,169,170,172,182,183,184,185,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,205,209,210,211,212,214,216,217,218,223,225,232,233,238,240,241,242,247,252,258,262,266,267,268,274,275,284,285,287,292,],[-118,66,-118,-70,-71,-72,-73,-74,-75,-76,-119,-66,-67,-118,-69,-91,-118,-118,-61,-109,-110,-111,-82,-34,-23,-29,-30,-31,-32,-54,-118,-81,-124,-118,-134,-92,-94,-97,-99,-118,-118,-39,-118,-68,-120,-121,-122,-123,-85,-83,-78,-103,-104,-105,-106,-107,-132,-133,-90,-93,-98,-108,-84,-24,-25,238,-38,-43,241,-48,-49,-28,-37,-118,-60,-26,-41,-27,-47,-33,-77,-40,-53,-118,-118,-22,-79,-80,-50,-51,-42,-52,]),'COMMA':([25,26,35,79,81,82,83,85,86,87,88,91,115,124,145,146,148,151,153,171,173,180,191,193,194,195,196,197,198,199,200,201,202,203,207,208,225,231,233,256,],[57,-11,57,-91,-118,-118,-61,-109,-110,-111,-82,-12,57,187,-134,-92,-94,-97,-99,57,57,57,-83,-103,-104,-105,-106,-107,-132,-133,-90,-93,-98,-108,237,-36,-37,187,-60,-35,]),'COLON':([26,35,91,115,171,180,181,239,279,283,],[-11,63,-12,179,215,229,230,257,286,288,]),'RPAREN':([26,73,74,76,79,81,82,83,85,86,87,88,91,96,99,105,106,107,108,111,113,114,117,119,120,123,124,125,126,128,145,146,148,151,153,157,158,170,173,186,188,191,193,194,195,196,197,198,199,200,201,202,203,204,209,210,212,223,225,227,228,231,233,238,240,241,247,249,251,258,268,270,271,272,293,],[-11,-118,-118,-118,-91,-118,-118,-61,-109,-110,-111,-82,-12,-34,-23,-29,-30,-31,-32,-54,177,-62,181,183,-82,185,-118,-89,189,190,-134,-92,-94,-97,-99,203,-118,-39,223,-86,-88,-83,-103,-104,-105,-106,-107,-132,-133,-90,-93,-98,-108,233,-24,-25,-38,-28,-37,-63,-64,-118,-60,-26,-41,-27,-33,-65,-87,-40,-22,277,278,279,294,]),'EQUAL':([29,32,79,81,82,83,85,86,87,88,146,148,151,153,191,201,202,203,233,],[59,61,143,-118,-118,-61,-109,-110,-111,-82,-92,-94,-97,-99,-83,-93,-98,-108,-60,]),'LPAREN':([36,37,47,49,50,52,53,54,61,63,72,73,74,76,77,80,84,88,131,132,133,134,135,136,137,138,139,140,141,142,143,144,147,149,150,152,154,155,156,158,160,167,168,179,187,215,229,230,234,235,243,244,245,255,257,286,288,],[64,65,70,73,74,76,84,84,104,104,84,84,84,84,84,84,84,158,84,84,84,84,84,84,84,84,-112,-113,-114,-115,-116,-117,84,-95,-96,84,-100,-101,-102,84,84,104,104,104,84,104,104,104,84,84,259,260,261,104,104,104,291,]),'ELSE':([40,41,42,43,44,45,46,47,66,79,81,82,83,85,86,87,88,122,127,130,145,146,148,151,153,159,183,184,185,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,205,232,233,252,266,267,274,275,],[-70,-71,-72,-73,-74,-75,-76,-119,-66,-91,-118,-118,-61,-109,-110,-111,-82,-81,-124,-118,-134,-92,-94,-97,-99,-118,-120,-121,-122,-123,-85,-83,232,-103,-104,-105,-106,-107,-132,-133,-90,-93,-98,-108,-84,-118,-60,-77,-118,-118,-79,-80,]),'LBRACKET':([47,52,88,98,109,120,],[71,77,77,166,174,77,]),'COLON_EQUAL':([48,52,90,191,],[72,-82,160,-83,]),'NOT':([53,54,72,73,74,76,77,80,84,131,132,133,134,135,136,137,158,160,187,234,235,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'NUMBER':([53,54,59,61,63,72,73,74,76,77,80,84,131,132,133,134,135,136,137,138,139,140,141,142,143,144,147,149,150,152,154,155,156,158,160,166,167,168,174,175,179,187,215,229,230,234,235,237,255,257,276,286,287,],[86,86,93,110,110,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,-112,-113,-114,-115,-116,-117,86,-95,-96,86,-100,-101,-102,86,86,110,110,110,224,225,110,86,110,110,110,86,86,110,110,110,283,110,283,]),'STRING_LITERAL':([53,54,59,72,73,74,76,77,80,84,131,132,133,134,135,136,137,138,139,140,141,142,143,144,147,149,150,152,154,155,156,158,160,187,234,235,],[87,87,94,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,-112,-113,-114,-115,-116,-117,87,-95,-96,87,-100,-101,-102,87,87,87,87,87,]),'CHARACTER_LITERAL':([59,],[92,]),'BOOLEAN_LITERAL':([59,61,63,167,168,179,215,229,230,255,257,286,],[95,105,105,105,105,105,105,105,105,105,105,105,]),'ARRAY':([61,63,167,168,179,215,229,230,255,257,286,],[98,98,98,98,98,98,98,98,98,98,98,]),'FILE':([61,63,167,168,179,215,229,230,255,257,286,],[100,100,100,100,100,100,100,100,100,100,100,]),'SET':([61,63,167,168,179,215,229,230,255,257,286,],[101,101,101,101,101,101,101,101,101,101,101,]),'RECORD':([61,63,167,168,179,215,229,230,255,257,286,],[102,102,102,102,102,102,102,102,102,102,102,]),'OBJECT':([61,63,167,168,179,215,229,230,255,257,286,],[103,103,103,103,103,103,103,103,103,103,103,]),'INTEGER':([61,63,167,168,179,215,229,230,255,257,286,],[106,106,106,106,106,106,106,106,106,106,106,]),'BYTE':([61,63,167,168,179,215,229,230,255,257,286,],[107,107,107,107,107,107,107,107,107,107,107,]),'CHAR':([61,63,167,168,179,215,229,230,255,257,286,],[108,108,108,108,108,108,108,108,108,108,108,]),'STRING':([61,63,167,168,179,215,229,230,255,257,286,],[109,109,109,109,109,109,109,109,109,109,109,]),'LONGINT':([61,63,167,168,179,215,229,230,255,257,286,],[111,111,111,111,111,111,111,111,111,111,111,]),'THEN':([78,79,81,82,83,85,86,87,88,145,146,148,151,153,191,193,194,195,196,197,198,199,200,201,202,203,233,],[130,-91,-118,-118,-61,-109,-110,-111,-82,-134,-92,-94,-97,-99,-83,-103,-104,-105,-106,-107,-132,-133,-90,-93,-98,-108,-60,]),'PLUS':([78,79,81,82,83,85,86,87,88,89,122,124,129,145,146,148,151,153,157,191,193,194,195,196,197,198,199,200,201,202,203,206,231,233,253,254,],[131,-91,149,-118,-61,-109,-110,-111,-82,131,131,131,131,131,-92,-94,-97,-99,131,-83,131,131,131,131,131,131,131,-90,-93,-98,-108,131,131,-60,131,131,]),'MINUS':([78,79,81,82,83,85,86,87,88,89,122,124,129,145,146,148,151,153,157,191,193,194,195,196,197,198,199,200,201,202,203,206,231,233,253,254,],[132,-91,150,-118,-61,-109,-110,-111,-82,132,132,132,132,132,-92,-94,-97,-99,132,-83,132,132,132,132,132,132,132,-90,-93,-98,-108,132,132,-60,132,132,]),'TIMES':([78,79,81,82,83,85,86,87,88,89,122,124,129,145,146,148,151,153,157,191,193,194,195,196,197,198,199,200,201,202,203,206,231,233,253,254,],[133,-91,-118,154,-61,-109,-110,-111,-82,133,133,133,133,133,-92,-94,-97,-99,133,-83,133,133,133,133,133,133,133,-90,-93,-98,-108,133,133,-60,133,133,]),'DIVIDE':([78,79,81,82,83,85,86,87,88,89,122,124,129,145,146,148,151,153,157,191,193,194,195,196,197,198,199,200,201,202,203,206,231,233,253,254,],[134,-91,-118,155,-61,-109,-110,-111,-82,134,134,134,134,134,-92,-94,-97,-99,134,-83,134,134,134,134,134,134,134,-90,-93,-98,-108,134,134,-60,134,134,]),'MOD':([78,79,81,82,83,85,86,87,88,89,122,124,129,145,146,148,151,153,157,191,193,194,195,196,197,198,199,200,201,202,203,206,231,233,253,254,],[135,-91,-118,-118,-61,-109,-110,-111,-82,135,135,135,135,135,-92,-94,-97,-99,135,-83,135,135,135,135,135,135,135,-90,-93,-98,-108,135,135,-60,135,135,]),'AND':([78,79,81,82,83,85,86,87,88,89,122,124,129,145,146,148,151,153,157,191,193,194,195,196,197,198,199,200,201,202,203,206,231,233,253,254,],[136,-91,-118,-118,-61,-109,-110,-111,-82,136,136,136,136,136,-92,-94,-97,-99,136,-83,136,136,136,136,136,136,136,-90,-93,-98,-108,136,136,-60,136,136,]),'OR':([78,79,81,82,83,85,86,87,88,89,122,124,129,145,146,148,151,153,157,191,193,194,195,196,197,198,199,200,201,202,203,206,231,233,253,254,],[137,-91,-118,-118,-61,-109,-110,-111,-82,137,137,137,137,137,-92,-94,-97,-99,137,-83,137,137,137,137,137,137,137,-90,-93,-98,-108,137,137,-60,137,137,]),'DO':([79,81,82,83,85,86,87,88,89,145,146,148,151,153,191,193,194,195,196,197,198,199,200,201,202,203,233,253,254,],[-91,-118,-118,-61,-109,-110,-111,-82,159,-134,-92,-94,-97,-99,-83,-103,-104,-105,-106,-107,-132,-133,-90,-93,-98,-108,-60,266,267,]),'RBRACKET':([79,81,82,83,85,86,87,88,120,121,129,145,146,148,151,153,191,193,194,195,196,197,198,199,200,201,202,203,207,208,224,225,233,256,],[-91,-118,-118,-61,-109,-110,-111,-82,-82,184,191,-134,-92,-94,-97,-99,-83,-103,-104,-105,-106,-107,-132,-133,-90,-93,-98,-108,236,-36,247,-37,-60,-35,]),'TO':([79,81,82,83,85,86,87,88,145,146,148,151,153,191,193,194,195,196,197,198,199,200,201,202,203,206,233,],[-91,-118,-118,-61,-109,-110,-111,-82,-134,-92,-94,-97,-99,-83,-103,-104,-105,-106,-107,-132,-133,-90,-93,-98,-108,234,-60,]),'DOWNTO':([79,81,82,83,85,86,87,88,145,146,148,151,153,191,193,194,195,196,197,198,199,200,201,202,203,206,233,],[-91,-118,-118,-61,-109,-110,-111,-82,-134,-92,-94,-97,-99,-83,-103,-104,-105,-106,-107,-132,-133,-90,-93,-98,-108,235,-60,]),'LESS':([79,81,82,83,85,86,87,88,146,148,151,153,191,201,202,203,233,],[139,-118,-118,-61,-109,-110,-111,-82,-92,-94,-97,-99,-83,-93,-98,-108,-60,]),'LESS_EQUAL':([79,81,82,83,85,86,87,88,146,148,151,153,191,201,202,203,233,],[140,-118,-118,-61,-109,-110,-111,-82,-92,-94,-97,-99,-83,-93,-98,-108,-60,]),'GREAT':([79,81,82,83,85,86,87,88,146,148,151,153,191,201,202,203,233,],[141,-118,-118,-61,-109,-110,-111,-82,-92,-94,-97,-99,-83,-93,-98,-108,-60,]),'GREAT_EQUAL':([79,81,82,83,85,86,87,88,146,148,151,153,191,201,202,203,233,],[142,-118,-118,-61,-109,-110,-111,-82,-92,-94,-97,-99,-83,-93,-98,-108,-60,]),'DIFFERENT':([79,81,82,83,85,86,87,88,146,148,151,153,191,201,202,203,233,],[144,-118,-118,-61,-109,-110,-111,-82,-92,-94,-97,-99,-83,-93,-98,-108,-60,]),'DIV':([82,83,85,86,87,88,191,203,233,],[156,-61,-109,-110,-111,-82,-83,-108,-60,]),'CASE':([96,99,105,106,107,108,111,169,170,209,210,212,223,225,238,240,241,247,258,268,],[-34,-23,-29,-30,-31,-32,-54,213,-39,-24,-25,-38,-28,-37,-26,-41,-27,-33,-40,-22,]),'CONSTRUCTOR':([96,99,105,106,107,108,111,170,172,209,210,212,216,217,218,223,225,238,240,241,242,247,258,262,268,284,285,292,],[-34,-23,-29,-30,-31,-32,-54,-39,219,-24,-25,-38,219,-48,-49,-28,-37,-26,-41,-27,-47,-33,-40,-53,-22,-50,-51,-52,]),'DESTRUCTOR':([96,99,105,106,107,108,111,170,172,209,210,212,216,217,218,223,225,238,240,241,242,247,258,262,268,284,285,292,],[-34,-23,-29,-30,-31,-32,-54,-39,222,-24,-25,-38,222,-48,-49,-28,-37,-26,-41,-27,-47,-33,-40,-53,-22,-50,-51,-52,]),'OF':([96,99,100,101,105,106,107,108,111,209,210,223,225,236,238,241,247,268,269,],[-34,-23,167,168,-29,-30,-31,-32,-54,-24,-25,-28,-37,255,-26,-27,-33,-22,276,]),'DOTDOT':([110,],[175,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_sections':([4,5,226,265,],[5,7,7,7,]),'empty':([4,5,23,39,68,73,74,76,81,82,118,124,130,158,159,169,172,226,231,232,265,266,267,],[6,6,46,69,46,125,125,125,148,153,69,188,46,125,46,214,218,6,188,46,6,46,46,]),'block':([5,226,265,],[8,248,273,]),'declaration_section':([5,7,],[9,9,]),'uses_opt':([5,7,],[10,10,]),'constant_declaration':([5,7,],[11,11,]),'type_declaration':([5,7,],[12,12,]),'var_declaration':([5,7,],[13,13,]),'procedure_declaration':([5,7,],[14,14,]),'function_declaration':([5,7,],[15,15,]),'compound_statement':([7,23,68,130,159,232,266,267,],[22,44,44,44,44,44,44,44,]),'id_list':([16,19,33,64,65,102,103,104,116,169,172,178,259,260,261,270,271,272,291,293,],[25,35,35,115,115,171,171,173,180,171,171,115,171,171,171,171,171,171,171,171,]),'constant_list':([17,],[27,]),'constant':([17,27,],[28,58,]),'type_list':([18,],[30,]),'type_definition':([18,30,],[31,60,]),'declaration_list':([19,],[33,]),'declaration':([19,33,],[34,62,]),'statement_list':([23,],[38,]),'statement':([23,68,130,159,232,266,267,],[39,118,192,205,252,274,275,]),'if_statement':([23,68,130,159,232,266,267,],[40,40,40,40,40,40,40,]),'assignment_statement':([23,68,130,159,232,266,267,],[41,41,41,41,41,41,41,]),'while_statement':([23,68,130,159,232,266,267,],[42,42,42,42,42,42,42,]),'procedure_call':([23,68,130,159,232,266,267,],[43,43,43,43,43,43,43,]),'for_statement':([23,68,130,159,232,266,267,],[45,45,45,45,45,45,45,]),'variable':([23,53,54,68,70,71,72,73,74,76,77,80,84,130,131,132,133,134,135,136,137,138,147,152,158,159,160,187,232,234,235,266,267,],[48,85,85,48,119,121,85,85,85,85,85,85,85,48,85,85,85,85,85,85,85,85,85,85,85,48,85,85,48,85,85,48,48,]),'statement_list_tail':([39,118,],[67,182,]),'expression':([53,54,72,73,74,76,77,80,84,131,132,133,134,135,136,137,158,160,187,234,235,],[78,89,122,124,124,124,129,145,157,193,194,195,196,197,198,199,124,206,231,253,254,]),'simple_expression':([53,54,72,73,74,76,77,80,84,131,132,133,134,135,136,137,138,158,160,187,234,235,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,200,79,79,79,79,79,]),'term':([53,54,72,73,74,76,77,80,84,131,132,133,134,135,136,137,138,147,158,160,187,234,235,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,201,81,81,81,81,81,]),'factor':([53,54,72,73,74,76,77,80,84,131,132,133,134,135,136,137,138,147,152,158,160,187,234,235,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,202,82,82,82,82,82,]),'function_call':([53,54,72,73,74,76,77,80,84,131,132,133,134,135,136,137,138,147,152,158,160,187,234,235,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'type_specifier':([61,63,167,168,179,215,229,230,255,257,286,],[97,112,209,210,228,240,249,250,268,269,289,]),'subrange':([61,63,166,167,168,179,215,229,230,237,255,257,286,],[99,99,208,99,99,99,99,99,99,256,99,99,99,]),'parameter_list':([64,65,],[113,117,]),'parameter':([64,65,178,],[114,114,227,]),'expression_list':([73,74,76,158,],[123,126,128,204,]),'relop':([79,],[138,]),'simple_expression_tail':([81,],[146,]),'addop':([81,],[147,]),'term_tail':([82,],[151,]),'mulop':([82,],[152,]),'field_list':([102,103,259,260,261,291,],[169,172,270,271,272,293,]),'field':([102,103,169,172,259,260,261,270,271,272,291,293,],[170,170,212,212,170,170,170,212,212,212,170,212,]),'expression_list_tail':([124,231,],[186,251,]),'type_expression':([166,],[207,]),'case_part':([169,],[211,]),'method_list':([172,],[216,]),'method':([172,216,],[217,242,]),'case_list':([276,],[281,]),'case_element':([276,287,],[282,290,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON declaration_sections block DOT','program',6,'p_program','Parser_MiniPascal.py',18),
  ('declaration_sections -> declaration_sections declaration_section','declaration_sections',2,'p_declaration_sections','Parser_MiniPascal.py',40),
  ('declaration_sections -> empty','declaration_sections',1,'p_declaration_sections','Parser_MiniPascal.py',41),
  ('declaration_section -> uses_opt','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',48),
  ('declaration_section -> constant_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',49),
  ('declaration_section -> type_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',50),
  ('declaration_section -> var_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',51),
  ('declaration_section -> procedure_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',52),
  ('declaration_section -> function_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',53),
  ('uses_opt -> USES id_list SEMICOLON','uses_opt',3,'p_uses_opt','Parser_MiniPascal.py',57),
  ('id_list -> ID','id_list',1,'p_id_list','Parser_MiniPascal.py',65),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','Parser_MiniPascal.py',66),
  ('var_declaration -> VAR declaration_list','var_declaration',2,'p_var_declaration','Parser_MiniPascal.py',73),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser_MiniPascal.py',77),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','Parser_MiniPascal.py',78),
  ('declaration -> id_list COLON type_specifier SEMICOLON','declaration',4,'p_declaration','Parser_MiniPascal.py',85),
  ('block -> declaration_sections compound_statement','block',2,'p_block','Parser_MiniPascal.py',90),
  ('type_declaration -> TYPE type_list','type_declaration',2,'p_type_declaration','Parser_MiniPascal.py',127),
  ('type_list -> type_definition','type_list',1,'p_type_list','Parser_MiniPascal.py',131),
  ('type_list -> type_list type_definition','type_list',2,'p_type_list','Parser_MiniPascal.py',132),
  ('type_definition -> ID EQUAL type_specifier SEMICOLON','type_definition',4,'p_type_definition','Parser_MiniPascal.py',143),
  ('type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier','type_specifier',6,'p_type_specifier','Parser_MiniPascal.py',147),
  ('type_specifier -> subrange','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',148),
  ('type_specifier -> FILE OF type_specifier','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',149),
  ('type_specifier -> SET OF type_specifier','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',150),
  ('type_specifier -> RECORD field_list case_part END','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',151),
  ('type_specifier -> OBJECT field_list method_list END','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',152),
  ('type_specifier -> LPAREN id_list RPAREN','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',153),
  ('type_specifier -> BOOLEAN_LITERAL','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',154),
  ('type_specifier -> INTEGER','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',155),
  ('type_specifier -> BYTE','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',156),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',157),
  ('type_specifier -> STRING LBRACKET NUMBER RBRACKET','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',158),
  ('type_specifier -> ID','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',159),
  ('type_expression -> type_expression COMMA subrange','type_expression',3,'p_type_expression','Parser_MiniPascal.py',163),
  ('type_expression -> subrange','type_expression',1,'p_type_expression','Parser_MiniPascal.py',164),
  ('subrange -> NUMBER DOTDOT NUMBER','subrange',3,'p_subrange','Parser_MiniPascal.py',168),
  ('field_list -> field_list field','field_list',2,'p_field_list','Parser_MiniPascal.py',173),
  ('field_list -> field','field_list',1,'p_field_list','Parser_MiniPascal.py',174),
  ('field -> id_list COLON type_specifier SEMICOLON','field',4,'p_field','Parser_MiniPascal.py',178),
  ('field -> id_list COLON type_specifier','field',3,'p_field','Parser_MiniPascal.py',179),
  ('case_part -> CASE ID COLON type_specifier OF case_list SEMICOLON','case_part',7,'p_case_part','Parser_MiniPascal.py',183),
  ('case_part -> empty','case_part',1,'p_case_part','Parser_MiniPascal.py',184),
  ('case_list -> case_list SEMICOLON case_element','case_list',3,'p_case_list','Parser_MiniPascal.py',188),
  ('case_list -> case_element','case_list',1,'p_case_list','Parser_MiniPascal.py',189),
  ('case_element -> NUMBER COLON LPAREN field_list RPAREN','case_element',5,'p_case_element','Parser_MiniPascal.py',193),
  ('method_list -> method_list method','method_list',2,'p_method_list','Parser_MiniPascal.py',200),
  ('method_list -> method','method_list',1,'p_method_list','Parser_MiniPascal.py',201),
  ('method_list -> empty','method_list',1,'p_method_list','Parser_MiniPascal.py',202),
  ('method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON','method',6,'p_method','Parser_MiniPascal.py',206),
  ('method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON','method',6,'p_method','Parser_MiniPascal.py',207),
  ('method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON','method',8,'p_method','Parser_MiniPascal.py',208),
  ('method -> DESTRUCTOR ID SEMICOLON','method',3,'p_method','Parser_MiniPascal.py',209),
  ('type_specifier -> LONGINT','type_specifier',1,'p_type_specifier_longint','Parser_MiniPascal.py',223),
  ('procedure_declarations -> procedure_declaration','procedure_declarations',1,'p_procedure_declarations','Parser_MiniPascal.py',228),
  ('procedure_declarations -> procedure_declarations procedure_declaration','procedure_declarations',2,'p_procedure_declarations','Parser_MiniPascal.py',229),
  ('procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON','procedure_declaration',8,'p_procedure_declaration','Parser_MiniPascal.py',239),
  ('procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT','procedure_declaration',8,'p_procedure_declaration','Parser_MiniPascal.py',240),
  ('function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON','function_declaration',10,'p_function_declaration','Parser_MiniPascal.py',244),
  ('function_call -> ID LPAREN expression_list RPAREN','function_call',4,'p_function_call','Parser_MiniPascal.py',252),
  ('factor -> function_call','factor',1,'p_factor_function_call','Parser_MiniPascal.py',256),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','Parser_MiniPascal.py',261),
  ('parameter_list -> parameter_list SEMICOLON parameter','parameter_list',3,'p_parameter_list','Parser_MiniPascal.py',262),
  ('parameter -> id_list COLON type_specifier','parameter',3,'p_parameter','Parser_MiniPascal.py',269),
  ('parameter -> VAR id_list COLON type_specifier','parameter',4,'p_parameter','Parser_MiniPascal.py',270),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','Parser_MiniPascal.py',278),
  ('statement_list -> statement statement_list_tail','statement_list',2,'p_statement_list_multi','Parser_MiniPascal.py',283),
  ('statement_list_tail -> SEMICOLON statement statement_list_tail','statement_list_tail',3,'p_statement_list_tail','Parser_MiniPascal.py',287),
  ('statement_list_tail -> empty','statement_list_tail',1,'p_statement_list_tail','Parser_MiniPascal.py',288),
  ('statement -> if_statement','statement',1,'p_statement','Parser_MiniPascal.py',296),
  ('statement -> assignment_statement','statement',1,'p_statement','Parser_MiniPascal.py',297),
  ('statement -> while_statement','statement',1,'p_statement','Parser_MiniPascal.py',298),
  ('statement -> procedure_call','statement',1,'p_statement','Parser_MiniPascal.py',299),
  ('statement -> compound_statement','statement',1,'p_statement','Parser_MiniPascal.py',300),
  ('statement -> for_statement','statement',1,'p_statement','Parser_MiniPascal.py',301),
  ('statement -> empty','statement',1,'p_statement','Parser_MiniPascal.py',302),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_if_statement','Parser_MiniPascal.py',306),
  ('if_statement -> IF expression THEN statement','if_statement',4,'p_if_statement','Parser_MiniPascal.py',307),
  ('for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement','for_statement',8,'p_for_statement','Parser_MiniPascal.py',314),
  ('for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement','for_statement',8,'p_for_statement','Parser_MiniPascal.py',315),
  ('assignment_statement -> variable COLON_EQUAL expression','assignment_statement',3,'p_assignment_statement','Parser_MiniPascal.py',323),
  ('variable -> ID','variable',1,'p_variable_simple','Parser_MiniPascal.py',328),
  ('variable -> ID LBRACKET expression RBRACKET','variable',4,'p_variable_index','Parser_MiniPascal.py',332),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','Parser_MiniPascal.py',337),
  ('procedure_call -> ID LPAREN expression_list RPAREN','procedure_call',4,'p_procedure_call','Parser_MiniPascal.py',342),
  ('expression_list -> expression expression_list_tail','expression_list',2,'p_expression_list_multi','Parser_MiniPascal.py',347),
  ('expression_list_tail -> COMMA expression expression_list_tail','expression_list_tail',3,'p_expression_list_tail','Parser_MiniPascal.py',351),
  ('expression_list_tail -> empty','expression_list_tail',1,'p_expression_list_tail','Parser_MiniPascal.py',352),
  ('expression_list -> empty','expression_list',1,'p_expression_list_empty','Parser_MiniPascal.py',359),
  ('expression -> simple_expression relop simple_expression','expression',3,'p_expression','Parser_MiniPascal.py',364),
  ('expression -> simple_expression','expression',1,'p_expression','Parser_MiniPascal.py',365),
  ('simple_expression -> term simple_expression_tail','simple_expression',2,'p_simple_expression','Parser_MiniPascal.py',373),
  ('simple_expression_tail -> addop term','simple_expression_tail',2,'p_simple_expression_tail','Parser_MiniPascal.py',380),
  ('simple_expression_tail -> empty','simple_expression_tail',1,'p_simple_expression_tail','Parser_MiniPascal.py',381),
  ('addop -> PLUS','addop',1,'p_addop','Parser_MiniPascal.py',388),
  ('addop -> MINUS','addop',1,'p_addop','Parser_MiniPascal.py',389),
  ('term -> factor term_tail','term',2,'p_term','Parser_MiniPascal.py',394),
  ('term_tail -> mulop factor','term_tail',2,'p_term_tail','Parser_MiniPascal.py',401),
  ('term_tail -> empty','term_tail',1,'p_term_tail','Parser_MiniPascal.py',402),
  ('mulop -> TIMES','mulop',1,'p_mulop','Parser_MiniPascal.py',409),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','Parser_MiniPascal.py',410),
  ('mulop -> DIV','mulop',1,'p_mulop','Parser_MiniPascal.py',411),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',416),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',417),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',418),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',419),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',420),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','Parser_MiniPascal.py',427),
  ('factor -> variable','factor',1,'p_factor_variable','Parser_MiniPascal.py',431),
  ('factor -> NUMBER','factor',1,'p_factor_number','Parser_MiniPascal.py',435),
  ('factor -> STRING_LITERAL','factor',1,'p_factor_string','Parser_MiniPascal.py',439),
  ('relop -> LESS','relop',1,'p_relop','Parser_MiniPascal.py',446),
  ('relop -> LESS_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',447),
  ('relop -> GREAT','relop',1,'p_relop','Parser_MiniPascal.py',448),
  ('relop -> GREAT_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',449),
  ('relop -> EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',450),
  ('relop -> DIFFERENT','relop',1,'p_relop','Parser_MiniPascal.py',451),
  ('empty -> <empty>','empty',0,'p_empty','Parser_MiniPascal.py',456),
  ('statement -> READLN','statement',1,'p_statement_readln','Parser_MiniPascal.py',460),
  ('statement -> READLN LPAREN variable RPAREN','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',464),
  ('statement -> READLN LBRACKET variable RBRACKET','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',465),
  ('statement -> WRITELN LPAREN expression_list RPAREN','statement',4,'p_statement_writeln','Parser_MiniPascal.py',469),
  ('statement -> WRITE LPAREN expression_list RPAREN','statement',4,'p_statement_write','Parser_MiniPascal.py',473),
  ('statement -> USES ID SEMICOLON','statement',3,'p_statement_uses','Parser_MiniPascal.py',478),
  ('constant_declaration -> CONST constant_list','constant_declaration',2,'p_constant_declaration','Parser_MiniPascal.py',483),
  ('constant_list -> constant','constant_list',1,'p_constant_list','Parser_MiniPascal.py',487),
  ('constant_list -> constant_list constant','constant_list',2,'p_constant_list','Parser_MiniPascal.py',488),
  ('constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',495),
  ('constant -> ID EQUAL NUMBER SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',496),
  ('constant -> ID EQUAL STRING_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',497),
  ('constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',498),
  ('expression -> expression AND expression','expression',3,'p_expression_logical','Parser_MiniPascal.py',503),
  ('expression -> expression OR expression','expression',3,'p_expression_logical','Parser_MiniPascal.py',504),
  ('expression -> NOT expression','expression',2,'p_expression_logical','Parser_MiniPascal.py',505),
]
