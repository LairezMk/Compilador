
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocELSEAND ARRAY BEGIN BOOLEAN_LITERAL BYTE CASE CHAR CHARACTER_LITERAL COLON COLON_EQUAL COMMA CONST CONSTRUCTOR DESTRUCTOR DIFFERENT DIV DIVIDE DO DOT DOTDOT DOWNTO ELSE END EQUAL FALSE FILE FOR FORWARD FUNCTION GOTO GREAT GREAT_EQUAL ID IF IN INTEGER LABEL LBLOCK LBRACKET LESS LESS_EQUAL LONGINT LPAREN MINUS MOD NIL NOT NUMBER OBJECT OF OR PACKED PLUS PROCEDURE PROGRAM RBLOCK RBRACKET READLINE READLN RECORD REPEAT RPAREN SEMICOLON SET STRING STRING_LITERAL SUBRANGE THEN TIMES TO TRUE TYPE UNTIL USES VAR WHILE WITH WRITE WRITELNprogram : PROGRAM ID SEMICOLON declaration_sections block DOTdeclaration_sections : declaration_sections declaration_section\n                            | emptydeclaration_section : uses_opt\n                           | constant_declaration\n                           | type_declaration\n                           | var_declaration\n                           | procedure_declarations\n                           | function_declarationuses_opt : USES id_list SEMICOLONid_list : ID\n               | id_list COMMA IDvar_declaration : VAR declaration_listdeclaration_list : declaration\n                        | declaration_list declarationdeclaration : id_list COLON type_specifier SEMICOLONblock : declaration_sections compound_statementtype_declaration : TYPE type_listtype_list : type_definition\n                 | type_list type_definitiontype_definition : ID EQUAL type_specifier SEMICOLONtype_specifier : ARRAY LBRACKET type_expression RBRACKET OF type_specifier\n                      | subrange\n                      | FILE OF type_specifier\n                      | SET OF type_specifier\n                      | RECORD field_list case_part END\n                      | OBJECT field_list method_list END                              \n                      | LPAREN id_list RPAREN\n                      | BOOLEAN_LITERAL\n                      | INTEGER\n                      | BYTE\n                      | CHAR\n                      | STRING\n                      | STRING LBRACKET NUMBER RBRACKET\n                      | IDtype_expression : type_expression COMMA subrange\n                       | subrangesubrange : NUMBER DOTDOT NUMBERfield_list : field_list field\n                  | field\n                  | emptyfield : id_list COLON type_specifier\n             | id_list COLON type_specifier SEMICOLON\n             | VAR id_list COLON type_specifier\n             | VAR id_list COLON type_specifier SEMICOLONcase_part : CASE ID COLON type_specifier OF case_list SEMICOLON\n                 | emptycase_list : case_list SEMICOLON case_element\n                 | case_elementcase_element : NUMBER COLON LPAREN field_list RPARENmethod_list : method_list method\n                   | method\n                   | emptymethod : CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON\n              | PROCEDURE ID LPAREN field_list RPAREN SEMICOLON\n              | FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON\n              | DESTRUCTOR ID SEMICOLONtype_specifier : LONGINTprocedure_declarations : procedure_declaration\n                              | procedure_declarations procedure_declarationprocedure_declaration : PROCEDURE ID LPAREN field_list RPAREN SEMICOLON\n                             | PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON\n                             | PROCEDURE ID SEMICOLON block SEMICOLON\n                             | PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON\n                             | PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON\n                             | PROCEDURE ID SEMICOLON FORWARD SEMICOLONfunction_declaration : FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON\n                            | FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLONfunction_call : ID LPAREN expression_list RPARENfactor : function_callparameter_list : parameter\n                      | parameter_list SEMICOLON parameter\n                      | emptyparameter : id_list COLON type_specifier\n                 | VAR id_list COLON type_specifiercompound_statement : BEGIN statement_list END\n                         | BEGIN statement_list END SEMICOLONstatement_list : statement statement_list_tailstatement_list_tail : SEMICOLON statement statement_list_tail\n                           | emptystatement : if_statement\n                 | assignment_statement\n                 | while_statement\n                 | procedure_call\n                 | compound_statement\n                 | for_statement\n                 | emptyif_statement : IF expression THEN statement ELSE statement\n                 | IF expression THEN statementfor_statement : FOR ID COLON_EQUAL expression TO expression DO statement\n                     | FOR ID COLON_EQUAL expression DOWNTO expression DO statementassignment_statement : variable COLON_EQUAL expressionvariable : IDvariable : ID LBRACKET index_list RBRACKETindex_list : expression\n                  | index_list COMMA expressionwhile_statement : WHILE expression DO statementprocedure_call : ID LPAREN expression_list RPAREN\n                      | IDexpression_list : expression expression_list_tailexpression_list_tail : COMMA expression expression_list_tail\n                            | emptyexpression_list : emptyexpression : simple_expression relop simple_expression\n                  | simple_expressionsimple_expression : term simple_expression_tailsimple_expression_tail : addop term\n                              | emptyaddop : PLUS\n             | MINUSterm : factor term_tailterm_tail : mulop factor\n                 | emptymulop : TIMES\n             | DIVIDE\n             | DIVexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expressionfactor : LPAREN expression RPARENfactor : variablefactor : NUMBERfactor : STRING_LITERALrelop : LESS\n             | LESS_EQUAL\n             | GREAT\n             | GREAT_EQUAL\n             | EQUAL\n             | DIFFERENTempty :statement : READLNstatement : READLN LPAREN variable RPAREN\n                 | READLN LBRACKET variable RBRACKETstatement : WRITELN LPAREN expression_list RPARENstatement : WRITE LPAREN expression_list RPARENstatement : USES ID SEMICOLONconstant_declaration : CONST constant_listconstant_list : constant\n                     | constant_list constantconstant : ID EQUAL CHARACTER_LITERAL SEMICOLON\n                | ID EQUAL NUMBER SEMICOLON\n                | ID EQUAL STRING_LITERAL SEMICOLON\n                | ID EQUAL BOOLEAN_LITERAL SEMICOLONexpression : expression AND expression\n                  | expression OR expression\n                  | NOT expression'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,25,],[0,-1,]),'ID':([2,16,17,18,19,21,22,24,29,30,32,33,35,36,53,55,56,57,59,60,62,63,64,65,66,67,71,73,74,75,76,77,79,80,83,87,99,102,105,106,107,108,109,110,111,112,114,120,121,123,124,126,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,160,162,163,165,167,168,169,171,172,173,174,175,176,177,178,180,181,182,183,187,189,190,193,195,204,209,227,228,230,235,236,237,238,239,241,242,245,249,250,253,255,256,259,261,267,273,274,279,281,282,283,284,288,289,290,291,293,294,295,311,316,318,],[3,28,31,34,28,38,39,54,31,-140,34,-19,28,-14,78,91,91,93,94,-141,-20,99,-15,99,28,28,54,132,132,91,91,91,91,91,91,91,-35,-23,28,28,28,-29,-30,-31,-32,-33,-58,28,28,-40,-41,28,54,91,91,91,91,91,91,91,91,-126,-127,-128,-129,-130,-131,91,-109,-110,91,-114,-115,-116,91,54,91,-142,-143,-144,-145,-21,99,99,28,28,-16,28,99,-39,99,91,91,-24,-25,260,263,264,265,266,-28,-38,99,99,-42,99,54,91,91,-26,-27,-34,-43,-44,99,99,28,28,28,-45,54,54,-22,28,28,28,99,28,28,]),'SEMICOLON':([3,23,24,27,28,39,41,42,43,44,45,46,47,48,49,54,66,69,71,78,82,84,85,86,88,89,90,91,94,95,96,97,98,99,100,102,108,109,110,111,112,114,115,116,117,118,122,127,128,129,130,134,139,143,158,159,161,164,166,172,192,200,201,202,206,207,208,210,211,212,213,214,215,216,217,218,219,220,221,223,227,228,239,241,243,244,247,248,249,253,254,259,261,266,267,268,269,270,274,276,289,290,291,296,297,298,299,301,302,306,307,314,315,319,],[4,-17,-132,58,-11,68,71,-81,-82,-83,-84,-85,-86,-87,-133,-99,-132,129,-132,139,-105,-132,-132,-70,-123,-124,-125,-93,-12,174,175,176,177,-35,178,-23,-29,-30,-31,-32,-33,-58,187,189,-71,-73,194,197,198,-77,71,-92,-138,-132,-148,-106,-108,-111,-113,-132,246,-134,-135,-136,-137,-98,-94,-89,-117,-118,-119,-120,-121,-146,-147,-104,-107,-112,-122,-97,-24,-25,-28,-38,-72,-74,271,272,273,-132,-69,-26,-27,285,-34,286,-75,287,288,-88,-132,-132,-22,304,305,-90,-91,309,310,312,-49,317,-48,-50,]),'USES':([4,5,6,7,9,10,11,12,13,14,15,20,24,26,29,30,32,33,35,36,58,60,62,64,68,71,143,172,174,175,176,177,178,187,194,197,198,246,253,271,272,286,287,289,290,304,305,],[-132,16,-3,16,-2,-4,-5,-6,-7,-8,-9,-59,53,-60,-139,-140,-18,-19,-13,-14,-10,-141,-20,-15,-132,53,53,53,-142,-143,-144,-145,-21,-16,-132,-63,-66,-61,53,-62,-65,-132,-64,53,53,-67,-68,]),'CONST':([4,5,6,7,9,10,11,12,13,14,15,20,26,29,30,32,33,35,36,58,60,62,64,68,174,175,176,177,178,187,194,197,198,246,271,272,286,287,304,305,],[-132,17,-3,17,-2,-4,-5,-6,-7,-8,-9,-59,-60,-139,-140,-18,-19,-13,-14,-10,-141,-20,-15,-132,-142,-143,-144,-145,-21,-16,-132,-63,-66,-61,-62,-65,-132,-64,-67,-68,]),'TYPE':([4,5,6,7,9,10,11,12,13,14,15,20,26,29,30,32,33,35,36,58,60,62,64,68,174,175,176,177,178,187,194,197,198,246,271,272,286,287,304,305,],[-132,18,-3,18,-2,-4,-5,-6,-7,-8,-9,-59,-60,-139,-140,-18,-19,-13,-14,-10,-141,-20,-15,-132,-142,-143,-144,-145,-21,-16,-132,-63,-66,-61,-62,-65,-132,-64,-67,-68,]),'VAR':([4,5,6,7,9,10,11,12,13,14,15,20,26,29,30,32,33,35,36,58,60,62,64,66,67,68,99,102,105,106,108,109,110,111,112,114,121,123,124,174,175,176,177,178,182,183,187,189,193,194,197,198,227,228,239,241,246,249,259,261,267,271,272,273,274,282,283,284,286,287,288,291,293,294,295,304,305,316,318,],[-132,19,-3,19,-2,-4,-5,-6,-7,-8,-9,-59,-60,-139,-140,-18,-19,-13,-14,-10,-141,-20,-15,120,126,-132,-35,-23,126,126,-29,-30,-31,-32,-33,-58,126,-40,-41,-142,-143,-144,-145,-21,126,126,-16,120,-39,-132,-63,-66,-24,-25,-28,-38,-61,-42,-26,-27,-34,-62,-65,-43,-44,126,126,126,-132,-64,-45,-22,126,126,126,-67,-68,126,126,]),'FUNCTION':([4,5,6,7,9,10,11,12,13,14,15,20,26,29,30,32,33,35,36,58,60,62,64,68,99,102,106,108,109,110,111,112,114,123,124,174,175,176,177,178,183,187,193,194,197,198,227,228,232,233,234,239,241,246,249,259,261,262,267,271,272,273,274,285,286,287,288,291,304,305,309,310,317,],[-132,21,-3,21,-2,-4,-5,-6,-7,-8,-9,-59,-60,-139,-140,-18,-19,-13,-14,-10,-141,-20,-15,-132,-35,-23,-132,-29,-30,-31,-32,-33,-58,-40,-41,-142,-143,-144,-145,-21,237,-16,-39,-132,-63,-66,-24,-25,237,-52,-53,-28,-38,-61,-42,-26,-27,-51,-34,-62,-65,-43,-44,-57,-132,-64,-45,-22,-67,-68,-54,-55,-56,]),'PROCEDURE':([4,5,6,7,9,10,11,12,13,14,15,20,26,29,30,32,33,35,36,58,60,62,64,68,99,102,106,108,109,110,111,112,114,123,124,174,175,176,177,178,183,187,193,194,197,198,227,228,232,233,234,239,241,246,249,259,261,262,267,271,272,273,274,285,286,287,288,291,304,305,309,310,317,],[-132,22,-3,22,-2,-4,-5,-6,-7,22,-9,-59,-60,-139,-140,-18,-19,-13,-14,-10,-141,-20,-15,-132,-35,-23,-132,-29,-30,-31,-32,-33,-58,-40,-41,-142,-143,-144,-145,-21,236,-16,-39,-132,-63,-66,-24,-25,236,-52,-53,-28,-38,-61,-42,-26,-27,-51,-34,-62,-65,-43,-44,-57,-132,-64,-45,-22,-67,-68,-54,-55,-56,]),'BEGIN':([4,5,6,7,9,10,11,12,13,14,15,20,24,26,29,30,32,33,35,36,58,60,62,64,68,71,143,172,174,175,176,177,178,187,194,197,198,246,253,271,272,286,287,289,290,304,305,],[-132,-132,-3,24,-2,-4,-5,-6,-7,-8,-9,-59,24,-60,-139,-140,-18,-19,-13,-14,-10,-141,-20,-15,-132,24,24,24,-142,-143,-144,-145,-21,-16,-132,-63,-66,-61,24,-62,-65,-132,-64,24,24,-67,-68,]),'DOT':([8,23,69,129,],[25,-17,-76,-77,]),'READLN':([24,71,143,172,253,289,290,],[49,49,49,49,49,49,49,]),'WRITELN':([24,71,143,172,253,289,290,],[51,51,51,51,51,51,51,]),'WRITE':([24,71,143,172,253,289,290,],[52,52,52,52,52,52,52,]),'IF':([24,71,143,172,253,289,290,],[55,55,55,55,55,55,55,]),'WHILE':([24,71,143,172,253,289,290,],[56,56,56,56,56,56,56,]),'FOR':([24,71,143,172,253,289,290,],[57,57,57,57,57,57,57,]),'END':([24,40,41,42,43,44,45,46,47,48,49,54,69,70,71,72,82,84,85,86,88,89,90,91,99,102,105,106,108,109,110,111,112,114,123,124,129,130,134,139,143,158,159,161,164,166,172,182,183,193,199,200,201,202,206,207,208,210,211,212,213,214,215,216,217,218,219,220,221,223,227,228,229,231,232,233,234,239,241,249,253,254,259,261,262,267,273,274,276,285,288,289,290,291,298,299,309,310,312,317,],[-132,69,-132,-81,-82,-83,-84,-85,-86,-87,-133,-99,-76,-78,-132,-80,-105,-132,-132,-70,-123,-124,-125,-93,-35,-23,-132,-132,-29,-30,-31,-32,-33,-58,-40,-41,-77,-132,-92,-138,-132,-148,-106,-108,-111,-113,-132,-132,-132,-39,-79,-134,-135,-136,-137,-98,-94,-89,-117,-118,-119,-120,-121,-146,-147,-104,-107,-112,-122,-97,-24,-25,259,-47,261,-52,-53,-28,-38,-42,-132,-69,-26,-27,-51,-34,-43,-44,-88,-57,-45,-132,-132,-22,-90,-91,-54,-55,-46,-56,]),'COMMA':([27,28,37,82,84,85,86,88,89,90,91,94,119,125,136,141,142,158,159,161,164,166,184,191,196,208,211,212,213,214,215,216,217,218,219,220,221,225,226,241,251,252,254,280,],[59,-11,59,-105,-132,-132,-70,-123,-124,-125,-93,-12,59,59,204,209,-95,-148,-106,-108,-111,-113,59,59,59,-94,-117,-118,-119,-120,-121,-146,-147,-104,-107,-112,-122,258,-37,-38,204,-96,-69,-36,]),'COLON':([28,37,94,119,125,188,191,196,260,303,308,],[-11,65,-12,190,195,242,245,250,281,311,313,]),'RPAREN':([28,66,67,76,77,79,82,84,85,86,88,89,90,91,94,99,102,108,109,110,111,112,114,116,117,118,121,123,124,131,132,135,136,137,138,140,158,159,161,164,166,170,171,184,193,203,205,208,211,212,213,214,215,216,217,218,219,220,221,222,227,228,239,241,243,244,249,251,254,259,261,267,269,273,274,275,282,283,284,288,291,293,294,295,316,318,],[-11,-132,122,-132,-132,-132,-105,-132,-132,-70,-123,-124,-125,-93,-12,-35,-23,-29,-30,-31,-32,-33,-58,188,-71,-73,192,-40,-41,200,-93,202,-132,-103,206,207,-148,-106,-108,-111,-113,221,-132,239,-39,-100,-102,-94,-117,-118,-119,-120,-121,-146,-147,-104,-107,-112,-122,254,-24,-25,-28,-38,-72,-74,-42,-132,-69,-26,-27,-34,-75,-43,-44,-101,-132,-132,-132,-45,-22,301,302,303,-132,319,]),'EQUAL':([31,34,82,84,85,86,88,89,90,91,159,161,164,166,208,219,220,221,254,],[61,63,156,-132,-132,-70,-123,-124,-125,-93,-106,-108,-111,-113,-94,-107,-112,-122,-69,]),'LPAREN':([38,39,49,51,52,54,55,56,63,65,75,76,77,79,80,83,87,91,144,145,146,147,148,149,150,151,152,153,154,155,156,157,160,162,163,165,167,168,169,171,173,180,181,190,195,204,209,242,245,250,255,256,263,264,265,279,281,311,313,],[66,67,73,76,77,79,87,87,107,107,87,87,87,87,87,87,87,171,87,87,87,87,87,87,87,87,-126,-127,-128,-129,-130,-131,87,-109,-110,87,-114,-115,-116,87,87,107,107,107,107,87,87,107,107,107,87,87,282,283,284,107,107,107,316,]),'ELSE':([42,43,44,45,46,47,48,49,54,69,82,84,85,86,88,89,90,91,129,134,139,143,158,159,161,164,166,172,200,201,202,206,207,208,210,211,212,213,214,215,216,217,218,219,220,221,223,253,254,276,289,290,298,299,],[-81,-82,-83,-84,-85,-86,-87,-133,-99,-76,-105,-132,-132,-70,-123,-124,-125,-93,-77,-92,-138,-132,-148,-106,-108,-111,-113,-132,-134,-135,-136,-137,-98,-94,253,-117,-118,-119,-120,-121,-146,-147,-104,-107,-112,-122,-97,-132,-69,-88,-132,-132,-90,-91,]),'LBRACKET':([49,54,91,101,112,132,],[74,80,80,179,185,80,]),'COLON_EQUAL':([50,54,93,208,],[75,-93,173,-94,]),'NOT':([55,56,75,76,77,79,80,83,87,144,145,146,147,148,149,150,171,173,204,209,255,256,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'NUMBER':([55,56,61,63,65,75,76,77,79,80,83,87,144,145,146,147,148,149,150,151,152,153,154,155,156,157,160,162,163,165,167,168,169,171,173,179,180,181,185,186,190,195,204,209,242,245,250,255,256,258,279,281,300,311,312,],[89,89,96,113,113,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,-126,-127,-128,-129,-130,-131,89,-109,-110,89,-114,-115,-116,89,89,113,113,113,240,241,113,113,89,89,113,113,113,89,89,113,113,113,308,113,308,]),'STRING_LITERAL':([55,56,61,75,76,77,79,80,83,87,144,145,146,147,148,149,150,151,152,153,154,155,156,157,160,162,163,165,167,168,169,171,173,204,209,255,256,],[90,90,97,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,-126,-127,-128,-129,-130,-131,90,-109,-110,90,-114,-115,-116,90,90,90,90,90,90,]),'CHARACTER_LITERAL':([61,],[95,]),'BOOLEAN_LITERAL':([61,63,65,180,181,190,195,242,245,250,279,281,311,],[98,108,108,108,108,108,108,108,108,108,108,108,108,]),'ARRAY':([63,65,180,181,190,195,242,245,250,279,281,311,],[101,101,101,101,101,101,101,101,101,101,101,101,]),'FILE':([63,65,180,181,190,195,242,245,250,279,281,311,],[103,103,103,103,103,103,103,103,103,103,103,103,]),'SET':([63,65,180,181,190,195,242,245,250,279,281,311,],[104,104,104,104,104,104,104,104,104,104,104,104,]),'RECORD':([63,65,180,181,190,195,242,245,250,279,281,311,],[105,105,105,105,105,105,105,105,105,105,105,105,]),'OBJECT':([63,65,180,181,190,195,242,245,250,279,281,311,],[106,106,106,106,106,106,106,106,106,106,106,106,]),'INTEGER':([63,65,180,181,190,195,242,245,250,279,281,311,],[109,109,109,109,109,109,109,109,109,109,109,109,]),'BYTE':([63,65,180,181,190,195,242,245,250,279,281,311,],[110,110,110,110,110,110,110,110,110,110,110,110,]),'CHAR':([63,65,180,181,190,195,242,245,250,279,281,311,],[111,111,111,111,111,111,111,111,111,111,111,111,]),'STRING':([63,65,180,181,190,195,242,245,250,279,281,311,],[112,112,112,112,112,112,112,112,112,112,112,112,]),'LONGINT':([63,65,180,181,190,195,242,245,250,279,281,311,],[114,114,114,114,114,114,114,114,114,114,114,114,]),'FORWARD':([68,194,246,286,],[128,248,270,297,]),'THEN':([81,82,84,85,86,88,89,90,91,158,159,161,164,166,208,211,212,213,214,215,216,217,218,219,220,221,254,],[143,-105,-132,-132,-70,-123,-124,-125,-93,-148,-106,-108,-111,-113,-94,-117,-118,-119,-120,-121,-146,-147,-104,-107,-112,-122,-69,]),'PLUS':([81,82,84,85,86,88,89,90,91,92,134,136,142,158,159,161,164,166,170,208,211,212,213,214,215,216,217,218,219,220,221,224,251,252,254,277,278,],[144,-105,162,-132,-70,-123,-124,-125,-93,144,144,144,144,144,-106,-108,-111,-113,144,-94,144,144,144,144,144,144,144,-104,-107,-112,-122,144,144,144,-69,144,144,]),'MINUS':([81,82,84,85,86,88,89,90,91,92,134,136,142,158,159,161,164,166,170,208,211,212,213,214,215,216,217,218,219,220,221,224,251,252,254,277,278,],[145,-105,163,-132,-70,-123,-124,-125,-93,145,145,145,145,145,-106,-108,-111,-113,145,-94,145,145,145,145,145,145,145,-104,-107,-112,-122,145,145,145,-69,145,145,]),'TIMES':([81,82,84,85,86,88,89,90,91,92,134,136,142,158,159,161,164,166,170,208,211,212,213,214,215,216,217,218,219,220,221,224,251,252,254,277,278,],[146,-105,-132,167,-70,-123,-124,-125,-93,146,146,146,146,146,-106,-108,-111,-113,146,-94,146,146,146,146,146,146,146,-104,-107,-112,-122,146,146,146,-69,146,146,]),'DIVIDE':([81,82,84,85,86,88,89,90,91,92,134,136,142,158,159,161,164,166,170,208,211,212,213,214,215,216,217,218,219,220,221,224,251,252,254,277,278,],[147,-105,-132,168,-70,-123,-124,-125,-93,147,147,147,147,147,-106,-108,-111,-113,147,-94,147,147,147,147,147,147,147,-104,-107,-112,-122,147,147,147,-69,147,147,]),'MOD':([81,82,84,85,86,88,89,90,91,92,134,136,142,158,159,161,164,166,170,208,211,212,213,214,215,216,217,218,219,220,221,224,251,252,254,277,278,],[148,-105,-132,-132,-70,-123,-124,-125,-93,148,148,148,148,148,-106,-108,-111,-113,148,-94,148,148,148,148,148,148,148,-104,-107,-112,-122,148,148,148,-69,148,148,]),'AND':([81,82,84,85,86,88,89,90,91,92,134,136,142,158,159,161,164,166,170,208,211,212,213,214,215,216,217,218,219,220,221,224,251,252,254,277,278,],[149,-105,-132,-132,-70,-123,-124,-125,-93,149,149,149,149,149,-106,-108,-111,-113,149,-94,149,149,149,149,149,149,149,-104,-107,-112,-122,149,149,149,-69,149,149,]),'OR':([81,82,84,85,86,88,89,90,91,92,134,136,142,158,159,161,164,166,170,208,211,212,213,214,215,216,217,218,219,220,221,224,251,252,254,277,278,],[150,-105,-132,-132,-70,-123,-124,-125,-93,150,150,150,150,150,-106,-108,-111,-113,150,-94,150,150,150,150,150,150,150,-104,-107,-112,-122,150,150,150,-69,150,150,]),'DO':([82,84,85,86,88,89,90,91,92,158,159,161,164,166,208,211,212,213,214,215,216,217,218,219,220,221,254,277,278,],[-105,-132,-132,-70,-123,-124,-125,-93,172,-148,-106,-108,-111,-113,-94,-117,-118,-119,-120,-121,-146,-147,-104,-107,-112,-122,-69,289,290,]),'RBRACKET':([82,84,85,86,88,89,90,91,132,133,141,142,158,159,161,164,166,208,211,212,213,214,215,216,217,218,219,220,221,225,226,240,241,252,254,280,],[-105,-132,-132,-70,-123,-124,-125,-93,-93,201,208,-95,-148,-106,-108,-111,-113,-94,-117,-118,-119,-120,-121,-146,-147,-104,-107,-112,-122,257,-37,267,-38,-96,-69,-36,]),'TO':([82,84,85,86,88,89,90,91,158,159,161,164,166,208,211,212,213,214,215,216,217,218,219,220,221,224,254,],[-105,-132,-132,-70,-123,-124,-125,-93,-148,-106,-108,-111,-113,-94,-117,-118,-119,-120,-121,-146,-147,-104,-107,-112,-122,255,-69,]),'DOWNTO':([82,84,85,86,88,89,90,91,158,159,161,164,166,208,211,212,213,214,215,216,217,218,219,220,221,224,254,],[-105,-132,-132,-70,-123,-124,-125,-93,-148,-106,-108,-111,-113,-94,-117,-118,-119,-120,-121,-146,-147,-104,-107,-112,-122,256,-69,]),'LESS':([82,84,85,86,88,89,90,91,159,161,164,166,208,219,220,221,254,],[152,-132,-132,-70,-123,-124,-125,-93,-106,-108,-111,-113,-94,-107,-112,-122,-69,]),'LESS_EQUAL':([82,84,85,86,88,89,90,91,159,161,164,166,208,219,220,221,254,],[153,-132,-132,-70,-123,-124,-125,-93,-106,-108,-111,-113,-94,-107,-112,-122,-69,]),'GREAT':([82,84,85,86,88,89,90,91,159,161,164,166,208,219,220,221,254,],[154,-132,-132,-70,-123,-124,-125,-93,-106,-108,-111,-113,-94,-107,-112,-122,-69,]),'GREAT_EQUAL':([82,84,85,86,88,89,90,91,159,161,164,166,208,219,220,221,254,],[155,-132,-132,-70,-123,-124,-125,-93,-106,-108,-111,-113,-94,-107,-112,-122,-69,]),'DIFFERENT':([82,84,85,86,88,89,90,91,159,161,164,166,208,219,220,221,254,],[157,-132,-132,-70,-123,-124,-125,-93,-106,-108,-111,-113,-94,-107,-112,-122,-69,]),'DIV':([85,86,88,89,90,91,208,221,254,],[169,-70,-123,-124,-125,-93,-94,-122,-69,]),'CASE':([99,102,105,108,109,110,111,112,114,123,124,182,193,227,228,239,241,249,259,261,267,273,274,288,291,],[-35,-23,-132,-29,-30,-31,-32,-33,-58,-40,-41,230,-39,-24,-25,-28,-38,-42,-26,-27,-34,-43,-44,-45,-22,]),'CONSTRUCTOR':([99,102,106,108,109,110,111,112,114,123,124,183,193,227,228,232,233,234,239,241,249,259,261,262,267,273,274,285,288,291,309,310,317,],[-35,-23,-132,-29,-30,-31,-32,-33,-58,-40,-41,235,-39,-24,-25,235,-52,-53,-28,-38,-42,-26,-27,-51,-34,-43,-44,-57,-45,-22,-54,-55,-56,]),'DESTRUCTOR':([99,102,106,108,109,110,111,112,114,123,124,183,193,227,228,232,233,234,239,241,249,259,261,262,267,273,274,285,288,291,309,310,317,],[-35,-23,-132,-29,-30,-31,-32,-33,-58,-40,-41,238,-39,-24,-25,238,-52,-53,-28,-38,-42,-26,-27,-51,-34,-43,-44,-57,-45,-22,-54,-55,-56,]),'OF':([99,102,103,104,108,109,110,111,112,114,227,228,239,241,257,259,261,267,291,292,],[-35,-23,180,181,-29,-30,-31,-32,-33,-58,-24,-25,-28,-38,279,-26,-27,-34,-22,300,]),'DOTDOT':([113,],[186,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_sections':([4,5,68,194,286,],[5,7,7,7,7,]),'empty':([4,5,24,41,66,67,68,71,76,77,79,84,85,105,106,130,136,143,171,172,182,183,194,251,253,282,283,284,286,289,290,316,],[6,6,48,72,118,124,6,48,137,137,137,161,166,124,124,72,205,48,137,48,231,234,6,205,48,124,124,124,6,48,48,124,]),'block':([5,68,194,286,],[8,127,247,296,]),'declaration_section':([5,7,],[9,9,]),'uses_opt':([5,7,],[10,10,]),'constant_declaration':([5,7,],[11,11,]),'type_declaration':([5,7,],[12,12,]),'var_declaration':([5,7,],[13,13,]),'procedure_declarations':([5,7,],[14,14,]),'function_declaration':([5,7,],[15,15,]),'procedure_declaration':([5,7,14,],[20,20,26,]),'compound_statement':([7,24,71,143,172,253,289,290,],[23,46,46,46,46,46,46,46,]),'id_list':([16,19,35,66,67,105,106,107,120,121,126,182,183,189,282,283,284,293,294,295,316,318,],[27,37,37,119,125,125,125,184,191,125,196,125,125,119,125,125,125,125,125,125,125,125,]),'constant_list':([17,],[29,]),'constant':([17,29,],[30,60,]),'type_list':([18,],[32,]),'type_definition':([18,32,],[33,62,]),'declaration_list':([19,],[35,]),'declaration':([19,35,],[36,64,]),'statement_list':([24,],[40,]),'statement':([24,71,143,172,253,289,290,],[41,130,210,223,276,298,299,]),'if_statement':([24,71,143,172,253,289,290,],[42,42,42,42,42,42,42,]),'assignment_statement':([24,71,143,172,253,289,290,],[43,43,43,43,43,43,43,]),'while_statement':([24,71,143,172,253,289,290,],[44,44,44,44,44,44,44,]),'procedure_call':([24,71,143,172,253,289,290,],[45,45,45,45,45,45,45,]),'for_statement':([24,71,143,172,253,289,290,],[47,47,47,47,47,47,47,]),'variable':([24,55,56,71,73,74,75,76,77,79,80,83,87,143,144,145,146,147,148,149,150,151,160,165,171,172,173,204,209,253,255,256,289,290,],[50,88,88,50,131,133,88,88,88,88,88,88,88,50,88,88,88,88,88,88,88,88,88,88,88,50,88,88,88,50,88,88,50,50,]),'statement_list_tail':([41,130,],[70,199,]),'expression':([55,56,75,76,77,79,80,83,87,144,145,146,147,148,149,150,171,173,204,209,255,256,],[81,92,134,136,136,136,142,158,170,211,212,213,214,215,216,217,136,224,251,252,277,278,]),'simple_expression':([55,56,75,76,77,79,80,83,87,144,145,146,147,148,149,150,151,171,173,204,209,255,256,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,218,82,82,82,82,82,82,]),'term':([55,56,75,76,77,79,80,83,87,144,145,146,147,148,149,150,151,160,171,173,204,209,255,256,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,219,84,84,84,84,84,84,]),'factor':([55,56,75,76,77,79,80,83,87,144,145,146,147,148,149,150,151,160,165,171,173,204,209,255,256,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,220,85,85,85,85,85,85,]),'function_call':([55,56,75,76,77,79,80,83,87,144,145,146,147,148,149,150,151,160,165,171,173,204,209,255,256,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'type_specifier':([63,65,180,181,190,195,242,245,250,279,281,311,],[100,115,227,228,244,249,268,269,274,291,292,314,]),'subrange':([63,65,179,180,181,190,195,242,245,250,258,279,281,311,],[102,102,226,102,102,102,102,102,102,102,280,102,102,102,]),'parameter_list':([66,],[116,]),'parameter':([66,189,],[117,243,]),'field_list':([67,105,106,282,283,284,316,],[121,182,183,293,294,295,318,]),'field':([67,105,106,121,182,183,282,283,284,293,294,295,316,318,],[123,123,123,193,193,193,123,123,123,193,193,193,123,193,]),'expression_list':([76,77,79,171,],[135,138,140,222,]),'index_list':([80,],[141,]),'relop':([82,],[151,]),'simple_expression_tail':([84,],[159,]),'addop':([84,],[160,]),'term_tail':([85,],[164,]),'mulop':([85,],[165,]),'expression_list_tail':([136,251,],[203,275,]),'type_expression':([179,],[225,]),'case_part':([182,],[229,]),'method_list':([183,],[232,]),'method':([183,232,],[233,262,]),'case_list':([300,],[306,]),'case_element':([300,312,],[307,315,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON declaration_sections block DOT','program',6,'p_program','Parser_MiniPascal.py',18),
  ('declaration_sections -> declaration_sections declaration_section','declaration_sections',2,'p_declaration_sections','Parser_MiniPascal.py',40),
  ('declaration_sections -> empty','declaration_sections',1,'p_declaration_sections','Parser_MiniPascal.py',41),
  ('declaration_section -> uses_opt','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',45),
  ('declaration_section -> constant_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',46),
  ('declaration_section -> type_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',47),
  ('declaration_section -> var_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',48),
  ('declaration_section -> procedure_declarations','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',49),
  ('declaration_section -> function_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',50),
  ('uses_opt -> USES id_list SEMICOLON','uses_opt',3,'p_uses_opt','Parser_MiniPascal.py',54),
  ('id_list -> ID','id_list',1,'p_id_list','Parser_MiniPascal.py',59),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','Parser_MiniPascal.py',60),
  ('var_declaration -> VAR declaration_list','var_declaration',2,'p_var_declaration','Parser_MiniPascal.py',64),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser_MiniPascal.py',68),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','Parser_MiniPascal.py',69),
  ('declaration -> id_list COLON type_specifier SEMICOLON','declaration',4,'p_declaration','Parser_MiniPascal.py',73),
  ('block -> declaration_sections compound_statement','block',2,'p_block','Parser_MiniPascal.py',78),
  ('type_declaration -> TYPE type_list','type_declaration',2,'p_type_declaration','Parser_MiniPascal.py',84),
  ('type_list -> type_definition','type_list',1,'p_type_list','Parser_MiniPascal.py',88),
  ('type_list -> type_list type_definition','type_list',2,'p_type_list','Parser_MiniPascal.py',89),
  ('type_definition -> ID EQUAL type_specifier SEMICOLON','type_definition',4,'p_type_definition','Parser_MiniPascal.py',97),
  ('type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier','type_specifier',6,'p_type_specifier','Parser_MiniPascal.py',101),
  ('type_specifier -> subrange','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',102),
  ('type_specifier -> FILE OF type_specifier','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',103),
  ('type_specifier -> SET OF type_specifier','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',104),
  ('type_specifier -> RECORD field_list case_part END','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',105),
  ('type_specifier -> OBJECT field_list method_list END','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',106),
  ('type_specifier -> LPAREN id_list RPAREN','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',107),
  ('type_specifier -> BOOLEAN_LITERAL','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',108),
  ('type_specifier -> INTEGER','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',109),
  ('type_specifier -> BYTE','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',110),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',111),
  ('type_specifier -> STRING','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',112),
  ('type_specifier -> STRING LBRACKET NUMBER RBRACKET','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',113),
  ('type_specifier -> ID','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',114),
  ('type_expression -> type_expression COMMA subrange','type_expression',3,'p_type_expression','Parser_MiniPascal.py',118),
  ('type_expression -> subrange','type_expression',1,'p_type_expression','Parser_MiniPascal.py',119),
  ('subrange -> NUMBER DOTDOT NUMBER','subrange',3,'p_subrange','Parser_MiniPascal.py',123),
  ('field_list -> field_list field','field_list',2,'p_field_list','Parser_MiniPascal.py',128),
  ('field_list -> field','field_list',1,'p_field_list','Parser_MiniPascal.py',129),
  ('field_list -> empty','field_list',1,'p_field_list','Parser_MiniPascal.py',130),
  ('field -> id_list COLON type_specifier','field',3,'p_field','Parser_MiniPascal.py',134),
  ('field -> id_list COLON type_specifier SEMICOLON','field',4,'p_field','Parser_MiniPascal.py',135),
  ('field -> VAR id_list COLON type_specifier','field',4,'p_field','Parser_MiniPascal.py',136),
  ('field -> VAR id_list COLON type_specifier SEMICOLON','field',5,'p_field','Parser_MiniPascal.py',137),
  ('case_part -> CASE ID COLON type_specifier OF case_list SEMICOLON','case_part',7,'p_case_part','Parser_MiniPascal.py',141),
  ('case_part -> empty','case_part',1,'p_case_part','Parser_MiniPascal.py',142),
  ('case_list -> case_list SEMICOLON case_element','case_list',3,'p_case_list','Parser_MiniPascal.py',146),
  ('case_list -> case_element','case_list',1,'p_case_list','Parser_MiniPascal.py',147),
  ('case_element -> NUMBER COLON LPAREN field_list RPAREN','case_element',5,'p_case_element','Parser_MiniPascal.py',151),
  ('method_list -> method_list method','method_list',2,'p_method_list','Parser_MiniPascal.py',158),
  ('method_list -> method','method_list',1,'p_method_list','Parser_MiniPascal.py',159),
  ('method_list -> empty','method_list',1,'p_method_list','Parser_MiniPascal.py',160),
  ('method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON','method',6,'p_method','Parser_MiniPascal.py',164),
  ('method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON','method',6,'p_method','Parser_MiniPascal.py',165),
  ('method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON','method',8,'p_method','Parser_MiniPascal.py',166),
  ('method -> DESTRUCTOR ID SEMICOLON','method',3,'p_method','Parser_MiniPascal.py',167),
  ('type_specifier -> LONGINT','type_specifier',1,'p_type_specifier_longint','Parser_MiniPascal.py',174),
  ('procedure_declarations -> procedure_declaration','procedure_declarations',1,'p_procedure_declarations','Parser_MiniPascal.py',179),
  ('procedure_declarations -> procedure_declarations procedure_declaration','procedure_declarations',2,'p_procedure_declarations','Parser_MiniPascal.py',180),
  ('procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON','procedure_declaration',6,'p_procedure_declaration','Parser_MiniPascal.py',187),
  ('procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON','procedure_declaration',7,'p_procedure_declaration','Parser_MiniPascal.py',188),
  ('procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON','procedure_declaration',5,'p_procedure_declaration','Parser_MiniPascal.py',189),
  ('procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON','procedure_declaration',8,'p_procedure_declaration','Parser_MiniPascal.py',190),
  ('procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON','procedure_declaration',7,'p_procedure_declaration','Parser_MiniPascal.py',191),
  ('procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON','procedure_declaration',5,'p_procedure_declaration','Parser_MiniPascal.py',192),
  ('function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON','function_declaration',10,'p_function_declaration','Parser_MiniPascal.py',200),
  ('function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON','function_declaration',10,'p_function_declaration','Parser_MiniPascal.py',201),
  ('function_call -> ID LPAREN expression_list RPAREN','function_call',4,'p_function_call','Parser_MiniPascal.py',209),
  ('factor -> function_call','factor',1,'p_factor_function_call','Parser_MiniPascal.py',214),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','Parser_MiniPascal.py',219),
  ('parameter_list -> parameter_list SEMICOLON parameter','parameter_list',3,'p_parameter_list','Parser_MiniPascal.py',220),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','Parser_MiniPascal.py',221),
  ('parameter -> id_list COLON type_specifier','parameter',3,'p_parameter','Parser_MiniPascal.py',225),
  ('parameter -> VAR id_list COLON type_specifier','parameter',4,'p_parameter','Parser_MiniPascal.py',226),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','Parser_MiniPascal.py',231),
  ('compound_statement -> BEGIN statement_list END SEMICOLON','compound_statement',4,'p_compound_statement','Parser_MiniPascal.py',232),
  ('statement_list -> statement statement_list_tail','statement_list',2,'p_statement_list_multi','Parser_MiniPascal.py',237),
  ('statement_list_tail -> SEMICOLON statement statement_list_tail','statement_list_tail',3,'p_statement_list_tail','Parser_MiniPascal.py',241),
  ('statement_list_tail -> empty','statement_list_tail',1,'p_statement_list_tail','Parser_MiniPascal.py',242),
  ('statement -> if_statement','statement',1,'p_statement','Parser_MiniPascal.py',247),
  ('statement -> assignment_statement','statement',1,'p_statement','Parser_MiniPascal.py',248),
  ('statement -> while_statement','statement',1,'p_statement','Parser_MiniPascal.py',249),
  ('statement -> procedure_call','statement',1,'p_statement','Parser_MiniPascal.py',250),
  ('statement -> compound_statement','statement',1,'p_statement','Parser_MiniPascal.py',251),
  ('statement -> for_statement','statement',1,'p_statement','Parser_MiniPascal.py',252),
  ('statement -> empty','statement',1,'p_statement','Parser_MiniPascal.py',253),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_if_statement','Parser_MiniPascal.py',257),
  ('if_statement -> IF expression THEN statement','if_statement',4,'p_if_statement','Parser_MiniPascal.py',258),
  ('for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement','for_statement',8,'p_for_statement','Parser_MiniPascal.py',262),
  ('for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement','for_statement',8,'p_for_statement','Parser_MiniPascal.py',263),
  ('assignment_statement -> variable COLON_EQUAL expression','assignment_statement',3,'p_assignment_statement','Parser_MiniPascal.py',268),
  ('variable -> ID','variable',1,'p_variable_simple','Parser_MiniPascal.py',273),
  ('variable -> ID LBRACKET index_list RBRACKET','variable',4,'p_variable_index','Parser_MiniPascal.py',277),
  ('index_list -> expression','index_list',1,'p_index_list','Parser_MiniPascal.py',281),
  ('index_list -> index_list COMMA expression','index_list',3,'p_index_list','Parser_MiniPascal.py',282),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','Parser_MiniPascal.py',287),
  ('procedure_call -> ID LPAREN expression_list RPAREN','procedure_call',4,'p_procedure_call','Parser_MiniPascal.py',292),
  ('procedure_call -> ID','procedure_call',1,'p_procedure_call','Parser_MiniPascal.py',293),
  ('expression_list -> expression expression_list_tail','expression_list',2,'p_expression_list_multi','Parser_MiniPascal.py',298),
  ('expression_list_tail -> COMMA expression expression_list_tail','expression_list_tail',3,'p_expression_list_tail','Parser_MiniPascal.py',302),
  ('expression_list_tail -> empty','expression_list_tail',1,'p_expression_list_tail','Parser_MiniPascal.py',303),
  ('expression_list -> empty','expression_list',1,'p_expression_list_empty','Parser_MiniPascal.py',307),
  ('expression -> simple_expression relop simple_expression','expression',3,'p_expression','Parser_MiniPascal.py',312),
  ('expression -> simple_expression','expression',1,'p_expression','Parser_MiniPascal.py',313),
  ('simple_expression -> term simple_expression_tail','simple_expression',2,'p_simple_expression','Parser_MiniPascal.py',318),
  ('simple_expression_tail -> addop term','simple_expression_tail',2,'p_simple_expression_tail','Parser_MiniPascal.py',322),
  ('simple_expression_tail -> empty','simple_expression_tail',1,'p_simple_expression_tail','Parser_MiniPascal.py',323),
  ('addop -> PLUS','addop',1,'p_addop','Parser_MiniPascal.py',327),
  ('addop -> MINUS','addop',1,'p_addop','Parser_MiniPascal.py',328),
  ('term -> factor term_tail','term',2,'p_term','Parser_MiniPascal.py',333),
  ('term_tail -> mulop factor','term_tail',2,'p_term_tail','Parser_MiniPascal.py',337),
  ('term_tail -> empty','term_tail',1,'p_term_tail','Parser_MiniPascal.py',338),
  ('mulop -> TIMES','mulop',1,'p_mulop','Parser_MiniPascal.py',342),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','Parser_MiniPascal.py',343),
  ('mulop -> DIV','mulop',1,'p_mulop','Parser_MiniPascal.py',344),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',349),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',350),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',351),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',352),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',353),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','Parser_MiniPascal.py',360),
  ('factor -> variable','factor',1,'p_factor_variable','Parser_MiniPascal.py',364),
  ('factor -> NUMBER','factor',1,'p_factor_number','Parser_MiniPascal.py',368),
  ('factor -> STRING_LITERAL','factor',1,'p_factor_string','Parser_MiniPascal.py',372),
  ('relop -> LESS','relop',1,'p_relop','Parser_MiniPascal.py',379),
  ('relop -> LESS_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',380),
  ('relop -> GREAT','relop',1,'p_relop','Parser_MiniPascal.py',381),
  ('relop -> GREAT_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',382),
  ('relop -> EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',383),
  ('relop -> DIFFERENT','relop',1,'p_relop','Parser_MiniPascal.py',384),
  ('empty -> <empty>','empty',0,'p_empty','Parser_MiniPascal.py',389),
  ('statement -> READLN','statement',1,'p_statement_readln','Parser_MiniPascal.py',393),
  ('statement -> READLN LPAREN variable RPAREN','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',397),
  ('statement -> READLN LBRACKET variable RBRACKET','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',398),
  ('statement -> WRITELN LPAREN expression_list RPAREN','statement',4,'p_statement_writeln','Parser_MiniPascal.py',402),
  ('statement -> WRITE LPAREN expression_list RPAREN','statement',4,'p_statement_write','Parser_MiniPascal.py',406),
  ('statement -> USES ID SEMICOLON','statement',3,'p_statement_uses','Parser_MiniPascal.py',411),
  ('constant_declaration -> CONST constant_list','constant_declaration',2,'p_constant_declaration','Parser_MiniPascal.py',416),
  ('constant_list -> constant','constant_list',1,'p_constant_list','Parser_MiniPascal.py',420),
  ('constant_list -> constant_list constant','constant_list',2,'p_constant_list','Parser_MiniPascal.py',421),
  ('constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',425),
  ('constant -> ID EQUAL NUMBER SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',426),
  ('constant -> ID EQUAL STRING_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',427),
  ('constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',428),
  ('expression -> expression AND expression','expression',3,'p_expression_logical','Parser_MiniPascal.py',433),
  ('expression -> expression OR expression','expression',3,'p_expression_logical','Parser_MiniPascal.py',434),
  ('expression -> NOT expression','expression',2,'p_expression_logical','Parser_MiniPascal.py',435),
]
