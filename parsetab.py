
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocELSEAND ARRAY BEGIN BOOLEAN_LITERAL BYTE CASE CHAR CHARACTER_LITERAL COLON COLON_EQUAL COMMA CONST CONSTRUCTOR DESTRUCTOR DIFFERENT DIV DIVIDE DO DOT DOTDOT DOWNTO ELSE END EQUAL FALSE FILE FOR FORWARD FUNCTION GOTO GREAT GREAT_EQUAL ID IF IN INTEGER LABEL LBLOCK LBRACKET LESS LESS_EQUAL LONGINT LPAREN MINUS MOD NIL NOT NUMBER OBJECT OF OR PACKED PLUS PROCEDURE PROGRAM RBLOCK RBRACKET READLINE READLN RECORD REPEAT RPAREN SEMICOLON SET STRING STRING_LITERAL SUBRANGE THEN TIMES TO TRUE TYPE UNTIL USES VAR WHILE WITH WRITE WRITELNprogram : PROGRAM ID SEMICOLON declaration_sections block DOTdeclaration_sections : declaration_sections declaration_section\n                            | emptydeclaration_section : uses_opt\n                           | constant_declaration\n                           | type_declaration\n                           | var_declaration\n                           | procedure_declarations\n                           | function_declaration\n                           | constructor_declaration\n                           | method_declarationmethod_declaration : CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block \n                          | PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block \n                          | FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block\n                          | DESTRUCTOR ID DOT ID SEMICOLON blockconstructor_declaration : CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block\n                               | CONSTRUCTOR ID LPAREN RPAREN SEMICOLON blockuses_opt : USES id_list SEMICOLONid_list : IDid_list : id_list COMMA IDvar_declaration : VAR declaration_listdeclaration_list : declaration\n                        | declaration_list declarationdeclaration : id_list COLON type_specifier SEMICOLONblock : declaration_sections compound_statementtype_declaration : TYPE type_listtype_list : type_definition\n                 | type_list type_definitiontype_definition : ID EQUAL type_specifier SEMICOLONtype_specifier : ARRAY LBRACKET type_expression RBRACKET OF type_specifier\n                      | subrange\n                      | FILE OF type_specifier\n                      | SET OF type_specifier\n                      | RECORD field_list case_part END\n                      | OBJECT field_list method_list END                              \n                      | LPAREN id_list RPAREN\n                      | BOOLEAN_LITERAL\n                      | INTEGER\n                      | BYTE\n                      | CHAR\n                      | STRING\n                      | STRING LBRACKET NUMBER RBRACKET\n                      | IDtype_expression : type_expression COMMA subrange\n                       | subrangesubrange : NUMBER DOTDOT NUMBER\n                | NUMBER DOTDOT IDfield_list : field_list field\n                  | field\n                  | emptyfield : id_list COLON type_specifier\n             | id_list COLON type_specifier SEMICOLON\n             | VAR id_list COLON type_specifier\n             | VAR id_list COLON type_specifier SEMICOLON\n             | id_list LPAREN STRING_LITERAL RPAREN\n             | if_statement\n             | case_statement\n             | assignment_statementcase_part : CASE ID COLON type_specifier OF case_list SEMICOLON\n                 | emptycase_list : case_list SEMICOLON case_element\n                 | case_elementcase_element : NUMBER COLON LPAREN field_list RPAREN\n                    | NUMBER COLON field_listmethod_list : method_list method\n                   | method\n                   | emptymethod : CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON\n              | PROCEDURE ID LPAREN field_list RPAREN SEMICOLON  \n              | FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON\n              | DESTRUCTOR ID SEMICOLONcase_statement : CASE expression OF case_list END SEMICOLON\n                      | CASE expression OF case_list ELSE statement_list END SEMICOLON  \n                      | CASE expression OF case_list ENDtype_specifier : LONGINTprocedure_declarations : procedure_declaration\n                              | procedure_declarations procedure_declarationprocedure_declaration : PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON\n                             | PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON\n                             | PROCEDURE ID SEMICOLON block SEMICOLON\n                             | PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON FORWARD SEMICOLON\n                             | PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON\n                             | PROCEDURE ID SEMICOLON FORWARD SEMICOLONfunction_declaration : FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON\n                            | FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLONfunction_call : ID LPAREN expression_list RPARENfactor : function_callparameter_list : parameter\n                      | parameter_list SEMICOLON parameter\n                      | emptyparameter : ID COLON type_specifiercompound_statement : BEGIN statement_list ENDstatement_list : statement SEMICOLON\n                      | statement_list statement SEMICOLONstatement : if_statement\n                 | assignment_statement\n                 | while_statement\n                 | procedure_call\n                 | compound_statement\n                 | for_statement\n                 | case_statement\n                 | with_statement\n                 | repeat_statement\n                 | emptywith_statement : WITH variable DO statementif_statement : IF expression THEN statement ELSE statement\n                    | IF expression THEN statement\n                    | IF expression IN statement THEN statement ELSE statement\n                    | IF expression IN statement THEN statementfor_statement : FOR ID COLON_EQUAL expression TO expression DO block\n                     | FOR ID COLON_EQUAL expression DOWNTO expression DO blockassignment_statement : variable COLON_EQUAL expression\n                            | variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON\n                            | variable PLUS COLON_EQUAL expression\n                            | variable MINUS COLON_EQUAL expression\n                            | variable TIMES COLON_EQUAL expression\n                            | variable DIVIDE COLON_EQUAL expression\n                            | ID COLON_EQUAL expressionvariable : ID\n                | variable LBRACKET expression RBRACKET\n                | variable DOT IDvariable : ID LBRACKET index_list RBRACKETindex_list : expression\n                  | index_list COMMA expressionwhile_statement : WHILE expression DO statementprocedure_call : ID LPAREN expression_list RPAREN\n                      | IDexpression_list : expression expression_list_tailexpression_list_tail : COMMA expression expression_list_tail\n                            | emptyexpression_list : emptyexpression : simple_expression relop simple_expression\n                  | simple_expressionsimple_expression : term simple_expression_tailsimple_expression_tail : addop term\n                              | emptyaddop : PLUS\n             | MINUSterm : factor term_tailterm_tail : mulop factor\n                 | emptymulop : TIMES\n             | DIVIDE\n             | DIVexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expressionfactor : LPAREN expression RPARENfactor : variablefactor : NUMBERfactor : STRING_LITERALrelop : LESS\n             | LESS_EQUAL\n             | GREAT\n             | GREAT_EQUAL\n             | EQUAL\n             | DIFFERENTempty :statement : READLNstatement : READLN LPAREN variable RPAREN\n                 | READLN LBRACKET variable RBRACKETstatement : WRITE LPAREN expression_list RPARENstatement : WRITELN LPAREN write_arguments RPARENwrite_arguments : write_argument\n                       | write_arguments COMMA write_argumentwrite_argument : expression\n                      | expression COLON expression\n                      | expression COLON expression COLON expressionstatement : USES ID SEMICOLONconstant_declaration : CONST constant_listrepeat_statement : REPEAT statement_list UNTIL expression SEMICOLONconstant_list : constant\n                     | constant_list constantconstant : ID EQUAL CHARACTER_LITERAL SEMICOLON\n                | ID EQUAL NUMBER SEMICOLON\n                | ID EQUAL STRING_LITERAL SEMICOLON\n                | ID EQUAL BOOLEAN_LITERAL SEMICOLONexpression : expression AND expression\n                  | expression OR expression\n                  | NOT expression'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,29,],[0,-1,]),'ID':([2,18,19,20,21,23,24,25,26,27,28,31,34,35,37,38,40,41,47,49,50,51,52,53,54,55,56,57,58,59,63,64,65,66,67,68,69,70,73,74,76,77,78,79,80,81,82,83,84,85,87,88,90,91,92,93,98,99,100,101,103,104,105,107,108,109,110,111,112,113,114,115,116,122,128,131,134,135,136,137,138,139,140,141,143,151,153,154,156,157,158,159,167,170,172,173,174,175,177,184,185,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,218,219,220,222,223,224,225,226,227,228,230,231,232,233,236,237,238,240,241,243,245,248,249,255,256,257,258,259,260,261,262,263,265,267,268,269,270,271,272,273,275,276,277,278,279,280,281,282,283,284,285,287,292,296,297,299,304,305,306,307,308,310,311,313,318,320,331,332,333,334,335,336,338,339,340,343,345,351,355,356,357,365,366,367,370,372,373,374,375,377,378,379,380,383,384,390,394,395,397,398,399,405,406,407,408,420,],[3,33,36,39,33,43,44,45,46,-25,64,71,36,-174,39,-27,33,-22,64,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-161,102,-127,116,116,118,116,121,64,123,-175,-28,128,-23,128,145,149,150,160,161,145,166,-92,-93,121,121,116,116,177,116,116,116,116,116,-133,116,-160,-160,-87,116,-151,-152,-153,-119,64,-43,-31,150,150,33,-37,-38,-39,-40,-41,-75,150,-49,-50,33,-56,-57,-58,-94,-112,116,116,116,116,-121,-171,-118,64,64,116,116,116,116,116,116,116,116,-154,-155,-156,-157,-158,-159,-182,-134,116,-136,-137,-138,-139,116,-141,-142,-143,-144,116,64,116,64,116,-176,-177,-178,-179,-29,128,128,150,150,311,-24,128,145,145,-48,128,145,145,-162,-163,-113,-114,-115,-116,-117,-120,-164,116,-165,116,116,-126,-122,116,-107,-145,-146,-147,-148,-149,-180,-181,-132,-135,-140,-150,-125,-105,-32,-33,344,347,348,349,350,-36,-46,-47,128,-51,128,64,64,-86,116,116,-74,64,150,-173,-34,-35,-42,-52,-55,-53,116,-106,-109,-72,64,150,150,128,128,150,150,150,128,-54,64,150,-30,150,150,150,-108,-110,-111,-73,128,]),'SEMICOLON':([3,27,28,32,33,45,47,48,49,50,51,52,53,54,55,56,57,58,59,64,70,71,80,85,88,89,90,102,107,109,110,111,113,114,115,116,122,123,124,125,126,127,128,129,131,137,138,139,140,141,143,144,146,147,148,152,153,154,157,158,159,162,163,164,165,166,167,170,171,177,184,185,189,205,206,208,211,213,219,222,241,242,243,248,249,250,255,256,257,258,259,260,261,262,263,267,270,271,273,275,276,277,278,279,280,281,282,283,284,285,287,289,290,292,293,296,297,308,310,311,312,314,315,318,321,322,324,325,331,332,333,336,338,339,340,343,345,350,351,352,355,356,357,358,359,360,361,366,367,370,371,372,374,384,390,393,395,400,401,402,405,406,407,408,409,411,412,417,423,],[4,-25,-160,72,-19,86,-160,90,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-161,-127,-160,86,-160,-160,-92,167,-93,184,-133,-160,-160,-87,-151,-152,-153,-119,-160,-20,224,225,226,227,-43,228,-31,-37,-38,-39,-40,-41,-75,237,240,-88,-90,244,-49,-50,-56,-57,-58,240,251,252,253,254,-94,-112,257,-121,-171,-118,-160,-182,-134,-136,-139,-141,-160,-160,-160,316,-48,-160,-160,323,-162,-163,-113,-114,-115,-116,-117,-120,-164,-165,-126,-122,-107,-145,-146,-147,-148,-149,-180,-181,-132,-135,-140,-150,-125,337,-62,-105,340,-32,-33,-36,-46,-47,-91,-89,240,355,240,240,362,363,-160,-160,-86,370,-160,-160,-173,-34,-35,381,-42,382,-52,-55,384,385,386,387,388,-106,-109,-72,-61,-160,-64,-54,-160,408,-30,414,415,416,-108,-110,-111,-73,-63,418,419,422,424,]),'USES':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,28,30,34,35,37,38,40,41,47,70,72,74,76,78,86,88,90,122,167,189,190,219,222,224,225,226,227,228,237,244,251,252,253,254,316,317,323,326,331,332,338,354,362,363,372,382,385,386,387,388,390,391,392,403,404,414,415,416,421,],[-160,18,-3,18,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,63,-77,-172,-174,-26,-27,-21,-22,63,63,-18,-175,-28,-23,-160,-92,-93,63,-94,63,63,63,63,-176,-177,-178,-179,-29,-24,-160,-160,-80,-83,-160,-160,-17,-160,-15,63,63,63,-16,-79,-82,63,-160,-160,-160,-78,-81,63,-160,-160,-12,-13,-84,-85,-160,-14,]),'CONST':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,72,74,76,78,86,88,224,225,226,227,228,237,244,251,252,253,254,316,317,323,326,354,362,363,382,385,386,387,388,391,392,403,404,414,415,416,421,],[-160,19,-3,19,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,-77,-172,-174,-26,-27,-21,-22,-18,-175,-28,-23,-160,-92,-176,-177,-178,-179,-29,-24,-160,-160,-80,-83,-160,-160,-17,-160,-15,-16,-79,-82,-160,-160,-160,-78,-81,-160,-160,-12,-13,-84,-85,-160,-14,]),'TYPE':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,72,74,76,78,86,88,224,225,226,227,228,237,244,251,252,253,254,316,317,323,326,354,362,363,382,385,386,387,388,391,392,403,404,414,415,416,421,],[-160,20,-3,20,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,-77,-172,-174,-26,-27,-21,-22,-18,-175,-28,-23,-160,-92,-176,-177,-178,-179,-29,-24,-160,-160,-80,-83,-160,-160,-17,-160,-15,-16,-79,-82,-160,-160,-160,-78,-81,-160,-160,-12,-13,-84,-85,-160,-14,]),'VAR':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,49,50,51,52,53,54,55,56,57,58,59,64,72,74,76,78,82,86,88,107,109,110,111,113,114,115,116,128,131,134,135,137,138,139,140,141,143,151,153,154,157,158,159,170,177,184,185,189,205,206,208,211,213,219,222,224,225,226,227,228,232,233,237,243,244,251,252,253,254,255,256,257,258,259,260,261,262,263,267,270,271,273,275,276,277,278,279,280,281,282,283,284,285,287,292,296,297,308,310,311,316,317,318,323,326,331,332,333,336,339,340,343,345,351,354,355,356,357,362,363,366,367,370,373,374,378,379,380,382,384,385,386,387,388,390,391,392,394,395,397,398,399,403,404,405,406,407,408,414,415,416,421,],[-160,21,-3,21,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,-77,-172,-174,-26,-27,-21,-22,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-161,-127,-18,-175,-28,-23,156,-160,-92,-133,-160,-160,-87,-151,-152,-153,-119,-43,-31,156,156,-37,-38,-39,-40,-41,-75,156,-49,-50,-56,-57,-58,-112,-121,-171,-118,-160,-182,-134,-136,-139,-141,-160,-160,-176,-177,-178,-179,-29,156,156,-24,-48,-160,-160,-80,-83,-160,-162,-163,-113,-114,-115,-116,-117,-120,-164,-165,-126,-122,-107,-145,-146,-147,-148,-149,-180,-181,-132,-135,-140,-150,-125,-105,-32,-33,-36,-46,-47,-160,-17,-51,-160,-15,-160,-160,-86,-74,156,-173,-34,-35,-42,-16,-52,-55,-53,-79,-82,-106,-109,-72,156,156,156,156,156,-160,-54,-160,-160,-78,-81,-160,-160,-160,156,-30,156,156,156,-12,-13,-108,-110,-111,-73,-84,-85,-160,-14,]),'FUNCTION':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,49,50,51,52,53,54,55,56,57,58,59,64,72,74,76,78,86,88,107,109,110,111,113,114,115,116,128,131,135,137,138,139,140,141,143,153,154,157,158,159,170,177,184,185,189,205,206,208,211,213,219,222,224,225,226,227,228,233,237,243,244,251,252,253,254,255,256,257,258,259,260,261,262,263,267,270,271,273,275,276,277,278,279,280,281,282,283,284,285,287,292,296,297,301,302,303,308,310,311,316,317,318,323,326,331,332,333,336,340,343,345,346,351,354,355,356,357,362,363,366,367,370,381,382,384,385,386,387,388,390,391,392,395,403,404,405,406,407,408,414,415,416,418,419,421,424,],[-160,23,-3,23,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,-77,-172,-174,-26,-27,-21,-22,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-161,-127,-18,-175,-28,-23,-160,-92,-133,-160,-160,-87,-151,-152,-153,-119,-43,-31,-160,-37,-38,-39,-40,-41,-75,-49,-50,-56,-57,-58,-112,-121,-171,-118,-160,-182,-134,-136,-139,-141,-160,-160,-176,-177,-178,-179,-29,306,-24,-48,-160,-160,-80,-83,-160,-162,-163,-113,-114,-115,-116,-117,-120,-164,-165,-126,-122,-107,-145,-146,-147,-148,-149,-180,-181,-132,-135,-140,-150,-125,-105,-32,-33,306,-66,-67,-36,-46,-47,-160,-17,-51,-160,-15,-160,-160,-86,-74,-173,-34,-35,-65,-42,-16,-52,-55,-53,-79,-82,-106,-109,-72,-71,-160,-54,-160,-160,-78,-81,-160,-160,-160,-30,-12,-13,-108,-110,-111,-73,-84,-85,-160,-68,-69,-14,-70,]),'CONSTRUCTOR':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,49,50,51,52,53,54,55,56,57,58,59,64,72,74,76,78,86,88,107,109,110,111,113,114,115,116,128,131,135,137,138,139,140,141,143,153,154,157,158,159,170,177,184,185,189,205,206,208,211,213,219,222,224,225,226,227,228,233,237,243,244,251,252,253,254,255,256,257,258,259,260,261,262,263,267,270,271,273,275,276,277,278,279,280,281,282,283,284,285,287,292,296,297,301,302,303,308,310,311,316,317,318,323,326,331,332,333,336,340,343,345,346,351,354,355,356,357,362,363,366,367,370,381,382,384,385,386,387,388,390,391,392,395,403,404,405,406,407,408,414,415,416,418,419,421,424,],[-160,24,-3,24,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,-77,-172,-174,-26,-27,-21,-22,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-161,-127,-18,-175,-28,-23,-160,-92,-133,-160,-160,-87,-151,-152,-153,-119,-43,-31,-160,-37,-38,-39,-40,-41,-75,-49,-50,-56,-57,-58,-112,-121,-171,-118,-160,-182,-134,-136,-139,-141,-160,-160,-176,-177,-178,-179,-29,304,-24,-48,-160,-160,-80,-83,-160,-162,-163,-113,-114,-115,-116,-117,-120,-164,-165,-126,-122,-107,-145,-146,-147,-148,-149,-180,-181,-132,-135,-140,-150,-125,-105,-32,-33,304,-66,-67,-36,-46,-47,-160,-17,-51,-160,-15,-160,-160,-86,-74,-173,-34,-35,-65,-42,-16,-52,-55,-53,-79,-82,-106,-109,-72,-71,-160,-54,-160,-160,-78,-81,-160,-160,-160,-30,-12,-13,-108,-110,-111,-73,-84,-85,-160,-68,-69,-14,-70,]),'PROCEDURE':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,49,50,51,52,53,54,55,56,57,58,59,64,72,74,76,78,86,88,107,109,110,111,113,114,115,116,128,131,135,137,138,139,140,141,143,153,154,157,158,159,170,177,184,185,189,205,206,208,211,213,219,222,224,225,226,227,228,233,237,243,244,251,252,253,254,255,256,257,258,259,260,261,262,263,267,270,271,273,275,276,277,278,279,280,281,282,283,284,285,287,292,296,297,301,302,303,308,310,311,316,317,318,323,326,331,332,333,336,340,343,345,346,351,354,355,356,357,362,363,366,367,370,381,382,384,385,386,387,388,390,391,392,395,403,404,405,406,407,408,414,415,416,418,419,421,424,],[-160,25,-3,25,-2,-4,-5,-6,-7,31,-9,-10,-11,-76,-25,-77,-172,-174,-26,-27,-21,-22,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-161,-127,-18,-175,-28,-23,-160,-92,-133,-160,-160,-87,-151,-152,-153,-119,-43,-31,-160,-37,-38,-39,-40,-41,-75,-49,-50,-56,-57,-58,-112,-121,-171,-118,-160,-182,-134,-136,-139,-141,-160,-160,-176,-177,-178,-179,-29,305,-24,-48,-160,-160,-80,-83,-160,-162,-163,-113,-114,-115,-116,-117,-120,-164,-165,-126,-122,-107,-145,-146,-147,-148,-149,-180,-181,-132,-135,-140,-150,-125,-105,-32,-33,305,-66,-67,-36,-46,-47,-160,-17,-51,-160,-15,-160,-160,-86,-74,-173,-34,-35,-65,-42,-16,-52,-55,-53,-79,-82,-106,-109,-72,-71,-160,-54,-160,-160,-78,-81,-160,-160,-160,-30,-12,-13,-108,-110,-111,-73,-84,-85,-160,-68,-69,-14,-70,]),'DESTRUCTOR':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,49,50,51,52,53,54,55,56,57,58,59,64,72,74,76,78,86,88,107,109,110,111,113,114,115,116,128,131,135,137,138,139,140,141,143,153,154,157,158,159,170,177,184,185,189,205,206,208,211,213,219,222,224,225,226,227,228,233,237,243,244,251,252,253,254,255,256,257,258,259,260,261,262,263,267,270,271,273,275,276,277,278,279,280,281,282,283,284,285,287,292,296,297,301,302,303,308,310,311,316,317,318,323,326,331,332,333,336,340,343,345,346,351,354,355,356,357,362,363,366,367,370,381,382,384,385,386,387,388,390,391,392,395,403,404,405,406,407,408,414,415,416,418,419,421,424,],[-160,26,-3,26,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,-77,-172,-174,-26,-27,-21,-22,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-161,-127,-18,-175,-28,-23,-160,-92,-133,-160,-160,-87,-151,-152,-153,-119,-43,-31,-160,-37,-38,-39,-40,-41,-75,-49,-50,-56,-57,-58,-112,-121,-171,-118,-160,-182,-134,-136,-139,-141,-160,-160,-176,-177,-178,-179,-29,307,-24,-48,-160,-160,-80,-83,-160,-162,-163,-113,-114,-115,-116,-117,-120,-164,-165,-126,-122,-107,-145,-146,-147,-148,-149,-180,-181,-132,-135,-140,-150,-125,-105,-32,-33,307,-66,-67,-36,-46,-47,-160,-17,-51,-160,-15,-160,-160,-86,-74,-173,-34,-35,-65,-42,-16,-52,-55,-53,-79,-82,-106,-109,-72,-71,-160,-54,-160,-160,-78,-81,-160,-160,-160,-30,-12,-13,-108,-110,-111,-73,-84,-85,-160,-68,-69,-14,-70,]),'BEGIN':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,28,30,34,35,37,38,40,41,47,70,72,74,76,78,86,88,90,122,167,189,190,219,222,224,225,226,227,228,237,244,251,252,253,254,316,317,323,326,331,332,338,354,362,363,372,382,385,386,387,388,390,391,392,403,404,414,415,416,421,],[-160,-160,-3,28,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,28,-77,-172,-174,-26,-27,-21,-22,28,28,-18,-175,-28,-23,-160,-92,-93,28,-94,28,28,28,28,-176,-177,-178,-179,-29,-24,-160,-160,-80,-83,-160,-160,-17,-160,-15,28,28,28,-16,-79,-82,28,-160,-160,-160,-78,-81,28,-160,-160,-12,-13,-84,-85,-160,-14,]),'DOT':([8,27,43,44,45,46,60,64,88,113,116,120,121,150,168,169,177,262,271,344,],[29,-25,81,83,84,87,99,-119,-92,99,-119,99,-119,-119,99,99,-121,-120,-122,-119,]),'ELSE':([27,49,50,51,52,53,54,55,56,57,58,59,64,88,107,109,110,111,113,114,115,116,128,131,137,138,139,140,141,143,153,154,157,158,159,170,177,184,185,189,205,206,208,211,213,219,222,243,255,256,257,258,259,260,261,262,263,267,270,271,273,275,276,277,278,279,280,281,282,283,284,285,287,289,290,292,296,297,308,310,311,318,331,332,333,336,339,340,343,345,351,355,356,357,366,367,370,371,374,384,390,395,405,406,407,408,409,],[-25,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-161,-127,-92,-133,-160,-160,-87,-151,-152,-153,-119,-43,-31,-37,-38,-39,-40,-41,-75,-49,-50,-56,-57,-58,-112,-121,-171,-118,-160,-182,-134,-136,-139,-141,-160,-160,-48,-162,-163,-113,-114,-115,-116,-117,-120,-164,-165,-126,-122,331,-145,-146,-147,-148,-149,-180,-181,-132,-135,-140,-150,-125,338,-62,-105,-32,-33,-36,-46,-47,-51,-160,-160,-86,-74,-160,-173,-34,-35,-42,-52,-55,-53,-106,390,-72,-61,-64,-54,-160,-30,-108,-110,-111,-73,-63,]),'RPAREN':([27,33,49,50,51,52,53,54,55,56,57,58,59,64,80,82,85,88,100,104,107,109,110,111,113,114,115,116,121,123,128,131,137,138,139,140,141,143,146,147,148,151,153,154,157,158,159,162,168,170,177,178,179,180,181,182,183,184,185,186,189,205,206,208,211,213,217,218,219,222,234,241,243,248,249,255,256,257,258,259,260,261,262,263,264,266,267,270,271,273,275,276,277,278,279,280,281,282,283,284,285,286,287,292,296,297,308,310,311,312,314,315,318,319,321,322,327,328,329,331,332,333,336,340,343,345,351,355,356,357,364,366,367,370,373,378,379,380,384,389,390,394,395,397,398,399,405,406,407,408,],[-25,-19,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-161,-127,-160,152,163,-92,-160,-160,-133,-160,-160,-87,-151,-152,-153,-119,-119,-20,-43,-31,-37,-38,-39,-40,-41,-75,239,-88,-90,242,-49,-50,-56,-57,-58,250,255,-112,-121,263,-160,-131,267,-166,-168,-171,-118,270,-160,-182,-134,-136,-139,-141,285,-160,-160,-160,308,-160,-48,-160,-160,-162,-163,-113,-114,-115,-116,-117,-120,-164,-128,-130,-165,-126,-122,-107,-145,-146,-147,-148,-149,-180,-181,-132,-135,-140,-150,333,-125,-105,-32,-33,-36,-46,-47,-91,-89,353,-51,356,358,359,-160,-167,-169,-160,-160,-86,-74,-173,-34,-35,-42,-52,-55,-53,-129,-106,-109,-72,-160,-160,-160,-160,-54,-170,-160,409,-30,411,412,413,-108,-110,-111,-73,]),'IF':([27,28,47,49,50,51,52,53,54,55,56,57,58,59,64,70,82,88,90,107,109,110,111,113,114,115,116,122,128,131,134,135,137,138,139,140,141,143,151,153,154,157,158,159,167,170,177,184,185,189,190,205,206,208,211,213,219,222,232,233,243,255,256,257,258,259,260,261,262,263,267,270,271,273,275,276,277,278,279,280,281,282,283,284,285,287,292,296,297,308,310,311,318,331,332,333,336,338,339,340,343,345,351,355,356,357,366,367,370,372,373,374,378,379,380,384,390,394,395,397,398,399,405,406,407,408,],[-25,65,65,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-161,-127,65,65,-92,-93,-133,-160,-160,-87,-151,-152,-153,-119,65,-43,-31,65,65,-37,-38,-39,-40,-41,-75,65,-49,-50,-56,-57,-58,-94,-112,-121,-171,-118,65,65,-182,-134,-136,-139,-141,65,65,65,65,-48,-162,-163,-113,-114,-115,-116,-117,-120,-164,-165,-126,-122,-107,-145,-146,-147,-148,-149,-180,-181,-132,-135,-140,-150,-125,-105,-32,-33,-36,-46,-47,-51,65,65,-86,-74,65,65,-173,-34,-35,-42,-52,-55,-53,-106,-109,-72,65,65,65,65,65,65,-54,65,65,-30,65,65,65,-108,-110,-111,-73,]),'CASE':([27,28,47,49,50,51,52,53,54,55,56,57,58,59,64,70,82,88,90,107,109,110,111,113,114,115,116,122,128,131,134,135,137,138,139,140,141,143,151,153,154,157,158,159,167,170,177,184,185,189,190,205,206,208,211,213,219,222,232,233,243,255,256,257,258,259,260,261,262,263,267,270,271,273,275,276,277,278,279,280,281,282,283,284,285,287,292,296,297,308,310,311,318,331,332,333,336,338,339,340,343,345,351,355,356,357,366,367,370,372,373,374,378,379,380,384,390,394,395,397,398,399,405,406,407,408,],[-25,68,68,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-161,-127,68,68,-92,-93,-133,-160,-160,-87,-151,-152,-153,-119,68,-43,-31,68,68,-37,-38,-39,-40,-41,-75,68,-49,-50,-56,-57,-58,-94,-112,-121,-171,-118,68,68,-182,-134,-136,-139,-141,68,68,299,68,-48,-162,-163,-113,-114,-115,-116,-117,-120,-164,-165,-126,-122,-107,-145,-146,-147,-148,-149,-180,-181,-132,-135,-140,-150,-125,-105,-32,-33,-36,-46,-47,-51,68,68,-86,-74,68,68,-173,-34,-35,-42,-52,-55,-53,-106,-109,-72,68,68,68,68,68,68,-54,68,68,-30,68,68,68,-108,-110,-111,-73,]),'END':([27,47,49,50,51,52,53,54,55,56,57,58,59,64,88,90,107,109,110,111,113,114,115,116,128,131,134,135,137,138,139,140,141,143,153,154,157,158,159,167,170,177,184,185,189,205,206,208,211,213,219,222,232,233,243,255,256,257,258,259,260,261,262,263,267,270,271,273,275,276,277,278,279,280,281,282,283,284,285,287,289,290,292,296,297,298,300,301,302,303,308,310,311,318,331,332,333,336,339,340,343,345,346,351,355,356,357,366,367,370,371,372,374,381,384,390,395,405,406,407,408,409,418,419,422,424,],[-25,88,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-161,-127,-92,-93,-133,-160,-160,-87,-151,-152,-153,-119,-43,-31,-160,-160,-37,-38,-39,-40,-41,-75,-49,-50,-56,-57,-58,-94,-112,-121,-171,-118,-160,-182,-134,-136,-139,-141,-160,-160,-160,-160,-48,-162,-163,-113,-114,-115,-116,-117,-120,-164,-165,-126,-122,-107,-145,-146,-147,-148,-149,-180,-181,-132,-135,-140,-150,-125,336,-62,-105,-32,-33,343,-60,345,-66,-67,-36,-46,-47,-51,-160,-160,-86,-74,-160,-173,-34,-35,-65,-42,-52,-55,-53,-106,-109,-72,-61,393,-64,-71,-54,-160,-30,-108,-110,-111,-73,-63,-68,-69,-59,-70,]),'THEN':([27,49,50,51,52,53,54,55,56,57,58,59,64,88,106,107,109,110,111,113,114,115,116,170,177,184,185,189,190,205,206,208,211,213,219,222,255,256,257,258,259,260,261,262,263,267,270,271,273,274,275,276,277,278,279,280,281,282,283,284,285,287,292,331,332,333,336,340,366,367,370,390,405,406,407,408,],[-25,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-161,-127,-92,189,-133,-160,-160,-87,-151,-152,-153,-119,-112,-121,-171,-118,-160,-160,-182,-134,-136,-139,-141,-160,-160,-162,-163,-113,-114,-115,-116,-117,-120,-164,-165,-126,-122,-107,332,-145,-146,-147,-148,-149,-180,-181,-132,-135,-140,-150,-125,-105,-160,-160,-86,-74,-173,-106,-109,-72,-160,-108,-110,-111,-73,]),'READLN':([28,47,70,90,122,167,189,190,219,222,331,332,338,372,390,],[59,59,59,-93,59,-94,59,59,59,59,59,59,59,59,59,]),'WRITE':([28,47,70,90,122,167,189,190,219,222,331,332,338,372,390,],[61,61,61,-93,61,-94,61,61,61,61,61,61,61,61,61,]),'WRITELN':([28,47,70,90,122,167,189,190,219,222,331,332,338,372,390,],[62,62,62,-93,62,-94,62,62,62,62,62,62,62,62,62,]),'WHILE':([28,47,70,90,122,167,189,190,219,222,331,332,338,372,390,],[66,66,66,-93,66,-94,66,66,66,66,66,66,66,66,66,]),'FOR':([28,47,70,90,122,167,189,190,219,222,331,332,338,372,390,],[67,67,67,-93,67,-94,67,67,67,67,67,67,67,67,67,]),'WITH':([28,47,70,90,122,167,189,190,219,222,331,332,338,372,390,],[69,69,69,-93,69,-94,69,69,69,69,69,69,69,69,69,]),'REPEAT':([28,47,70,90,122,167,189,190,219,222,331,332,338,372,390,],[70,70,70,-93,70,-94,70,70,70,70,70,70,70,70,70,]),'COMMA':([32,33,42,107,109,110,111,113,114,115,116,123,150,155,177,179,181,182,183,187,188,205,206,208,211,213,234,247,262,271,275,276,277,278,279,280,281,282,283,284,285,294,295,310,311,327,328,329,330,333,376,389,],[73,-19,73,-133,-160,-160,-87,-151,-152,-153,-119,-20,-19,73,-121,265,268,-166,-168,272,-123,-182,-134,-136,-139,-141,73,73,-120,-122,-145,-146,-147,-148,-149,-180,-181,-132,-135,-140,-150,342,-45,-46,-47,265,-167,-169,-124,-86,-44,-170,]),'COLON':([33,42,107,109,110,111,113,114,115,116,123,145,150,155,177,183,205,206,208,211,213,239,247,262,271,275,276,277,278,279,280,281,282,283,284,285,291,329,333,344,353,413,],[-19,79,-133,-160,-160,-87,-151,-152,-153,-119,-20,238,-19,245,-121,269,-182,-134,-136,-139,-141,313,320,-120,-122,-145,-146,-147,-148,-149,-180,-181,-132,-135,-140,-150,339,365,-86,377,383,420,]),'EQUAL':([36,39,107,109,110,111,113,114,115,116,177,206,208,211,213,262,271,283,284,285,333,344,],[75,77,203,-160,-160,-87,-151,-152,-153,-119,-121,-134,-136,-139,-141,-120,-122,-135,-140,-150,-86,-119,]),'LPAREN':([43,44,45,59,61,62,64,65,66,68,71,77,79,93,98,100,101,103,104,105,108,112,116,123,149,150,155,160,161,172,173,174,175,191,192,193,194,195,196,197,198,199,200,201,202,203,204,207,209,210,212,214,215,216,218,220,223,230,231,238,245,265,268,269,272,299,313,320,334,335,339,344,347,348,349,365,375,377,383,420,],[80,82,85,91,100,101,104,112,112,112,85,136,136,112,112,112,112,112,112,112,112,112,218,-20,241,-19,246,248,249,112,112,112,112,112,112,112,112,112,112,112,112,-154,-155,-156,-157,-158,-159,112,-137,-138,112,-142,-143,-144,112,112,112,136,136,136,136,112,112,112,112,112,136,136,112,112,373,218,378,379,380,112,136,136,136,136,]),'LBRACKET':([59,60,64,113,116,120,121,130,141,150,168,169,177,262,271,344,],[92,98,105,98,105,98,105,229,235,105,98,98,-121,-120,-122,105,]),'COLON_EQUAL':([60,64,94,95,96,97,118,150,177,262,271,],[93,103,172,173,174,175,220,103,-121,-120,-122,]),'PLUS':([60,64,106,107,109,110,111,113,114,115,116,117,119,150,170,176,177,179,183,185,188,205,206,208,211,213,217,258,259,260,261,262,271,275,276,277,278,279,280,281,282,283,284,285,288,293,327,329,330,333,344,368,369,389,],[94,-119,191,-133,209,-160,-87,-151,-152,-153,-119,191,191,-119,191,191,-121,191,191,191,191,191,-134,-136,-139,-141,191,191,191,191,191,-120,-122,191,191,191,191,191,191,191,-132,-135,-140,-150,191,191,191,191,191,-86,-119,191,191,191,]),'MINUS':([60,64,106,107,109,110,111,113,114,115,116,117,119,150,170,176,177,179,183,185,188,205,206,208,211,213,217,258,259,260,261,262,271,275,276,277,278,279,280,281,282,283,284,285,288,293,327,329,330,333,344,368,369,389,],[95,-119,192,-133,210,-160,-87,-151,-152,-153,-119,192,192,-119,192,192,-121,192,192,192,192,192,-134,-136,-139,-141,192,192,192,192,192,-120,-122,192,192,192,192,192,192,192,-132,-135,-140,-150,192,192,192,192,192,-86,-119,192,192,192,]),'TIMES':([60,64,106,107,109,110,111,113,114,115,116,117,119,150,170,176,177,179,183,185,188,205,206,208,211,213,217,258,259,260,261,262,271,275,276,277,278,279,280,281,282,283,284,285,288,293,327,329,330,333,344,368,369,389,],[96,-119,193,-133,-160,214,-87,-151,-152,-153,-119,193,193,-119,193,193,-121,193,193,193,193,193,-134,-136,-139,-141,193,193,193,193,193,-120,-122,193,193,193,193,193,193,193,-132,-135,-140,-150,193,193,193,193,193,-86,-119,193,193,193,]),'DIVIDE':([60,64,106,107,109,110,111,113,114,115,116,117,119,150,170,176,177,179,183,185,188,205,206,208,211,213,217,258,259,260,261,262,271,275,276,277,278,279,280,281,282,283,284,285,288,293,327,329,330,333,344,368,369,389,],[97,-119,194,-133,-160,215,-87,-151,-152,-153,-119,194,194,-119,194,194,-121,194,194,194,194,194,-134,-136,-139,-141,194,194,194,194,194,-120,-122,194,194,194,194,194,194,194,-132,-135,-140,-150,194,194,194,194,194,-86,-119,194,194,194,]),'NOT':([65,66,68,93,98,100,101,103,104,105,108,112,172,173,174,175,191,192,193,194,195,196,197,218,220,223,265,268,269,272,299,334,335,365,],[108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,]),'NUMBER':([65,66,68,75,77,79,93,98,100,101,103,104,105,108,112,172,173,174,175,191,192,193,194,195,196,197,198,199,200,201,202,203,204,207,209,210,212,214,215,216,218,220,221,223,229,230,231,235,236,238,245,265,268,269,272,299,313,320,334,335,337,342,365,375,377,383,410,420,422,],[114,114,114,125,142,142,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,-154,-155,-156,-157,-158,-159,114,-137,-138,114,-142,-143,-144,114,114,291,114,142,142,142,309,310,142,142,114,114,114,114,114,142,142,114,114,291,142,114,142,142,142,291,142,291,]),'STRING_LITERAL':([65,66,68,75,93,98,100,101,103,104,105,108,112,172,173,174,175,191,192,193,194,195,196,197,198,199,200,201,202,203,204,207,209,210,212,214,215,216,218,220,223,246,265,268,269,272,299,334,335,365,],[115,115,115,126,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,-154,-155,-156,-157,-158,-159,115,-137,-138,115,-142,-143,-144,115,115,115,319,115,115,115,115,115,115,115,115,]),'CHARACTER_LITERAL':([75,],[124,]),'BOOLEAN_LITERAL':([75,77,79,93,230,231,238,245,313,320,375,377,383,420,],[127,137,137,171,137,137,137,137,137,137,137,137,137,137,]),'ARRAY':([77,79,230,231,238,245,313,320,375,377,383,420,],[130,130,130,130,130,130,130,130,130,130,130,130,]),'FILE':([77,79,230,231,238,245,313,320,375,377,383,420,],[132,132,132,132,132,132,132,132,132,132,132,132,]),'SET':([77,79,230,231,238,245,313,320,375,377,383,420,],[133,133,133,133,133,133,133,133,133,133,133,133,]),'RECORD':([77,79,230,231,238,245,313,320,375,377,383,420,],[134,134,134,134,134,134,134,134,134,134,134,134,]),'OBJECT':([77,79,230,231,238,245,313,320,375,377,383,420,],[135,135,135,135,135,135,135,135,135,135,135,135,]),'INTEGER':([77,79,230,231,238,245,313,320,375,377,383,420,],[138,138,138,138,138,138,138,138,138,138,138,138,]),'BYTE':([77,79,230,231,238,245,313,320,375,377,383,420,],[139,139,139,139,139,139,139,139,139,139,139,139,]),'CHAR':([77,79,230,231,238,245,313,320,375,377,383,420,],[140,140,140,140,140,140,140,140,140,140,140,140,]),'STRING':([77,79,230,231,238,245,313,320,375,377,383,420,],[141,141,141,141,141,141,141,141,141,141,141,141,]),'LONGINT':([77,79,230,231,238,245,313,320,375,377,383,420,],[143,143,143,143,143,143,143,143,143,143,143,143,]),'FORWARD':([86,251,323,382,],[165,325,361,401,]),'UNTIL':([90,122,167,],[-93,223,-94,]),'IN':([106,107,109,110,111,113,114,115,116,177,205,206,208,211,213,262,271,275,276,277,278,279,280,281,282,283,284,285,333,],[190,-133,-160,-160,-87,-151,-152,-153,-119,-121,-182,-134,-136,-139,-141,-120,-122,-145,-146,-147,-148,-149,-180,-181,-132,-135,-140,-150,-86,]),'MOD':([106,107,109,110,111,113,114,115,116,117,119,170,176,177,179,183,185,188,205,206,208,211,213,217,258,259,260,261,262,271,275,276,277,278,279,280,281,282,283,284,285,288,293,327,329,330,333,344,368,369,389,],[195,-133,-160,-160,-87,-151,-152,-153,-119,195,195,195,195,-121,195,195,195,195,195,-134,-136,-139,-141,195,195,195,195,195,-120,-122,195,195,195,195,195,195,195,-132,-135,-140,-150,195,195,195,195,195,-86,-119,195,195,195,]),'AND':([106,107,109,110,111,113,114,115,116,117,119,170,176,177,179,183,185,188,205,206,208,211,213,217,258,259,260,261,262,271,275,276,277,278,279,280,281,282,283,284,285,288,293,327,329,330,333,344,368,369,389,],[196,-133,-160,-160,-87,-151,-152,-153,-119,196,196,196,196,-121,196,196,196,196,196,-134,-136,-139,-141,196,196,196,196,196,-120,-122,196,196,196,196,196,196,196,-132,-135,-140,-150,196,196,196,196,196,-86,-119,196,196,196,]),'OR':([106,107,109,110,111,113,114,115,116,117,119,170,176,177,179,183,185,188,205,206,208,211,213,217,258,259,260,261,262,271,275,276,277,278,279,280,281,282,283,284,285,288,293,327,329,330,333,344,368,369,389,],[197,-133,-160,-160,-87,-151,-152,-153,-119,197,197,197,197,-121,197,197,197,197,197,-134,-136,-139,-141,197,197,197,197,197,-120,-122,197,197,197,197,197,197,197,-132,-135,-140,-150,197,197,197,197,197,-86,-119,197,197,197,]),'DO':([107,109,110,111,113,114,115,116,117,120,121,177,205,206,208,211,213,262,271,275,276,277,278,279,280,281,282,283,284,285,333,368,369,],[-133,-160,-160,-87,-151,-152,-153,-119,219,222,-119,-121,-182,-134,-136,-139,-141,-120,-122,-145,-146,-147,-148,-149,-180,-181,-132,-135,-140,-150,-86,391,392,]),'OF':([107,109,110,111,113,114,115,116,119,128,131,132,133,137,138,139,140,141,143,177,205,206,208,211,213,262,271,275,276,277,278,279,280,281,282,283,284,285,296,297,308,310,311,333,341,343,344,345,351,395,396,],[-133,-160,-160,-87,-151,-152,-153,-119,221,-43,-31,230,231,-37,-38,-39,-40,-41,-75,-121,-182,-134,-136,-139,-141,-120,-122,-145,-146,-147,-148,-149,-180,-181,-132,-135,-140,-150,-32,-33,-36,-46,-47,-86,375,-34,-119,-35,-42,-30,410,]),'RBRACKET':([107,109,110,111,113,114,115,116,121,169,176,177,187,188,205,206,208,211,213,262,271,275,276,277,278,279,280,281,282,283,284,285,294,295,309,310,311,330,333,376,],[-133,-160,-160,-87,-151,-152,-153,-119,-119,256,262,-121,271,-123,-182,-134,-136,-139,-141,-120,-122,-145,-146,-147,-148,-149,-180,-181,-132,-135,-140,-150,341,-45,351,-46,-47,-124,-86,-44,]),'TO':([107,109,110,111,113,114,115,116,177,205,206,208,211,213,262,271,275,276,277,278,279,280,281,282,283,284,285,288,333,],[-133,-160,-160,-87,-151,-152,-153,-119,-121,-182,-134,-136,-139,-141,-120,-122,-145,-146,-147,-148,-149,-180,-181,-132,-135,-140,-150,334,-86,]),'DOWNTO':([107,109,110,111,113,114,115,116,177,205,206,208,211,213,262,271,275,276,277,278,279,280,281,282,283,284,285,288,333,],[-133,-160,-160,-87,-151,-152,-153,-119,-121,-182,-134,-136,-139,-141,-120,-122,-145,-146,-147,-148,-149,-180,-181,-132,-135,-140,-150,335,-86,]),'LESS':([107,109,110,111,113,114,115,116,177,206,208,211,213,262,271,283,284,285,333,344,],[199,-160,-160,-87,-151,-152,-153,-119,-121,-134,-136,-139,-141,-120,-122,-135,-140,-150,-86,-119,]),'LESS_EQUAL':([107,109,110,111,113,114,115,116,177,206,208,211,213,262,271,283,284,285,333,344,],[200,-160,-160,-87,-151,-152,-153,-119,-121,-134,-136,-139,-141,-120,-122,-135,-140,-150,-86,-119,]),'GREAT':([107,109,110,111,113,114,115,116,177,206,208,211,213,262,271,283,284,285,333,344,],[201,-160,-160,-87,-151,-152,-153,-119,-121,-134,-136,-139,-141,-120,-122,-135,-140,-150,-86,-119,]),'GREAT_EQUAL':([107,109,110,111,113,114,115,116,177,206,208,211,213,262,271,283,284,285,333,344,],[202,-160,-160,-87,-151,-152,-153,-119,-121,-134,-136,-139,-141,-120,-122,-135,-140,-150,-86,-119,]),'DIFFERENT':([107,109,110,111,113,114,115,116,177,206,208,211,213,262,271,283,284,285,333,344,],[204,-160,-160,-87,-151,-152,-153,-119,-121,-134,-136,-139,-141,-120,-122,-135,-140,-150,-86,-119,]),'DIV':([110,111,113,114,115,116,177,262,271,285,333,344,],[216,-87,-151,-152,-153,-119,-121,-120,-122,-150,-86,-119,]),'DOTDOT':([142,],[236,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_sections':([4,5,86,244,251,254,316,323,382,385,386,391,392,416,],[5,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'empty':([4,5,28,47,70,80,82,85,86,100,104,109,110,122,134,135,179,189,190,218,219,222,232,233,241,244,248,249,251,254,316,323,327,331,332,338,339,372,373,378,379,380,382,385,386,390,391,392,416,],[6,6,58,58,58,148,154,148,6,180,180,208,213,58,154,154,266,58,58,180,58,58,300,303,148,6,148,148,6,6,6,6,266,58,58,58,154,58,154,154,154,154,6,6,6,58,6,6,6,]),'block':([5,86,244,251,254,316,323,382,385,386,391,392,416,],[8,164,317,324,326,354,360,400,403,404,406,407,421,]),'declaration_section':([5,7,],[9,9,]),'uses_opt':([5,7,],[10,10,]),'constant_declaration':([5,7,],[11,11,]),'type_declaration':([5,7,],[12,12,]),'var_declaration':([5,7,],[13,13,]),'procedure_declarations':([5,7,],[14,14,]),'function_declaration':([5,7,],[15,15,]),'constructor_declaration':([5,7,],[16,16,]),'method_declaration':([5,7,],[17,17,]),'procedure_declaration':([5,7,14,],[22,22,30,]),'compound_statement':([7,28,47,70,122,189,190,219,222,331,332,338,372,390,],[27,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'id_list':([18,21,40,82,134,135,136,151,156,232,233,339,373,374,378,379,380,394,397,398,399,],[32,42,42,155,155,155,234,155,247,155,155,155,155,155,155,155,155,155,155,155,155,]),'constant_list':([19,],[34,]),'constant':([19,34,],[35,74,]),'type_list':([20,],[37,]),'type_definition':([20,37,],[38,76,]),'declaration_list':([21,],[40,]),'declaration':([21,40,],[41,78,]),'statement_list':([28,70,338,],[47,122,372,]),'statement':([28,47,70,122,189,190,219,222,331,332,338,372,390,],[48,89,48,89,273,274,287,292,366,367,48,89,405,]),'if_statement':([28,47,70,82,122,134,135,151,189,190,219,222,232,233,331,332,338,339,372,373,374,378,379,380,390,394,397,398,399,],[49,49,49,157,49,157,157,157,49,49,49,49,157,157,49,49,49,157,49,157,157,157,157,157,49,157,157,157,157,]),'assignment_statement':([28,47,70,82,122,134,135,151,189,190,219,222,232,233,331,332,338,339,372,373,374,378,379,380,390,394,397,398,399,],[50,50,50,159,50,159,159,159,50,50,50,50,159,159,50,50,50,159,50,159,159,159,159,159,50,159,159,159,159,]),'while_statement':([28,47,70,122,189,190,219,222,331,332,338,372,390,],[51,51,51,51,51,51,51,51,51,51,51,51,51,]),'procedure_call':([28,47,70,122,189,190,219,222,331,332,338,372,390,],[52,52,52,52,52,52,52,52,52,52,52,52,52,]),'for_statement':([28,47,70,122,189,190,219,222,331,332,338,372,390,],[54,54,54,54,54,54,54,54,54,54,54,54,54,]),'case_statement':([28,47,70,82,122,134,135,151,189,190,219,222,232,233,331,332,338,339,372,373,374,378,379,380,390,394,397,398,399,],[55,55,55,158,55,158,158,158,55,55,55,55,158,158,55,55,55,158,55,158,158,158,158,158,55,158,158,158,158,]),'with_statement':([28,47,70,122,189,190,219,222,331,332,338,372,390,],[56,56,56,56,56,56,56,56,56,56,56,56,56,]),'repeat_statement':([28,47,70,122,189,190,219,222,331,332,338,372,390,],[57,57,57,57,57,57,57,57,57,57,57,57,57,]),'variable':([28,47,65,66,68,69,70,82,91,92,93,98,100,101,103,104,105,108,112,122,134,135,151,172,173,174,175,189,190,191,192,193,194,195,196,197,198,207,212,218,219,220,222,223,232,233,265,268,269,272,299,331,332,334,335,338,339,365,372,373,374,378,379,380,390,394,397,398,399,],[60,60,113,113,113,120,60,60,168,169,113,113,113,113,113,113,113,113,113,60,60,60,60,113,113,113,113,60,60,113,113,113,113,113,113,113,113,113,113,113,60,113,60,113,60,60,113,113,113,113,113,60,60,113,113,60,60,113,60,60,60,60,60,60,60,60,60,60,60,]),'expression':([65,66,68,93,98,100,101,103,104,105,108,112,172,173,174,175,191,192,193,194,195,196,197,218,220,223,265,268,269,272,299,334,335,365,],[106,117,119,170,176,179,183,185,179,188,205,217,258,259,260,261,275,276,277,278,279,280,281,179,288,293,327,183,329,330,119,368,369,389,]),'simple_expression':([65,66,68,93,98,100,101,103,104,105,108,112,172,173,174,175,191,192,193,194,195,196,197,198,218,220,223,265,268,269,272,299,334,335,365,],[107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,282,107,107,107,107,107,107,107,107,107,107,107,]),'term':([65,66,68,93,98,100,101,103,104,105,108,112,172,173,174,175,191,192,193,194,195,196,197,198,207,218,220,223,265,268,269,272,299,334,335,365,],[109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,283,109,109,109,109,109,109,109,109,109,109,109,]),'factor':([65,66,68,93,98,100,101,103,104,105,108,112,172,173,174,175,191,192,193,194,195,196,197,198,207,212,218,220,223,265,268,269,272,299,334,335,365,],[110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,284,110,110,110,110,110,110,110,110,110,110,110,]),'function_call':([65,66,68,93,98,100,101,103,104,105,108,112,172,173,174,175,191,192,193,194,195,196,197,198,207,212,218,220,223,265,268,269,272,299,334,335,365,],[111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,]),'type_specifier':([77,79,230,231,238,245,313,320,375,377,383,420,],[129,144,296,297,312,318,352,357,395,396,402,423,]),'subrange':([77,79,229,230,231,238,245,313,320,342,375,377,383,420,],[131,131,295,131,131,131,131,131,131,376,131,131,131,131,]),'parameter_list':([80,85,241,248,249,],[146,162,315,321,322,]),'parameter':([80,85,240,241,248,249,],[147,147,314,147,147,147,]),'field_list':([82,134,135,339,373,378,379,380,],[151,232,233,374,394,397,398,399,]),'field':([82,134,135,151,232,233,339,373,374,378,379,380,394,397,398,399,],[153,153,153,243,243,243,153,153,243,153,153,153,243,243,243,243,]),'expression_list':([100,104,218,],[178,186,286,]),'write_arguments':([101,],[181,]),'write_argument':([101,268,],[182,328,]),'index_list':([105,],[187,]),'relop':([107,],[198,]),'simple_expression_tail':([109,],[206,]),'addop':([109,],[207,]),'term_tail':([110,],[211,]),'mulop':([110,],[212,]),'expression_list_tail':([179,327,],[264,364,]),'case_list':([221,410,],[289,417,]),'case_element':([221,337,410,422,],[290,371,290,371,]),'type_expression':([229,],[294,]),'case_part':([232,],[298,]),'method_list':([233,],[301,]),'method':([233,301,],[302,346,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON declaration_sections block DOT','program',6,'p_program','Parser_MiniPascal.py',19),
  ('declaration_sections -> declaration_sections declaration_section','declaration_sections',2,'p_declaration_sections','Parser_MiniPascal.py',25),
  ('declaration_sections -> empty','declaration_sections',1,'p_declaration_sections','Parser_MiniPascal.py',26),
  ('declaration_section -> uses_opt','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',31),
  ('declaration_section -> constant_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',32),
  ('declaration_section -> type_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',33),
  ('declaration_section -> var_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',34),
  ('declaration_section -> procedure_declarations','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',35),
  ('declaration_section -> function_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',36),
  ('declaration_section -> constructor_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',37),
  ('declaration_section -> method_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',38),
  ('method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block','method_declaration',9,'p_method_declaration','Parser_MiniPascal.py',42),
  ('method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block','method_declaration',9,'p_method_declaration','Parser_MiniPascal.py',43),
  ('method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block','method_declaration',11,'p_method_declaration','Parser_MiniPascal.py',44),
  ('method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block','method_declaration',6,'p_method_declaration','Parser_MiniPascal.py',45),
  ('constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block','constructor_declaration',7,'p_constructor_declaration','Parser_MiniPascal.py',52),
  ('constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block','constructor_declaration',6,'p_constructor_declaration','Parser_MiniPascal.py',53),
  ('uses_opt -> USES id_list SEMICOLON','uses_opt',3,'p_uses_opt','Parser_MiniPascal.py',59),
  ('id_list -> ID','id_list',1,'p_id_list_single','Parser_MiniPascal.py',73),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list_multiple','Parser_MiniPascal.py',77),
  ('var_declaration -> VAR declaration_list','var_declaration',2,'p_var_declaration','Parser_MiniPascal.py',81),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser_MiniPascal.py',85),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','Parser_MiniPascal.py',86),
  ('declaration -> id_list COLON type_specifier SEMICOLON','declaration',4,'p_declaration','Parser_MiniPascal.py',90),
  ('block -> declaration_sections compound_statement','block',2,'p_block','Parser_MiniPascal.py',108),
  ('type_declaration -> TYPE type_list','type_declaration',2,'p_type_declaration','Parser_MiniPascal.py',112),
  ('type_list -> type_definition','type_list',1,'p_type_list','Parser_MiniPascal.py',116),
  ('type_list -> type_list type_definition','type_list',2,'p_type_list','Parser_MiniPascal.py',117),
  ('type_definition -> ID EQUAL type_specifier SEMICOLON','type_definition',4,'p_type_definition','Parser_MiniPascal.py',122),
  ('type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier','type_specifier',6,'p_type_specifier','Parser_MiniPascal.py',137),
  ('type_specifier -> subrange','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',138),
  ('type_specifier -> FILE OF type_specifier','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',139),
  ('type_specifier -> SET OF type_specifier','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',140),
  ('type_specifier -> RECORD field_list case_part END','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',141),
  ('type_specifier -> OBJECT field_list method_list END','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',142),
  ('type_specifier -> LPAREN id_list RPAREN','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',143),
  ('type_specifier -> BOOLEAN_LITERAL','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',144),
  ('type_specifier -> INTEGER','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',145),
  ('type_specifier -> BYTE','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',146),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',147),
  ('type_specifier -> STRING','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',148),
  ('type_specifier -> STRING LBRACKET NUMBER RBRACKET','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',149),
  ('type_specifier -> ID','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',150),
  ('type_expression -> type_expression COMMA subrange','type_expression',3,'p_type_expression','Parser_MiniPascal.py',154),
  ('type_expression -> subrange','type_expression',1,'p_type_expression','Parser_MiniPascal.py',155),
  ('subrange -> NUMBER DOTDOT NUMBER','subrange',3,'p_subrange','Parser_MiniPascal.py',164),
  ('subrange -> NUMBER DOTDOT ID','subrange',3,'p_subrange','Parser_MiniPascal.py',165),
  ('field_list -> field_list field','field_list',2,'p_field_list','Parser_MiniPascal.py',171),
  ('field_list -> field','field_list',1,'p_field_list','Parser_MiniPascal.py',172),
  ('field_list -> empty','field_list',1,'p_field_list','Parser_MiniPascal.py',173),
  ('field -> id_list COLON type_specifier','field',3,'p_field','Parser_MiniPascal.py',185),
  ('field -> id_list COLON type_specifier SEMICOLON','field',4,'p_field','Parser_MiniPascal.py',186),
  ('field -> VAR id_list COLON type_specifier','field',4,'p_field','Parser_MiniPascal.py',187),
  ('field -> VAR id_list COLON type_specifier SEMICOLON','field',5,'p_field','Parser_MiniPascal.py',188),
  ('field -> id_list LPAREN STRING_LITERAL RPAREN','field',4,'p_field','Parser_MiniPascal.py',189),
  ('field -> if_statement','field',1,'p_field','Parser_MiniPascal.py',190),
  ('field -> case_statement','field',1,'p_field','Parser_MiniPascal.py',191),
  ('field -> assignment_statement','field',1,'p_field','Parser_MiniPascal.py',192),
  ('case_part -> CASE ID COLON type_specifier OF case_list SEMICOLON','case_part',7,'p_case_part','Parser_MiniPascal.py',205),
  ('case_part -> empty','case_part',1,'p_case_part','Parser_MiniPascal.py',206),
  ('case_list -> case_list SEMICOLON case_element','case_list',3,'p_case_list','Parser_MiniPascal.py',215),
  ('case_list -> case_element','case_list',1,'p_case_list','Parser_MiniPascal.py',216),
  ('case_element -> NUMBER COLON LPAREN field_list RPAREN','case_element',5,'p_case_element','Parser_MiniPascal.py',225),
  ('case_element -> NUMBER COLON field_list','case_element',3,'p_case_element','Parser_MiniPascal.py',226),
  ('method_list -> method_list method','method_list',2,'p_method_list','Parser_MiniPascal.py',238),
  ('method_list -> method','method_list',1,'p_method_list','Parser_MiniPascal.py',239),
  ('method_list -> empty','method_list',1,'p_method_list','Parser_MiniPascal.py',240),
  ('method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON','method',6,'p_method','Parser_MiniPascal.py',250),
  ('method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON','method',6,'p_method','Parser_MiniPascal.py',251),
  ('method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON','method',8,'p_method','Parser_MiniPascal.py',252),
  ('method -> DESTRUCTOR ID SEMICOLON','method',3,'p_method','Parser_MiniPascal.py',253),
  ('case_statement -> CASE expression OF case_list END SEMICOLON','case_statement',6,'p_case_statement','Parser_MiniPascal.py',266),
  ('case_statement -> CASE expression OF case_list ELSE statement_list END SEMICOLON','case_statement',8,'p_case_statement','Parser_MiniPascal.py',267),
  ('case_statement -> CASE expression OF case_list END','case_statement',5,'p_case_statement','Parser_MiniPascal.py',268),
  ('type_specifier -> LONGINT','type_specifier',1,'p_type_specifier_longint','Parser_MiniPascal.py',280),
  ('procedure_declarations -> procedure_declaration','procedure_declarations',1,'p_procedure_declarations','Parser_MiniPascal.py',285),
  ('procedure_declarations -> procedure_declarations procedure_declaration','procedure_declarations',2,'p_procedure_declarations','Parser_MiniPascal.py',286),
  ('procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON','procedure_declaration',8,'p_procedure_declaration','Parser_MiniPascal.py',296),
  ('procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON','procedure_declaration',7,'p_procedure_declaration','Parser_MiniPascal.py',297),
  ('procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON','procedure_declaration',5,'p_procedure_declaration','Parser_MiniPascal.py',298),
  ('procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON FORWARD SEMICOLON','procedure_declaration',8,'p_procedure_declaration','Parser_MiniPascal.py',299),
  ('procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON','procedure_declaration',7,'p_procedure_declaration','Parser_MiniPascal.py',300),
  ('procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON','procedure_declaration',5,'p_procedure_declaration','Parser_MiniPascal.py',301),
  ('function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON','function_declaration',10,'p_function_declaration','Parser_MiniPascal.py',315),
  ('function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON','function_declaration',10,'p_function_declaration','Parser_MiniPascal.py',316),
  ('function_call -> ID LPAREN expression_list RPAREN','function_call',4,'p_function_call','Parser_MiniPascal.py',328),
  ('factor -> function_call','factor',1,'p_factor_function_call','Parser_MiniPascal.py',333),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','Parser_MiniPascal.py',338),
  ('parameter_list -> parameter_list SEMICOLON parameter','parameter_list',3,'p_parameter_list','Parser_MiniPascal.py',339),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','Parser_MiniPascal.py',340),
  ('parameter -> ID COLON type_specifier','parameter',3,'p_parameter','Parser_MiniPascal.py',349),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','Parser_MiniPascal.py',354),
  ('statement_list -> statement SEMICOLON','statement_list',2,'p_statement_list_multi','Parser_MiniPascal.py',359),
  ('statement_list -> statement_list statement SEMICOLON','statement_list',3,'p_statement_list_multi','Parser_MiniPascal.py',360),
  ('statement -> if_statement','statement',1,'p_statement','Parser_MiniPascal.py',375),
  ('statement -> assignment_statement','statement',1,'p_statement','Parser_MiniPascal.py',376),
  ('statement -> while_statement','statement',1,'p_statement','Parser_MiniPascal.py',377),
  ('statement -> procedure_call','statement',1,'p_statement','Parser_MiniPascal.py',378),
  ('statement -> compound_statement','statement',1,'p_statement','Parser_MiniPascal.py',379),
  ('statement -> for_statement','statement',1,'p_statement','Parser_MiniPascal.py',380),
  ('statement -> case_statement','statement',1,'p_statement','Parser_MiniPascal.py',381),
  ('statement -> with_statement','statement',1,'p_statement','Parser_MiniPascal.py',382),
  ('statement -> repeat_statement','statement',1,'p_statement','Parser_MiniPascal.py',383),
  ('statement -> empty','statement',1,'p_statement','Parser_MiniPascal.py',384),
  ('with_statement -> WITH variable DO statement','with_statement',4,'p_with_statement','Parser_MiniPascal.py',388),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_if_statement','Parser_MiniPascal.py',393),
  ('if_statement -> IF expression THEN statement','if_statement',4,'p_if_statement','Parser_MiniPascal.py',394),
  ('if_statement -> IF expression IN statement THEN statement ELSE statement','if_statement',8,'p_if_statement','Parser_MiniPascal.py',395),
  ('if_statement -> IF expression IN statement THEN statement','if_statement',6,'p_if_statement','Parser_MiniPascal.py',396),
  ('for_statement -> FOR ID COLON_EQUAL expression TO expression DO block','for_statement',8,'p_for_statement','Parser_MiniPascal.py',411),
  ('for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO block','for_statement',8,'p_for_statement','Parser_MiniPascal.py',412),
  ('assignment_statement -> variable COLON_EQUAL expression','assignment_statement',3,'p_assignment_statement','Parser_MiniPascal.py',419),
  ('assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL SEMICOLON','assignment_statement',4,'p_assignment_statement','Parser_MiniPascal.py',420),
  ('assignment_statement -> variable PLUS COLON_EQUAL expression','assignment_statement',4,'p_assignment_statement','Parser_MiniPascal.py',421),
  ('assignment_statement -> variable MINUS COLON_EQUAL expression','assignment_statement',4,'p_assignment_statement','Parser_MiniPascal.py',422),
  ('assignment_statement -> variable TIMES COLON_EQUAL expression','assignment_statement',4,'p_assignment_statement','Parser_MiniPascal.py',423),
  ('assignment_statement -> variable DIVIDE COLON_EQUAL expression','assignment_statement',4,'p_assignment_statement','Parser_MiniPascal.py',424),
  ('assignment_statement -> ID COLON_EQUAL expression','assignment_statement',3,'p_assignment_statement','Parser_MiniPascal.py',425),
  ('variable -> ID','variable',1,'p_variable_simple','Parser_MiniPascal.py',442),
  ('variable -> variable LBRACKET expression RBRACKET','variable',4,'p_variable_simple','Parser_MiniPascal.py',443),
  ('variable -> variable DOT ID','variable',3,'p_variable_simple','Parser_MiniPascal.py',444),
  ('variable -> ID LBRACKET index_list RBRACKET','variable',4,'p_variable_index','Parser_MiniPascal.py',459),
  ('index_list -> expression','index_list',1,'p_index_list','Parser_MiniPascal.py',463),
  ('index_list -> index_list COMMA expression','index_list',3,'p_index_list','Parser_MiniPascal.py',464),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','Parser_MiniPascal.py',472),
  ('procedure_call -> ID LPAREN expression_list RPAREN','procedure_call',4,'p_procedure_call','Parser_MiniPascal.py',477),
  ('procedure_call -> ID','procedure_call',1,'p_procedure_call','Parser_MiniPascal.py',478),
  ('expression_list -> expression expression_list_tail','expression_list',2,'p_expression_list_multi','Parser_MiniPascal.py',486),
  ('expression_list_tail -> COMMA expression expression_list_tail','expression_list_tail',3,'p_expression_list_tail','Parser_MiniPascal.py',494),
  ('expression_list_tail -> empty','expression_list_tail',1,'p_expression_list_tail','Parser_MiniPascal.py',495),
  ('expression_list -> empty','expression_list',1,'p_expression_list_empty','Parser_MiniPascal.py',507),
  ('expression -> simple_expression relop simple_expression','expression',3,'p_expression','Parser_MiniPascal.py',512),
  ('expression -> simple_expression','expression',1,'p_expression','Parser_MiniPascal.py',513),
  ('simple_expression -> term simple_expression_tail','simple_expression',2,'p_simple_expression','Parser_MiniPascal.py',521),
  ('simple_expression_tail -> addop term','simple_expression_tail',2,'p_simple_expression_tail','Parser_MiniPascal.py',529),
  ('simple_expression_tail -> empty','simple_expression_tail',1,'p_simple_expression_tail','Parser_MiniPascal.py',530),
  ('addop -> PLUS','addop',1,'p_addop','Parser_MiniPascal.py',539),
  ('addop -> MINUS','addop',1,'p_addop','Parser_MiniPascal.py',540),
  ('term -> factor term_tail','term',2,'p_term','Parser_MiniPascal.py',545),
  ('term_tail -> mulop factor','term_tail',2,'p_term_tail','Parser_MiniPascal.py',553),
  ('term_tail -> empty','term_tail',1,'p_term_tail','Parser_MiniPascal.py',554),
  ('mulop -> TIMES','mulop',1,'p_mulop','Parser_MiniPascal.py',563),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','Parser_MiniPascal.py',564),
  ('mulop -> DIV','mulop',1,'p_mulop','Parser_MiniPascal.py',565),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',569),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',570),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',571),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',572),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',573),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','Parser_MiniPascal.py',578),
  ('factor -> variable','factor',1,'p_factor_variable','Parser_MiniPascal.py',582),
  ('factor -> NUMBER','factor',1,'p_factor_number','Parser_MiniPascal.py',586),
  ('factor -> STRING_LITERAL','factor',1,'p_factor_string','Parser_MiniPascal.py',590),
  ('relop -> LESS','relop',1,'p_relop','Parser_MiniPascal.py',597),
  ('relop -> LESS_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',598),
  ('relop -> GREAT','relop',1,'p_relop','Parser_MiniPascal.py',599),
  ('relop -> GREAT_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',600),
  ('relop -> EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',601),
  ('relop -> DIFFERENT','relop',1,'p_relop','Parser_MiniPascal.py',602),
  ('empty -> <empty>','empty',0,'p_empty','Parser_MiniPascal.py',607),
  ('statement -> READLN','statement',1,'p_statement_readln','Parser_MiniPascal.py',611),
  ('statement -> READLN LPAREN variable RPAREN','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',615),
  ('statement -> READLN LBRACKET variable RBRACKET','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',616),
  ('statement -> WRITE LPAREN expression_list RPAREN','statement',4,'p_statement_write','Parser_MiniPascal.py',620),
  ('statement -> WRITELN LPAREN write_arguments RPAREN','statement',4,'p_statement_writeln','Parser_MiniPascal.py',624),
  ('write_arguments -> write_argument','write_arguments',1,'p_write_arguments','Parser_MiniPascal.py',629),
  ('write_arguments -> write_arguments COMMA write_argument','write_arguments',3,'p_write_arguments','Parser_MiniPascal.py',630),
  ('write_argument -> expression','write_argument',1,'p_write_argument','Parser_MiniPascal.py',637),
  ('write_argument -> expression COLON expression','write_argument',3,'p_write_argument','Parser_MiniPascal.py',638),
  ('write_argument -> expression COLON expression COLON expression','write_argument',5,'p_write_argument','Parser_MiniPascal.py',639),
  ('statement -> USES ID SEMICOLON','statement',3,'p_statement_uses','Parser_MiniPascal.py',649),
  ('constant_declaration -> CONST constant_list','constant_declaration',2,'p_constant_declaration','Parser_MiniPascal.py',654),
  ('repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON','repeat_statement',5,'p_repeat_statement','Parser_MiniPascal.py',658),
  ('constant_list -> constant','constant_list',1,'p_constant_list','Parser_MiniPascal.py',662),
  ('constant_list -> constant_list constant','constant_list',2,'p_constant_list','Parser_MiniPascal.py',663),
  ('constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',671),
  ('constant -> ID EQUAL NUMBER SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',672),
  ('constant -> ID EQUAL STRING_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',673),
  ('constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',674),
  ('expression -> expression AND expression','expression',3,'p_expression_logical','Parser_MiniPascal.py',690),
  ('expression -> expression OR expression','expression',3,'p_expression_logical','Parser_MiniPascal.py',691),
  ('expression -> NOT expression','expression',2,'p_expression_logical','Parser_MiniPascal.py',692),
]
