
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocELSEAND ARRAY BEGIN BOOLEAN_LITERAL BYTE CASE CHAR CHARACTER_LITERAL COLON COLON_EQUAL COMMA CONST CONSTRUCTOR DESTRUCTOR DIFFERENT DIV DIVIDE DO DOT DOTDOT DOWNTO ELSE END EQUAL FALSE FILE FOR FORWARD FUNCTION GOTO GREAT GREAT_EQUAL ID IF IN INTEGER LABEL LBLOCK LBRACKET LESS LESS_EQUAL LONGINT LPAREN MINUS MOD NIL NOT NUMBER OBJECT OF OR PACKED PLUS PROCEDURE PROGRAM RBLOCK RBRACKET READLINE READLN RECORD REPEAT RPAREN SEMICOLON SET STRING STRING_LITERAL SUBRANGE THEN TIMES TO TRUE TYPE UNTIL USES VAR WHILE WITH WRITE WRITELNprogram : PROGRAM ID SEMICOLON declaration_sections block DOTdeclaration_sections : declaration_sections declaration_section\n                            | emptydeclaration_section : uses_opt\n                           | constant_declaration\n                           | type_declaration\n                           | var_declaration\n                           | procedure_declarations\n                           | function_declaration\n                           | constructor_declaration\n                           | method_declarationmethod_declaration : CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block \n                          | PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block \n                          | FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block\n                          | DESTRUCTOR ID DOT ID SEMICOLON blockconstructor_declaration : CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block\n                               | CONSTRUCTOR ID LPAREN RPAREN SEMICOLON blockuses_opt : USES id_list SEMICOLONid_list : ID\n               | id_list COMMA IDvar_declaration : VAR declaration_listdeclaration_list : declaration\n                        | declaration_list declarationdeclaration : id_list COLON type_specifier SEMICOLONblock : declaration_sections compound_statementtype_declaration : TYPE type_listtype_list : type_definition\n                 | type_list type_definitiontype_definition : ID EQUAL type_specifier SEMICOLONtype_specifier : ARRAY LBRACKET type_expression RBRACKET OF type_specifier\n                      | subrange\n                      | FILE OF type_specifier\n                      | SET OF type_specifier\n                      | RECORD field_list case_part END\n                      | OBJECT field_list method_list END                              \n                      | LPAREN id_list RPAREN\n                      | BOOLEAN_LITERAL\n                      | INTEGER\n                      | BYTE\n                      | CHAR\n                      | STRING\n                      | STRING LBRACKET NUMBER RBRACKET\n                      | IDtype_expression : type_expression COMMA subrange\n                       | subrangesubrange : NUMBER DOTDOT NUMBER\n                | NUMBER DOTDOT IDfield_list : field_list field\n                  | field\n                  | emptyfield : id_list COLON type_specifier\n             | id_list COLON type_specifier SEMICOLON\n             | VAR id_list COLON type_specifier\n             | VAR id_list COLON type_specifier SEMICOLON\n             | id_list LPAREN STRING_LITERAL RPAREN\n             | if_statement\n             | case_statement\n             | assignment_statementcase_part : CASE ID COLON type_specifier OF case_list SEMICOLON\n                 | emptycase_list : case_list SEMICOLON case_element\n                 | case_elementcase_element : NUMBER COLON LPAREN field_list RPAREN\n                    | NUMBER COLON field_listmethod_list : method_list method\n                   | method\n                   | emptymethod : CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON\n              | PROCEDURE ID LPAREN field_list RPAREN SEMICOLON  \n              | FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON\n              | DESTRUCTOR ID SEMICOLONcase_statement : CASE expression OF case_list END SEMICOLON\n                      | CASE expression OF case_list ELSE statement END SEMICOLON  \n                      | CASE expression OF case_list ENDtype_specifier : LONGINTprocedure_declarations : procedure_declaration\n                              | procedure_declarations procedure_declarationprocedure_declaration : PROCEDURE ID LPAREN field_list RPAREN SEMICOLON block SEMICOLON\n                             | PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON\n                             | PROCEDURE ID SEMICOLON block SEMICOLON\n                             | PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON\n                             | PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON\n                             | PROCEDURE ID SEMICOLON FORWARD SEMICOLONfunction_declaration : FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON\n                            | FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLONfunction_call : ID LPAREN expression_list RPARENfactor : function_callparameter_list : parameter\n                      | parameter_list SEMICOLON parameter\n                      | emptyparameter : id_list COLON type_specifier\n                 | VAR id_list COLON type_specifiercompound_statement : BEGIN statement_list ENDstatement_list : statement statement_list_tailstatement_list_tail : SEMICOLON statement statement_list_tail \n                           | emptystatement : if_statement\n                 | assignment_statement\n                 | while_statement\n                 | procedure_call\n                 | compound_statement\n                 | for_statement\n                 | case_statement\n                 | with_statement\n                 | emptywith_statement : WITH variable DO statementif_statement : IF expression THEN statement ELSE statement\n                    | IF expression THEN statement\n                    | IF expression IN statement THEN statement ELSE statement\n                    | IF expression IN statement THEN statementfor_statement : FOR ID COLON_EQUAL expression TO expression DO statement\n                     | FOR ID COLON_EQUAL expression DOWNTO expression DO statementassignment_statement : variable COLON_EQUAL expression\n                            | variable COLON_EQUAL BOOLEAN_LITERAL\n                            | ID COLON_EQUAL expressionvariable : ID\n                | variable LBRACKET expression RBRACKET\n                | variable DOT IDvariable : ID LBRACKET index_list RBRACKETindex_list : expression\n                  | index_list COMMA expressionwhile_statement : WHILE expression DO statementprocedure_call : ID LPAREN expression_list RPAREN\n                      | IDexpression_list : expression expression_list_tailexpression_list_tail : COMMA expression expression_list_tail\n                            | emptyexpression_list : emptyexpression : simple_expression relop simple_expression\n                  | simple_expressionsimple_expression : term simple_expression_tailsimple_expression_tail : addop term\n                              | emptyaddop : PLUS\n             | MINUSterm : factor term_tailterm_tail : mulop factor\n                 | emptymulop : TIMES\n             | DIVIDE\n             | DIVexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expressionfactor : LPAREN expression RPARENfactor : variablefactor : NUMBERfactor : STRING_LITERALrelop : LESS\n             | LESS_EQUAL\n             | GREAT\n             | GREAT_EQUAL\n             | EQUAL\n             | DIFFERENTempty :statement : READLNstatement : READLN LPAREN variable RPAREN\n                 | READLN LBRACKET variable RBRACKETstatement : WRITE LPAREN expression_list RPARENstatement : WRITELN LPAREN write_arguments RPARENwrite_arguments : write_argument\n                       | write_arguments COMMA write_argumentwrite_argument : expression\n                      | expression COLON expression\n                      | expression COLON expression COLON expressionstatement : USES ID SEMICOLONconstant_declaration : CONST constant_listconstant_list : constant\n                     | constant_list constantconstant : ID EQUAL CHARACTER_LITERAL SEMICOLON\n                | ID EQUAL NUMBER SEMICOLON\n                | ID EQUAL STRING_LITERAL SEMICOLON\n                | ID EQUAL BOOLEAN_LITERAL SEMICOLONexpression : expression AND expression\n                  | expression OR expression\n                  | NOT expression'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,29,],[0,-1,]),'ID':([2,18,19,20,21,23,24,25,26,28,31,34,35,37,38,40,41,49,50,51,52,53,54,55,56,57,58,62,63,64,65,66,67,68,71,72,74,75,76,77,78,79,80,81,82,83,85,86,88,90,91,92,93,94,95,96,98,99,100,102,103,104,105,106,107,108,109,110,111,122,125,128,129,130,131,132,133,134,135,137,143,146,148,149,151,152,153,154,157,165,166,168,175,176,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,209,210,211,213,214,215,216,217,218,220,221,222,223,226,227,229,230,232,234,236,239,240,247,248,249,250,252,254,255,256,257,258,259,260,262,263,264,265,266,267,268,269,270,271,272,274,279,282,283,285,290,291,292,293,294,296,297,298,301,305,307,318,319,320,321,322,323,325,326,329,331,337,342,343,344,352,353,354,357,360,361,362,364,365,366,367,370,371,377,378,379,381,382,384,385,386,392,393,394,395,407,],[3,33,36,39,33,43,44,45,46,63,69,36,-170,39,-27,33,-22,-97,-98,-99,-100,-101,-102,-103,-104,-105,-158,97,-124,111,111,113,111,116,117,-171,-28,122,-23,122,33,144,145,155,156,145,161,-93,63,116,116,111,111,168,111,111,111,111,111,-130,111,-157,-157,-87,111,-148,-149,-150,-116,-43,-31,145,145,33,-37,-38,-39,-40,-41,-75,33,145,-49,-50,33,-56,-57,-58,145,-113,-114,-118,-168,-115,63,63,111,111,111,111,111,111,111,111,-151,-152,-153,-154,-155,-156,-178,-131,111,-133,-134,-135,-136,111,-138,-139,-140,-141,111,63,111,63,-172,-173,-174,-175,-29,122,122,145,145,297,-24,33,122,33,-48,122,33,33,-159,-160,-117,-161,111,-162,111,111,-123,-119,111,-108,-142,-143,-144,-145,-146,-176,-177,-129,-132,-137,-147,-122,-106,-32,-33,330,333,334,335,336,-36,-46,-47,122,122,-51,122,63,63,-86,111,111,-74,63,145,-34,-35,-42,-52,-55,-53,111,-107,-110,-72,145,145,122,122,145,145,145,122,-54,63,63,63,145,-30,145,145,145,-109,-111,-112,-73,122,]),'SEMICOLON':([3,27,28,32,33,45,48,49,50,51,52,53,54,55,56,57,58,63,69,78,86,88,97,102,104,105,106,108,109,110,111,117,118,119,120,121,122,123,125,131,132,133,134,135,137,138,139,140,141,147,148,149,152,153,154,158,159,160,161,162,165,166,168,175,176,180,196,197,199,202,204,210,213,232,233,234,239,240,241,247,248,249,250,254,257,258,260,262,263,264,265,266,267,268,269,270,271,272,274,276,277,279,282,283,294,296,297,299,300,302,305,308,309,311,312,318,319,320,323,326,329,331,336,337,338,339,342,343,344,345,346,347,348,353,354,357,358,361,371,377,378,379,380,382,387,388,389,392,393,394,395,396,398,399,404,410,],[4,-25,-157,70,-19,84,88,-97,-98,-99,-100,-101,-102,-103,-104,-105,-158,-124,84,-157,-93,-157,175,-130,-157,-157,-87,-148,-149,-150,-116,-20,214,215,216,217,-43,218,-31,-37,-38,-39,-40,-41,-75,227,229,-88,-90,235,-49,-50,-56,-57,-58,242,243,244,245,88,-113,-114,-118,-168,-115,-157,-178,-131,-133,-136,-138,-157,-157,-157,303,-48,-157,-157,310,-159,-160,-117,-161,-162,-123,-119,-108,-142,-143,-144,-145,-146,-176,-177,-129,-132,-137,-147,-122,324,-62,-106,-32,-33,-36,-46,-47,-89,-91,229,342,229,229,349,350,-157,-157,-86,357,-157,-34,-35,368,-42,369,-92,-52,-55,371,372,373,374,375,-107,-110,-72,-61,-64,-54,-157,-157,-157,395,-30,401,402,403,-109,-111,-112,-73,-63,405,406,409,411,]),'USES':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,28,30,34,35,37,38,40,41,70,72,74,76,84,86,88,180,181,210,213,214,215,216,217,218,227,235,242,243,244,245,303,304,310,313,318,319,325,341,349,350,369,372,373,374,375,377,378,379,390,391,401,402,403,408,],[-157,18,-3,18,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,62,-77,-169,-170,-26,-27,-21,-22,-18,-171,-28,-23,-157,-93,62,62,62,62,62,-172,-173,-174,-175,-29,-24,-157,-157,-80,-83,-157,-157,-17,-157,-15,62,62,62,-16,-79,-82,-157,-157,-157,-78,-81,62,62,62,-12,-13,-84,-85,-157,-14,]),'CONST':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,70,72,74,76,84,86,214,215,216,217,218,227,235,242,243,244,245,303,304,310,313,341,349,350,369,372,373,374,375,390,391,401,402,403,408,],[-157,19,-3,19,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,-77,-169,-170,-26,-27,-21,-22,-18,-171,-28,-23,-157,-93,-172,-173,-174,-175,-29,-24,-157,-157,-80,-83,-157,-157,-17,-157,-15,-16,-79,-82,-157,-157,-157,-78,-81,-12,-13,-84,-85,-157,-14,]),'TYPE':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,70,72,74,76,84,86,214,215,216,217,218,227,235,242,243,244,245,303,304,310,313,341,349,350,369,372,373,374,375,390,391,401,402,403,408,],[-157,20,-3,20,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,-77,-169,-170,-26,-27,-21,-22,-18,-171,-28,-23,-157,-93,-172,-173,-174,-175,-29,-24,-157,-157,-80,-83,-157,-157,-17,-157,-15,-16,-79,-82,-157,-157,-157,-78,-81,-12,-13,-84,-85,-157,-14,]),'VAR':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,49,50,51,52,53,54,55,56,57,58,63,70,72,74,76,78,80,83,84,86,102,104,105,106,108,109,110,111,122,125,128,129,131,132,133,134,135,137,146,148,149,152,153,154,157,165,166,168,175,176,180,196,197,199,202,204,210,213,214,215,216,217,218,222,223,227,229,232,234,235,239,240,242,243,244,245,247,248,249,250,254,257,258,260,262,263,264,265,266,267,268,269,270,271,272,274,279,282,283,294,296,297,303,304,305,310,313,318,319,320,323,326,329,331,337,341,342,343,344,349,350,353,354,357,360,361,365,366,367,369,371,372,373,374,375,377,378,379,381,382,384,385,386,390,391,392,393,394,395,401,402,403,408,],[-157,21,-3,21,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,-77,-169,-170,-26,-27,-21,-22,-97,-98,-99,-100,-101,-102,-103,-104,-105,-158,-124,-18,-171,-28,-23,143,151,151,-157,-93,-130,-157,-157,-87,-148,-149,-150,-116,-43,-31,151,151,-37,-38,-39,-40,-41,-75,151,-49,-50,-56,-57,-58,151,-113,-114,-118,-168,-115,-157,-178,-131,-133,-136,-138,-157,-157,-172,-173,-174,-175,-29,151,151,-24,143,143,-48,-157,143,143,-157,-80,-83,-157,-159,-160,-117,-161,-162,-123,-119,-108,-142,-143,-144,-145,-146,-176,-177,-129,-132,-137,-147,-122,-106,-32,-33,-36,-46,-47,-157,-17,-51,-157,-15,-157,-157,-86,-74,151,-34,-35,-42,-16,-52,-55,-53,-79,-82,-107,-110,-72,151,151,151,151,151,-157,-54,-157,-157,-78,-81,-157,-157,-157,151,-30,151,151,151,-12,-13,-109,-111,-112,-73,-84,-85,-157,-14,]),'FUNCTION':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,49,50,51,52,53,54,55,56,57,58,63,70,72,74,76,84,86,102,104,105,106,108,109,110,111,122,125,129,131,132,133,134,135,137,148,149,152,153,154,165,166,168,175,176,180,196,197,199,202,204,210,213,214,215,216,217,218,223,227,234,235,242,243,244,245,247,248,249,250,254,257,258,260,262,263,264,265,266,267,268,269,270,271,272,274,279,282,283,287,288,289,294,296,297,303,304,305,310,313,318,319,320,323,329,331,332,337,341,342,343,344,349,350,353,354,357,368,369,371,372,373,374,375,377,378,379,382,390,391,392,393,394,395,401,402,403,405,406,408,411,],[-157,23,-3,23,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,-77,-169,-170,-26,-27,-21,-22,-97,-98,-99,-100,-101,-102,-103,-104,-105,-158,-124,-18,-171,-28,-23,-157,-93,-130,-157,-157,-87,-148,-149,-150,-116,-43,-31,-157,-37,-38,-39,-40,-41,-75,-49,-50,-56,-57,-58,-113,-114,-118,-168,-115,-157,-178,-131,-133,-136,-138,-157,-157,-172,-173,-174,-175,-29,292,-24,-48,-157,-157,-80,-83,-157,-159,-160,-117,-161,-162,-123,-119,-108,-142,-143,-144,-145,-146,-176,-177,-129,-132,-137,-147,-122,-106,-32,-33,292,-66,-67,-36,-46,-47,-157,-17,-51,-157,-15,-157,-157,-86,-74,-34,-35,-65,-42,-16,-52,-55,-53,-79,-82,-107,-110,-72,-71,-157,-54,-157,-157,-78,-81,-157,-157,-157,-30,-12,-13,-109,-111,-112,-73,-84,-85,-157,-68,-69,-14,-70,]),'CONSTRUCTOR':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,49,50,51,52,53,54,55,56,57,58,63,70,72,74,76,84,86,102,104,105,106,108,109,110,111,122,125,129,131,132,133,134,135,137,148,149,152,153,154,165,166,168,175,176,180,196,197,199,202,204,210,213,214,215,216,217,218,223,227,234,235,242,243,244,245,247,248,249,250,254,257,258,260,262,263,264,265,266,267,268,269,270,271,272,274,279,282,283,287,288,289,294,296,297,303,304,305,310,313,318,319,320,323,329,331,332,337,341,342,343,344,349,350,353,354,357,368,369,371,372,373,374,375,377,378,379,382,390,391,392,393,394,395,401,402,403,405,406,408,411,],[-157,24,-3,24,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,-77,-169,-170,-26,-27,-21,-22,-97,-98,-99,-100,-101,-102,-103,-104,-105,-158,-124,-18,-171,-28,-23,-157,-93,-130,-157,-157,-87,-148,-149,-150,-116,-43,-31,-157,-37,-38,-39,-40,-41,-75,-49,-50,-56,-57,-58,-113,-114,-118,-168,-115,-157,-178,-131,-133,-136,-138,-157,-157,-172,-173,-174,-175,-29,290,-24,-48,-157,-157,-80,-83,-157,-159,-160,-117,-161,-162,-123,-119,-108,-142,-143,-144,-145,-146,-176,-177,-129,-132,-137,-147,-122,-106,-32,-33,290,-66,-67,-36,-46,-47,-157,-17,-51,-157,-15,-157,-157,-86,-74,-34,-35,-65,-42,-16,-52,-55,-53,-79,-82,-107,-110,-72,-71,-157,-54,-157,-157,-78,-81,-157,-157,-157,-30,-12,-13,-109,-111,-112,-73,-84,-85,-157,-68,-69,-14,-70,]),'PROCEDURE':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,49,50,51,52,53,54,55,56,57,58,63,70,72,74,76,84,86,102,104,105,106,108,109,110,111,122,125,129,131,132,133,134,135,137,148,149,152,153,154,165,166,168,175,176,180,196,197,199,202,204,210,213,214,215,216,217,218,223,227,234,235,242,243,244,245,247,248,249,250,254,257,258,260,262,263,264,265,266,267,268,269,270,271,272,274,279,282,283,287,288,289,294,296,297,303,304,305,310,313,318,319,320,323,329,331,332,337,341,342,343,344,349,350,353,354,357,368,369,371,372,373,374,375,377,378,379,382,390,391,392,393,394,395,401,402,403,405,406,408,411,],[-157,25,-3,25,-2,-4,-5,-6,-7,31,-9,-10,-11,-76,-25,-77,-169,-170,-26,-27,-21,-22,-97,-98,-99,-100,-101,-102,-103,-104,-105,-158,-124,-18,-171,-28,-23,-157,-93,-130,-157,-157,-87,-148,-149,-150,-116,-43,-31,-157,-37,-38,-39,-40,-41,-75,-49,-50,-56,-57,-58,-113,-114,-118,-168,-115,-157,-178,-131,-133,-136,-138,-157,-157,-172,-173,-174,-175,-29,291,-24,-48,-157,-157,-80,-83,-157,-159,-160,-117,-161,-162,-123,-119,-108,-142,-143,-144,-145,-146,-176,-177,-129,-132,-137,-147,-122,-106,-32,-33,291,-66,-67,-36,-46,-47,-157,-17,-51,-157,-15,-157,-157,-86,-74,-34,-35,-65,-42,-16,-52,-55,-53,-79,-82,-107,-110,-72,-71,-157,-54,-157,-157,-78,-81,-157,-157,-157,-30,-12,-13,-109,-111,-112,-73,-84,-85,-157,-68,-69,-14,-70,]),'DESTRUCTOR':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,30,34,35,37,38,40,41,49,50,51,52,53,54,55,56,57,58,63,70,72,74,76,84,86,102,104,105,106,108,109,110,111,122,125,129,131,132,133,134,135,137,148,149,152,153,154,165,166,168,175,176,180,196,197,199,202,204,210,213,214,215,216,217,218,223,227,234,235,242,243,244,245,247,248,249,250,254,257,258,260,262,263,264,265,266,267,268,269,270,271,272,274,279,282,283,287,288,289,294,296,297,303,304,305,310,313,318,319,320,323,329,331,332,337,341,342,343,344,349,350,353,354,357,368,369,371,372,373,374,375,377,378,379,382,390,391,392,393,394,395,401,402,403,405,406,408,411,],[-157,26,-3,26,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,-77,-169,-170,-26,-27,-21,-22,-97,-98,-99,-100,-101,-102,-103,-104,-105,-158,-124,-18,-171,-28,-23,-157,-93,-130,-157,-157,-87,-148,-149,-150,-116,-43,-31,-157,-37,-38,-39,-40,-41,-75,-49,-50,-56,-57,-58,-113,-114,-118,-168,-115,-157,-178,-131,-133,-136,-138,-157,-157,-172,-173,-174,-175,-29,293,-24,-48,-157,-157,-80,-83,-157,-159,-160,-117,-161,-162,-123,-119,-108,-142,-143,-144,-145,-146,-176,-177,-129,-132,-137,-147,-122,-106,-32,-33,293,-66,-67,-36,-46,-47,-157,-17,-51,-157,-15,-157,-157,-86,-74,-34,-35,-65,-42,-16,-52,-55,-53,-79,-82,-107,-110,-72,-71,-157,-54,-157,-157,-78,-81,-157,-157,-157,-30,-12,-13,-109,-111,-112,-73,-84,-85,-157,-68,-69,-14,-70,]),'BEGIN':([4,5,6,7,9,10,11,12,13,14,15,16,17,22,27,28,30,34,35,37,38,40,41,70,72,74,76,84,86,88,180,181,210,213,214,215,216,217,218,227,235,242,243,244,245,303,304,310,313,318,319,325,341,349,350,369,372,373,374,375,377,378,379,390,391,401,402,403,408,],[-157,-157,-3,28,-2,-4,-5,-6,-7,-8,-9,-10,-11,-76,-25,28,-77,-169,-170,-26,-27,-21,-22,-18,-171,-28,-23,-157,-93,28,28,28,28,28,-172,-173,-174,-175,-29,-24,-157,-157,-80,-83,-157,-157,-17,-157,-15,28,28,28,-16,-79,-82,-157,-157,-157,-78,-81,28,28,28,-12,-13,-84,-85,-157,-14,]),'DOT':([8,27,43,44,45,46,59,63,86,108,111,115,116,145,163,164,168,249,258,330,],[29,-25,79,81,82,85,94,-116,-93,94,-116,94,-116,-116,94,94,-118,-117,-119,-116,]),'READLN':([28,88,180,181,210,213,318,319,325,377,378,379,],[58,58,58,58,58,58,58,58,58,58,58,58,]),'WRITE':([28,88,180,181,210,213,318,319,325,377,378,379,],[60,60,60,60,60,60,60,60,60,60,60,60,]),'WRITELN':([28,88,180,181,210,213,318,319,325,377,378,379,],[61,61,61,61,61,61,61,61,61,61,61,61,]),'IF':([28,49,50,51,52,53,54,55,56,57,58,63,80,83,86,88,102,104,105,106,108,109,110,111,122,125,128,129,131,132,133,134,135,137,146,148,149,152,153,154,157,165,166,168,175,176,180,181,196,197,199,202,204,210,213,222,223,234,247,248,249,250,254,257,258,260,262,263,264,265,266,267,268,269,270,271,272,274,279,282,283,294,296,297,305,318,319,320,323,325,326,329,331,337,342,343,344,353,354,357,360,361,365,366,367,371,377,378,379,381,382,384,385,386,392,393,394,395,],[64,-97,-98,-99,-100,-101,-102,-103,-104,-105,-158,-124,64,64,-93,64,-130,-157,-157,-87,-148,-149,-150,-116,-43,-31,64,64,-37,-38,-39,-40,-41,-75,64,-49,-50,-56,-57,-58,64,-113,-114,-118,-168,-115,64,64,-178,-131,-133,-136,-138,64,64,64,64,-48,-159,-160,-117,-161,-162,-123,-119,-108,-142,-143,-144,-145,-146,-176,-177,-129,-132,-137,-147,-122,-106,-32,-33,-36,-46,-47,-51,64,64,-86,-74,64,64,-34,-35,-42,-52,-55,-53,-107,-110,-72,64,64,64,64,64,-54,64,64,64,64,-30,64,64,64,-109,-111,-112,-73,]),'WHILE':([28,88,180,181,210,213,318,319,325,377,378,379,],[65,65,65,65,65,65,65,65,65,65,65,65,]),'FOR':([28,88,180,181,210,213,318,319,325,377,378,379,],[66,66,66,66,66,66,66,66,66,66,66,66,]),'CASE':([28,49,50,51,52,53,54,55,56,57,58,63,80,83,86,88,102,104,105,106,108,109,110,111,122,125,128,129,131,132,133,134,135,137,146,148,149,152,153,154,157,165,166,168,175,176,180,181,196,197,199,202,204,210,213,222,223,234,247,248,249,250,254,257,258,260,262,263,264,265,266,267,268,269,270,271,272,274,279,282,283,294,296,297,305,318,319,320,323,325,326,329,331,337,342,343,344,353,354,357,360,361,365,366,367,371,377,378,379,381,382,384,385,386,392,393,394,395,],[67,-97,-98,-99,-100,-101,-102,-103,-104,-105,-158,-124,67,67,-93,67,-130,-157,-157,-87,-148,-149,-150,-116,-43,-31,67,67,-37,-38,-39,-40,-41,-75,67,-49,-50,-56,-57,-58,67,-113,-114,-118,-168,-115,67,67,-178,-131,-133,-136,-138,67,67,285,67,-48,-159,-160,-117,-161,-162,-123,-119,-108,-142,-143,-144,-145,-146,-176,-177,-129,-132,-137,-147,-122,-106,-32,-33,-36,-46,-47,-51,67,67,-86,-74,67,67,-34,-35,-42,-52,-55,-53,-107,-110,-72,67,67,67,67,67,-54,67,67,67,67,-30,67,67,67,-109,-111,-112,-73,]),'WITH':([28,88,180,181,210,213,318,319,325,377,378,379,],[68,68,68,68,68,68,68,68,68,68,68,68,]),'END':([28,47,48,49,50,51,52,53,54,55,56,57,58,63,86,87,88,89,102,104,105,106,108,109,110,111,122,125,128,129,131,132,133,134,135,137,148,149,152,153,154,162,165,166,168,175,176,180,196,197,199,202,204,210,213,222,223,234,246,247,248,249,250,254,257,258,260,262,263,264,265,266,267,268,269,270,271,272,274,276,277,279,282,283,284,286,287,288,289,294,296,297,305,318,319,320,323,325,326,329,331,332,337,342,343,344,353,354,357,358,359,361,368,371,377,378,379,382,392,393,394,395,396,405,406,409,411,],[-157,86,-157,-97,-98,-99,-100,-101,-102,-103,-104,-105,-158,-124,-93,-94,-157,-96,-130,-157,-157,-87,-148,-149,-150,-116,-43,-31,-157,-157,-37,-38,-39,-40,-41,-75,-49,-50,-56,-57,-58,-157,-113,-114,-118,-168,-115,-157,-178,-131,-133,-136,-138,-157,-157,-157,-157,-48,-95,-159,-160,-117,-161,-162,-123,-119,-108,-142,-143,-144,-145,-146,-176,-177,-129,-132,-137,-147,-122,323,-62,-106,-32,-33,329,-60,331,-66,-67,-36,-46,-47,-51,-157,-157,-86,-74,-157,-157,-34,-35,-65,-42,-52,-55,-53,-107,-110,-72,-61,380,-64,-71,-54,-157,-157,-157,-30,-109,-111,-112,-73,-63,-68,-69,-59,-70,]),'COMMA':([32,33,42,102,104,105,106,108,109,110,111,117,142,145,150,168,170,172,173,174,178,179,196,197,199,202,204,224,231,238,249,258,262,263,264,265,266,267,268,269,270,271,272,280,281,296,297,314,315,316,317,320,363,376,],[71,-19,71,-130,-157,-157,-87,-148,-149,-150,-116,-20,71,-19,71,-118,252,255,-163,-165,259,-120,-178,-131,-133,-136,-138,71,71,71,-117,-119,-142,-143,-144,-145,-146,-176,-177,-129,-132,-137,-147,328,-45,-46,-47,252,-164,-166,-121,-86,-44,-167,]),'COLON':([33,42,102,104,105,106,108,109,110,111,117,142,145,150,168,174,196,197,199,202,204,228,231,238,249,258,262,263,264,265,266,267,268,269,270,271,272,278,316,320,330,340,400,],[-19,77,-130,-157,-157,-87,-148,-149,-150,-116,-20,230,-19,236,-118,256,-178,-131,-133,-136,-138,298,301,307,-117,-119,-142,-143,-144,-145,-146,-176,-177,-129,-132,-137,-147,326,352,-86,364,370,407,]),'RPAREN':([33,49,50,51,52,53,54,55,56,57,58,63,78,80,83,86,95,99,102,104,105,106,108,109,110,111,116,117,122,125,131,132,133,134,135,137,139,140,141,146,148,149,152,153,154,157,163,165,166,168,169,170,171,172,173,174,175,176,177,180,196,197,199,202,204,208,209,210,213,224,232,234,239,240,247,248,249,250,251,253,254,257,258,260,262,263,264,265,266,267,268,269,270,271,272,273,274,279,282,283,294,296,297,299,300,302,305,306,308,309,314,315,316,318,319,320,323,329,331,337,339,342,343,344,351,353,354,357,360,365,366,367,371,376,377,378,379,381,382,384,385,386,392,393,394,395,],[-19,-97,-98,-99,-100,-101,-102,-103,-104,-105,-158,-124,-157,147,158,-93,-157,-157,-130,-157,-157,-87,-148,-149,-150,-116,-116,-20,-43,-31,-37,-38,-39,-40,-41,-75,228,-88,-90,233,-49,-50,-56,-57,-58,241,247,-113,-114,-118,250,-157,-128,254,-163,-165,-168,-115,257,-157,-178,-131,-133,-136,-138,272,-157,-157,-157,294,-157,-48,-157,-157,-159,-160,-117,-161,-125,-127,-162,-123,-119,-108,-142,-143,-144,-145,-146,-176,-177,-129,-132,-137,-147,320,-122,-106,-32,-33,-36,-46,-47,-89,-91,340,-51,343,345,346,-157,-164,-166,-157,-157,-86,-74,-34,-35,-42,-92,-52,-55,-53,-126,-107,-110,-72,-157,-157,-157,-157,-54,-167,-157,-157,-157,396,-30,398,399,400,-109,-111,-112,-73,]),'EQUAL':([36,39,102,104,105,106,108,109,110,111,168,197,199,202,204,249,258,270,271,272,320,330,],[73,75,194,-157,-157,-87,-148,-149,-150,-116,-118,-131,-133,-136,-138,-117,-119,-132,-137,-147,-86,-116,]),'LPAREN':([43,44,45,58,60,61,63,64,65,67,69,75,77,92,93,95,96,98,99,100,103,107,111,117,144,145,150,155,156,182,183,184,185,186,187,188,189,190,191,192,193,194,195,198,200,201,203,205,206,207,209,211,220,221,230,236,252,255,256,259,285,298,301,307,321,322,326,330,333,334,335,352,362,364,370,407,],[78,80,83,90,95,96,99,107,107,107,83,130,130,107,107,107,107,107,107,107,107,107,209,-20,232,-19,237,239,240,107,107,107,107,107,107,107,107,-151,-152,-153,-154,-155,-156,107,-134,-135,107,-139,-140,-141,107,107,130,130,130,130,107,107,107,107,107,130,130,130,107,107,360,209,365,366,367,107,130,130,130,130,]),'ELSE':([49,50,51,52,53,54,55,56,57,58,63,86,102,104,105,106,108,109,110,111,122,125,131,132,133,134,135,137,148,149,152,153,154,165,166,168,175,176,180,196,197,199,202,204,210,213,234,247,248,249,250,254,257,258,260,262,263,264,265,266,267,268,269,270,271,272,274,276,277,279,282,283,294,296,297,305,318,319,320,323,326,329,331,337,342,343,344,353,354,357,358,361,371,377,378,379,382,392,393,394,395,396,],[-97,-98,-99,-100,-101,-102,-103,-104,-105,-158,-124,-93,-130,-157,-157,-87,-148,-149,-150,-116,-43,-31,-37,-38,-39,-40,-41,-75,-49,-50,-56,-57,-58,-113,-114,-118,-168,-115,-157,-178,-131,-133,-136,-138,-157,-157,-48,-159,-160,-117,-161,-162,-123,-119,318,-142,-143,-144,-145,-146,-176,-177,-129,-132,-137,-147,-122,325,-62,-106,-32,-33,-36,-46,-47,-51,-157,-157,-86,-74,-157,-34,-35,-42,-52,-55,-53,-107,377,-72,-61,-64,-54,-157,-157,-157,-30,-109,-111,-112,-73,-63,]),'THEN':([49,50,51,52,53,54,55,56,57,58,63,86,101,102,104,105,106,108,109,110,111,165,166,168,175,176,180,181,196,197,199,202,204,210,213,247,248,249,250,254,257,258,260,261,262,263,264,265,266,267,268,269,270,271,272,274,279,318,319,320,323,353,354,357,377,378,379,392,393,394,395,],[-97,-98,-99,-100,-101,-102,-103,-104,-105,-158,-124,-93,180,-130,-157,-157,-87,-148,-149,-150,-116,-113,-114,-118,-168,-115,-157,-157,-178,-131,-133,-136,-138,-157,-157,-159,-160,-117,-161,-162,-123,-119,-108,319,-142,-143,-144,-145,-146,-176,-177,-129,-132,-137,-147,-122,-106,-157,-157,-86,-74,-107,-110,-72,-157,-157,-157,-109,-111,-112,-73,]),'LBRACKET':([58,59,63,108,111,115,116,124,135,145,163,164,168,249,258,330,],[91,93,100,93,100,93,100,219,225,100,93,93,-118,-117,-119,100,]),'COLON_EQUAL':([59,63,113,145,168,249,258,],[92,98,211,98,-118,-117,-119,]),'NOT':([64,65,67,92,93,95,96,98,99,100,103,107,182,183,184,185,186,187,188,209,211,252,255,256,259,285,321,322,352,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'NUMBER':([64,65,67,73,75,77,92,93,95,96,98,99,100,103,107,182,183,184,185,186,187,188,189,190,191,192,193,194,195,198,200,201,203,205,206,207,209,211,212,219,220,221,225,226,230,236,252,255,256,259,285,298,301,307,321,322,324,328,352,362,364,370,397,407,409,],[109,109,109,119,136,136,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,-151,-152,-153,-154,-155,-156,109,-134,-135,109,-139,-140,-141,109,109,278,136,136,136,295,296,136,136,109,109,109,109,109,136,136,136,109,109,278,136,109,136,136,136,278,136,278,]),'STRING_LITERAL':([64,65,67,73,92,93,95,96,98,99,100,103,107,182,183,184,185,186,187,188,189,190,191,192,193,194,195,198,200,201,203,205,206,207,209,211,237,252,255,256,259,285,321,322,352,],[110,110,110,120,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,-151,-152,-153,-154,-155,-156,110,-134,-135,110,-139,-140,-141,110,110,306,110,110,110,110,110,110,110,110,]),'CHARACTER_LITERAL':([73,],[118,]),'BOOLEAN_LITERAL':([73,75,77,92,220,221,230,236,298,301,307,362,364,370,407,],[121,131,131,166,131,131,131,131,131,131,131,131,131,131,131,]),'ARRAY':([75,77,220,221,230,236,298,301,307,362,364,370,407,],[124,124,124,124,124,124,124,124,124,124,124,124,124,]),'FILE':([75,77,220,221,230,236,298,301,307,362,364,370,407,],[126,126,126,126,126,126,126,126,126,126,126,126,126,]),'SET':([75,77,220,221,230,236,298,301,307,362,364,370,407,],[127,127,127,127,127,127,127,127,127,127,127,127,127,]),'RECORD':([75,77,220,221,230,236,298,301,307,362,364,370,407,],[128,128,128,128,128,128,128,128,128,128,128,128,128,]),'OBJECT':([75,77,220,221,230,236,298,301,307,362,364,370,407,],[129,129,129,129,129,129,129,129,129,129,129,129,129,]),'INTEGER':([75,77,220,221,230,236,298,301,307,362,364,370,407,],[132,132,132,132,132,132,132,132,132,132,132,132,132,]),'BYTE':([75,77,220,221,230,236,298,301,307,362,364,370,407,],[133,133,133,133,133,133,133,133,133,133,133,133,133,]),'CHAR':([75,77,220,221,230,236,298,301,307,362,364,370,407,],[134,134,134,134,134,134,134,134,134,134,134,134,134,]),'STRING':([75,77,220,221,230,236,298,301,307,362,364,370,407,],[135,135,135,135,135,135,135,135,135,135,135,135,135,]),'LONGINT':([75,77,220,221,230,236,298,301,307,362,364,370,407,],[137,137,137,137,137,137,137,137,137,137,137,137,137,]),'FORWARD':([84,242,310,369,],[160,312,348,388,]),'IN':([101,102,104,105,106,108,109,110,111,168,196,197,199,202,204,249,258,262,263,264,265,266,267,268,269,270,271,272,320,],[181,-130,-157,-157,-87,-148,-149,-150,-116,-118,-178,-131,-133,-136,-138,-117,-119,-142,-143,-144,-145,-146,-176,-177,-129,-132,-137,-147,-86,]),'PLUS':([101,102,104,105,106,108,109,110,111,112,114,165,167,168,170,174,176,179,196,197,199,202,204,208,249,258,262,263,264,265,266,267,268,269,270,271,272,275,314,316,317,320,330,355,356,376,],[182,-130,200,-157,-87,-148,-149,-150,-116,182,182,182,182,-118,182,182,182,182,182,-131,-133,-136,-138,182,-117,-119,182,182,182,182,182,182,182,-129,-132,-137,-147,182,182,182,182,-86,-116,182,182,182,]),'MINUS':([101,102,104,105,106,108,109,110,111,112,114,165,167,168,170,174,176,179,196,197,199,202,204,208,249,258,262,263,264,265,266,267,268,269,270,271,272,275,314,316,317,320,330,355,356,376,],[183,-130,201,-157,-87,-148,-149,-150,-116,183,183,183,183,-118,183,183,183,183,183,-131,-133,-136,-138,183,-117,-119,183,183,183,183,183,183,183,-129,-132,-137,-147,183,183,183,183,-86,-116,183,183,183,]),'TIMES':([101,102,104,105,106,108,109,110,111,112,114,165,167,168,170,174,176,179,196,197,199,202,204,208,249,258,262,263,264,265,266,267,268,269,270,271,272,275,314,316,317,320,330,355,356,376,],[184,-130,-157,205,-87,-148,-149,-150,-116,184,184,184,184,-118,184,184,184,184,184,-131,-133,-136,-138,184,-117,-119,184,184,184,184,184,184,184,-129,-132,-137,-147,184,184,184,184,-86,-116,184,184,184,]),'DIVIDE':([101,102,104,105,106,108,109,110,111,112,114,165,167,168,170,174,176,179,196,197,199,202,204,208,249,258,262,263,264,265,266,267,268,269,270,271,272,275,314,316,317,320,330,355,356,376,],[185,-130,-157,206,-87,-148,-149,-150,-116,185,185,185,185,-118,185,185,185,185,185,-131,-133,-136,-138,185,-117,-119,185,185,185,185,185,185,185,-129,-132,-137,-147,185,185,185,185,-86,-116,185,185,185,]),'MOD':([101,102,104,105,106,108,109,110,111,112,114,165,167,168,170,174,176,179,196,197,199,202,204,208,249,258,262,263,264,265,266,267,268,269,270,271,272,275,314,316,317,320,330,355,356,376,],[186,-130,-157,-157,-87,-148,-149,-150,-116,186,186,186,186,-118,186,186,186,186,186,-131,-133,-136,-138,186,-117,-119,186,186,186,186,186,186,186,-129,-132,-137,-147,186,186,186,186,-86,-116,186,186,186,]),'AND':([101,102,104,105,106,108,109,110,111,112,114,165,167,168,170,174,176,179,196,197,199,202,204,208,249,258,262,263,264,265,266,267,268,269,270,271,272,275,314,316,317,320,330,355,356,376,],[187,-130,-157,-157,-87,-148,-149,-150,-116,187,187,187,187,-118,187,187,187,187,187,-131,-133,-136,-138,187,-117,-119,187,187,187,187,187,187,187,-129,-132,-137,-147,187,187,187,187,-86,-116,187,187,187,]),'OR':([101,102,104,105,106,108,109,110,111,112,114,165,167,168,170,174,176,179,196,197,199,202,204,208,249,258,262,263,264,265,266,267,268,269,270,271,272,275,314,316,317,320,330,355,356,376,],[188,-130,-157,-157,-87,-148,-149,-150,-116,188,188,188,188,-118,188,188,188,188,188,-131,-133,-136,-138,188,-117,-119,188,188,188,188,188,188,188,-129,-132,-137,-147,188,188,188,188,-86,-116,188,188,188,]),'DO':([102,104,105,106,108,109,110,111,112,115,116,168,196,197,199,202,204,249,258,262,263,264,265,266,267,268,269,270,271,272,320,355,356,],[-130,-157,-157,-87,-148,-149,-150,-116,210,213,-116,-118,-178,-131,-133,-136,-138,-117,-119,-142,-143,-144,-145,-146,-176,-177,-129,-132,-137,-147,-86,378,379,]),'OF':([102,104,105,106,108,109,110,111,114,122,125,126,127,131,132,133,134,135,137,168,196,197,199,202,204,249,258,262,263,264,265,266,267,268,269,270,271,272,282,283,294,296,297,320,327,329,330,331,337,382,383,],[-130,-157,-157,-87,-148,-149,-150,-116,212,-43,-31,220,221,-37,-38,-39,-40,-41,-75,-118,-178,-131,-133,-136,-138,-117,-119,-142,-143,-144,-145,-146,-176,-177,-129,-132,-137,-147,-32,-33,-36,-46,-47,-86,362,-34,-116,-35,-42,-30,397,]),'RBRACKET':([102,104,105,106,108,109,110,111,116,164,167,168,178,179,196,197,199,202,204,249,258,262,263,264,265,266,267,268,269,270,271,272,280,281,295,296,297,317,320,363,],[-130,-157,-157,-87,-148,-149,-150,-116,-116,248,249,-118,258,-120,-178,-131,-133,-136,-138,-117,-119,-142,-143,-144,-145,-146,-176,-177,-129,-132,-137,-147,327,-45,337,-46,-47,-121,-86,-44,]),'TO':([102,104,105,106,108,109,110,111,168,196,197,199,202,204,249,258,262,263,264,265,266,267,268,269,270,271,272,275,320,],[-130,-157,-157,-87,-148,-149,-150,-116,-118,-178,-131,-133,-136,-138,-117,-119,-142,-143,-144,-145,-146,-176,-177,-129,-132,-137,-147,321,-86,]),'DOWNTO':([102,104,105,106,108,109,110,111,168,196,197,199,202,204,249,258,262,263,264,265,266,267,268,269,270,271,272,275,320,],[-130,-157,-157,-87,-148,-149,-150,-116,-118,-178,-131,-133,-136,-138,-117,-119,-142,-143,-144,-145,-146,-176,-177,-129,-132,-137,-147,322,-86,]),'LESS':([102,104,105,106,108,109,110,111,168,197,199,202,204,249,258,270,271,272,320,330,],[190,-157,-157,-87,-148,-149,-150,-116,-118,-131,-133,-136,-138,-117,-119,-132,-137,-147,-86,-116,]),'LESS_EQUAL':([102,104,105,106,108,109,110,111,168,197,199,202,204,249,258,270,271,272,320,330,],[191,-157,-157,-87,-148,-149,-150,-116,-118,-131,-133,-136,-138,-117,-119,-132,-137,-147,-86,-116,]),'GREAT':([102,104,105,106,108,109,110,111,168,197,199,202,204,249,258,270,271,272,320,330,],[192,-157,-157,-87,-148,-149,-150,-116,-118,-131,-133,-136,-138,-117,-119,-132,-137,-147,-86,-116,]),'GREAT_EQUAL':([102,104,105,106,108,109,110,111,168,197,199,202,204,249,258,270,271,272,320,330,],[193,-157,-157,-87,-148,-149,-150,-116,-118,-131,-133,-136,-138,-117,-119,-132,-137,-147,-86,-116,]),'DIFFERENT':([102,104,105,106,108,109,110,111,168,197,199,202,204,249,258,270,271,272,320,330,],[195,-157,-157,-87,-148,-149,-150,-116,-118,-131,-133,-136,-138,-117,-119,-132,-137,-147,-86,-116,]),'DIV':([105,106,108,109,110,111,168,249,258,272,320,330,],[207,-87,-148,-149,-150,-116,-118,-117,-119,-147,-86,-116,]),'DOTDOT':([136,],[226,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_sections':([4,5,84,235,242,245,303,310,369,372,373,403,],[5,7,7,7,7,7,7,7,7,7,7,7,]),'empty':([4,5,28,48,78,80,83,84,88,95,99,104,105,128,129,162,170,180,181,209,210,213,222,223,232,235,239,240,242,245,303,310,314,318,319,325,326,360,365,366,367,369,372,373,377,378,379,403,],[6,6,57,89,141,149,149,6,57,171,171,199,204,149,149,89,253,57,57,171,57,57,286,289,141,6,141,141,6,6,6,6,253,57,57,57,149,149,149,149,149,6,6,6,57,57,57,6,]),'block':([5,84,235,242,245,303,310,369,372,373,403,],[8,159,304,311,313,341,347,387,390,391,408,]),'declaration_section':([5,7,],[9,9,]),'uses_opt':([5,7,],[10,10,]),'constant_declaration':([5,7,],[11,11,]),'type_declaration':([5,7,],[12,12,]),'var_declaration':([5,7,],[13,13,]),'procedure_declarations':([5,7,],[14,14,]),'function_declaration':([5,7,],[15,15,]),'constructor_declaration':([5,7,],[16,16,]),'method_declaration':([5,7,],[17,17,]),'procedure_declaration':([5,7,14,],[22,22,30,]),'compound_statement':([7,28,88,180,181,210,213,318,319,325,377,378,379,],[27,53,53,53,53,53,53,53,53,53,53,53,53,]),'id_list':([18,21,40,78,80,83,128,129,130,143,146,151,157,222,223,229,232,239,240,326,360,361,365,366,367,381,384,385,386,],[32,42,42,142,150,150,150,150,224,231,150,238,150,150,150,142,142,142,142,150,150,150,150,150,150,150,150,150,150,]),'constant_list':([19,],[34,]),'constant':([19,34,],[35,72,]),'type_list':([20,],[37,]),'type_definition':([20,37,],[38,74,]),'declaration_list':([21,],[40,]),'declaration':([21,40,],[41,76,]),'statement_list':([28,],[47,]),'statement':([28,88,180,181,210,213,318,319,325,377,378,379,],[48,162,260,261,274,279,353,354,359,392,393,394,]),'if_statement':([28,80,83,88,128,129,146,157,180,181,210,213,222,223,318,319,325,326,360,361,365,366,367,377,378,379,381,384,385,386,],[49,152,152,49,152,152,152,152,49,49,49,49,152,152,49,49,49,152,152,152,152,152,152,49,49,49,152,152,152,152,]),'assignment_statement':([28,80,83,88,128,129,146,157,180,181,210,213,222,223,318,319,325,326,360,361,365,366,367,377,378,379,381,384,385,386,],[50,154,154,50,154,154,154,154,50,50,50,50,154,154,50,50,50,154,154,154,154,154,154,50,50,50,154,154,154,154,]),'while_statement':([28,88,180,181,210,213,318,319,325,377,378,379,],[51,51,51,51,51,51,51,51,51,51,51,51,]),'procedure_call':([28,88,180,181,210,213,318,319,325,377,378,379,],[52,52,52,52,52,52,52,52,52,52,52,52,]),'for_statement':([28,88,180,181,210,213,318,319,325,377,378,379,],[54,54,54,54,54,54,54,54,54,54,54,54,]),'case_statement':([28,80,83,88,128,129,146,157,180,181,210,213,222,223,318,319,325,326,360,361,365,366,367,377,378,379,381,384,385,386,],[55,153,153,55,153,153,153,153,55,55,55,55,153,153,55,55,55,153,153,153,153,153,153,55,55,55,153,153,153,153,]),'with_statement':([28,88,180,181,210,213,318,319,325,377,378,379,],[56,56,56,56,56,56,56,56,56,56,56,56,]),'variable':([28,64,65,67,68,80,83,88,90,91,92,93,95,96,98,99,100,103,107,128,129,146,157,180,181,182,183,184,185,186,187,188,189,198,203,209,210,211,213,222,223,252,255,256,259,285,318,319,321,322,325,326,352,360,361,365,366,367,377,378,379,381,384,385,386,],[59,108,108,108,115,59,59,59,163,164,108,108,108,108,108,108,108,108,108,59,59,59,59,59,59,108,108,108,108,108,108,108,108,108,108,108,59,108,59,59,59,108,108,108,108,108,59,59,108,108,59,59,108,59,59,59,59,59,59,59,59,59,59,59,59,]),'statement_list_tail':([48,162,],[87,246,]),'expression':([64,65,67,92,93,95,96,98,99,100,103,107,182,183,184,185,186,187,188,209,211,252,255,256,259,285,321,322,352,],[101,112,114,165,167,170,174,176,170,179,196,208,262,263,264,265,266,267,268,170,275,314,174,316,317,114,355,356,376,]),'simple_expression':([64,65,67,92,93,95,96,98,99,100,103,107,182,183,184,185,186,187,188,189,209,211,252,255,256,259,285,321,322,352,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,269,102,102,102,102,102,102,102,102,102,102,]),'term':([64,65,67,92,93,95,96,98,99,100,103,107,182,183,184,185,186,187,188,189,198,209,211,252,255,256,259,285,321,322,352,],[104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,270,104,104,104,104,104,104,104,104,104,104,]),'factor':([64,65,67,92,93,95,96,98,99,100,103,107,182,183,184,185,186,187,188,189,198,203,209,211,252,255,256,259,285,321,322,352,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,271,105,105,105,105,105,105,105,105,105,105,]),'function_call':([64,65,67,92,93,95,96,98,99,100,103,107,182,183,184,185,186,187,188,189,198,203,209,211,252,255,256,259,285,321,322,352,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'type_specifier':([75,77,220,221,230,236,298,301,307,362,364,370,407,],[123,138,282,283,300,305,338,339,344,382,383,389,410,]),'subrange':([75,77,219,220,221,230,236,298,301,307,328,362,364,370,407,],[125,125,281,125,125,125,125,125,125,125,363,125,125,125,125,]),'parameter_list':([78,232,239,240,],[139,302,308,309,]),'parameter':([78,229,232,239,240,],[140,299,140,140,140,]),'field_list':([80,83,128,129,326,360,365,366,367,],[146,157,222,223,361,381,384,385,386,]),'field':([80,83,128,129,146,157,222,223,326,360,361,365,366,367,381,384,385,386,],[148,148,148,148,234,234,234,234,148,148,234,148,148,148,234,234,234,234,]),'expression_list':([95,99,209,],[169,177,273,]),'write_arguments':([96,],[172,]),'write_argument':([96,255,],[173,315,]),'index_list':([100,],[178,]),'relop':([102,],[189,]),'simple_expression_tail':([104,],[197,]),'addop':([104,],[198,]),'term_tail':([105,],[202,]),'mulop':([105,],[203,]),'expression_list_tail':([170,314,],[251,351,]),'case_list':([212,397,],[276,404,]),'case_element':([212,324,397,409,],[277,358,277,358,]),'type_expression':([219,],[280,]),'case_part':([222,],[284,]),'method_list':([223,],[287,]),'method':([223,287,],[288,332,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON declaration_sections block DOT','program',6,'p_program','Parser_MiniPascal.py',18),
  ('declaration_sections -> declaration_sections declaration_section','declaration_sections',2,'p_declaration_sections','Parser_MiniPascal.py',24),
  ('declaration_sections -> empty','declaration_sections',1,'p_declaration_sections','Parser_MiniPascal.py',25),
  ('declaration_section -> uses_opt','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',29),
  ('declaration_section -> constant_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',30),
  ('declaration_section -> type_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',31),
  ('declaration_section -> var_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',32),
  ('declaration_section -> procedure_declarations','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',33),
  ('declaration_section -> function_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',34),
  ('declaration_section -> constructor_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',35),
  ('declaration_section -> method_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',36),
  ('method_declaration -> CONSTRUCTOR ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block','method_declaration',9,'p_method_declaration','Parser_MiniPascal.py',40),
  ('method_declaration -> PROCEDURE ID DOT ID LPAREN parameter_list RPAREN SEMICOLON block','method_declaration',9,'p_method_declaration','Parser_MiniPascal.py',41),
  ('method_declaration -> FUNCTION ID DOT ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block','method_declaration',11,'p_method_declaration','Parser_MiniPascal.py',42),
  ('method_declaration -> DESTRUCTOR ID DOT ID SEMICOLON block','method_declaration',6,'p_method_declaration','Parser_MiniPascal.py',43),
  ('constructor_declaration -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON block','constructor_declaration',7,'p_constructor_declaration','Parser_MiniPascal.py',47),
  ('constructor_declaration -> CONSTRUCTOR ID LPAREN RPAREN SEMICOLON block','constructor_declaration',6,'p_constructor_declaration','Parser_MiniPascal.py',48),
  ('uses_opt -> USES id_list SEMICOLON','uses_opt',3,'p_uses_opt','Parser_MiniPascal.py',52),
  ('id_list -> ID','id_list',1,'p_id_list','Parser_MiniPascal.py',57),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','Parser_MiniPascal.py',58),
  ('var_declaration -> VAR declaration_list','var_declaration',2,'p_var_declaration','Parser_MiniPascal.py',62),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser_MiniPascal.py',66),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','Parser_MiniPascal.py',67),
  ('declaration -> id_list COLON type_specifier SEMICOLON','declaration',4,'p_declaration','Parser_MiniPascal.py',71),
  ('block -> declaration_sections compound_statement','block',2,'p_block','Parser_MiniPascal.py',76),
  ('type_declaration -> TYPE type_list','type_declaration',2,'p_type_declaration','Parser_MiniPascal.py',82),
  ('type_list -> type_definition','type_list',1,'p_type_list','Parser_MiniPascal.py',86),
  ('type_list -> type_list type_definition','type_list',2,'p_type_list','Parser_MiniPascal.py',87),
  ('type_definition -> ID EQUAL type_specifier SEMICOLON','type_definition',4,'p_type_definition','Parser_MiniPascal.py',95),
  ('type_specifier -> ARRAY LBRACKET type_expression RBRACKET OF type_specifier','type_specifier',6,'p_type_specifier','Parser_MiniPascal.py',99),
  ('type_specifier -> subrange','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',100),
  ('type_specifier -> FILE OF type_specifier','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',101),
  ('type_specifier -> SET OF type_specifier','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',102),
  ('type_specifier -> RECORD field_list case_part END','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',103),
  ('type_specifier -> OBJECT field_list method_list END','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',104),
  ('type_specifier -> LPAREN id_list RPAREN','type_specifier',3,'p_type_specifier','Parser_MiniPascal.py',105),
  ('type_specifier -> BOOLEAN_LITERAL','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',106),
  ('type_specifier -> INTEGER','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',107),
  ('type_specifier -> BYTE','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',108),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',109),
  ('type_specifier -> STRING','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',110),
  ('type_specifier -> STRING LBRACKET NUMBER RBRACKET','type_specifier',4,'p_type_specifier','Parser_MiniPascal.py',111),
  ('type_specifier -> ID','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',112),
  ('type_expression -> type_expression COMMA subrange','type_expression',3,'p_type_expression','Parser_MiniPascal.py',116),
  ('type_expression -> subrange','type_expression',1,'p_type_expression','Parser_MiniPascal.py',117),
  ('subrange -> NUMBER DOTDOT NUMBER','subrange',3,'p_subrange','Parser_MiniPascal.py',121),
  ('subrange -> NUMBER DOTDOT ID','subrange',3,'p_subrange','Parser_MiniPascal.py',122),
  ('field_list -> field_list field','field_list',2,'p_field_list','Parser_MiniPascal.py',128),
  ('field_list -> field','field_list',1,'p_field_list','Parser_MiniPascal.py',129),
  ('field_list -> empty','field_list',1,'p_field_list','Parser_MiniPascal.py',130),
  ('field -> id_list COLON type_specifier','field',3,'p_field','Parser_MiniPascal.py',134),
  ('field -> id_list COLON type_specifier SEMICOLON','field',4,'p_field','Parser_MiniPascal.py',135),
  ('field -> VAR id_list COLON type_specifier','field',4,'p_field','Parser_MiniPascal.py',136),
  ('field -> VAR id_list COLON type_specifier SEMICOLON','field',5,'p_field','Parser_MiniPascal.py',137),
  ('field -> id_list LPAREN STRING_LITERAL RPAREN','field',4,'p_field','Parser_MiniPascal.py',138),
  ('field -> if_statement','field',1,'p_field','Parser_MiniPascal.py',139),
  ('field -> case_statement','field',1,'p_field','Parser_MiniPascal.py',140),
  ('field -> assignment_statement','field',1,'p_field','Parser_MiniPascal.py',141),
  ('case_part -> CASE ID COLON type_specifier OF case_list SEMICOLON','case_part',7,'p_case_part','Parser_MiniPascal.py',145),
  ('case_part -> empty','case_part',1,'p_case_part','Parser_MiniPascal.py',146),
  ('case_list -> case_list SEMICOLON case_element','case_list',3,'p_case_list','Parser_MiniPascal.py',150),
  ('case_list -> case_element','case_list',1,'p_case_list','Parser_MiniPascal.py',151),
  ('case_element -> NUMBER COLON LPAREN field_list RPAREN','case_element',5,'p_case_element','Parser_MiniPascal.py',155),
  ('case_element -> NUMBER COLON field_list','case_element',3,'p_case_element','Parser_MiniPascal.py',156),
  ('method_list -> method_list method','method_list',2,'p_method_list','Parser_MiniPascal.py',163),
  ('method_list -> method','method_list',1,'p_method_list','Parser_MiniPascal.py',164),
  ('method_list -> empty','method_list',1,'p_method_list','Parser_MiniPascal.py',165),
  ('method -> CONSTRUCTOR ID LPAREN field_list RPAREN SEMICOLON','method',6,'p_method','Parser_MiniPascal.py',169),
  ('method -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON','method',6,'p_method','Parser_MiniPascal.py',170),
  ('method -> FUNCTION ID LPAREN field_list RPAREN COLON type_specifier SEMICOLON','method',8,'p_method','Parser_MiniPascal.py',171),
  ('method -> DESTRUCTOR ID SEMICOLON','method',3,'p_method','Parser_MiniPascal.py',172),
  ('case_statement -> CASE expression OF case_list END SEMICOLON','case_statement',6,'p_case_statement','Parser_MiniPascal.py',178),
  ('case_statement -> CASE expression OF case_list ELSE statement END SEMICOLON','case_statement',8,'p_case_statement','Parser_MiniPascal.py',179),
  ('case_statement -> CASE expression OF case_list END','case_statement',5,'p_case_statement','Parser_MiniPascal.py',180),
  ('type_specifier -> LONGINT','type_specifier',1,'p_type_specifier_longint','Parser_MiniPascal.py',184),
  ('procedure_declarations -> procedure_declaration','procedure_declarations',1,'p_procedure_declarations','Parser_MiniPascal.py',189),
  ('procedure_declarations -> procedure_declarations procedure_declaration','procedure_declarations',2,'p_procedure_declarations','Parser_MiniPascal.py',190),
  ('procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON block SEMICOLON','procedure_declaration',8,'p_procedure_declaration','Parser_MiniPascal.py',197),
  ('procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON block SEMICOLON','procedure_declaration',7,'p_procedure_declaration','Parser_MiniPascal.py',198),
  ('procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON','procedure_declaration',5,'p_procedure_declaration','Parser_MiniPascal.py',199),
  ('procedure_declaration -> PROCEDURE ID LPAREN field_list RPAREN SEMICOLON FORWARD SEMICOLON','procedure_declaration',8,'p_procedure_declaration','Parser_MiniPascal.py',200),
  ('procedure_declaration -> PROCEDURE ID LPAREN RPAREN SEMICOLON FORWARD SEMICOLON','procedure_declaration',7,'p_procedure_declaration','Parser_MiniPascal.py',201),
  ('procedure_declaration -> PROCEDURE ID SEMICOLON FORWARD SEMICOLON','procedure_declaration',5,'p_procedure_declaration','Parser_MiniPascal.py',202),
  ('function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON','function_declaration',10,'p_function_declaration','Parser_MiniPascal.py',210),
  ('function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON FORWARD SEMICOLON','function_declaration',10,'p_function_declaration','Parser_MiniPascal.py',211),
  ('function_call -> ID LPAREN expression_list RPAREN','function_call',4,'p_function_call','Parser_MiniPascal.py',217),
  ('factor -> function_call','factor',1,'p_factor_function_call','Parser_MiniPascal.py',222),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','Parser_MiniPascal.py',227),
  ('parameter_list -> parameter_list SEMICOLON parameter','parameter_list',3,'p_parameter_list','Parser_MiniPascal.py',228),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','Parser_MiniPascal.py',229),
  ('parameter -> id_list COLON type_specifier','parameter',3,'p_parameter','Parser_MiniPascal.py',233),
  ('parameter -> VAR id_list COLON type_specifier','parameter',4,'p_parameter','Parser_MiniPascal.py',234),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','Parser_MiniPascal.py',239),
  ('statement_list -> statement statement_list_tail','statement_list',2,'p_statement_list_multi','Parser_MiniPascal.py',244),
  ('statement_list_tail -> SEMICOLON statement statement_list_tail','statement_list_tail',3,'p_statement_list_tail','Parser_MiniPascal.py',248),
  ('statement_list_tail -> empty','statement_list_tail',1,'p_statement_list_tail','Parser_MiniPascal.py',249),
  ('statement -> if_statement','statement',1,'p_statement','Parser_MiniPascal.py',254),
  ('statement -> assignment_statement','statement',1,'p_statement','Parser_MiniPascal.py',255),
  ('statement -> while_statement','statement',1,'p_statement','Parser_MiniPascal.py',256),
  ('statement -> procedure_call','statement',1,'p_statement','Parser_MiniPascal.py',257),
  ('statement -> compound_statement','statement',1,'p_statement','Parser_MiniPascal.py',258),
  ('statement -> for_statement','statement',1,'p_statement','Parser_MiniPascal.py',259),
  ('statement -> case_statement','statement',1,'p_statement','Parser_MiniPascal.py',260),
  ('statement -> with_statement','statement',1,'p_statement','Parser_MiniPascal.py',261),
  ('statement -> empty','statement',1,'p_statement','Parser_MiniPascal.py',262),
  ('with_statement -> WITH variable DO statement','with_statement',4,'p_with_statement','Parser_MiniPascal.py',266),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_if_statement','Parser_MiniPascal.py',270),
  ('if_statement -> IF expression THEN statement','if_statement',4,'p_if_statement','Parser_MiniPascal.py',271),
  ('if_statement -> IF expression IN statement THEN statement ELSE statement','if_statement',8,'p_if_statement','Parser_MiniPascal.py',272),
  ('if_statement -> IF expression IN statement THEN statement','if_statement',6,'p_if_statement','Parser_MiniPascal.py',273),
  ('for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement','for_statement',8,'p_for_statement','Parser_MiniPascal.py',278),
  ('for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement','for_statement',8,'p_for_statement','Parser_MiniPascal.py',279),
  ('assignment_statement -> variable COLON_EQUAL expression','assignment_statement',3,'p_assignment_statement','Parser_MiniPascal.py',284),
  ('assignment_statement -> variable COLON_EQUAL BOOLEAN_LITERAL','assignment_statement',3,'p_assignment_statement','Parser_MiniPascal.py',285),
  ('assignment_statement -> ID COLON_EQUAL expression','assignment_statement',3,'p_assignment_statement','Parser_MiniPascal.py',286),
  ('variable -> ID','variable',1,'p_variable_simple','Parser_MiniPascal.py',291),
  ('variable -> variable LBRACKET expression RBRACKET','variable',4,'p_variable_simple','Parser_MiniPascal.py',292),
  ('variable -> variable DOT ID','variable',3,'p_variable_simple','Parser_MiniPascal.py',293),
  ('variable -> ID LBRACKET index_list RBRACKET','variable',4,'p_variable_index','Parser_MiniPascal.py',297),
  ('index_list -> expression','index_list',1,'p_index_list','Parser_MiniPascal.py',301),
  ('index_list -> index_list COMMA expression','index_list',3,'p_index_list','Parser_MiniPascal.py',302),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','Parser_MiniPascal.py',307),
  ('procedure_call -> ID LPAREN expression_list RPAREN','procedure_call',4,'p_procedure_call','Parser_MiniPascal.py',312),
  ('procedure_call -> ID','procedure_call',1,'p_procedure_call','Parser_MiniPascal.py',313),
  ('expression_list -> expression expression_list_tail','expression_list',2,'p_expression_list_multi','Parser_MiniPascal.py',318),
  ('expression_list_tail -> COMMA expression expression_list_tail','expression_list_tail',3,'p_expression_list_tail','Parser_MiniPascal.py',322),
  ('expression_list_tail -> empty','expression_list_tail',1,'p_expression_list_tail','Parser_MiniPascal.py',323),
  ('expression_list -> empty','expression_list',1,'p_expression_list_empty','Parser_MiniPascal.py',327),
  ('expression -> simple_expression relop simple_expression','expression',3,'p_expression','Parser_MiniPascal.py',332),
  ('expression -> simple_expression','expression',1,'p_expression','Parser_MiniPascal.py',333),
  ('simple_expression -> term simple_expression_tail','simple_expression',2,'p_simple_expression','Parser_MiniPascal.py',338),
  ('simple_expression_tail -> addop term','simple_expression_tail',2,'p_simple_expression_tail','Parser_MiniPascal.py',342),
  ('simple_expression_tail -> empty','simple_expression_tail',1,'p_simple_expression_tail','Parser_MiniPascal.py',343),
  ('addop -> PLUS','addop',1,'p_addop','Parser_MiniPascal.py',347),
  ('addop -> MINUS','addop',1,'p_addop','Parser_MiniPascal.py',348),
  ('term -> factor term_tail','term',2,'p_term','Parser_MiniPascal.py',353),
  ('term_tail -> mulop factor','term_tail',2,'p_term_tail','Parser_MiniPascal.py',357),
  ('term_tail -> empty','term_tail',1,'p_term_tail','Parser_MiniPascal.py',358),
  ('mulop -> TIMES','mulop',1,'p_mulop','Parser_MiniPascal.py',362),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','Parser_MiniPascal.py',363),
  ('mulop -> DIV','mulop',1,'p_mulop','Parser_MiniPascal.py',364),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',369),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',370),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',371),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',372),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',373),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','Parser_MiniPascal.py',378),
  ('factor -> variable','factor',1,'p_factor_variable','Parser_MiniPascal.py',382),
  ('factor -> NUMBER','factor',1,'p_factor_number','Parser_MiniPascal.py',386),
  ('factor -> STRING_LITERAL','factor',1,'p_factor_string','Parser_MiniPascal.py',390),
  ('relop -> LESS','relop',1,'p_relop','Parser_MiniPascal.py',397),
  ('relop -> LESS_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',398),
  ('relop -> GREAT','relop',1,'p_relop','Parser_MiniPascal.py',399),
  ('relop -> GREAT_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',400),
  ('relop -> EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',401),
  ('relop -> DIFFERENT','relop',1,'p_relop','Parser_MiniPascal.py',402),
  ('empty -> <empty>','empty',0,'p_empty','Parser_MiniPascal.py',407),
  ('statement -> READLN','statement',1,'p_statement_readln','Parser_MiniPascal.py',411),
  ('statement -> READLN LPAREN variable RPAREN','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',415),
  ('statement -> READLN LBRACKET variable RBRACKET','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',416),
  ('statement -> WRITE LPAREN expression_list RPAREN','statement',4,'p_statement_write','Parser_MiniPascal.py',420),
  ('statement -> WRITELN LPAREN write_arguments RPAREN','statement',4,'p_statement_writeln','Parser_MiniPascal.py',424),
  ('write_arguments -> write_argument','write_arguments',1,'p_write_arguments','Parser_MiniPascal.py',428),
  ('write_arguments -> write_arguments COMMA write_argument','write_arguments',3,'p_write_arguments','Parser_MiniPascal.py',429),
  ('write_argument -> expression','write_argument',1,'p_write_argument','Parser_MiniPascal.py',433),
  ('write_argument -> expression COLON expression','write_argument',3,'p_write_argument','Parser_MiniPascal.py',434),
  ('write_argument -> expression COLON expression COLON expression','write_argument',5,'p_write_argument','Parser_MiniPascal.py',435),
  ('statement -> USES ID SEMICOLON','statement',3,'p_statement_uses','Parser_MiniPascal.py',440),
  ('constant_declaration -> CONST constant_list','constant_declaration',2,'p_constant_declaration','Parser_MiniPascal.py',445),
  ('constant_list -> constant','constant_list',1,'p_constant_list','Parser_MiniPascal.py',449),
  ('constant_list -> constant_list constant','constant_list',2,'p_constant_list','Parser_MiniPascal.py',450),
  ('constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',454),
  ('constant -> ID EQUAL NUMBER SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',455),
  ('constant -> ID EQUAL STRING_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',456),
  ('constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',457),
  ('expression -> expression AND expression','expression',3,'p_expression_logical','Parser_MiniPascal.py',462),
  ('expression -> expression OR expression','expression',3,'p_expression_logical','Parser_MiniPascal.py',463),
  ('expression -> NOT expression','expression',2,'p_expression_logical','Parser_MiniPascal.py',464),
]
