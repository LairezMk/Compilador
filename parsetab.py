
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocELSEAND ARRAY BEGIN BOOLEAN_LITERAL BYTE CASE CHAR CHARACTER_LITERAL COLON COLON_EQUAL COMMA CONST DIFFERENT DIV DIVIDE DO DOT DOTDOT DOWNTO ELSE END EQUAL FALSE FILE FOR FUNCTION GOTO GREAT GREAT_EQUAL ID IF IN INTEGER LABEL LBLOCK LBRACKET LESS LESS_EQUAL LONGINT LPAREN MINUS MOD NIL NOT NUMBER OF OR PACKED PLUS PROCEDURE PROGRAM RBLOCK RBRACKET READLINE READLN RECORD REPEAT RPAREN SEMICOLON SET STRING STRING_LITERAL THEN TIMES TO TRUE TYPE UNTIL USES VAR WHILE WITH WRITE WRITELNprogram : PROGRAM ID SEMICOLON declaration_sections block DOTdeclaration_sections : declaration_sections declaration_section\n                            | emptydeclaration_section : uses_opt\n                           | constant_declaration\n                           | type_declaration\n                           | var_declaration\n                           | procedure_declaration\n                           | function_declarationuses_opt : USES id_list SEMICOLON\n                | emptyid_list : ID\n               | id_list COMMA IDvar_declaration : VAR declaration_listdeclaration_list : declaration\n                        | declaration_list declarationdeclaration : id_list COLON type_specifier SEMICOLONblock : declaration_sections compound_statementtype_declaration : TYPE type_listtype_list : type_definition\n                 | type_list type_definitiontype_specifier : LPAREN id_list RPARENtype_definition : ID EQUAL type_specifier SEMICOLONtype_specifier : ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier\n                      | INTEGER\n                      | BYTE\n                      | CHAR\n                      | ID\n                      | BOOLEAN_LITERALtype_specifier : LONGINTprocedure_declarations : procedure_declaration\n                              | procedure_declarations procedure_declarationprocedure_declaration : PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON\n                             | PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOTfunction_declaration : FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLONfunction_call : ID LPAREN expression_list RPARENfactor : function_callparameter_list : parameter\n                      | parameter_list SEMICOLON parameterparameter : id_list COLON type_specifier\n                 | VAR id_list COLON type_specifiercompound_statement : BEGIN statement_list ENDstatement_list : statement statement_list_tailstatement_list_tail : SEMICOLON statement statement_list_tail\n                           | emptystatement : if_statement\n                 | assignment_statement\n                 | while_statement\n                 | procedure_call\n                 | compound_statement\n                 | for_statement\n                 | emptyif_statement : IF expression THEN statement ELSE statement\n                 | IF expression THEN statementfor_statement : FOR ID COLON_EQUAL expression TO expression DO statement\n                     | FOR ID COLON_EQUAL expression DOWNTO expression DO statementassignment_statement : variable COLON_EQUAL expressionvariable : IDvariable : ID LBRACKET expression RBRACKETwhile_statement : WHILE expression DO statementprocedure_call : ID LPAREN expression_list RPARENexpression_list : expression expression_list_tailexpression_list_tail : COMMA expression expression_list_tail\n                            | emptyexpression_list : emptyexpression : simple_expression relop simple_expression\n                  | simple_expressionsimple_expression : term simple_expression_tailsimple_expression_tail : addop term\n                              | emptyaddop : PLUS\n             | MINUSterm : factor term_tailterm_tail : mulop factor\n                 | emptymulop : TIMES\n             | DIVIDE\n             | DIVexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expressionfactor : LPAREN expression RPARENfactor : variablefactor : NUMBERfactor : STRING_LITERALrelop : LESS\n             | LESS_EQUAL\n             | GREAT\n             | GREAT_EQUAL\n             | EQUAL\n             | DIFFERENTempty :statement : READLNstatement : READLN LPAREN variable RPAREN\n                 | READLN LBRACKET variable RBRACKETstatement : WRITELN LPAREN expression_list RPARENstatement : WRITE LPAREN expression_list RPARENstatement : USES ID SEMICOLONconstant_declaration : CONST constant_listconstant_list : constant\n                     | constant_list constantconstant : ID EQUAL CHARACTER_LITERAL SEMICOLON\n                | ID EQUAL NUMBER SEMICOLON\n                | ID EQUAL STRING_LITERAL SEMICOLON\n                | ID EQUAL BOOLEAN_LITERAL SEMICOLONexpression : expression AND expression\n                  | expression OR expression\n                  | NOT expression'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,26,],[0,-1,]),'ID':([2,17,18,19,20,21,22,24,29,30,32,33,35,36,53,55,56,57,59,60,62,63,64,65,66,67,70,72,73,74,75,76,78,79,82,86,100,111,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,142,144,145,147,149,150,151,153,154,155,156,157,158,159,160,162,163,165,166,174,199,200,202,204,205,206,218,219,224,],[3,28,31,34,28,38,39,54,31,-102,34,-20,28,-15,77,90,90,92,93,-103,-21,98,-16,98,28,28,54,115,115,90,90,90,90,90,90,90,28,28,54,90,90,90,90,90,90,90,90,-88,-89,-90,-91,-92,-93,90,-71,-72,90,-76,-77,-78,90,54,90,-104,-105,-106,-107,-23,90,-17,28,98,90,98,98,54,90,90,90,54,54,98,]),'SEMICOLON':([3,23,24,27,28,41,42,43,44,45,46,47,48,49,68,70,77,81,83,84,85,87,88,89,90,93,94,95,96,97,98,99,102,103,104,105,106,107,108,109,112,113,117,122,125,140,141,143,146,148,154,164,170,171,172,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,192,194,197,198,202,203,207,208,209,211,218,219,221,222,223,226,],[4,-18,-94,58,-12,70,-46,-47,-48,-49,-50,-51,-52,-95,-42,-94,122,-67,-94,-94,-37,-85,-86,-87,-58,-13,156,157,158,159,-28,160,-25,-26,-27,-29,-30,163,165,-38,165,70,-57,-100,-94,-110,-68,-70,-73,-75,-94,196,-96,-97,-98,-99,-61,-59,-54,-79,-80,-81,-82,-83,-108,-109,-66,-69,-74,-84,-60,-22,-39,-40,-94,-36,215,-41,217,-53,-94,-94,225,-55,-56,-24,]),'USES':([4,5,6,7,9,10,11,12,13,14,15,16,24,25,29,30,32,33,35,36,58,60,62,64,70,125,154,156,157,158,159,160,163,196,202,215,216,217,218,219,225,],[-94,17,-3,17,-2,-4,-5,-6,-7,-8,-9,-3,53,-11,-101,-102,-19,-20,-14,-15,-10,-103,-21,-16,53,53,53,-104,-105,-106,-107,-23,-17,-94,53,-33,-34,-94,53,53,-35,]),'CONST':([4,5,6,7,9,10,11,12,13,14,15,16,25,29,30,32,33,35,36,58,60,62,64,156,157,158,159,160,163,196,215,216,217,225,],[-94,18,-3,18,-2,-4,-5,-6,-7,-8,-9,-3,-11,-101,-102,-19,-20,-14,-15,-10,-103,-21,-16,-104,-105,-106,-107,-23,-17,-94,-33,-34,-94,-35,]),'TYPE':([4,5,6,7,9,10,11,12,13,14,15,16,25,29,30,32,33,35,36,58,60,62,64,156,157,158,159,160,163,196,215,216,217,225,],[-94,19,-3,19,-2,-4,-5,-6,-7,-8,-9,-3,-11,-101,-102,-19,-20,-14,-15,-10,-103,-21,-16,-104,-105,-106,-107,-23,-17,-94,-33,-34,-94,-35,]),'VAR':([4,5,6,7,9,10,11,12,13,14,15,16,25,29,30,32,33,35,36,58,60,62,64,66,67,156,157,158,159,160,163,165,196,215,216,217,225,],[-94,20,-3,20,-2,-4,-5,-6,-7,-8,-9,-3,-11,-101,-102,-19,-20,-14,-15,-10,-103,-21,-16,111,111,-104,-105,-106,-107,-23,-17,111,-94,-33,-34,-94,-35,]),'PROCEDURE':([4,5,6,7,9,10,11,12,13,14,15,16,25,29,30,32,33,35,36,58,60,62,64,156,157,158,159,160,163,196,215,216,217,225,],[-94,21,-3,21,-2,-4,-5,-6,-7,-8,-9,-3,-11,-101,-102,-19,-20,-14,-15,-10,-103,-21,-16,-104,-105,-106,-107,-23,-17,-94,-33,-34,-94,-35,]),'FUNCTION':([4,5,6,7,9,10,11,12,13,14,15,16,25,29,30,32,33,35,36,58,60,62,64,156,157,158,159,160,163,196,215,216,217,225,],[-94,22,-3,22,-2,-4,-5,-6,-7,-8,-9,-3,-11,-101,-102,-19,-20,-14,-15,-10,-103,-21,-16,-104,-105,-106,-107,-23,-17,-94,-33,-34,-94,-35,]),'BEGIN':([4,5,6,7,9,10,11,12,13,14,15,16,24,25,29,30,32,33,35,36,58,60,62,64,70,125,154,156,157,158,159,160,163,196,202,215,216,217,218,219,225,],[-94,-94,-3,24,-2,-4,-5,-6,-7,-8,-9,-3,24,-11,-101,-102,-19,-20,-14,-15,-10,-103,-21,-16,24,24,24,-104,-105,-106,-107,-23,-17,-94,24,-33,-34,-94,24,24,-35,]),'DOT':([8,23,68,207,],[26,-18,-42,216,]),'READLN':([24,70,125,154,202,218,219,],[49,49,49,49,49,49,49,]),'WRITELN':([24,70,125,154,202,218,219,],[51,51,51,51,51,51,51,]),'WRITE':([24,70,125,154,202,218,219,],[52,52,52,52,52,52,52,]),'IF':([24,70,125,154,202,218,219,],[55,55,55,55,55,55,55,]),'WHILE':([24,70,125,154,202,218,219,],[56,56,56,56,56,56,56,]),'FOR':([24,70,125,154,202,218,219,],[57,57,57,57,57,57,57,]),'END':([24,40,41,42,43,44,45,46,47,48,49,68,69,70,71,81,83,84,85,87,88,89,90,113,117,122,125,140,141,143,146,148,154,169,170,171,172,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,192,202,203,211,218,219,222,223,],[-94,68,-94,-46,-47,-48,-49,-50,-51,-52,-95,-42,-43,-94,-45,-67,-94,-94,-37,-85,-86,-87,-58,-94,-57,-100,-94,-110,-68,-70,-73,-75,-94,-44,-96,-97,-98,-99,-61,-59,-54,-79,-80,-81,-82,-83,-108,-109,-66,-69,-74,-84,-60,-94,-36,-53,-94,-94,-55,-56,]),'COMMA':([27,28,37,81,83,84,85,87,88,89,90,93,110,119,140,141,143,146,148,161,167,178,180,181,182,183,184,185,186,187,188,189,190,201,203,],[59,-12,59,-67,-94,-94,-37,-85,-86,-87,-58,-13,59,174,-110,-68,-70,-73,-75,59,59,-59,-79,-80,-81,-82,-83,-108,-109,-66,-69,-74,-84,174,-36,]),'COLON':([28,37,93,110,167,168,],[-12,65,-13,166,199,200,]),'RPAREN':([28,75,76,78,81,83,84,85,87,88,89,90,93,98,102,103,104,105,106,108,109,112,114,115,118,119,120,121,123,140,141,143,146,148,152,153,161,173,175,178,180,181,182,183,184,185,186,187,188,189,190,191,194,197,198,201,203,208,210,226,],[-12,-94,-94,-94,-67,-94,-94,-37,-85,-86,-87,-58,-13,-28,-25,-26,-27,-29,-30,164,-38,168,170,-58,172,-94,-65,176,177,-110,-68,-70,-73,-75,190,-94,194,-62,-64,-59,-79,-80,-81,-82,-83,-108,-109,-66,-69,-74,-84,203,-22,-39,-40,-94,-36,-41,-63,-24,]),'EQUAL':([31,34,81,83,84,85,87,88,89,90,141,143,146,148,178,188,189,190,203,],[61,63,138,-94,-94,-37,-85,-86,-87,-58,-68,-70,-73,-75,-59,-69,-74,-84,-36,]),'LPAREN':([38,39,49,51,52,54,55,56,63,65,74,75,76,78,79,82,86,90,126,127,128,129,130,131,132,133,134,135,136,137,138,139,142,144,145,147,149,150,151,153,155,162,166,174,199,200,204,205,206,224,],[66,67,72,75,76,78,86,86,100,100,86,86,86,86,86,86,86,153,86,86,86,86,86,86,86,86,-88,-89,-90,-91,-92,-93,86,-71,-72,86,-76,-77,-78,86,86,86,100,86,100,100,86,86,86,100,]),'ELSE':([42,43,44,45,46,47,48,49,68,81,83,84,85,87,88,89,90,117,122,125,140,141,143,146,148,154,170,171,172,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,192,202,203,211,218,219,222,223,],[-46,-47,-48,-49,-50,-51,-52,-95,-42,-67,-94,-94,-37,-85,-86,-87,-58,-57,-100,-94,-110,-68,-70,-73,-75,-94,-96,-97,-98,-99,-61,-59,202,-79,-80,-81,-82,-83,-108,-109,-66,-69,-74,-84,-60,-94,-36,-53,-94,-94,-55,-56,]),'LBRACKET':([49,54,90,101,115,],[73,79,79,162,79,]),'COLON_EQUAL':([50,54,92,178,],[74,-58,155,-59,]),'NOT':([55,56,74,75,76,78,79,82,86,126,127,128,129,130,131,132,153,155,162,174,204,205,206,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'NUMBER':([55,56,61,74,75,76,78,79,82,86,126,127,128,129,130,131,132,133,134,135,136,137,138,139,142,144,145,147,149,150,151,153,155,162,174,204,205,206,],[88,88,95,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,-88,-89,-90,-91,-92,-93,88,-71,-72,88,-76,-77,-78,88,88,88,88,88,88,88,]),'STRING_LITERAL':([55,56,61,74,75,76,78,79,82,86,126,127,128,129,130,131,132,133,134,135,136,137,138,139,142,144,145,147,149,150,151,153,155,162,174,204,205,206,],[89,89,96,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,-88,-89,-90,-91,-92,-93,89,-71,-72,89,-76,-77,-78,89,89,89,89,89,89,89,]),'CHARACTER_LITERAL':([61,],[94,]),'BOOLEAN_LITERAL':([61,63,65,166,199,200,224,],[97,105,105,105,105,105,105,]),'ARRAY':([63,65,166,199,200,224,],[101,101,101,101,101,101,]),'INTEGER':([63,65,166,199,200,224,],[102,102,102,102,102,102,]),'BYTE':([63,65,166,199,200,224,],[103,103,103,103,103,103,]),'CHAR':([63,65,166,199,200,224,],[104,104,104,104,104,104,]),'LONGINT':([63,65,166,199,200,224,],[106,106,106,106,106,106,]),'THEN':([80,81,83,84,85,87,88,89,90,140,141,143,146,148,178,180,181,182,183,184,185,186,187,188,189,190,203,],[125,-67,-94,-94,-37,-85,-86,-87,-58,-110,-68,-70,-73,-75,-59,-79,-80,-81,-82,-83,-108,-109,-66,-69,-74,-84,-36,]),'PLUS':([80,81,83,84,85,87,88,89,90,91,117,119,124,140,141,143,146,148,152,178,180,181,182,183,184,185,186,187,188,189,190,193,195,201,203,212,213,214,],[126,-67,144,-94,-37,-85,-86,-87,-58,126,126,126,126,126,-68,-70,-73,-75,126,-59,126,126,126,126,126,126,126,-66,-69,-74,-84,126,126,126,-36,126,126,126,]),'MINUS':([80,81,83,84,85,87,88,89,90,91,117,119,124,140,141,143,146,148,152,178,180,181,182,183,184,185,186,187,188,189,190,193,195,201,203,212,213,214,],[127,-67,145,-94,-37,-85,-86,-87,-58,127,127,127,127,127,-68,-70,-73,-75,127,-59,127,127,127,127,127,127,127,-66,-69,-74,-84,127,127,127,-36,127,127,127,]),'TIMES':([80,81,83,84,85,87,88,89,90,91,117,119,124,140,141,143,146,148,152,178,180,181,182,183,184,185,186,187,188,189,190,193,195,201,203,212,213,214,],[128,-67,-94,149,-37,-85,-86,-87,-58,128,128,128,128,128,-68,-70,-73,-75,128,-59,128,128,128,128,128,128,128,-66,-69,-74,-84,128,128,128,-36,128,128,128,]),'DIVIDE':([80,81,83,84,85,87,88,89,90,91,117,119,124,140,141,143,146,148,152,178,180,181,182,183,184,185,186,187,188,189,190,193,195,201,203,212,213,214,],[129,-67,-94,150,-37,-85,-86,-87,-58,129,129,129,129,129,-68,-70,-73,-75,129,-59,129,129,129,129,129,129,129,-66,-69,-74,-84,129,129,129,-36,129,129,129,]),'MOD':([80,81,83,84,85,87,88,89,90,91,117,119,124,140,141,143,146,148,152,178,180,181,182,183,184,185,186,187,188,189,190,193,195,201,203,212,213,214,],[130,-67,-94,-94,-37,-85,-86,-87,-58,130,130,130,130,130,-68,-70,-73,-75,130,-59,130,130,130,130,130,130,130,-66,-69,-74,-84,130,130,130,-36,130,130,130,]),'AND':([80,81,83,84,85,87,88,89,90,91,117,119,124,140,141,143,146,148,152,178,180,181,182,183,184,185,186,187,188,189,190,193,195,201,203,212,213,214,],[131,-67,-94,-94,-37,-85,-86,-87,-58,131,131,131,131,131,-68,-70,-73,-75,131,-59,131,131,131,131,131,131,131,-66,-69,-74,-84,131,131,131,-36,131,131,131,]),'OR':([80,81,83,84,85,87,88,89,90,91,117,119,124,140,141,143,146,148,152,178,180,181,182,183,184,185,186,187,188,189,190,193,195,201,203,212,213,214,],[132,-67,-94,-94,-37,-85,-86,-87,-58,132,132,132,132,132,-68,-70,-73,-75,132,-59,132,132,132,132,132,132,132,-66,-69,-74,-84,132,132,132,-36,132,132,132,]),'DO':([81,83,84,85,87,88,89,90,91,140,141,143,146,148,178,180,181,182,183,184,185,186,187,188,189,190,203,212,213,],[-67,-94,-94,-37,-85,-86,-87,-58,154,-110,-68,-70,-73,-75,-59,-79,-80,-81,-82,-83,-108,-109,-66,-69,-74,-84,-36,218,219,]),'RBRACKET':([81,83,84,85,87,88,89,90,115,116,124,140,141,143,146,148,178,180,181,182,183,184,185,186,187,188,189,190,203,214,],[-67,-94,-94,-37,-85,-86,-87,-58,-58,171,178,-110,-68,-70,-73,-75,-59,-79,-80,-81,-82,-83,-108,-109,-66,-69,-74,-84,-36,220,]),'TO':([81,83,84,85,87,88,89,90,140,141,143,146,148,178,180,181,182,183,184,185,186,187,188,189,190,193,203,],[-67,-94,-94,-37,-85,-86,-87,-58,-110,-68,-70,-73,-75,-59,-79,-80,-81,-82,-83,-108,-109,-66,-69,-74,-84,204,-36,]),'DOWNTO':([81,83,84,85,87,88,89,90,140,141,143,146,148,178,180,181,182,183,184,185,186,187,188,189,190,193,203,],[-67,-94,-94,-37,-85,-86,-87,-58,-110,-68,-70,-73,-75,-59,-79,-80,-81,-82,-83,-108,-109,-66,-69,-74,-84,205,-36,]),'DOTDOT':([81,83,84,85,87,88,89,90,140,141,143,146,148,178,180,181,182,183,184,185,186,187,188,189,190,195,203,],[-67,-94,-94,-37,-85,-86,-87,-58,-110,-68,-70,-73,-75,-59,-79,-80,-81,-82,-83,-108,-109,-66,-69,-74,-84,206,-36,]),'LESS':([81,83,84,85,87,88,89,90,141,143,146,148,178,188,189,190,203,],[134,-94,-94,-37,-85,-86,-87,-58,-68,-70,-73,-75,-59,-69,-74,-84,-36,]),'LESS_EQUAL':([81,83,84,85,87,88,89,90,141,143,146,148,178,188,189,190,203,],[135,-94,-94,-37,-85,-86,-87,-58,-68,-70,-73,-75,-59,-69,-74,-84,-36,]),'GREAT':([81,83,84,85,87,88,89,90,141,143,146,148,178,188,189,190,203,],[136,-94,-94,-37,-85,-86,-87,-58,-68,-70,-73,-75,-59,-69,-74,-84,-36,]),'GREAT_EQUAL':([81,83,84,85,87,88,89,90,141,143,146,148,178,188,189,190,203,],[137,-94,-94,-37,-85,-86,-87,-58,-68,-70,-73,-75,-59,-69,-74,-84,-36,]),'DIFFERENT':([81,83,84,85,87,88,89,90,141,143,146,148,178,188,189,190,203,],[139,-94,-94,-37,-85,-86,-87,-58,-68,-70,-73,-75,-59,-69,-74,-84,-36,]),'DIV':([84,85,87,88,89,90,178,190,203,],[151,-37,-85,-86,-87,-58,-59,-84,-36,]),'OF':([220,],[224,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_sections':([4,5,196,217,],[5,7,7,7,]),'empty':([4,5,7,24,41,70,75,76,78,83,84,113,119,125,153,154,196,201,202,217,218,219,],[6,16,25,48,71,48,120,120,120,143,148,71,175,48,120,48,6,175,48,6,48,48,]),'block':([5,196,217,],[8,207,221,]),'declaration_section':([5,7,],[9,9,]),'uses_opt':([5,7,],[10,10,]),'constant_declaration':([5,7,],[11,11,]),'type_declaration':([5,7,],[12,12,]),'var_declaration':([5,7,],[13,13,]),'procedure_declaration':([5,7,],[14,14,]),'function_declaration':([5,7,],[15,15,]),'compound_statement':([7,24,70,125,154,202,218,219,],[23,46,46,46,46,46,46,46,]),'id_list':([17,20,35,66,67,100,111,165,],[27,37,37,110,110,161,167,110,]),'constant_list':([18,],[29,]),'constant':([18,29,],[30,60,]),'type_list':([19,],[32,]),'type_definition':([19,32,],[33,62,]),'declaration_list':([20,],[35,]),'declaration':([20,35,],[36,64,]),'statement_list':([24,],[40,]),'statement':([24,70,125,154,202,218,219,],[41,113,179,192,211,222,223,]),'if_statement':([24,70,125,154,202,218,219,],[42,42,42,42,42,42,42,]),'assignment_statement':([24,70,125,154,202,218,219,],[43,43,43,43,43,43,43,]),'while_statement':([24,70,125,154,202,218,219,],[44,44,44,44,44,44,44,]),'procedure_call':([24,70,125,154,202,218,219,],[45,45,45,45,45,45,45,]),'for_statement':([24,70,125,154,202,218,219,],[47,47,47,47,47,47,47,]),'variable':([24,55,56,70,72,73,74,75,76,78,79,82,86,125,126,127,128,129,130,131,132,133,142,147,153,154,155,162,174,202,204,205,206,218,219,],[50,87,87,50,114,116,87,87,87,87,87,87,87,50,87,87,87,87,87,87,87,87,87,87,87,50,87,87,87,50,87,87,87,50,50,]),'statement_list_tail':([41,113,],[69,169,]),'expression':([55,56,74,75,76,78,79,82,86,126,127,128,129,130,131,132,153,155,162,174,204,205,206,],[80,91,117,119,119,119,124,140,152,180,181,182,183,184,185,186,119,193,195,201,212,213,214,]),'simple_expression':([55,56,74,75,76,78,79,82,86,126,127,128,129,130,131,132,133,153,155,162,174,204,205,206,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,187,81,81,81,81,81,81,81,]),'term':([55,56,74,75,76,78,79,82,86,126,127,128,129,130,131,132,133,142,153,155,162,174,204,205,206,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,188,83,83,83,83,83,83,83,]),'factor':([55,56,74,75,76,78,79,82,86,126,127,128,129,130,131,132,133,142,147,153,155,162,174,204,205,206,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,189,84,84,84,84,84,84,84,]),'function_call':([55,56,74,75,76,78,79,82,86,126,127,128,129,130,131,132,133,142,147,153,155,162,174,204,205,206,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'type_specifier':([63,65,166,199,200,224,],[99,107,198,208,209,226,]),'parameter_list':([66,67,],[108,112,]),'parameter':([66,67,165,],[109,109,197,]),'expression_list':([75,76,78,153,],[118,121,123,191,]),'relop':([81,],[133,]),'simple_expression_tail':([83,],[141,]),'addop':([83,],[142,]),'term_tail':([84,],[146,]),'mulop':([84,],[147,]),'expression_list_tail':([119,201,],[173,210,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON declaration_sections block DOT','program',6,'p_program','Parser_MiniPascal.py',18),
  ('declaration_sections -> declaration_sections declaration_section','declaration_sections',2,'p_declaration_sections','Parser_MiniPascal.py',40),
  ('declaration_sections -> empty','declaration_sections',1,'p_declaration_sections','Parser_MiniPascal.py',41),
  ('declaration_section -> uses_opt','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',48),
  ('declaration_section -> constant_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',49),
  ('declaration_section -> type_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',50),
  ('declaration_section -> var_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',51),
  ('declaration_section -> procedure_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',52),
  ('declaration_section -> function_declaration','declaration_section',1,'p_declaration_section','Parser_MiniPascal.py',53),
  ('uses_opt -> USES id_list SEMICOLON','uses_opt',3,'p_uses_opt','Parser_MiniPascal.py',57),
  ('uses_opt -> empty','uses_opt',1,'p_uses_opt','Parser_MiniPascal.py',58),
  ('id_list -> ID','id_list',1,'p_id_list','Parser_MiniPascal.py',65),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','Parser_MiniPascal.py',66),
  ('var_declaration -> VAR declaration_list','var_declaration',2,'p_var_declaration','Parser_MiniPascal.py',73),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser_MiniPascal.py',77),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','Parser_MiniPascal.py',78),
  ('declaration -> id_list COLON type_specifier SEMICOLON','declaration',4,'p_declaration','Parser_MiniPascal.py',85),
  ('block -> declaration_sections compound_statement','block',2,'p_block','Parser_MiniPascal.py',90),
  ('type_declaration -> TYPE type_list','type_declaration',2,'p_type_declaration','Parser_MiniPascal.py',127),
  ('type_list -> type_definition','type_list',1,'p_type_list','Parser_MiniPascal.py',131),
  ('type_list -> type_list type_definition','type_list',2,'p_type_list','Parser_MiniPascal.py',132),
  ('type_specifier -> LPAREN id_list RPAREN','type_specifier',3,'p_type_specifier_enum','Parser_MiniPascal.py',139),
  ('type_definition -> ID EQUAL type_specifier SEMICOLON','type_definition',4,'p_type_definition','Parser_MiniPascal.py',143),
  ('type_specifier -> ARRAY LBRACKET expression DOTDOT expression RBRACKET OF type_specifier','type_specifier',8,'p_type_specifier','Parser_MiniPascal.py',147),
  ('type_specifier -> INTEGER','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',148),
  ('type_specifier -> BYTE','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',149),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',150),
  ('type_specifier -> ID','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',151),
  ('type_specifier -> BOOLEAN_LITERAL','type_specifier',1,'p_type_specifier','Parser_MiniPascal.py',152),
  ('type_specifier -> LONGINT','type_specifier',1,'p_type_specifier_longint','Parser_MiniPascal.py',168),
  ('procedure_declarations -> procedure_declaration','procedure_declarations',1,'p_procedure_declarations','Parser_MiniPascal.py',173),
  ('procedure_declarations -> procedure_declarations procedure_declaration','procedure_declarations',2,'p_procedure_declarations','Parser_MiniPascal.py',174),
  ('procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block SEMICOLON','procedure_declaration',8,'p_procedure_declaration','Parser_MiniPascal.py',184),
  ('procedure_declaration -> PROCEDURE ID LPAREN parameter_list RPAREN SEMICOLON block DOT','procedure_declaration',8,'p_procedure_declaration','Parser_MiniPascal.py',185),
  ('function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type_specifier SEMICOLON block SEMICOLON','function_declaration',10,'p_function_declaration','Parser_MiniPascal.py',189),
  ('function_call -> ID LPAREN expression_list RPAREN','function_call',4,'p_function_call','Parser_MiniPascal.py',197),
  ('factor -> function_call','factor',1,'p_factor_function_call','Parser_MiniPascal.py',201),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','Parser_MiniPascal.py',206),
  ('parameter_list -> parameter_list SEMICOLON parameter','parameter_list',3,'p_parameter_list','Parser_MiniPascal.py',207),
  ('parameter -> id_list COLON type_specifier','parameter',3,'p_parameter','Parser_MiniPascal.py',214),
  ('parameter -> VAR id_list COLON type_specifier','parameter',4,'p_parameter','Parser_MiniPascal.py',215),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','Parser_MiniPascal.py',223),
  ('statement_list -> statement statement_list_tail','statement_list',2,'p_statement_list_multi','Parser_MiniPascal.py',228),
  ('statement_list_tail -> SEMICOLON statement statement_list_tail','statement_list_tail',3,'p_statement_list_tail','Parser_MiniPascal.py',232),
  ('statement_list_tail -> empty','statement_list_tail',1,'p_statement_list_tail','Parser_MiniPascal.py',233),
  ('statement -> if_statement','statement',1,'p_statement','Parser_MiniPascal.py',241),
  ('statement -> assignment_statement','statement',1,'p_statement','Parser_MiniPascal.py',242),
  ('statement -> while_statement','statement',1,'p_statement','Parser_MiniPascal.py',243),
  ('statement -> procedure_call','statement',1,'p_statement','Parser_MiniPascal.py',244),
  ('statement -> compound_statement','statement',1,'p_statement','Parser_MiniPascal.py',245),
  ('statement -> for_statement','statement',1,'p_statement','Parser_MiniPascal.py',246),
  ('statement -> empty','statement',1,'p_statement','Parser_MiniPascal.py',247),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_if_statement','Parser_MiniPascal.py',251),
  ('if_statement -> IF expression THEN statement','if_statement',4,'p_if_statement','Parser_MiniPascal.py',252),
  ('for_statement -> FOR ID COLON_EQUAL expression TO expression DO statement','for_statement',8,'p_for_statement','Parser_MiniPascal.py',259),
  ('for_statement -> FOR ID COLON_EQUAL expression DOWNTO expression DO statement','for_statement',8,'p_for_statement','Parser_MiniPascal.py',260),
  ('assignment_statement -> variable COLON_EQUAL expression','assignment_statement',3,'p_assignment_statement','Parser_MiniPascal.py',268),
  ('variable -> ID','variable',1,'p_variable_simple','Parser_MiniPascal.py',273),
  ('variable -> ID LBRACKET expression RBRACKET','variable',4,'p_variable_index','Parser_MiniPascal.py',277),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','Parser_MiniPascal.py',282),
  ('procedure_call -> ID LPAREN expression_list RPAREN','procedure_call',4,'p_procedure_call','Parser_MiniPascal.py',287),
  ('expression_list -> expression expression_list_tail','expression_list',2,'p_expression_list_multi','Parser_MiniPascal.py',292),
  ('expression_list_tail -> COMMA expression expression_list_tail','expression_list_tail',3,'p_expression_list_tail','Parser_MiniPascal.py',296),
  ('expression_list_tail -> empty','expression_list_tail',1,'p_expression_list_tail','Parser_MiniPascal.py',297),
  ('expression_list -> empty','expression_list',1,'p_expression_list_empty','Parser_MiniPascal.py',304),
  ('expression -> simple_expression relop simple_expression','expression',3,'p_expression','Parser_MiniPascal.py',309),
  ('expression -> simple_expression','expression',1,'p_expression','Parser_MiniPascal.py',310),
  ('simple_expression -> term simple_expression_tail','simple_expression',2,'p_simple_expression','Parser_MiniPascal.py',318),
  ('simple_expression_tail -> addop term','simple_expression_tail',2,'p_simple_expression_tail','Parser_MiniPascal.py',325),
  ('simple_expression_tail -> empty','simple_expression_tail',1,'p_simple_expression_tail','Parser_MiniPascal.py',326),
  ('addop -> PLUS','addop',1,'p_addop','Parser_MiniPascal.py',333),
  ('addop -> MINUS','addop',1,'p_addop','Parser_MiniPascal.py',334),
  ('term -> factor term_tail','term',2,'p_term','Parser_MiniPascal.py',339),
  ('term_tail -> mulop factor','term_tail',2,'p_term_tail','Parser_MiniPascal.py',346),
  ('term_tail -> empty','term_tail',1,'p_term_tail','Parser_MiniPascal.py',347),
  ('mulop -> TIMES','mulop',1,'p_mulop','Parser_MiniPascal.py',354),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','Parser_MiniPascal.py',355),
  ('mulop -> DIV','mulop',1,'p_mulop','Parser_MiniPascal.py',356),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',361),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',362),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',363),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',364),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','Parser_MiniPascal.py',365),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','Parser_MiniPascal.py',372),
  ('factor -> variable','factor',1,'p_factor_variable','Parser_MiniPascal.py',376),
  ('factor -> NUMBER','factor',1,'p_factor_number','Parser_MiniPascal.py',380),
  ('factor -> STRING_LITERAL','factor',1,'p_factor_string','Parser_MiniPascal.py',384),
  ('relop -> LESS','relop',1,'p_relop','Parser_MiniPascal.py',391),
  ('relop -> LESS_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',392),
  ('relop -> GREAT','relop',1,'p_relop','Parser_MiniPascal.py',393),
  ('relop -> GREAT_EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',394),
  ('relop -> EQUAL','relop',1,'p_relop','Parser_MiniPascal.py',395),
  ('relop -> DIFFERENT','relop',1,'p_relop','Parser_MiniPascal.py',396),
  ('empty -> <empty>','empty',0,'p_empty','Parser_MiniPascal.py',401),
  ('statement -> READLN','statement',1,'p_statement_readln','Parser_MiniPascal.py',405),
  ('statement -> READLN LPAREN variable RPAREN','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',409),
  ('statement -> READLN LBRACKET variable RBRACKET','statement',4,'p_statement_readln_parent','Parser_MiniPascal.py',410),
  ('statement -> WRITELN LPAREN expression_list RPAREN','statement',4,'p_statement_writeln','Parser_MiniPascal.py',414),
  ('statement -> WRITE LPAREN expression_list RPAREN','statement',4,'p_statement_write','Parser_MiniPascal.py',418),
  ('statement -> USES ID SEMICOLON','statement',3,'p_statement_uses','Parser_MiniPascal.py',423),
  ('constant_declaration -> CONST constant_list','constant_declaration',2,'p_constant_declaration','Parser_MiniPascal.py',428),
  ('constant_list -> constant','constant_list',1,'p_constant_list','Parser_MiniPascal.py',432),
  ('constant_list -> constant_list constant','constant_list',2,'p_constant_list','Parser_MiniPascal.py',433),
  ('constant -> ID EQUAL CHARACTER_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',440),
  ('constant -> ID EQUAL NUMBER SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',441),
  ('constant -> ID EQUAL STRING_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',442),
  ('constant -> ID EQUAL BOOLEAN_LITERAL SEMICOLON','constant',4,'p_constant','Parser_MiniPascal.py',443),
  ('expression -> expression AND expression','expression',3,'p_expression_logical','Parser_MiniPascal.py',448),
  ('expression -> expression OR expression','expression',3,'p_expression_logical','Parser_MiniPascal.py',449),
  ('expression -> NOT expression','expression',2,'p_expression_logical','Parser_MiniPascal.py',450),
]
